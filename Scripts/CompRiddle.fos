// FOS Server Sort 2

// Скрипт взлома компьютеров
// Генерится последовательность из 4 неповторяющихся цифр, игроку дается от 4 до 6 попыток угадать последовательность

///@ Property Critter PrivateServer ident CompRiddleMapId // Переменная ид карты на которой стоит сценери
///@ Property Critter PrivateServer uint CompRiddleHexX  // Переменная с координатой сценери по оси X
///@ Property Critter PrivateServer uint CompRiddleHexY  // Переменная с координатой сценери по оси Y

///@ Property Map PrivateServer uint=>uint8[] CompRiddleData

// Для взлома компьютера нужно правильно подобрать последовательность из 4 неповторяющихся цифр.\nСимвол "*" означает, что цифра присутствует в коде,
// но неверно указано ее положение.\nСимвол "-" означает, что цифра не используется в коде.\nДо блокировки осталось@lex num@ попыток.
#define STR_INFO        (400)
#define STR_BLOCKED     (401) // Активирована защита от взлома. Система заблокирована
#define STR_SOLVED      (402) // Вам удалось обойти систему защиты!
#define STR_HEADER      (403) // Система авторизации. Введите код доступа.
#define STR_ANSWER      (404) // Ответ системы: @lex code@.
#define STR_CAMERA      (405) // Вы подключились к спутнику связи Poseidon NET.
#define STR_INPUTTEXT   (406) // ????
#define _GetNumbers     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
#define _GetXP          #(player)(player.SkillScience * player.Level)
#define MAX_CODE_LENGTH (4)
#define MAX_SOLVE_TRIES (Game.Random(4, 6))
#define TIME_RESET \
    (60 * 60 * 24) // 24 часа. После этого компьютер можно снова попробовать взломать - генерится новый код или удаляется запись, если карта не существует.

uint MakeDataKey(uint16 hexX, uint16 hexY)
{
    return (hexX << 16) | hexY;
}

ComputerRiddleInfo GetRiddleInfo(Critter player)
{
    ident mapId = player.CompRiddleMapId;
    uint hexX = player.CompRiddleHexX;
    uint hexY = player.CompRiddleHexY;
    if (mapId == ZERO_IDENT || !valid(player.GetMap()) || mapId != player.GetMap().Id || hexY == 0 || hexY == 0 ||
        Game.GetDistance(player.HexX, player.HexY, hexX, hexY) > 3) {
        return null;
    }
    return GetRiddleInfo(mapId, hexX, hexY);
}

ComputerRiddleInfo GetRiddleInfo(ident mapId, uint16 hexX, uint16 hexY)
{
    uint key = MakeDataKey(hexX, hexY);
    uint8[] data = Game.GetMap(mapId).CompRiddleData.get(key, array<uint8>());
    if (data.length() > 0) {
        return ComputerRiddleInfo(mapId, hexX, hexY);
    }
    return null;
}

class ComputerRiddleInfo
{
    ident MapId;
    uint16 HexX;
    uint16 HexY;
    uint[] Code = {};
    uint8 TriesLeft;

    ComputerRiddleInfo(ident mapId, uint16 hx, uint16 hy)
    {
        MapId = mapId;
        HexX = hx;
        HexY = hy;
        Load();
    }

    ComputerRiddleInfo(Map map, StaticItem computer)
    {
        MapId = map.Id;
        HexX = computer.HexX;
        HexY = computer.HexY;
        Load();
    }

    string SCode()
    {
        string code = "";
        for (uint i = 0, l = Code.length(); i < l; i++) {
            code += Code[i];
        }
        return code;
    }

    // Сериализация
    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set(MapId);
        save.Set(HexX);
        save.Set(HexY);
        save.Set(Code);
        save.Set(TriesLeft);
        uint key = MakeDataKey(HexX, HexY);
        Map map = Game.GetMap(MapId);
        dict<uint, uint8[]> compRiddleData = map.CompRiddleData.clone();
        compRiddleData[key] = save.GetData();
        map.CompRiddleData = compRiddleData;
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        uint key = MakeDataKey(HexX, HexY);
        if (load.SetData(Game.GetMap(MapId).CompRiddleData.get(key, array<uint8>())) > 0) {
            load.Get(MapId);
            load.Get(HexX);
            load.Get(HexY);
            load.Get(Code);
            load.Get(TriesLeft);
        }
        else {
            GenerateCode();
            Save();
            any[] values = {MapId, HexX, HexY};
            Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_RESET), ResetRiddle, values);
        }
    }

    void Erase()
    {
        uint key = MakeDataKey(HexX, HexY);
        Map map = Game.GetMap(MapId);
        dict<uint, uint8[]> compRiddleData = map.CompRiddleData.clone();
        compRiddleData.remove(key);
        map.CompRiddleData = compRiddleData;
    }

    void GenerateCode() // Генерирует новый код и сбрасывает число оставшихся попыток
    {
        uint[] numbers = _GetNumbers;
        uint index = 0;
        Code.clear();
        while (Code.length() < MAX_CODE_LENGTH) {
            index = Game.Random(0, numbers.length() - 1);
            Code.insertLast(numbers[index]);
            numbers.removeAt(index);
        }
        TriesLeft = MAX_SOLVE_TRIES;
    }

    // Попытка угадать пароль
    // Возвращает true - если пароль угадан, false - если нет
    // Правильно угаданный символ отображается как есть
    // Неправильно угаданный - отображается минус
    // Позиция не угадана, угадана цифра - отображается звезда
    bool TrySolveRiddle(Critter player, string codePlayer, string& codeAnswer)
    {
        if (TriesLeft < 1) {
            player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_BLOCKED);
            return false;
        }
        string charPlayer = "";
        string charReal = "";
        string codeReal = SCode();
        bool charFound = false;
        codeAnswer = "";

        for (uint i = 0, l = codePlayer.length(); i < MAX_CODE_LENGTH && i < l; i++) {
            charFound = false;
            charPlayer = codePlayer[i];
            for (uint j = 0, len = codeReal.length(); j < MAX_CODE_LENGTH && j < len && !charFound; j++) {
                charReal = codeReal[j];
                if (charReal == charPlayer) {
                    charFound = true;
                    if (i == j) {
                        codeAnswer += Code[j];
                    }
                    else {
                        codeAnswer += "*";
                    }
                }
            }
            if (!charFound) {
                codeAnswer += "-";
            }
        }

        TriesLeft--;
        Save();

        if (codeReal == codeAnswer) {
            TriesLeft = 0;
            Save();
            return true;
        }
        return false;
    }
};

void ResetRiddle(any[] values)
{
    ComputerRiddleInfo riddle = GetRiddleInfo(values[0], values[1], values[2]);
    if (valid(riddle)) {
        if (valid(Game.GetMap(ident(values[0])))) {
            riddle.GenerateCode();
            riddle.Save();
            Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_RESET), ResetRiddle, values);
        }
        else {
            riddle.Erase();
        }
    }
}

bool s_Use(Critter player, StaticItem scenery, Item item, int skill)
{
    if (skill == int(CritterProperty::SkillScience) && !valid(item)) {
        player.Wait(1000);

        ComputerRiddleInfo info = ComputerRiddleInfo(player.GetMap(), scenery);
        if (!valid(info)) {
            return false;
        }

        if (info.TriesLeft == 0) {
            player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_BLOCKED);
            return true;
        }
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_INFO, "$num" + info.TriesLeft);

        player.CompRiddleMapId = player.GetMap().Id;
        player.CompRiddleHexX = scenery.HexX;
        player.CompRiddleHexY = scenery.HexY;
        player.OnPlayerSaidTextFromScenery.Unsubscribe(AnswerTrySolveRiddle);
        player.OnPlayerSaidTextFromScenery.Subscribe(AnswerTrySolveRiddle);
        player.CanSendSay = true;
        player.PlayerClientCall.ShowSayExtendedScreenFromScenery(STR_HEADER, STR_INPUTTEXT, scenery.ProtoId.uhash, scenery.HexX, scenery.HexY);
        /*
           //player.ShowScreen( ShowScreenModes::Say, 0, "answer_TrySolve" );
           player.SayMsg( Tla::SaySayTitle, TextPackName::Text, STR_HEADER );
           player.Say( Tla::SaySayText, "????" );
         */
        return true;
    }
    return false;
}

void AnswerTrySolveRiddle(Critter player, int sceneryPid, uint16 hexX, uint16 hexY, string text)
{
    player.OnPlayerSaidTextFromScenery.Unsubscribe(AnswerTrySolveRiddle);
    player.CanSendSay = false;
    ComputerRiddleInfo info = GetRiddleInfo(player);
    if (valid(info)) {
        string code = "";
        bool solved = info.TrySolveRiddle(player, text, code);
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_ANSWER, "$pcode" + text + "$code" + code);
        if (solved) {
            player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_SOLVED);
            player.Experience += _GetXP(player);
            player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_CAMERA);
            Game.DeferredCall(500, ShowCamera, player.Id);
        }
    }
}

void ShowCamera(any value)
{
    Critter cr = Game.GetCritter(value);
    if (valid(cr)) {
        Location[] locations = Game.GetLocations(cr.WorldX, cr.WorldY, 300);
        if (locations.length() > 0) {
            Location loc = locations[Game.Random(0, locations.length() - 1)];
            if (valid(loc)) {
                Map map = loc.GetMapByIndex(0);
                Game.Log("ViewMap");
                if (valid(map)) {
                    uint16 hx = 0, hy = 0;
                    if (Entrance::MapGetEntryCoords(map, 0, 0, hx, hy)) {
                        Game.Log("Entry founded");
                        cr.ViewMap(map, 50, hx, hy, 5);
                    }
                }
            }
        }
    }
}
