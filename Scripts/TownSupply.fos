// FOS Server Sort 2
// Town supply
// Author: cvet

///@ Property Critter PrivateServer ident TownSupplyVictimId
///@ Property Critter PrivateServer ident TownSupplyHostileId

#define ENTER_ENTRY         (0)
#define EXIT_ENTRY          (0)
#define ROLE_GUARD          (29)
#define PLANE_GOTO_EXIT     (29)
#define SUPPLY_GAME_MINUTES (Game.Random(5, 60))

void CallTownSupply(Critter victim, Critter hostile)
{
    if (IsValidForSupply(victim, hostile)) {
        any[] values = {victim.Id, hostile.Id, 0};
        Game.SavedDeferredCall(GAME_MINUTE_TO_TICK(SUPPLY_GAME_MINUTES), CallTownSupplyNext, values);
    }
}

void CallTownSupplyNext(any[] values)
{
    ident victimId = values[0];
    Critter hostile = Game.GetCritter(values[1]);

    values[2] = uint(values[2]) + 1;
    uint rate = values[2];

    if (valid(hostile) && hostile.MapId != ZERO_IDENT && not hostile.IsDead()) {
        uint count = hostile.Level / 10 + 1;
        if (count > 10) {
            count = 10;
        }

        CallSupply(victimId, hostile, count);
        return;
    }

    if (rate >= 10) {
        return;
    }

    Game.SavedDeferredCall(GAME_MINUTE_TO_TICK(SUPPLY_GAME_MINUTES), CallTownSupplyNext, values);
}

bool IsValidForSupply(Critter victim, Critter hostile)
{
    // Only for humanoids npc in cities
    if (hostile.IsControlledByPlayer && hostile.GetPlayer().GetAccess() < ACCESS_MODER && !victim.IsControlledByPlayer && !victim.IsNoSupply) {
        uint bt = victim.BodyType;
        if (bt >= BodyTypes::Men && bt <= BodyTypes::Ghoul) {
            Map map = hostile.GetMap();
            if (valid(map)) {
                hstring locPid = map.GetLocation().ProtoId;
                if (LOCATION_IS_CITY(locPid)) {
                    return true;
                }
            }
        }
    }
    return false;
}

void CallSupply(ident victimId, Critter target, int supplyCount)
{
    Map map = target.GetMap();
    if (map == null) {
        return;
    }

    uint16 hx = target.HexX, hy = target.HexY;
    if (!Entrance::GetNearEntry(map, ENTER_ENTRY, hx, hy)) {
        return;
    }

    int rnd = Game.Random(0, 9);

    hstring[] hunters = {Content::Critter::BountyHunter_1,
                         Content::Critter::BountyHunter_2,
                         Content::Critter::BountyHunter_3,
                         Content::Critter::BountyHunter_4,
                         Content::Critter::BountyHunter_5,
                         Content::Critter::BountyHunter_6,
                         Content::Critter::BountyHunter_7,
                         Content::Critter::BountyHunter_8,
                         Content::Critter::BountyHunter_9,
                         Content::Critter::BountyHunter_10};

    dict<CritterProperty, any> props = {{CritterProperty::BagId, Bags::AllBountyHunters1 + rnd},
                                        {CritterProperty::TeamId, Teams::Guard},
                                        {CritterProperty::KillExperience, 0},
                                        {CritterProperty::PerkTerminator, 1},
                                        {CritterProperty::IsNoSteal, 1},
                                        {CritterProperty::IsNoLoot, 1},
                                        {CritterProperty::IsNoSupply, 1},
                                        {CritterProperty::TownSupplyVictimId, victimId},
                                        {CritterProperty::TownSupplyHostileId, target.Id}};

    Critter bountyHunter = map.AddNpc(hunters[rnd], hx, hy, Game.Random(0, 5), props);
    if (not valid(bountyHunter)) {
        return;
    }

    bountyHunter.SetupScript(_GuardInit);

    NpcPlanes::AddAttackPlane(bountyHunter, 0, target, true);

    if (supplyCount > 1) {
        CallSupply(victimId, target, supplyCount - 1);
    }
}

void _GuardInit(Critter bountyHunter, bool firstTime)
{
    bountyHunter.NpcRole = ROLE_GUARD;
    bountyHunter.OnIdle.Subscribe(_GuardIdle);
    bountyHunter.OnDead.Subscribe(_GuardDead);
    bountyHunter.OnSomeCritterDead.Subscribe(_GuardSmthDead);
    // bountyHunter.OnSomeCritterAttack.Subscribe(_GuardSmthAttack);
    bountyHunter.OnNpcPlaneEnd.Subscribe(_GuardPlaneEnd);
    bountyHunter.BonusLook = 100;
    bountyHunter.PerkSniper = 1;
    bountyHunter.PerkSlayer = 1;
    bountyHunter.PerkTerminator = 1;
    bountyHunter.PerkBetterCriticals = 1;
}

void _GuardIdle(Critter bountyHunter)
{
    uint16 hx = bountyHunter.HexX, hy = bountyHunter.HexY;
    if (not Entrance::GetNearEntry(bountyHunter.GetMap(), EXIT_ENTRY, hx, hy)) {
        Game.DestroyCritter(bountyHunter);
    }
    else {
        bountyHunter.CurrentAp = bountyHunter.ActionPoints * AP_DIVIDER;
        NpcPlanes::NpcPlane plane = NpcPlanes::CreatePlane();
        plane.Type = AI_PLANE_WALK;
        plane.Priority = AI_PLANE_WALK_PRIORITY;
        plane.Identifier = PLANE_GOTO_EXIT;
        plane.Walk_HexX = hx;
        plane.Walk_HexY = hy;
        plane.Walk_Dir = 6;
        plane.Run = true;
        plane.Walk_Cut = 2;
        if (not NpcPlanes::AddPlane(bountyHunter, plane)) {
            Game.DestroyCritter(bountyHunter);
        }
    }
}

void _GuardDead(Critter bountyHunter, Critter killer)
{
    /*if (valid(killer) && IsValidForSupply(bountyHunter,killer)) {
        CallSupply(killer, 1);
    }*/
    Game.DestroyCritter(bountyHunter);
}

void _GuardSmthDead(Critter bountyHunter, Critter fromCrit, Critter killer)
{
    // Add to stack player who kills another guards
    if (valid(killer) && killer.IsControlledByPlayer && fromCrit.NpcRole == ROLE_GUARD) {
        EnemyStack::AddEnemyToStack(bountyHunter, killer.Id);
        return;
    }

    // Erase id from victim enemy stack
    ident victimId = bountyHunter.TownSupplyVictimId;
    ident hostileId = bountyHunter.TownSupplyHostileId;
    if (victimId != ZERO_IDENT && hostileId == fromCrit.Id) {
        Critter victim = Game.GetCritter(victimId);
        if (valid(victim)) {
            EnemyStack::EraseEnemyFromStack(victim, hostileId);
        }
    }
}

void _GuardSmthAttack(Critter bountyHunter, Critter fromCrit, Critter target)
{
    // bountyHunter.AddEnemyToStack
}

bool _GuardPlaneEnd(Critter bountyHunter, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(bountyHunter, planeId);

    if (plane.Identifier == PLANE_GOTO_EXIT) {
        Game.DestroyCritter(bountyHunter);
    }

    return true;
}
