// FOS Server Sort 2

const uint8 DialogNone = 0;
// Номера веток и номера дополнительных строк стандартные для любых НПЦ, должны присутствовать в самом диалоге.
const uint8 DialogCheckPlayerExists = 200;
const uint8 DialogFoundPlayerOnline = 202;

#define MAP_IS_REPLICATION #(mapPid)(Replication::ReplicatorsMapPids.find(mapPid) != -1)

void ModuleInit()
{
    Game.OnPlayerSaidText.Subscribe(OnPlayerSaidText);
}

void OnPlayerSaidText(Critter critter, string text, bool fromDialog, ident talkerId, bool isNpc)
{
    if (critter.IsControlledByPlayer && isNpc && fromDialog && !text.isEmpty() && text.length() > 1) {
        auto npc = Game.GetCritter(talkerId);
        if (npc is null) {
            return;
        }
        uint8 curDialog = Dialog::GetCurrentDialogNumber(critter, npc);
        switch (curDialog) {
        case DialogNone:
            break;
        case DialogCheckPlayerExists:
            TryFoundPlayer(critter, npc, text);
            break;
        case DialogFoundPlayerOnline:
            FoundOnline(critter, npc, text);
            break;
        default:
            Game.Log("Wrond dialog number: " + curDialog + "; npc: " + npc.ProtoId);
            break;
        }
    }
}

void dlg_CheckPlayerExists(Critter player, Critter barman, string& lex)
{
    if (!valid(barman)) {
        player.CanSendSay = false;
        return;
    }
    if (IS_DIALOG_END(lex)) {
        Dialog::SetCurrentDialogNumber(player, barman, DialogNone);
        player.CanSendSay = false;
        return;
    }

    player.CanSendSay = true;
    Dialog::SetCurrentDialogNumber(player, barman, DialogCheckPlayerExists);
}

void dlg_FindPlayerOnline(Critter player, Critter barman, string& lex)
{
    if (!valid(barman)) {
        player.CanSendSay = false;
        return;
    }
    if (IS_DIALOG_END(lex)) {
        Dialog::SetCurrentDialogNumber(player, barman, DialogNone);
        player.CanSendSay = false;
        return;
    }

    player.CanSendSay = true;
    Dialog::SetCurrentDialogNumber(player, barman, DialogFoundPlayerOnline);
}

void TryFoundPlayer(Critter player, Critter barman, string playerName)
{
    if (playerName.length() <= 1) {
        return;
    }
    hstring BankerDialog = barman.DialogId;
    uint DlgStr = 200;

    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;

    // Пол бармена.
    if (barman.Gender == GenderType::Female) {
        lexems += "$BarmanGen @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 10) + "@";
    }
    else {
        lexems += "$BarmanGen @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 9) + "@";
    }

    // Игрок не найден.
    if (Game.GetPlayer(playerName) == null) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 0), lexems);
        return;
    }

    Critter cr = Game.GetPlayer(playerName).GetControlledCritter();

    if (cr != null) {
        // Пол запрашиваемого криттера.
        if (cr.Gender == GenderType::Female) {
            lexems += "$Gender @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 8) + "@";
        }
        else {
            lexems += "$Gender @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 7) + "@";
        }
    }
    player.CanSendSay = false;
    player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 11), lexems);
}

void FoundOnline(Critter player, Critter barman, string playerName)
{
    if (!valid(barman)) {
        return;
    }
    if (playerName.length() <= 1) {
        return;
    }
    hstring BankerDialog = barman.DialogId;
    uint DlgStr = 200;

    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;

    // Пол бармена.
    if (barman.Gender == GenderType::Female) {
        lexems += "$BarmanGen @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 10) + "@";
    }
    else {
        lexems += "$BarmanGen @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 9) + "@";
    }
    // Игрок не найден.
    if (Game.GetPlayer(playerName) == null) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 0), lexems);
        return;
    }

    Critter cr = Game.GetPlayer(playerName).GetControlledCritter();
    // Игрок оффлайн.
    if (cr == null) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 2), lexems);
        return;
    }

    // Пол запрашиваемого криттера.
    if (cr.Gender == GenderType::Female) {
        lexems += "$Gender @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 8) + "@";
    }
    else {
        lexems += "$Gender @text Dialogs " + DLGSTR(BankerDialog, DlgStr + 7) + "@";
    }

    // Игрок спрашивает о самом себе.
    if (player.Id == cr.Id) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 1));
        return;
    }

    // Криттер на глобале.
    Map map = cr.GetMap();
    if (!valid(map)) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 2), lexems);
        return;
    }

    // Локация, где находится криттер. Диапазоны PID: до 150 и 210-235. Города и репликации.
    if (LOCATION_IS_CITY(cr.GetMap().GetLocation().ProtoId) || MAP_IS_REPLICATION(cr.GetMap().ProtoId)) {
        lexems += "$Place @text Locations " + STR_LOC_NAME(cr.GetMap().GetLocation().ProtoId) + "@";
        // Криттер находится в той же локации, что и игрок.
        if (barman.GetMap().GetLocation().Id == cr.GetMap().GetLocation().Id) {
            player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 3), lexems);
            return;
        }

        // Криттер найден, лексемы сформированы - даем информацию.
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 4 + Game.Random(0, 2)), lexems);
    }
    else {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 2), lexems);
    }
    player.CanSendSay = false;
    Dialog::SetCurrentDialogNumber(player, barman, DialogNone);
}
