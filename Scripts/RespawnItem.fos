// FOS Server Sort 2
// Самовосстанавлиающийся итем
// аргументы:
// RespTime время респауна в игровых минутах (RespawnItemRespTime)
// Mode - режим респауна. (RespawnItemMode)
//        0 - в том же месте,
//        1 - в инвентаре НПЦ на той же карте,
//		  2 - в контейнере на той же карте
//		  3+ - если режим>2, то итем располагается гденибудь неподалеку от гекса с таким номером
// респауну подвержены только итемы типов: Armor, Drug, Weapon, Misc, Key
// Eсть дополнительная возможность указать номер переменной (поле RespawnItemVarNum), чье значение будет проверяться при попытке поднять итем
// если значение переменной = 1, предмет будет поднят и после этого переменная будет установлена в 0

///@ Property Item PrivateServer uint8 RespawnItemMode
///@ Property Item PrivateServer uint  RespawnItemRespTime
///@ Property Item PrivateServer uint  RespawnItemVarNum

#define STR_CANT_PICKUP (3600) // номер сообщения "вы не можете поднять еще один такой предмет"
#define MODE_XY         (0)    // режим " в тех же координатах "
#define MODE_NPC        (1)    // режим " в инвентаре нпц "
#define MODE_CONTAINER  (2)    // режим " в контейнере "

void SetItemRespawn(Item item, uint mode, uint respTime)
{
    item.RespawnItemMode = mode;
    item.RespawnItemRespTime = respTime;
    item.OnCritterUseSkill.Subscribe(e_ItemOnSkill);
    item.SetupScript(_RespItemInit);
}

void SetItemNoPick(Item item, uint varNum)
{
    item.RespawnItemVarNum = varNum;
    item.OnCritterUseSkill.Subscribe(e_ItemOnSkill);
    item.SetupScript(_RespItemInit);
}

bool CheckItemValidToRespawn(Item item)
{
    if (!valid(item)) {
        return false;
    }

    uint8 protoType = item.Type;
    return protoType == ItemType::Armor || protoType == ItemType::Drug || protoType == ItemType::Weapon || protoType == ItemType::Misc ||
           protoType == ItemType::Key;
}

void _NonRespItemInit(Item item, bool firstTime)
{
    if (firstTime) {
        item.RespawnItemRespTime = item.Val4;
        item.RespawnItemMode = item.Val5;
    }
    item.OnCritterUseSkill.Subscribe(e_ItemOnSkill);
}
bool _NonRespOnSkill(Item item, Critter cr, int skill)
{
    // проверка, может ли игрок поднять предмет
    if (item.RespawnItemVarNum != 0) {
        if (cr.GetAsInt(CritterProperty(item.RespawnItemVarNum)) == 0) {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_PICKUP);
            return true;
        }
        else {
            cr.SetAsInt(CritterProperty(item.RespawnItemVarNum), 0);
        }
    }
    return false;
}
bool e_ItemOnSkill(Item item, Critter cr, CritterProperty skill)
{
    // Game.Log("sk"+skill);
    if (skill == SKILL_PICK_ON_GROUND) {
        // проверка, может ли игрок поднять предмет
        if (item.RespawnItemVarNum != 0) {
            if (cr.GetAsInt(CritterProperty(item.RespawnItemVarNum)) == 0) {
                cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_PICKUP);
                return true;
            }
            else {
                cr.SetAsInt(CritterProperty(item.RespawnItemVarNum), 0);
            }
        }

        if (item.RespawnItemRespTime > 0 && valid(cr.GetMap())) {
            uint[] values = {cr.GetMap().Id,       // карта респауна
                             item.ProtoId.hash,    // код Пида итема
                             item.Count,           // количество
                             item.InitScript.hash, // скрипт
                             item.HexX,            // координаты
                             item.HexY,            // координаты
                             item.RespawnItemVarNum, // номер переменной в которой хранится признак может ли игрок поднять этот итем
                             item.RespawnItemMode,     // режим респауна
                             item.RespawnItemRespTime, // время следующего респауна
                             item.Info};

            Game.SavedDeferredCall(GAME_SECOND_TO_TICK(item.RespawnItemRespTime), ProcessRespawnItem, values);
            item.RespawnItemRespTime = 0;
        }

        // item.SetEvent(ITEM_EVENT_SKILL, "");
        item.SetupScript(_NonRespItemInit);
    }
    return false;
}

void RespawnItem(uint mapId, hstring itemPid, uint itemCount, hstring initScript, uint16 hX, uint16 hY, uint varNum, uint modeResp, uint timeResp,
                 uint itemInfo)
{
    uint[] values = {mapId, itemPid.uhash, itemCount, initScript.uhash, hX, hY, varNum, modeResp, timeResp, itemInfo};
    ProcessRespawnItem(values);
}

void ProcessRespawnItem(uint[] values)
{
    if (values.length() == 10) {
        uint mapId = values[0];
        hstring proto = hstring_fromHash(values[1]);
        uint count = values[2];
        hstring script = hstring_fromHash(values[3]);
        uint16 hx = values[4];
        uint16 hy = values[5];
        uint varNum = values[6];
        uint mode = values[7];
        uint respTime = values[8];
        uint info = values[9];
        Item item;

        Map map = Game.GetMap(mapId);
        if (!valid(map)) {
            return;
        }

        uint tryNum = 0;

        while (tryNum < 10) {
            switch (mode) {
            case MODE_XY:
                item = RespawnItemCoords(map, hx, hy, proto, count);
                break;
            case MODE_NPC:
                item = RespawnItemAnyCritter(map, proto, count);
                break;
            case MODE_CONTAINER:
                item = RespawnItemContainer(map, proto, count);
                break;
            default:
                item = RespawnItemNearEntry(map, mode, proto, count);
                break;
            }
            tryNum++;
            if (valid(item)) {
                break;
            }
        }
        if (valid(item)) {
            if (script != hstring()) {
                item.SetupScriptEx(script);
            }
            item.Info = info;
            SetItemNoPick(item, varNum);
            SetItemRespawn(item, mode, respTime);
        }
    }
}

// isUniq - признак, что итем только один может быть на данном гексе (уникальный для данной точки системы координат)
Item RespawnItemNearEntry(Map map, uint8 entry, hstring protoId, uint count)
{
    uint eCount = Entrance::MapCountEntry(map, entry);
    if (eCount == 0) {
        return null;
    }

    uint numTry = 0;
    uint16 hx = 0;
    uint16 hy = 0;
    bool foundItem = false;
    while (numTry < 10) {
        foundItem = false;
        if (Entrance::MapGetEntryCoords(map, entry, Game.Random(0, eCount - 1), hx, hy)) {
            Item[] items = map.GetItems(hx, hy);
            if (items.isEmpty()) {
                // на гексе нет ни одного итема
                return RespawnItemCoords(map, hx, hy, protoId, count);
            }
            for (uint i = 0; i < items.length(); i++) {
                if (items[i].ProtoId == protoId) {
                    foundItem = true;
                    break;
                }
            }
            if (!foundItem) {
                // не найден итем с данным кодом - можно добавлять
                return RespawnItemCoords(map, hx, hy, protoId, count);
            }
        }
        numTry++;
    }

    return null;
}

Item RespawnItemContainer(Map map, hstring protoId, uint count)
{
    Item[] containers = map.GetItems(ItemProperty::Type, ItemType::Container);
    if (containers.isEmpty()) {
        return null;
    }

    Item container = containers[Game.Random(0, containers.length() - 1)];
    return container.AddItem(protoId, count, 0);
}

Item RespawnItemAnyCritter(Map map, hstring protoId, uint count)
{
    Critter[] critters = map.GetCritters(CritterFindType::Npc);
    if (!critters.isEmpty()) {
        return critters[Game.Random(0, critters.length() - 1)].AddItem(protoId, count);
    }

    return null;
}

Item RespawnItemCoords(Map map, uint16 hexX, uint16 hexY, hstring protoId, uint count)
{
    if (hexX == 0 || hexY == 0) {
        return null;
    }

    return map.AddItem(hexX, hexY, protoId, count);
}

void _RespItemInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(e_ItemOnSkill);
}

void _RespawnItemInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(e_ItemOnSkill);
}
