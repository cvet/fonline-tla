// FOS Server Sort 3
// Author: rifleman17
/* Специальный энкаунтер "Телепортатор".
   Положить в шкаф некоторое количество предметов и обменять их на что-то случайное такого же веса.
   Если в шкафу - игрок, он обменяется координатами со случайным игроком в одном из городов.
   Если в шкафу - нпц, нпц будет удален, вместо него появится агрессивный робот, Мистер Handy

   42/63 - координаты телепорта
 */

///@ Property Critter PrivateServer ident SETeleportEatId

#define LIMIT_WEIGHT (10000) // Ограничение на вес при передаче предметов
#define MAX_WEIGHT   (50000) // Максимальный вес телепортируемых предметов

#define STR_FIRST    (2500) // Случайный гав-гав собаки
#define STR_LAST     (2507)

uint CountWeightAndDelete(Map map, uint16 x, uint16 y) // Подсчет веса итемов, лежащих на некоей карте в указанных координатах
{
    if (!valid(map)) {
        return 0;
    }

    Item[] items = map.GetItems(x, y);

    uint weight = 0;
    for (uint i = 0; i < items.length(); i++) {
        weight += items[i].Weight;
    }

    Game.DestroyItems(items); // удаление всех итемов

    return CLAMP(weight, 0, MAX_WEIGHT);
}

void AddRandomItems(Map map, uint16 x, uint16 y, uint maxWeight) // добавление случайного набора итемов на карту в указанные координаты
{
    if (!valid(map)) {
        return;
    }

    hstring[] pids = {};
    // Сбор всех массивов в один
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_WeaponSmallGuns);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_WeaponMelee);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_WeaponEnergo);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_WeaponBigGuns);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_ArmorLight);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_ArmorMedium);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_ArmorHeavy);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_Ammo);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_Ammo); // удвоенный шанс
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_AllDrugs);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscExplosions);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscPartsBasic);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscPartsBasic);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscPartsBasic); // 4х шанс
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscAllTools);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscOther);
    UtilsForArray::MergeArrays(pids, PidsGroups::Pids_MiscOther); // удвоенный шанс
    uint curWeight = 0;
    int16 triesNum = 150; // максимум 150 попыток
    uint idx = 0;
    hstring pid;
    ProtoItem proto = null;
    uint len = pids.length();
    uint weight = 0;
    uint itemCount = 0;
    while (triesNum > 0 && curWeight < maxWeight) {
        triesNum--;
        itemCount = 1;
        len = pids.length(); // Длина массива могла измениться
        idx = Game.Random(0, len - 1);
        pid = pids[idx];
        if (UtilsForArray::Present(
                pid,
                PidsGroups::Pids_ArmorHeavy)) // Тяжелая броня только в единственном экземпляре, не зависимо от прототипа и факта, влезет или нет
        {
            for (uint i = 0, l = PidsGroups::Pids_ArmorHeavy.length(); i < l; i++) {
                pids.removeAt(UtilsForArray::FindInArray(pids, PidsGroups::Pids_ArmorHeavy[i]));
            }
        }
        proto = Game.GetProtoItem(pid);
        weight = CLAMP(proto.Weight, 200, proto.Weight); // Если предмет ничего не весит, считаем, что он весит 200 грамм
        if (UtilsForArray::Present(pid, PidsGroups::Pids_Ammo)) {
            itemCount = Game.Random(1, 120); // Патроны не должны быть в количестве = 1
            weight *= itemCount;
        }
        if (curWeight + weight <= maxWeight) // Подходит по весу
        {
            pids.removeAt(UtilsForArray::FindInArray(pids, pid)); // Предметы только по одному разу попадаются
            curWeight += weight;
            map.AddItem(x, y, pid, itemCount);
        }
    }
}

Critter GetCritterInPlace(Critter player, int x, int y) // Поиск криттера на гексе карты
{
    Map map = player.GetMap();
    if (!valid(map)) {
        return null;
    }
    return map.GetCritter(x, y);
}

Critter GetRandomPlayer() // Случайный игрок на произвольной карте с pid от Content::Location::den до Content::Location::replication_hell
{
    hstring[] locPids = {
        Content::Location::den,           Content::Location::klamath,       Content::Location::modoc,         Content::Location::vault_city,
        Content::Location::gecko,         Content::Location::broken_hills,  Content::Location::new_reno,      Content::Location::sierra_army_depot,
        Content::Location::vault_15,      Content::Location::ncr,           Content::Location::cathedral,     Content::Location::mariposa,
        Content::Location::redding,       Content::Location::navarro,       Content::Location::arroyo,        Content::Location::primal_tribe,
        Content::Location::vault_13,      Content::Location::barter_ground, Content::Location::raiders,       Content::Location::replication_1,
        Content::Location::replication_2, Content::Location::replication_3, Content::Location::replication_4, Content::Location::replication_hell};

    int tries = 20;
    Map[] maps = {};
    Location loc;
    Critter[] players = {};
    Critter player;
    while (tries > 0) {
        tries--; // Счетчик для сокращения числа циклов

        loc = Game.GetLocation(locPids[Game.Random(0, locPids.length() - 1)]);
        if (!valid(loc)) {
            continue;
        }

        maps.clear();
        maps = loc.GetMaps();
        players.clear();
        for (uint i = 0; i < maps.length(); i++) {
            players.insertLast(maps[i].GetCritters(CritterFindType::AlivePlayers));
        }

        if (players.length() > 0) {
            return players[Game.Random(0, players.length() - 1)];
        }
    }
    return null;
}

bool d_CheckIsPlayerInPlace(Critter player, Critter npc, int x, int y) // На карте с игроком в указанных координатах есть другой игрок
{
    Critter cr = GetCritterInPlace(player, x, y);
    if (!valid(cr)) {
        return false;
    }
    return cr.IsControlledByPlayer;
}

bool d_CheckIsNpcInPlace(Critter player, Critter npc, int x, int y) // В указанном месте есть НПЦ
{
    Critter cr = GetCritterInPlace(player, x, y);
    if (!valid(cr)) {
        return false;
    }
    return !cr.IsControlledByPlayer;
}

bool d_CheckIsNotAnyCritterInPlace(Critter player, Critter npc, int x, int y) // В указанном месте нет никого
{
    if (!valid(player.GetMap())) {
        return false;
    }
    return (!d_CheckIsNpcInPlace(player, npc, x, y) && !d_CheckIsPlayerInPlace(player, npc, x, y));
}

void r_ChangeItems(Critter cr, Critter npc, int hexX, int hexY, int canOverweight) // Замена итемов на некоем гексе карты на случайные итемы такого же веса
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    uint weight = CountWeightAndDelete(map, hexX, hexY);
    if (canOverweight < 1) {
        weight = CLAMP(weight, 0, LIMIT_WEIGHT);
    }

    Effects::QuakeScreen(map); // Спецэффекты
    AddRandomItems(map, hexX, hexY, weight);
}

// Обмен координатами между игроком в указанных координатах и случайным другим игроком. Либо удаление нпц и добавление агрессивного боевого робота, если в
// координатах нпц. Внимание - нет проверки, что нпц=мерк. Могут пропадать в неизвестном направлении.
void r_SwapCritters(Critter player, Critter npc, int hexX, int hexY)
{
    if (d_CheckIsNotAnyCritterInPlace(player, npc, hexX, hexY)) {
        return;
    }
    Critter cr = GetCritterInPlace(player, hexX, hexY);
    if (!valid(cr)) {
        return;
    }
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }
    if (!cr.IsControlledByPlayer) {
        Game.DestroyCritter(cr);
        Critter enemy = map.AddNpc(Content::Critter::MrHandy, hexX, hexY, 1);
        if (valid(enemy)) {
            Critter[] players = map.GetCritters(CritterFindType::AlivePlayers);
            for (uint i = 0; i < players.length(); i++) {
                EnemyStack::AddEnemyToStack(enemy, players[i].Id);
            }
        }
    }
    else {
        Critter newPlayer = GetRandomPlayer();
        if (!valid(newPlayer)) {
            return;
        }
        Map map2 = newPlayer.GetMap();
        if (!valid(map2)) {
            return;
        }
        uint16 hexX2 = newPlayer.HexX;
        uint16 hexY2 = newPlayer.HexY;
        newPlayer.TransitToGlobal();
        Obsolete::CritterTransitToMapCoords(cr, map2.Id, hexX2, hexY2, cr.Dir);
        Obsolete::CritterTransitToMapCoords(newPlayer, map.Id, hexX, hexY, newPlayer.Dir);
    }
}

// Скрипт собаки, которая будет подбирать съедобные итемы (полностью скопировано из den_poorman.fos)
// Собака нужна для того, чтобы ее можно было провести в телепортатор

// Cъедобные для собаки итемы
const hstring[] EatPid = {Content::Item::iguana_on_a_stick,
                          Content::Item::meat_on_a_stick,
                          Content::Item::box_of_noodles,
                          Content::Item::frozen_dinner,
                          Content::Item::meat_jerky,
                          Content::Item::cheezy_poofs,
                          Content::Item::cookie,
                          Content::Item::smitty_meal,
                          Content::Item::meat};

void _DogInit(Critter dog, bool firstTime)
{
    dog.IsNoHome = true;
    dog.OnItemOnMapAppeared.Subscribe(_DogShowItemOnMap);
    dog.OnItemOnMapDisappeared.Subscribe(_DogHideItemOnMap);
    dog.SETeleportEatId = ZERO_IDENT; // Тут будет хранится Id итема, который мы хотим съесть.
}

void _DogShowItemOnMap(Critter poorman, Item item, Critter dropper)
{
    // Можем ли мы сейчас подойти.
    if (poorman.SETeleportEatId != ZERO_IDENT) {
        return;
    }
    if (not NpcPlanes::IsNoPlanes(poorman)) {
        return;
    }

    // Смотрим, съедобен ли итем.
    for (uint i = 0; i < EatPid.length(); i++) {
        if (item.ProtoId != EatPid[i]) {
            continue;
        }

        poorman.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Text, Game.Random(STR_FIRST, STR_LAST));
        NpcPlanes::AddPickPlane(poorman, 0, item, ZERO_IDENT, true);
        poorman.SETeleportEatId = item.Id;
    }
}

void _DogHideItemOnMap(Critter poorman, Item item, Critter picker)
{
    // Проверим, может кто-то поднял нашу еду.
    if (poorman.SETeleportEatId != item.Id) {
        return;
    }

    poorman.SETeleportEatId = ZERO_IDENT;

    if (not valid(picker)) {
        return;
    }

    if (picker.Id != poorman.Id) {
        _NpcEraseAllPlanesPick(poorman);
        poorman.Wait(3000);
    }
    // Это мы сами подняли, едим.
    else {
        poorman.DestroyItem(item.ProtoId, item.Count);
        poorman.Say(SAY_NORM_ON_HEAD, "Гав!");
        poorman.Wait(3000);
    }
}
