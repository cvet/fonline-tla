// FOS Server

///@ Property Critter PrivateServer uint8 NcrAlexHoloFindStatus Max = 2

#define HOLO_MSG_ID_MOTOR_Q (52)                      // номер текста голодиска
#define ENC_MAP_PID         (Content::Map::e_desert7) // PID нужной карты

/*
   {2900}{}{Кажется, это то самое место, о котором говорится в голодиске. Осталось найти ящик.}
   {2901}{}{Это место не похоже на то, что указано в голодиске.}
 */
#define MSG_NUM_WRONG_LOC (2900)
#define MSG_NUM_RIGHT_LOC (2901)

void _HoloInit(Item holo, bool firstTime)
{
    // запись нужной информации
    holo.HolodiskNum = HOLO_MSG_ID_MOTOR_Q;

    // если подписываться на событие только при firsttime = true, при перезапуске сервера подписка пропадает
    holo.OnCritterUseOn.Subscribe(_eHoloUse);
}

// функция-результат для диалога с алексом
void r_GiveHoloToPlayer(Critter player, Critter npc)
{
    // даем игроку голодиск
    Item holo = player.AddItem(Content::Item::holodisk, 1);
    // установка скрипта голодиску
    holo.SetupScript(_HoloInit);
}

// обработчик использования голодиска
// если игрок использует голодиск в энке нужного прототипа, получит экспу и в ящик положим лут
bool _eHoloUse(Item holo, Critter crit, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (holo.ProtoId != Content::Item::holodisk) {
        return false;
    }

    if (holo.HolodiskNum != HOLO_MSG_ID_MOTOR_Q) {
        // не тот ид, значит диск перезаписали, нужно отписываться от события
        holo.OnCritterUseOn.Unsubscribe(_eHoloUse);
        return false;
    }

    if (!crit.IsControlledByPlayer) {
        return false;
    }

    Map map = crit.GetMap();
    if (valid(map) && map.ProtoId == ENC_MAP_PID) {
        // находимся в карте нужной локи
        // проверяем, что квест нужного статуса
        // если статус не правильный, либо игрок брал квест, либо уже забрал лут из ящика
        if (crit.NcrAlexHoloFindStatus != 1) {
            return false;
        }

        // меняем статус переменной
        crit.NcrAlexHoloFindStatus = 2;

        // по известным координатам ищем деревянную коробку
        Item container = crit.GetMap().GetItem(59, 64, Content::Item::container_wood_crate);
        // контейнер найден
        if (valid(container)) {
            // кладем лут в контейнер
            // 1..3 психо
            container.AddItem(Content::Item::psycho, Game.Random(1, 3), 0);
            // 900..1700 монет
            container.AddItem(Content::Item::bottle_caps, Game.Random(1, 7) * 100 + 800, 0);
            // сообщаем игроку, что место верное
            // crit.Say(SAY_NETMSG,"Кажется, это то самое место, о котором говорится в голодиске. Осталось найти ящик.");
            crit.SayMsg(SAY_NETMSG, TextPackName::Text, MSG_NUM_RIGHT_LOC);
            // выдаем опыт
            //			crit.AddExperience(450); устарело
            crit.Experience += 450;
            // отписываемся от события
            holo.OnCritterUseOn.Unsubscribe(_eHoloUse);
            return true;
        }
    }
    else {
        // не та локация
        crit.SayMsg(SAY_NETMSG, TextPackName::Text, MSG_NUM_WRONG_LOC);
        // crit.Say(SAY_NETMSG,"Это место не похоже на то, что указано в голодиске.");
    }

    return false;
}
