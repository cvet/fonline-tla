// FOS Server Client
// Author: cvet

///@ Event Common Game OnCritterDropItem(Critter critter, Item item)
///@ Event Server Item OnCritterDrop(Critter critter)
///@ Event Server Critter OnDropItem(Item item)
///@ Event Server Critter OnSomeCritterDropItem(Critter fromCr, Item item)
///@ Event Server Critter OnSomeCritterMoveItem(Critter fromCr, Item item, uint8 itemMode)

void ModuleInit()
{
    Game.OnItemCheckMove.Subscribe(item_check_move);
    Game.OnItemCheckMoveEx.Subscribe(item_check_move);
    Game.OnCritterCheckMoveItem.Subscribe(critter_check_move_item);
    Game.OnCritterCheckMoveItemEx.Subscribe(critter_check_move_item);
#ifdef __SERVER
    Game.OnCritterMoveItem.Subscribe(critter_move_item);
    Game.OnCritterDropItem.Subscribe(critter_drop_item);
#endif
}

bool item_check_move(Item cr, uint count, Entity from, Entity to)
{
    return true;
}

#ifdef __SERVER
bool critter_drop_item(Critter cr, Item item)
{
    item.OnCritterDrop.Fire(cr);
    cr.OnDropItem.Fire(item);

    Critter[] other = cr.GetCritters(true, CritterFindType::Alive);
    for (uint i = 0; i < other.length(); i++) {
        other[i].OnSomeCritterDropItem.Fire(cr, item);
    }

    return true;
}
#endif

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.
bool critter_check_move_item(Critter cr, Item item, uint8 toSlot)
{
    uint8 fromSlot = item.CritterSlot;

    // Drop
    if (toSlot == CritterItemSlot::Outside) {
        return true;
    }

    // If busy, then allow only hands item swapping
    // bool handsSwap = ( ( fromSlot == CritterItemSlot::Main && toSlot == CritterItemSlot::Secondary ) || ( fromSlot == CritterItemSlot::Secondary && toSlot == CritterItemSlot::Main ) );
    // if( valid( itemSwap )  !handsSwap )
    //    return false;

    // Weapon animation
    if (toSlot == CritterItemSlot::Main) {
        if (item.Type == ItemType::Weapon && !CritterAnims::IsCritterStateAnim(cr, uint(item.Weapon_StateAnim))) {
            Game.Log("Can not use weapon: Critter " + cr.ModelName + "; anim: " + item.Weapon_StateAnim);
            return false;
        }
    }

    // Armor animation
    if (toSlot == CritterItemSlot::Armor) {
        if (item.Type != ItemType::Armor) {
            return false;
        }
        if (item.CritterSlot != CritterItemSlot::Inventory) {
            return false;
        }
        if (cr.IsNoArmor) {
            return false;
        }
    }

    // Custom slot checks
    if (toSlot > CritterItemSlot::Armor) {
        if (toSlot != item.CritterSlot) {
            return false;
        }
    }

    // Allow moving
    return true;
}

#ifdef __SERVER
// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter item moved.
void critter_move_item(Critter critter, Item item, uint8 fromSlot)
{
    Critter cr = Game.GetCritter(critter.Id);
    uint8 toSlot = item.CritterSlot;

    // Armor changing
    if (item.Type == ItemType::Armor && (fromSlot == CritterItemSlot::Armor || toSlot == CritterItemSlot::Armor)) {
        // Default dude
        bool isMale = (cr.Gender == GenderType::Male);
        hstring crModel = cr.ModelNameBase;
        if (crModel == EMPTY_HSTRING) {
            crModel = (isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F);
        }
        if (toSlot == CritterItemSlot::Armor) {
            crModel = (isMale ? item.Armor_CrTypeMale : item.Armor_CrTypeFemale);
        }

        // Long hair dude redirects
        if (cr.ModelNameBase == CRTYPE_LHD_JUMPSUIT && isMale) {
            crModel = CRTYPE_LHD_JUMPSUIT;
            if (toSlot == CritterItemSlot::Armor) {
                crModel = item.Armor_CrTypeMale;
                if (crModel == CRTYPE_DW_LEATHER_ARMOR_M) {
                    crModel = CRTYPE_LHD_LEATHER_ARMOR;
                }
                else if (crModel == CRTYPE_DW_LEATHER_JACKET_M) {
                    crModel = CRTYPE_LHD_LEATHER_JACKET;
                }
                else if (crModel == CRTYPE_DW_METAL_ARMOR_M) {
                    crModel = CRTYPE_LHD_METAL_ARMOR;
                }
            }
        }

        if (cr.ModelName != crModel) {
            Assert(crModel != EMPTY_HSTRING);
            cr.ModelName = crModel;
        }

        // Armor modifier
        cr.CurrentArmorPerk = (toSlot == CritterItemSlot::Armor ? item.Armor_Perk : 0);
    }

    Critter[] other = cr.GetCritters(true, CritterFindType::Alive);
    for (uint i = 0; i < other.length(); i++) {
        other[i].OnSomeCritterMoveItem.Fire(cr, item, fromSlot);
    }

    uint stateAnim;
    if (fromSlot == CritterItemSlot::Main) {
        stateAnim = CritterStateAnim::Unarmed;
    }
    else if (toSlot == CritterItemSlot::Main) {
        stateAnim = (item.Type == ItemType::Weapon ? item.Weapon_StateAnim : CritterStateAnim::Unarmed);
    }
    else {
        return;
    }

    if (stateAnim != cr.StateAnimAlive) {
        Game.DeferredCall(0, CritterSetStateAnim, array<any> = {cr.Id, stateAnim});
    }
    // Slot modifiers
    // SLOT_PERK_MIRROR_SHADES // +1 charisma
    // SLOT_PERK_COSMETIC_CASE // +1 charisma to female
    // SLOT_PERK_MOTION_SENSOR // +20 outdoorsman
    // SLOT_PERK_STEALTH_BOY   // +20 sneak
}

void CritterSetStateAnim(any[] data)
{
    Critter cr = Game.GetCritter(data[0]);
    if (cr != null) {
        cr.SetConditionAnims(CritterCondition::Alive, CritterStateAnim(int(data[1])), 0);
    }
}
#endif
