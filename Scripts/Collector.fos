// FOS Server

// Author: rifleman17
// Собиратель мусора
// каждые NEXT_SEARCH_TIME собирает предметы на карте  в радиусе 5*PE от домашней позиции
// если на карте есть контейнер, расположенный на EntryHex'e с номером ENTRY_CONTAINER, после того, как соберет все предметы, идет их складывать в этот
// контейнер Внимание! используется ST_VAR0 для определения времени следующего поиска заняты события: CRITTER_EVENT_IDLE, CRITTER_EVENT_PLANE_END

///@ Property Critter PrivateServer uint CollectorTimeNextSearch

#define NEXT_SEARCH_TIME   (Time::RealMinute(5))
#define ENTRY_CONTAINER    (87)
#define PUT_ITEMS_PRIORITY (178)

void _CollectorInit(Critter cr, bool firstTime)
{
    cr.OnIdle.Subscribe(_CollectorIdle);
    cr.OnNpcPlaneEnd.Subscribe(_CollectorPlaneEnd);
    cr.CollectorTimeNextSearch = Game.GetFullSecond() + NEXT_SEARCH_TIME;
}

void _CollectorIdle(Critter cr)
{
    if (Game.GetFullSecond() >= cr.CollectorTimeNextSearch) {
        SearchForItems(cr);
        cr.CollectorTimeNextSearch = Game.GetFullSecond() + NEXT_SEARCH_TIME; // Следующий поиск
    }
    else {
        MoveItemsToContainer(cr);
    }
}

void MoveItemsToContainer(Critter cr) // Складывает все предметы из инвентаря в контейнер
{
    Map map = cr.GetMap();
    if (map == null) {
        return;
    }

    Item[] items = cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
    if (items.isEmpty()) {
        return;
    }

    uint entries = Entrance::MapCountEntry(map, ENTRY_CONTAINER);
    if (entries > 0) {
        uint16 hx = 0;
        uint16 hy = 0;
        if (Entrance::MapGetEntryCoords(map, ENTRY_CONTAINER, Game.Random(0, entries - 1), hx, hy)) {
            Item container = map.GetItem(hx, hy, ItemProperty::Type, ItemType::Container);
            if (container != null) {
                NpcPlanes::AddPickPlane(cr, PUT_ITEMS_PRIORITY, container, ZERO_IDENT, true);
                return;
            }
        }
    }

    // если нет спецконтейнера, кладем в ближайший
    Item[] containers = map.GetItems(ItemProperty::Type, ItemType::Container);
    uint distMin = map.Width;
    uint distCur = 0;
    int ind = -1;
    for (uint i = 0; i < containers.length(); i++) {
        distCur = map.GetPathLength(cr.HexX, cr.HexY, containers[i].HexX, containers[i].HexY, 1);
        if (distCur > 0 && distMin > distCur) {
            distMin = distCur;
            ind = i;
        }
    }
    if (ind >= 0) {
        NpcPlanes::AddPickPlane(cr, PUT_ITEMS_PRIORITY, containers[ind], ZERO_IDENT, true);
    }
}

void SearchForItems(Critter cr) // Поиск предметов, валяющихся на карте
{
    Map map = cr.GetMap(); // Карта с криттером, на которой будем искать вещи
    if (!valid(map)) {
        return;
    }

    Item[] items = map.GetItems(cr.HexX, cr.HexY, cr.Perception * 5);
    for (uint i = 0; i < items.length(); i++) {
        Item item = items[i];
        if (item.IsGag) {
            continue;
        }

        auto type = item.Type;
        if (type >= ItemType::Armor && type <= ItemType::Key && map.GetPathLength(cr, item.HexX, item.HexY, 0) > 0) {
            NpcPlanes::AddPickPlane(cr, 0, item, ZERO_IDENT, true);
        }
    }
}

bool _CollectorPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (plane.Type == AI_PLANE_PICK && plane.Priority == PUT_ITEMS_PRIORITY) {
        Map map = cr.GetMap();
        Item cont = map.GetItem(plane.Pick_HexX, plane.Pick_HexY, plane.Pick_Pid);
        if (valid(cont) && reason == REASON_SUCCESS && cont.Type == ItemType::Container) {
            Item[] items = cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
            ItemMovement::MoveItems(items, cont, ContainerItemStack::Root);
        }
    }
    return true;
}

void AddCollector(Critter cr, int, int, int)
{
    Critter npc = cr.GetMap().AddNpc(Content::Critter::HeroMale, cr.HexX, cr.HexY, 3);
    npc.SetupScript(_CollectorInit);
}
