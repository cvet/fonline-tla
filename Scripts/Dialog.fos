// FOS Server Sort 2
// Author: cvet, heX, Тринитротолуол, Tab10id

///@ Property Critter PrivateServer ident=>uint UniqTimeout

///@ Property Critter PrivateServer ident=>uint8 Loyality

///@ Property Critter PrivateServer ident=>bool  NpcStory
///@ Property Critter PrivateServer ident=>bool  NameMemNpcPlayer
///@ Property Critter PrivateServer ident=>bool  NameMemPlayerNpc
///@ Property Critter PrivateServer ident=>bool  TradeWas
///@ Property Critter PrivateServer ident=>bool  DenKliffBlessWas
///@ Property Critter PrivateServer ident=>bool  DenVirginiaSexWas
///@ Property Critter PrivateServer ident=>bool  NcrPlayerTalkPoliceman
///@ Property Critter PrivateServer ident=>bool  SFLoPanPayed

///@ Property Critter PrivateServer ident=>uint8 ChanceOneFromTwo
///@ Property Critter PrivateServer ident=>uint8 ChanceOneFromThree
///@ Property Critter PrivateServer ident=>uint8 ChanceOneFromFive

bool ChanceOneFromTwo(Critter cr, Critter npc, int value)
{
    if (!npc.ChanceOneFromTwo.exists(cr.Id)) {
        auto values = npc.ChanceOneFromTwo.clone();
        values[cr.Id] = Game.Random(0, 1);
        npc.ChanceOneFromTwo = values;
    }
    return npc.ChanceOneFromTwo[cr.Id] == uint8(value);
}

bool ChanceNotOneFromTwo(Critter cr, Critter npc, int value)
{
    if (!npc.ChanceOneFromTwo.exists(cr.Id)) {
        auto values = npc.ChanceOneFromTwo.clone();
        values[cr.Id] = Game.Random(0, 1);
        npc.ChanceOneFromTwo = values;
    }
    return npc.ChanceOneFromTwo[cr.Id] != uint8(value);
}

bool ChanceOneFromThree(Critter cr, Critter npc, int value)
{
    if (!npc.ChanceOneFromThree.exists(cr.Id)) {
        auto values = npc.ChanceOneFromThree.clone();
        values[cr.Id] = Game.Random(0, 2);
        npc.ChanceOneFromThree = values;
    }
    return npc.ChanceOneFromThree[cr.Id] == uint8(value);
}

bool ChanceNotOneFromThree(Critter cr, Critter npc, int value)
{
    if (!npc.ChanceOneFromThree.exists(cr.Id)) {
        auto values = npc.ChanceOneFromThree.clone();
        values[cr.Id] = Game.Random(0, 2);
        npc.ChanceOneFromThree = values;
    }
    return npc.ChanceOneFromThree[cr.Id] != uint8(value);
}

bool ChanceOneFromFive(Critter cr, Critter npc, int value)
{
    if (!npc.ChanceOneFromFive.exists(cr.Id)) {
        auto values = npc.ChanceOneFromFive.clone();
        values[cr.Id] = Game.Random(0, 4);
        npc.ChanceOneFromFive = values;
    }
    return npc.ChanceOneFromFive[cr.Id] == uint8(value);
}

bool ChanceNotOneFromFive(Critter cr, Critter npc, int value)
{
    if (!npc.ChanceOneFromFive.exists(cr.Id)) {
        auto values = npc.ChanceOneFromFive.clone();
        values[cr.Id] = Game.Random(0, 4);
        npc.ChanceOneFromFive = values;
    }
    return npc.ChanceOneFromFive[cr.Id] != uint8(value);
}

bool CheckSomeValue(int operHash, int value, int actualValue)
{
    hstring oper = hstring_fromHash(operHash);
    if (oper == ">") {
        return value > actualValue;
    }
    return false;
}

bool CheckLoyality(Critter cr, Critter npc, int oper, int value)
{
    int actualValue = npc.Loyality.get(cr.Id, 0);
    return CheckSomeValue(oper, value, actualValue);
}

void SetLoyality(Critter cr, Critter npc, int value)
{
    auto values = npc.Loyality.clone();
    values[cr.Id] = CLAMP(value, 0, 10);
    npc.Loyality = values;
}

void AddLoyality(Critter cr, Critter npc, int value)
{
    auto values = npc.Loyality.clone();
    value += values.get(cr.Id, 0);
    values[cr.Id] = CLAMP(value, 0, 10);
    npc.Loyality = values;
}

void DecLoyality(Critter cr, Critter npc, int value)
{
    auto values = npc.Loyality.clone();
    value -= values.get(cr.Id, 0);
    values[cr.Id] = CLAMP(value, 0, 10);
    npc.Loyality = values;
}

bool CheckPokerFraud(Critter cr, Critter npc, int oper, int value)
{
    int actualValue = npc.PokerFraud.get(cr.Id, 0);
    return CheckSomeValue(oper, value, actualValue);
}

void SetPokerFraud(Critter cr, Critter npc, int value)
{
    auto values = npc.PokerFraud.clone();
    values[cr.Id] = value;
    npc.PokerFraud = values;
}

bool CheckClickCounter(Critter cr, Critter npc, int oper, int value)
{
    int actualValue = npc.ClickCounter.get(cr.Id, 0);
    return CheckSomeValue(oper, value, actualValue);
}

void SetClickCounter(Critter cr, Critter npc, int value)
{
    auto values = npc.ClickCounter.clone();
    values[cr.Id] = value;
    npc.ClickCounter = values;
}

void AddClickCounter(Critter cr, Critter npc, int value)
{
    auto values = npc.ClickCounter.clone();
    value += values.get(cr.Id, 0);
    values[cr.Id] = value;
    npc.ClickCounter = values;
}

bool IsNpcStory(Critter cr, Critter npc)
{
    return npc.NpcStory.get(cr.Id, false);
}

bool IsNotNpcStory(Critter cr, Critter npc)
{
    return npc.NpcStory.get(cr.Id, false);
}

void SetNpcStory(Critter cr, Critter npc, int value)
{
    auto values = npc.NpcStory.clone();
    values[cr.Id] = value != 0;
    npc.NpcStory = values;
}

bool IsNameMemNpcPlayer(Critter cr, Critter npc)
{
    return npc.NameMemNpcPlayer.get(cr.Id, false);
}

bool IsNotNameMemNpcPlayer(Critter cr, Critter npc)
{
    return !npc.NameMemNpcPlayer.get(cr.Id, false);
}

void SetNameMemNpcPlayer(Critter cr, Critter npc, int value)
{
    auto values = npc.NameMemNpcPlayer.clone();
    values[cr.Id] = value != 0;
    npc.NameMemNpcPlayer = values;
}

bool IsNameMemPlayerNpc(Critter cr, Critter npc)
{
    return npc.NameMemPlayerNpc.get(cr.Id, false);
}

bool IsNotNameMemPlayerNpc(Critter cr, Critter npc)
{
    return !npc.NameMemPlayerNpc.get(cr.Id, false);
}

void SetNameMemPlayerNpc(Critter cr, Critter npc, int value)
{
    auto values = npc.NameMemPlayerNpc.clone();
    values[cr.Id] = value != 0;
    npc.NameMemPlayerNpc = values;
}

bool IsTradeWas(Critter cr, Critter npc)
{
    return npc.TradeWas.get(cr.Id, false);
}

bool IsNotTradeWas(Critter cr, Critter npc)
{
    return !npc.TradeWas.get(cr.Id, false);
}

void SetTradeWas(Critter cr, Critter npc, int value)
{
    auto values = npc.TradeWas.clone();
    values[cr.Id] = value != 0;
    npc.TradeWas = values;
}

bool IsDenKliffBlessWas(Critter cr, Critter npc)
{
    return npc.DenKliffBlessWas.get(cr.Id, false);
}

bool IsNotDenKliffBlessWas(Critter cr, Critter npc)
{
    return !npc.DenKliffBlessWas.get(cr.Id, false);
}

void SetDenKliffBlessWas(Critter cr, Critter npc, int value)
{
    auto values = npc.DenKliffBlessWas.clone();
    values[cr.Id] = value != 0;
    npc.DenKliffBlessWas = values;
}

bool IsDenVirginiaSexWas(Critter cr, Critter npc)
{
    return npc.DenVirginiaSexWas.get(cr.Id, false);
}

bool IsNotDenVirginiaSexWas(Critter cr, Critter npc)
{
    return !npc.DenVirginiaSexWas.get(cr.Id, false);
}

void SetDenVirginiaSexWas(Critter cr, Critter npc, int value)
{
    auto values = npc.DenVirginiaSexWas.clone();
    values[cr.Id] = value != 0;
    npc.DenVirginiaSexWas = values;
}

bool IsNcrPlayerTalkPoliceman(Critter cr, Critter npc)
{
    return npc.NcrPlayerTalkPoliceman.get(cr.Id, false);
}

bool IsNotNcrPlayerTalkPoliceman(Critter cr, Critter npc)
{
    return !npc.NcrPlayerTalkPoliceman.get(cr.Id, false);
}

void SetNcrPlayerTalkPoliceman(Critter cr, Critter npc, int value)
{
    auto values = npc.NcrPlayerTalkPoliceman.clone();
    values[cr.Id] = value != 0;
    npc.NcrPlayerTalkPoliceman = values;
}

bool IsSFLoPanPayed(Critter cr, Critter npc)
{
    return npc.SFLoPanPayed.get(cr.Id, false);
}

bool IsNotSFLoPanPayed(Critter cr, Critter npc)
{
    return !npc.SFLoPanPayed.get(cr.Id, false);
}

void SetSFLoPanPayed(Critter cr, Critter npc, int value)
{
    auto values = npc.SFLoPanPayed.clone();
    values[cr.Id] = value != 0;
    npc.SFLoPanPayed = values;
}

// Возвращает размер группы (живых ее участников)
// размер береться вне зависимости от того лидер это или просто партиец

int DFGroupCount(Critter player, Critter npc)
{
    Critter leader;
    if (not valid(GlobalmapGroupExtended::GetFollowLeader(player))) { // если у игрока нет лидера
        leader = player;                                              // тогда считаем что он и есть лидер
    }
    else {
        leader = GlobalmapGroupExtended::GetFollowLeader(player); // иначе берем лидера
    }

    Critter[] groups = {};
    groups.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Alive, groups);
    return groups.length();
}

// !/ Размер группы больше >=VAL
bool d_GroupCountMore(Critter player, Critter npc, int val)
{
    return DFGroupCount(player, npc) >= val;
}

bool d_GroupCountLess(Critter player, Critter npc, int val)
{
    return DFGroupCount(player, npc) < val;
}

// !/ У всех уровень больше >=VAL
// Проверка что все игроки в группе больше или равны указанному уровню.
bool d_GroupLevelMore(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    groups.insertLast(player);
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Alive, groups);
    for (uint i = 0; i < groups.length(); i++) {
        if (groups[i].Level < val) { // если хотябы один из них меньше требуемого уровня
            return false;
        }
    }
    return true;
}

bool d_GroupLevelLess(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    groups.insertLast(player);
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Alive, groups);
    for (uint i = 0; i < groups.length(); i++) {
        if (groups[i].Level > val) { // если хотябы один из них меньше требуемого уровня
            return false;
        }
    }
    return true;
}

// Игрок нуждаеться в лечении?
bool d_IsToHeal(Critter player, Critter npc)
{
    return player.CurrentHp < player.MaxLife;
}

// Игроку известна эта локация?
bool d_IsLocationVisible(Critter player, Critter npc, int locPid)
{
    return Location::IsKnownLoc(player, hstring_fromHash(locPid));
}

// Игроку НЕ известна эта локация?
bool d_IsLocationNotVisible(Critter player, Critter npc, int locPid)
{
    return not Location::IsKnownLoc(player, hstring_fromHash(locPid));
}

// Есть зависимости от наркотиков?
bool d_IsAddict(Critter player, Critter npc)
{
    return player.IsAddicted;
}

// У игрока нет зависимостей от наркотиков?
bool d_IsNotAddict(Critter player, Critter npc)
{
    return not d_IsAddict(player, npc);
}

// Игрок в группе? (лидер тоже считаеться)
bool d_GroupPresent(Critter player, Critter npc)
{
    return DFGroupCount(player, npc) > 1;
}

// Игрок НЕ в группе? (лидер тоже считаеться)
bool d_NotGroupPresent(Critter player, Critter npc)
{
    return not d_GroupPresent(player, npc);
}

/** проверка на таймаут
   используйте функцию r_TimeoutSet для инициализации
   если таймаут кончился (или еще и не начинался)
   то функция вернет истинну (разрешит ответ)
   иначе вернет ложь (ответ будет скрыт)
 */
bool d_TimeoutCheck(Critter player, Critter npc)
{
    return Game.GetFullSecond() >= player.DialogTimeout;
}

/**
        инверсия d_TimeoutCheck
 */
bool d_NotTimeoutCheck(Critter player, Critter npc)
{
    return not d_TimeoutCheck(player, npc);
}

// Проверка уникальной переменной - таймаута игрок-нпц
// Время прошло, или таймаут не назначался
bool d_TimeoutOk(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return false;
    }

    auto uniqTimeoute = player.UniqTimeout;
    uint time = uniqTimeoute.get(npc.Id, 0);
    if (time == 0) {
        return true;
    }

    return Game.GetFullSecond() >= time;
}

// Таймаут не закончился
bool d_NotTimeoutOk(Critter player, Critter npc)
{
    return !d_TimeoutOk(player, npc);
}

bool d_CheckMonth(Critter playe, Critter npc, int monthFrom, int monthTo)
{
    return (int(GameTime::GetMonth()) <= monthTo && int(GameTime::GetMonth()) >= monthFrom);
}

// НПЦ жив?
// в v0 указываем NpcRole НПЦ (на карте должен быть в 1 экземпляре)
// в v1 указываем PID карты (карта должна быть в игре в одном экземпляре)
bool d_IsLife(Critter player, Critter npc, int v0, int v1)
{
    Map map = Game.GetMapByPid(hstring_fromHash(v1), 0);
    if (!valid(map)) {
        return false;
    }

    Critter crit = map.GetCritter(CritterProperty::NpcRole, v0, CritterFindType::Npc);
    if (!valid(crit)) {
        return false;
    }

    return crit.IsAlive();
}

// НПЦ мертв?
bool d_IsDead(Critter player, Critter npc, int v0, int v1)
{
    return !d_IsLife(player, npc, v0, v1);
}

// Шпионаж
void dlg_TrySpy(Critter player, Critter banker, string& playerName)
{
    if (!valid(banker)) {
        return;
    }
    if (!IS_DIALOG_SAY_MODE(playerName) || IS_DIALOG_END(playerName)) {
        return;
    }
    if (playerName.length() <= 1) {
        return;
    }

    hstring BankerDialog = banker.DialogId;
    uint DlgStr = 100;
    string lexems = "$Victim " + playerName;

    if (Game.GetPlayer(playerName) == null) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 0), lexems);
        return;
    }

    Critter cr = Game.GetPlayer(playerName).GetOwnedCritter();
    if (player.Id == cr.Id) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 9));
        return;
    }

    // Пол.
    if (cr.Gender == GenderType::Male) {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 10) + "@";
    }
    else if (cr.Gender == GenderType::Female) {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 11) + "@";
    }
    else {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 12) + "@";
    }

    // Репликации.
    if (cr.ReplicationCount / cr.Level <= 2) {
        lexems += "$ReplCount @msg dlg " + DLGSTR(BankerDialog, DlgStr + 13) + "@";
    }
    else if (cr.ReplicationCount / cr.Level > 2 && cr.ReplicationCount / cr.Level < 10) {
        lexems += "$ReplCount @msg dlg " + DLGSTR(BankerDialog, DlgStr + 14) + "@";
    }
    else {
        lexems += "$ReplCount @msg dlg " + DLGSTR(BankerDialog, DlgStr + 15) + "@";
    }

    // Год рождения.
    lexems += "$Born " + (GameTime::GetYear() - cr.Age);

    if (player.SkillSpeech >= 40 - (player.Charisma + player.Luck) / 2) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 1), lexems);
    }

    // Уровень.
    if (player.SkillSpeech >= 50 - (player.Charisma + player.Luck) / 2) {
        lexems = "";
        lexems += "$Level " + cr.Level;
        player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 2), lexems);
    }

    // Карма.
    if (player.SkillSpeech >= 60 - (player.Charisma + player.Luck) / 2) {
        int[] Values = {-2147483647, -1000, -750, -500, -250, 250, 500, 750, 1000};
        int[] Descs = {6125, 6122, 6119, 6116, 6113, 6110, 6107, 6104, 6101};
        int CurKarma = 0;
        for (uint i = 0; i < Values.length(); i++) {
            if (int(cr.Karma) >= Values[i]) {
                CurKarma = Descs[i];
            }
            else {
                break;
            }
        }
        player.SayMsg(SAY_APPEND, TextPackName::Game, CurKarma);
    }

    // Статы.
    if (player.SkillSpeech >= 70 - (player.Charisma + player.Luck) / 2) {
        lexems = "";
        // Сила.
        if (cr.StrengthBase < 4) {
            lexems += "$Strength @msg dlg " + DLGSTR(BankerDialog, DlgStr + 16) + "@";
        }
        else if (cr.StrengthBase >= 4 && cr.StrengthBase < 7) {
            lexems += "$Strength" + "";
        }
        else if (cr.StrengthBase >= 7 && cr.StrengthBase <= 8) {
            lexems += "$Strength @msg dlg " + DLGSTR(BankerDialog, DlgStr + 17) + "@";
        }
        else {
            lexems += "$Strength @msg dlg " + DLGSTR(BankerDialog, DlgStr + 18) + "@";
        }
        // Восприятие.
        if (cr.PerceptionBase < 4) {
            lexems += "$Perception @msg dlg " + DLGSTR(BankerDialog, DlgStr + 19) + "@";
        }
        else if (cr.PerceptionBase >= 4 && cr.PerceptionBase < 7) {
            lexems += "$Perception" + "";
        }
        else if (cr.PerceptionBase >= 7 && cr.PerceptionBase <= 8) {
            lexems += "$Perception @msg dlg " + DLGSTR(BankerDialog, DlgStr + 20) + "@";
        }
        else {
            lexems += "$Perception @msg dlg " + DLGSTR(BankerDialog, DlgStr + 21) + "@";
        }
        // Выносливость.
        if (cr.EnduranceBase < 4) {
            lexems += "$Endurance @msg dlg " + DLGSTR(BankerDialog, DlgStr + 22) + "@";
        }
        else if (cr.EnduranceBase >= 4 && cr.EnduranceBase < 7) {
            lexems += "$Endurance" + "";
        }
        else if (cr.EnduranceBase >= 7 && cr.EnduranceBase <= 8) {
            lexems += "$Endurance @msg dlg " + DLGSTR(BankerDialog, DlgStr + 23) + "@";
        }
        else {
            lexems += "$Endurance @msg dlg " + DLGSTR(BankerDialog, DlgStr + 24) + "@";
        }
        // Обаяние.
        if (cr.CharismaBase < 4) {
            lexems += "$Charisma @msg dlg " + DLGSTR(BankerDialog, DlgStr + 25) + "@";
        }
        else if (cr.CharismaBase >= 4 && cr.CharismaBase < 7) {
            lexems += "$Charisma" + "";
        }
        else if (cr.CharismaBase >= 7 && cr.CharismaBase <= 8) {
            lexems += "$Charisma @msg dlg " + DLGSTR(BankerDialog, DlgStr + 26) + "@";
        }
        else {
            lexems += "$Charisma @msg dlg " + DLGSTR(BankerDialog, DlgStr + 27) + "@";
        }
        // Интеллект.
        if (cr.IntellectBase < 4) {
            lexems += "$Intellect @msg dlg " + DLGSTR(BankerDialog, DlgStr + 28) + "@";
        }
        else if (cr.IntellectBase >= 4 && cr.IntellectBase < 7) {
            lexems += "$Intellect" + "";
        }
        else if (cr.IntellectBase >= 7 && cr.IntellectBase <= 8) {
            lexems += "$Intellect @msg dlg " + DLGSTR(BankerDialog, DlgStr + 29) + "@";
        }
        else {
            lexems += "$Intellect @msg dlg " + DLGSTR(BankerDialog, DlgStr + 30) + "@";
        }
        // Ловкость.
        if (cr.AgilityBase < 4) {
            lexems += "$Agility @msg dlg " + DLGSTR(BankerDialog, DlgStr + 31) + "@";
        }
        else if (cr.AgilityBase >= 4 && cr.AgilityBase < 7) {
            lexems += "$Agility" + "";
        }
        else if (cr.AgilityBase >= 7 && cr.AgilityBase <= 8) {
            lexems += "$Agility @msg dlg " + DLGSTR(BankerDialog, DlgStr + 32) + "@";
        }
        else {
            lexems += "$Agility @msg dlg " + DLGSTR(BankerDialog, DlgStr + 33) + "@";
        }
        // Удача.
        if (cr.LuckBase < 4) {
            lexems += "$Luck @msg dlg " + DLGSTR(BankerDialog, DlgStr + 34) + "@";
        }
        else if (cr.LuckBase >= 4 && cr.LuckBase < 7) {
            lexems += "$Luck" + "";
        }
        else if (cr.LuckBase >= 7 && cr.LuckBase <= 8) {
            lexems += "$Luck @msg dlg " + DLGSTR(BankerDialog, DlgStr + 35) + "@";
        }
        else {
            lexems += "$Luck @msg dlg " + DLGSTR(BankerDialog, DlgStr + 36) + "@";
        }
        player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 3), lexems);
    }

    // Тагнутые боевые навыки.
    if (player.SkillSpeech >= 80 - (player.Charisma + player.Luck) / 2) {
        CritterProperty[] combatSkills = {CritterProperty::SkillSmallGuns,
                                          CritterProperty::SkillBigGuns,
                                          CritterProperty::SkillEnergyWeapons,
                                          CritterProperty::SkillUnarmed,
                                          CritterProperty::SkillMeleeWeapons,
                                          CritterProperty::SkillThrowing};
        for (uint i = 0; i < combatSkills.length(); i++) {
            if (cr.TagSkills.find(combatSkills[i]) != -1 && cr.GetAsInt(combatSkills[i]) < 100) {
                lexems = "$CmbtSkillTag @msg dlg " + DLGSTR(BankerDialog, DlgStr + 60 + Game.Random(0, 1)) + "@";
                switch (combatSkills[i]) {
                case CritterProperty::SkillSmallGuns:
                    lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 41) + "@";
                    break;
                case CritterProperty::SkillBigGuns:
                    lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 42) + "@";
                    break;
                case CritterProperty::SkillEnergyWeapons:
                    lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 43) + "@";
                    break;
                case CritterProperty::SkillUnarmed:
                    lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 44) + "@";
                    break;
                case CritterProperty::SkillMeleeWeapons:
                    lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 45) + "@";
                    break;
                case CritterProperty::SkillThrowing:
                    lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 46) + "@";
                    break;
                default:
                    break;
                }
                player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 6), lexems);
            }
        }
    }

    // Тагнутые небоевые навыки.
    if (player.SkillSpeech >= 85 - (player.Charisma + player.Luck) / 2) {
        CritterProperty[] skills = {CritterProperty::SkillFirstAid,
                                    CritterProperty::SkillDoctor,
                                    CritterProperty::SkillSneak,
                                    CritterProperty::SkillLockpick,
                                    CritterProperty::SkillSteal,
                                    CritterProperty::SkillTraps,
                                    CritterProperty::SkillScience,
                                    CritterProperty::SkillRepair,
                                    CritterProperty::SkillSpeech,
                                    CritterProperty::SkillBarter,
                                    CritterProperty::SkillGambling,
                                    CritterProperty::SkillOutdoorsman};

        for (uint i = 0; i < skills.length(); i++) {
            if (cr.TagSkills.find(skills[i]) != -1 && cr.GetAsInt(skills[i]) < 100) {
                lexems = "$SkillTag @msg dlg " + DLGSTR(BankerDialog, DlgStr + 62 + Game.Random(0, 2)) + "@";
                switch (skills[i]) {
                case CritterProperty::SkillFirstAid:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 65) + "@";
                    break;
                case CritterProperty::SkillDoctor:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 66) + "@";
                    break;
                case CritterProperty::SkillSneak:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 67) + "@";
                    break;
                case CritterProperty::SkillLockpick:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 68) + "@";
                    break;
                case CritterProperty::SkillSteal:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 69) + "@";
                    break;
                case CritterProperty::SkillTraps:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 70) + "@";
                    break;
                case CritterProperty::SkillScience:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 71) + "@";
                    break;
                case CritterProperty::SkillRepair:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 72) + "@";
                    break;
                case CritterProperty::SkillSpeech:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 73) + "@";
                    break;
                case CritterProperty::SkillBarter:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 74) + "@";
                    break;
                case CritterProperty::SkillGambling:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 75) + "@";
                    break;
                case CritterProperty::SkillOutdoorsman:
                    lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 76) + "@";
                    break;
                default:
                    break;
                }
                player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 7), lexems);
            }
        }
    }

    // Прокачаный боевой навык.
    if (player.SkillSpeech >= 90 - (player.Charisma + player.Luck) / 2) {
        lexems = "";
        int curSkill = 0;
        CritterProperty maxSkillProp;
        CritterProperty[] combatSkills = {CritterProperty::SkillSmallGuns,
                                          CritterProperty::SkillBigGuns,
                                          CritterProperty::SkillEnergyWeapons,
                                          CritterProperty::SkillUnarmed,
                                          CritterProperty::SkillMeleeWeapons,
                                          CritterProperty::SkillThrowing};
        for (uint i = 0; i < combatSkills.length(); i++) {
            if (curSkill < cr.GetAsInt(combatSkills[i])) {
                curSkill = cr.GetAsInt(combatSkills[i]);
                maxSkillProp = combatSkills[i];
            }
        }
        if (curSkill < 90) {
            lexems += "$CombatSkillLvl @msg dlg " + DLGSTR(BankerDialog, DlgStr + 37) + "@";
            lexems += "$CombatSkillMax";
        }
        else {
            if (curSkill >= 90 && curSkill < 150) {
                lexems += "$CombatSkillLvl @msg dlg " + DLGSTR(BankerDialog, DlgStr + 38) + "@";
            }
            if (curSkill >= 150 && curSkill < 200) {
                lexems += "$CombatSkillLvl @msg dlg " + DLGSTR(BankerDialog, DlgStr + 39) + "@";
            }
            if (curSkill >= 200) {
                lexems += "$CombatSkillLvl @msg dlg " + DLGSTR(BankerDialog, DlgStr + 40) + "@";
            }

            switch (maxSkillProp) {
            case CritterProperty::SkillSmallGuns:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 41) + "@";
                break;
            case CritterProperty::SkillBigGuns:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 42) + "@";
                break;
            case CritterProperty::SkillEnergyWeapons:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 43) + "@";
                break;
            case CritterProperty::SkillUnarmed:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 44) + "@";
                break;
            case CritterProperty::SkillMeleeWeapons:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 45) + "@";
                break;
            case CritterProperty::SkillThrowing:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR(BankerDialog, DlgStr + 46) + "@";
                break;
            default:
                break;
            }
        }
        player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 4), lexems);
    }

    // Прокачаный небоевой навык.
    if (player.SkillSpeech >= 100 - (player.Charisma + player.Luck) / 2) {
        lexems = "";
        int curSkill = 0;
        CritterProperty maxSkillProp;
        CritterProperty[] skills = {CritterProperty::SkillFirstAid,
                                    CritterProperty::SkillDoctor,
                                    CritterProperty::SkillSneak,
                                    CritterProperty::SkillLockpick,
                                    CritterProperty::SkillSteal,
                                    CritterProperty::SkillTraps,
                                    CritterProperty::SkillScience,
                                    CritterProperty::SkillRepair,
                                    CritterProperty::SkillSpeech,
                                    CritterProperty::SkillBarter,
                                    CritterProperty::SkillGambling,
                                    CritterProperty::SkillOutdoorsman};

        for (uint i = 0; i < skills.length(); i++) {
            if (curSkill < cr.GetAsInt(skills[i])) {
                curSkill = cr.GetAsInt(skills[i]);
                maxSkillProp = skills[i];
            }
        }
        if (curSkill <= 90) {
            lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 47) + "@";
        }
        else {
            switch (maxSkillProp) {
            case CritterProperty::SkillFirstAid:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 48) + "@";
                break;
            case CritterProperty::SkillDoctor:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 49) + "@";
                break;
            case CritterProperty::SkillSneak:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 50) + "@";
                break;
            case CritterProperty::SkillLockpick:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 51) + "@";
                break;
            case CritterProperty::SkillSteal:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 52) + "@";
                break;
            case CritterProperty::SkillTraps:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 53) + "@";
                break;
            case CritterProperty::SkillScience:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 54) + "@";
                break;
            case CritterProperty::SkillRepair:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 55) + "@";
                break;
            case CritterProperty::SkillSpeech:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 56) + "@";
                break;
            case CritterProperty::SkillBarter:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 57) + "@";
                break;
            case CritterProperty::SkillGambling:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 58) + "@";
                break;
            case CritterProperty::SkillOutdoorsman:
                lexems += "$AnySkill @msg dlg " + DLGSTR(BankerDialog, DlgStr + 59) + "@";
                break;
            default:
                break;
            }
        }
        player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 5), lexems);
    }

    // Количество денег на счету.
    if (player.SkillSpeech >= 110 - (player.Charisma + player.Luck) / 2) {
        lexems = "";
        lexems += "$ReplMoney " + cr.ReplicationMoney + "$ReplCount " + cr.ReplicationCount;
        player.SayMsg(SAY_APPEND, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 8), lexems);
    }
}

void dlg_ForSearching(Critter player, Critter barman, string& playerName)
{
    if (!valid(barman)) {
        return;
    }
    if (!IS_DIALOG_SAY_MODE(playerName) || IS_DIALOG_END(playerName)) {
        return;
    }
    if (playerName.length() <= 1) {
        return;
    }

    hstring BankerDialog = barman.DialogId;
    uint DlgStr = 200;

    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;

    // Пол бармена.
    if (barman.Gender == GenderType::Female) {
        lexems += "$BarmanGen @msg dlg " + DLGSTR(BankerDialog, DlgStr + 10) + "@";
    }
    else {
        lexems += "$BarmanGen @msg dlg " + DLGSTR(BankerDialog, DlgStr + 9) + "@";
    }

    // Игрок не найден.
    if (Game.GetPlayer(playerName) == null) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 0), lexems);
        return;
    }

    Critter cr = Game.GetPlayer(playerName).GetOwnedCritter();

    // Пол запрашиваемого криттера.
    if (cr.Gender == GenderType::Female) {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 8) + "@";
    }
    else {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 7) + "@";
    }

    player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 11), lexems);
}

void dlg_TrySearching(Critter player, Critter barman, string& playerName)
{
    if (!valid(barman)) {
        return;
    }
    if (!IS_DIALOG_SAY_MODE(playerName) || IS_DIALOG_END(playerName)) {
        return;
    }
    if (playerName.length() <= 1) {
        return;
    }

    hstring BankerDialog = barman.DialogId;
    uint DlgStr = 200;

    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;

    // Пол бармена.
    if (barman.Gender == GenderType::Female) {
        lexems += "$BarmanGen @msg dlg " + DLGSTR(BankerDialog, DlgStr + 10) + "@";
    }
    else {
        lexems += "$BarmanGen @msg dlg " + DLGSTR(BankerDialog, DlgStr + 9) + "@";
    }

    // Игрок не найден.
    if (Game.GetPlayer(playerName) == null) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 0), lexems);
        return;
    }

    Critter cr = Game.GetPlayer(playerName).GetOwnedCritter();

    // Пол запрашиваемого криттера.
    if (cr.Gender == GenderType::Female) {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 8) + "@";
    }
    else {
        lexems += "$Gender @msg dlg " + DLGSTR(BankerDialog, DlgStr + 7) + "@";
    }

    // Игрок спрашивает о самом себе.
    if (player.Id == cr.Id) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 1));
        return;
    }

    // Криттер на глобале.
    Map map = cr.GetMap();
    if (!valid(map)) {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 2), lexems);
        return;
    }

    // Todo: fix old proto numbers checks
    // Локация, где находится криттер. Диапазоны PID: до 150 и 210-235. Города и репликации.
    /*if (cr.GetMap().GetLocation().ProtoId < 50 || cr.GetMap().GetLocation().ProtoId >= 200) {
        lexems += "$Place @msg GM " + STR_LOC_NAME(cr.GetMap().GetLocation().ProtoId) + "@";

        // Криттер находится в той же локации, что и игрок.
        if (barman.GetMap().GetLocation().Id == cr.GetMap().GetLocation().Id) {
            player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 3), lexems);
            return;
        }

        // Криттер найден, лексемы сформированы - даем информацию.
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 4 + Game.Random(0, 2)), lexems);
    }
    else {
        player.SayMsg(SAY_DIALOG, TextPackName::Dialogs, DLGSTR(BankerDialog, DlgStr + 2), lexems);
    }*/
}

void r_ToHeal(Critter player, Critter npc)
{
    Stdlib::HealCritter(player);
}

void r_DropDrugs(Critter player, Critter npc)
{
    Drugs::DropDrugEffects(player);
}

void r_DropRadiation(Critter player, Critter npc)
{
    Radiation::DropRadiation(player);
}

void r_ShowLocation(Critter player, Critter npc, int locPidHash)
{
    Location::SetKnownLoc(player, hstring_fromHash(locPidHash));
}

void r_FadeOut(Critter player, Critter npc, int time)
{
    if (time == 0) {
        time = 2000;
    }
    Effects::FlushScreen(player, false, time);
}

void r_TransitToGlobal(Critter player, Critter npc)
{
    player.TransitToGlobal();
}

void r_TransitToLocation(Critter player, Critter npc, int locPidHash, int mapIndex)
{
    Stdlib::TransitToLoc(player, hstring_fromHash(locPidHash), mapIndex, 0);
}

void r_TransitToMap(Critter player, Critter npc, int mapPidHash, int entranceNum)
{
    Stdlib::TransitToMap(player, hstring_fromHash(mapPidHash), entranceNum);
}

void r_InfoMessage(Critter player, Critter npc, int strNum)
{
    Stdlib::InfoMessage(player, npc, strNum);
}

// Установка таймаута в часах на отдельного нпц (общий для всех игроков).
void r_TimeoutSet(Critter player, Critter npc, int gameHours)
{
    if (valid(npc)) {
        Stdlib::TimeoutSet(npc, gameHours);
    }
}

// Установка таймаута в минутах для связки игрок/нпц.
void r_SetUniqTO(Critter player, Critter npc, int value)
{
    if (!valid(npc)) {
        return;
    }

    auto uniqTimeoute = player.UniqTimeout.clone();
    uniqTimeoute[npc.Id] = Game.GetFullSecond() + value * 60;
    player.UniqTimeout = uniqTimeoute;
}

void r_DoorOpen(Critter player, Critter npc, int entryNum)
{
    Stdlib::DoorControl(player, entryNum, true);
}

void r_DoorClose(Critter player, Critter npc, int entryNum)
{
    Stdlib::DoorControl(player, entryNum, false);
}

// Даем игроку голодиск
void r_GiveHolodisk(Critter player, Critter npc, int holodiskNum)
{
    Item holo = player.AddItem(Content::Item::holodisk, 1);
    holo.HolodiskNum = holodiskNum;
}

void r_Attack(Critter player, Critter npc, int npcRole)
{
    Stdlib::Attack(player, npcRole);
}

void r_AttackStop(Critter player, Critter npc, int npcRole)
{
    Stdlib::AttackStop(player, npcRole);
}

void r_Kill(Critter player, Critter npc, int type)
{
    Stdlib::Kill(player, type);
}

void r_Damage(Critter player, Critter npc, int dmg, int type, int dir)
{
    Stdlib::Damage(player, dmg, type, dir);
}

// Атака игрока всеми НПЦ на карте, у которых команда совпадает с командой говорящего НПЦ
void r_TeamAttack(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return;
    }

    Map map = npc.GetMap();
    if (!valid(map)) {
        return;
    }

    Critter[] team = map.GetCritters(EMPTY_HSTRING, CritterFindType::AliveNpc);
    for (uint i = 0; i < team.length(); i++) {
        if (team[i].TeamId == npc.TeamId) {
            NpcPlanes::AddAttackPlane(team[i], 0, player.Id);
        }
    }
}

// Отложенная всплывающая строка над нпц
void r_SayMessageDelayed(Critter player, Critter npc, int strNum, int delaySeconds, int sayType)
{
    if (!valid(npc)) {
        return;
    }

    any[] values = {npc.Id, uint(sayType), uint(strNum)};
    Game.DeferredCall(GAME_SECOND_TO_TICK(delaySeconds), SayMessage, values);
}

void SayMessage(any[] values)
{
    Critter cr = Game.GetCritter(values[0]);
    if (!valid(cr)) {
        return;
    }

    hstring did = cr.DialogId;
    if (did == EMPTY_HSTRING) {
        return;
    }

    cr.SayMsg(values[1], TextPackName::Dialogs, DLGSTR(did, uint(values[2])));
}

void r_SkillUp(Critter player, Critter npc, int skill)
{
    Stdlib::SkillUp(player, CritterProperty(skill));
}

void r_QuestReward(Critter player, Critter npc, int base)
{
    Stdlib::QuestRewardExperience(player, base);
}

void r_QuestReward1(Critter player, Critter npc)
{
    int base = 10;
    if (player.Level < 20) {
        base = 15;
    }
    if (player.Level < 10) {
        base = 20;
    }
    if (player.Level < 5) {
        base = 40;
    }

    Stdlib::QuestRewardExperience(player, base);
}

void r_QuestReward2(Critter player, Critter npc)
{
    int base = 15;
    if (player.Level < 20) {
        base = 20;
    }
    if (player.Level < 10) {
        base = 50;
    }

    Stdlib::QuestRewardExperience(player, base);
}

void r_QuestReward3(Critter player, Critter npc)
{
    int base = 35;
    if (player.Level < 20) {
        base = 45;
    }
    if (player.Level < 10) {
        base = 60;
    }

    Stdlib::QuestRewardExperience(player, base);
}

bool d_GameEventStatus(Critter player, Critter npc, int idx, int status)
{
    return GameEvent::CheckEventStatus(uint(idx), uint(status));
}

bool d_NotLocationKnown(Critter player, Critter npc, int locPid)
{
    return !Location::IsKnownLoc(player, hstring_fromHash(locPid));
}

void r_CreateLocation(Critter player, Critter npc, int locPid, int worldX, int worldY, int dayDelete, int varNum)
{
    // Создает локацию в радиусе двух зон от заданных координат
    int delta = Settings.GlobalMapZoneLength * 2;
    Location loc = Location::CreateLocationForCritter(player, hstring_fromHash(locPid), worldX, worldY, delta, varNum);
    if (valid(loc)) {
        Location::SetLocationDeleteTime(loc, 60 * 60 * 24 * dayDelete);
    }
}

void r_AttackPlayer(Critter player, Critter npc)
{
    if (valid(player) && valid(npc)) {
        NpcPlanes::AddAttackPlane(npc, 0, player);
    }
}

void dlg_AttackPlayer(Critter player, Critter npc, string& lexems)
{
    if (valid(player) && valid(npc)) {
        NpcPlanes::AddAttackPlane(npc, 0, player);
    }
}
