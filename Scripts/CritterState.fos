// FOS Server

///@ Property Critter PrivateServer uint KnockoutAp
///@ Property Critter PrivateServer uint ActionAnimKnockoutEnd
///@ Event Server Game OnCritterRespawn(Critter critter)
///@ Event Server Game OnCritterKnockout(Critter critter)

void ModuleInit()
{
    Game.OnCritterIdle.Subscribe(OnCritterIdle);
}

void OnCritterIdle(Critter cr)
{
    if (cr.IsKnockout()) {
        TryUpOnKnockout(cr);
    }
}

void ToDead(Critter cr, uint actionAnim, Critter killer)
{
    // Already dead
    if (cr.IsDead()) {
        return;
    }

    cr.CloseDialog();
    if (cr.IsHide) {
        cr.IsHide = false;
    }
    if (cr.CurrentHp > 0) {
        cr.CurrentHp = 0;
    }

    cr.SetConditionAnims(CritterCondition::Dead, cr.StateAnimDead, actionAnim);
    cr.SetCondition(CritterCondition::Dead);
    cr.Action(ACTION_DEAD, actionAnim, null);

    Game.OnCritterDead.Fire(cr, killer);
    cr.OnDead.Fire(killer);
    if (killer != null) {
        killer.OnKill.Fire(cr);
    }
}

bool ToAlive(Critter cr)
{
    // Already life
    if (cr.IsAlive()) {
        return true;
    }

    if (cr.IsDead()) {
        Map map = cr.GetMap();
        if (map is null) {
            ThrowException("Critter on global map");
        }

        if (!map.IsHexesPassed(cr.HexX, cr.HexY, cr.Multihex)) {
            ThrowException("Hexes is busy");
        }

        cr.SetCondition(CritterCondition::Alive);
        if (cr.CurrentHp < 1) {
            cr.CurrentHp = 1;
        }

        cr.Action(ACTION_RESPAWN, 0, null);
        Game.OnCritterRespawn.Fire(cr);
    }
    else if (cr.IsKnockout()) {
        if (cr.CurrentHp <= 0) {
            cr.CurrentHp = 1;
        }
        if (cr.CurrentAp <= 0) {
            cr.CurrentAp = 1;
        }

        cr.KnockoutAp = 0;
        TryUpOnKnockout(cr);
    }

    return true;
}

class KnockoutTracer : LineTracer::ITraceContext
{
    Critter Cr;
    uint Multihex;
    uint16 EndHx;
    uint16 EndHy;

    KnockoutTracer(Critter cr)
    {
        Cr = cr;
        Multihex = cr.Multihex;
        EndHx = cr.HexX;
        EndHy = cr.HexY;
    }

    void StartExec(Map map, uint16 hx, uint16 hy, uint16 tx, uint16 ty, uint maxDist) override
    {
        // Nothing
    }

    void FinishExec(Map map, uint resultDist) override
    {
        // Nothing
    }

    bool Exec(Map map, uint16 hx, uint16 hy) override
    {
        if (!map.IsHexesPassed(hx, hy, Multihex)) {
            return true;
        }

        // Stop before trigger
        hstring pid = Content::Item::Trigger;
        if (!map.GetStaticItems(hx, hy, Multihex, pid).isEmpty()) {
            return true;
        }

        EndHx = hx;
        EndHy = hy;
        return false;
    }
};

void ToKnockout(Critter cr, uint actionAnimbegin, uint actionAnimidle, uint actionAnimend, uint lostAp, uint16 knockHx, uint16 knockHy)
{
    if (cr.IsKnockout()) {
        cr.KnockoutAp += lostAp;
        cr.SetConditionAnims(CritterCondition::Knockout, cr.StateAnimKnockout, actionAnimidle);
        cr.ActionAnimKnockoutEnd = actionAnimend;
        return;
    }

    if (cr.IsDead()) {
        ThrowException("Critter is dead");
    }

    Map map = cr.GetMap();
    if (map is null) {
        ThrowException("Critter on global map");
    }

    if (knockHx >= map.Width || knockHy >= map.Height) {
        ThrowException("Invalid hexes args");
    }

    cr.CloseDialog();
    if (cr.IsHide) {
        cr.IsHide = false;
    }

    // Find destination
    uint8 dir = Game.GetDirection(knockHx, knockHy, cr.HexX, cr.HexY);
    KnockoutTracer tracer = KnockoutTracer(cr);
    LineTracer::LineTracerHex(cr.HexX, cr.HexY, knockHx, knockHy, map, 0, tracer);

    // Move to new place
    cr.TransitToHex(tracer.EndHx, tracer.EndHy, dir);
    cr.SetConditionAnims(CritterCondition::Knockout, cr.StateAnimKnockout, actionAnimidle);
    cr.SetCondition(CritterCondition::Knockout);
    cr.Action(ACTION_KNOCKOUT, actionAnimbegin, null);
    cr.ActionAnimKnockoutEnd = actionAnimend;
    cr.KnockoutAp = lostAp;

    Game.OnCritterKnockout.Fire(cr);
}

void TryUpOnKnockout(Critter cr)
{
    // Critter lie on ground
    if (cr.CurrentHp <= 0) {
        return;
    }
    // Subtract knockout ap
    if (cr.KnockoutAp > 0) {
        int curAp = cr.CurrentAp;
        if (curAp <= 0) {
            return;
        }

        int ap = MIN(int(cr.KnockoutAp), curAp);
        cr.KnockoutAp -= ap;
        if (cr.KnockoutAp > 0) {
            return;
        }
    }

    // Wait when ap regenerated to zero
    if (cr.CurrentAp < 0) {
        return;
    }

    // Stand up
    cr.SetCondition(CritterCondition::Alive);
    cr.Action(ACTION_STANDUP, cr.ActionAnimKnockoutEnd, null);
    cr.Wait(Settings.Breaktime);
}
