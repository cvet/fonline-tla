// FOS Server Sort 2
// Author: heX
// Групповой квест: Охота на ванаминго!
// Выдает Марион(шериф) в Реддинге
// ver 1.0
/*
   Групповой квест: Охота на ванаминго!
   Выдает Марион(шериф) в Реддинге.
   На карте появляется локация с пещерой ванаминго.

   Ограничения (покачто сняты):
   5..10 человек.
   сумма уровней группы не меньше 50.
   выдается раз в две недели.

   Фичи (покачто не реализованны):
   если сильно отрицательная карма то
   Марион может выдать квест одному игроку,
   причем будет убеждать его что там всего пара ванаминго и ничего опастного.

   БАГИ:
   Неправильное название яйца. нужно юзать mob_egg.fodlg
   Алиен вываливается за стенку. (вверху по центру) OK?
   Затыкание проходов.
   Переключение автомата квеста в обратные состояния.
   рандомное начало атаки если долго не атакуют.
   убрать вождение по кругу.
   учитывать лечения стимами.
   больше опыта и денег
   повесить скрипт в maps.txt и map_init тут
 */

///@ Property Critter Protected     uint8 ReddMarionWan Group = Quests Quest = 5387 Max = 7
///@ Property Critter PrivateServer uint  ReddQWinamingoKills
///@ Property Critter PrivateServer uint  ReddQWinamingoHealing
///@ Property Game PrivateServer ident ReddMarionWanLocation
///@ Property Game PrivateServer uint ReddMarionWanTimeout

// #define debag

#ifdef debag
#define MIN_PLAYERS (1)
#endif
#ifndef debag
#define MIN_PLAYERS (5)
#endif
#define MAX_PLAYERS (10)

// макс тварей
#define MAX_CRIT (32)

// позиция
#define REDD_POS_X (13 * Settings.GlobalMapZoneLength - Settings.GlobalMapZoneLength / 2)
#define REDD_POS_Y (10 * Settings.GlobalMapZoneLength - Settings.GlobalMapZoneLength / 2)

// <--- r17
#define NPC_ROLE_COW  (13) // брамины
#define NPC_ROLE_EGG  (5)  // яйца ванаминго
#define NPC_ROLE_WAN1 (1)  // первые три ванаминго на карте
// ---> r17

// надо часть этих данных хранить в базе - на случай перезагрузки.
ident[] GlobalGroupsIds = {};
ident GlobalMapId;
uint GlobalWanMax;
int GlobalWanCount;
int GlobalWanSpawn;
int GlobalHumanCount;
int GlobalWanCountLow;

void SetQuestState(Critter player, int Status)
{
    player.ReddMarionWan = Status;
}

int GetQuestState(Critter player)
{
    return player.ReddMarionWan;
}

void DeleteWanMap()
{
    DL("Delete Wanamingo Location started");

    // поиск локации
    if (Game.ReddMarionWanLocation != ZERO_IDENT) {
        Location loc = Game.GetLocation(Game.ReddMarionWanLocation);
        if (not valid(loc)) {
            Game.ReddMarionWanLocation = ZERO_IDENT;
            DL("Invalid Wanamingo location");
        }
        else {
            // ищем игроков из списка, которые все еще могут находиться на локации
            for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
                Critter player = Game.GetCritter(GlobalGroupsIds[i]);
                if (!valid(player)) {
                    continue;
                }
                Map player_map = player.GetMap();
                if (valid(player_map)) {
                    Location playerLoc = player_map.GetLocation();
                    if (!valid(playerLoc)) {
                        continue;
                    }
                    if (playerLoc.ProtoId == loc.ProtoId) {
                        // найден игрок в локации "пещера ванаминго"
                        // переносим игрока на глобальную карту
                        player.Say(
                            SAY_NETMSG,
                            "Вы услышали далекий шум, который нарастал и приближался. Задрожали стены пещеры, и с потолка посыпались камни. Только чудом вам удалось выбраться из пещеры Ванаминго.");
                        player.TransitToGlobal();
                    }
                }
                // забываем где оно
                if (Location::IsKnownLoc(player, loc)) {
                    Location::UnsetKnownLoc(player, loc);
                    DL("Player id " + player.Id + "Location::UnsetKnownLoc");
                }
            }
            // удаление локации
            Game.DeleteLocation(loc.Id);
            Game.ReddMarionWanLocation = ZERO_IDENT;
        }
    }

    // однозначная очистка и инициализация переменных
    GlobalGroupsIds.clear();
    GlobalMapId = ZERO_IDENT;
    GlobalWanMax = 0;
    GlobalWanCount = 0;
    GlobalWanSpawn = 0;
    GlobalHumanCount = 0;
    GlobalWanCountLow = 0;
    Game.ReddMarionWanTimeout = 0;
    DL("Delete Wanamingo Location Succesfull");
    // ~settime 20 2246 11 08 00 00
}

// --------->r17
// собрать нпц по номеру роли
uint GetCrittersByRole(Map map, uint x, uint y, uint radius, int role, Critter[] critters) // lib
{
    Critter[] cTmp = map.GetCritters(x, y, radius, CritterFindType::AliveNpc);
    for (uint i = 0; i < cTmp.length(); i++) {
        if (cTmp[i].NpcRole == role) {
            critters.insertLast(cTmp[i]);
        }
    }
    return critters.length();
}

Location _GetNewWanLoc(Critter[] grp)
{
    int x, y;
    x = -1;
    y = 1;
    Location loc = Game.CreateLocation(
        Content::Location::wanamingo_cavern,
        REDD_POS_X + x * Settings.GlobalMapZoneLength + Game.Random(-(Settings.GlobalMapZoneLength / 2), (Settings.GlobalMapZoneLength / 2)),
        REDD_POS_Y + y * Settings.GlobalMapZoneLength + Game.Random(-(Settings.GlobalMapZoneLength / 2), (Settings.GlobalMapZoneLength / 2)),
        grp);

    if (!valid(loc)) {
        return null;
    }

    loc.Hidden = true;
    loc.AutoGarbage = false; // чтобы сборщик не убил локацию до того, как там не побывали игроки
    loc.Radius = 8;

    return loc;
}

void r_GotoHunter(Critter player, Critter npc, int val)
{
    if (!_TimeOutIsFree()) {
        // по идее сюда игрок никогда не должен попасть
        DL("Wanamingo quest: TIMEOUT is not free ");
        return;
    }

    // удаляем старую карту если она есть
    DeleteWanMap();

    Critter[] groups = {};
    groups.insertLast(player);
    Critter[] realGrp = {};
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Any, realGrp);
    for (uint i = 0, l = realGrp.length(); i < l; i++) {
        if (GetQuestState(realGrp[i]) == 0) {
            groups.insertLast(realGrp[i]);
        }
    }

    // инициализирует квест!
    for (uint i = 0; i < groups.length(); i++) {
        if (GetQuestState(groups[i]) == 0) {
            SetQuestState(groups[i], 1); // квест взят
        }
    }

    // //////////////////////////////////
    // создали позицию
    Game.ReddMarionWanTimeout = Game.GetFullSecond() + (60 * 60 * 24);
    Location loc = _GetNewWanLoc(groups);
    if (not valid(loc)) {
        return;
    }

    GlobalMapId = loc.Id;
    // записали в глобальную игровую переменную
    Game.ReddMarionWanLocation = GlobalMapId;

    Map map = loc.GetMapByIndex(0);
    map.SetupScript(_WanMapInit);

    Game.DeferredCall(GAME_SECOND_TO_TICK(Game.ReddMarionWanTimeout), TimeExpired);

    uint16 x = 0, y = 0;
    int c;

    Entrance::MapGetEntryCoords(map, 1, 0, x, y);

    Critter[] critters = {};

    c = GetCrittersByRole(map, x, y, 20, NPC_ROLE_COW, critters); // убитые брамины на карте

    for (uint i = 0; i < critters.length(); i++) {
        CritterState::ToDead(critters[i], Anim2Actions::DeadBloodySingle, null);
        critters[i].ReplicationTime = 60 * 24 * 365;
    }
    critters.clear();
    c = GetCrittersByRole(map, x, y, 20, NPC_ROLE_EGG, critters);

    for (uint i = 0; i < critters.length(); i++) {
        critters[i].DialogId = Content::Dialog::mob_egg_wan;
    }
    critters.clear();

    c = GetCrittersByRole(map, x, y, 20, 1, critters);

    GlobalWanCountLow = c;

    for (uint i = 0; i < critters.length(); i++) {
        critters[i].OnDead.Subscribe(wan_dead_low);
    }

    int wan;
    wan = groups.length() * 5;
    wan = CLAMP(wan, 16, 64);

    // глобалы
    GlobalWanCount = wan;
    GlobalWanMax = wan;
    GlobalWanSpawn = wan;
    GlobalHumanCount = 0;
    GlobalGroupsIds.resize(groups.length());
    for (uint i = 0, j = groups.length(); i < j; i++) {
        GlobalGroupsIds[i] = groups[i].Id;
    }

    DL("Quest started successful. Location added");
}

// r 17 - инициализация карты с ванаминго
void _WanMapInit(Map map, bool firstTime)
{
    DL("Begin Wan Map init");
    // это было в map_activate_mob_script.fos
    Mob::ActivateMobScript(map);

    map.OnCritterIn.Subscribe(map_incoming_r17);
    map.OnCritterOut.Subscribe(map_leave_r17);
    // map.OnFinish.Subscribe(map_deleting_r17); удаление можно не обрабатывать, иначе при рестарте сервера карта не сохранится

    DL("Wan Map init success");
}

// на зачистку шахты даются только одни сутки
void TimeExpired()
{
    DeleteWanMap();
}

// /////////////////////////////////////////////////////
// механику на карте не трогал r17
// спавнить ванаминго
Critter SpawnWan(Map map, uint8 EntSpawn, uint8 level)
{
    uint16 x = 0, y = 0;
    if (not Entrance::MapGetEntryCoords(map, EntSpawn, 0, x, y)) {
        Game.Log("ERROR GetEntryCoords " + EntSpawn);
        return null;
    }

    int[] props = {CritterProperty::DialogId,
                   Content::Dialog::mob_wanamingo.hash,
                   CritterProperty::BagId,
                   Bags::Empty,
                   CritterProperty::TeamId,
                   Teams::Mob0,
                   CritterProperty::ReplicationTime,
                   -1,
                   CritterProperty::Level,
                   level};
    Critter cr = map.AddNpc(Content::Critter::ToughAlien, x, y, Game.Random(0, 5), Tla::GetCritPropsDict(props));
    cr.SetupScript(Mob::_MobInit);
    if (valid(cr)) {
        // прерывания
        cr.OnDead.Subscribe(wan_dead);
    }
    if (not valid(cr)) {
        Game.Log("Critter creation error");
        return null;
    }
    return cr;
}

// спавнить ванаминго из нор
bool SpawnWan2()
{
    // uint8 ent=Game.Random(1,5);
    if (Game.ReddMarionWanLocation == ZERO_IDENT) {
        return false;
    }

    Location loc = Game.GetLocation(Game.ReddMarionWanLocation);
    if (not valid(loc)) {
        return false;
    }

    Map map = loc.GetMapByIndex(0);
    if (not valid(map)) {
        return false;
    }

    for (int i = 1; i <= 5; i++) {
        Critter globalCr = Game.GetCritter(GlobalGroupsIds[Game.Random(0, GlobalGroupsIds.length() - 1)]);
        if (not valid(globalCr)) {
            continue;
        }
        Critter cr = SpawnWan(map, i + 10, CLAMP(globalCr.Level, 10, 20));
        if (not valid(cr)) {
            continue;
        }
        uint16 x = 0, y = 0;
        bool r = Entrance::MapGetEntryCoords(map, i + 20, 0, x, y);
        if (not r) {
            continue;
        }
        cr.HomeMapId = map.Id;
        cr.HomeHexX = x;
        cr.HomeHexY = y;
        cr.HomeDir = Game.Random(0, 5);

        NpcPlanes::AddWalkPlane(cr, AI_PLANE_ATTACK_PRIORITY + 20, x, y, Game.Random(0, 5), false, 0);
        NpcPlanes::AddAttackPlane(cr, AI_PLANE_ATTACK_PRIORITY + 10, globalCr);
        GlobalWanSpawn--;
        // BREAK!!!
        // все игроки враги
        for (uint i2 = 0; i2 < GlobalGroupsIds.length(); i2++) {
            EnemyStack::AddEnemyToStack(cr, GlobalGroupsIds[i2]);
        }
    }
    return true;
}

// Time event
void Spawn()
{
    if (not SpawnWan2()) {
        return;
    }
    if (GlobalWanSpawn <= 0) {
        return;
    }
    else {
        Game.DeferredCall(GAME_MINUTE_TO_TICK(5), Spawn);
    }
}

// Алерт
void Alert()
{
    for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
        Critter cr = Game.GetCritter(GlobalGroupsIds[i]);
        if (valid(cr)) {
            cr.Say(SAY_NETMSG, "Вы слышите шорох...");
        }
    }
}

// Алерт
void Alert2()
{
    for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
        Critter cr = Game.GetCritter(GlobalGroupsIds[i]);
        if (valid(cr)) {
            cr.Say(SAY_NETMSG, "Кажется у вас проблемы!");
        }
    }
}

// начать спавн ванаминго!
void BeginSpawn()
{
    Game.DeferredCall(GAME_MINUTE_TO_TICK(3), Spawn);
    Game.DeferredCall(GAME_MINUTE_TO_TICK(1), Alert);
    Game.DeferredCall(GAME_MINUTE_TO_TICK(5), Alert2);
}

#ifdef debag
// ~runscript redd_q_wanamingo spawn 0 0 0
void spawn(Critter player, int param0, int param1, int param2)
{
    BeginSpawn();
}
#endif

// выдача опыта в зависимости от счетчиков
int GetExpa(Critter player)
{
    int kls = player.ReddQWinamingoKills;   // килсы
    int aid = player.ReddQWinamingoHealing; // хиляние
    if (kls == 0 and aid == 0) {
        return 0; // фиг вам халявщики, а не опыт!
    }
    int expa = 500;
    if (kls >= 10 or aid >= 2) {
        expa += 1500;
    }
    return expa;
}

// квест выполнен! поздравляем игрока!
void QuestCompleteNotify(Critter player)
{
    if (GetQuestState(player) == 2) // пришол и
    {
        SetQuestState(player, 3); // победил!
#ifdef debag
        player.Say(SAY_NETMSG, "Квест выполнен!");
        player.Say(SAY_NETMSG, "Убито ванаминго: " + player.ReddQWinamingoKills);
        player.Say(SAY_NETMSG, "Лечений: " + player.ReddQWinamingoHealing);
#endif
        player.Experience += GetExpa(player); // УРА!!!
    }
    else if (GetQuestState(player) == 1) { // не заходил на локацию
        SetQuestState(player, 5);
    }
    else {                        // не пришол
        SetQuestState(player, 0); // сбрасываем нафиг
    }
}

// ///////////////////////////////////////////////
// обработчики прерываний

// игрок уходит с карты
void map_leave(Map map, Critter player)
{
    DL("Map leave begin"); // r17
    if (player.IsOwnedByPlayer()) {
        GlobalHumanCount--;
        DL("GlobalHuman " + GlobalHumanCount); // r17
        if (GlobalHumanCount == 0) {           // если больше нет никого
            DeleteWanMap();
        }

        remove_events(player);
        DL("Player events has been removed");

        if (not player.IsDead()) // если еще жив
        {
            if (GlobalWanCount > 0) // если гекко еще остались
            {
                if (GetQuestState(player) == 2) {
                    SetQuestState(player, 6); // сбежал
                }
            }
        }
        player.ReddQWinamingoKills = 0;
        player.ReddQWinamingoHealing = 0;
    }
    DL("Map leave end"); // r17
}
// r17
void map_leave_r17(Map map, Critter player)
{
    if (player.IsOwnedByPlayer()) {
        // игрок покидает локацию, но другие игроки могли там остаться
        // отменяем запоминание локации для игрока
        // удалять локацию не нужно, она сама удалится при срабатывании эвента или при окончании таймаута
        // в принципе, имеет смысл включить автосбор локации мусорщиком при первом выходе игрока с локации, но нужно убедиться, что не будет проблем при
        // последующих попытках удаления по расписанию
        GlobalHumanCount--;

        Location loc = map.GetLocation();

        if (!valid(loc)) {
            DL("Wan Loc can't find error");
            return;
        }
        if (Location::IsKnownLoc(player, loc)) {
            Location::UnsetKnownLoc(player, loc);
            DL("Player id " + player.Id + " Location::UnsetKnownLoc succsess");
        }

        remove_events(player);
        if (!player.IsDead()) // если еще жив
        {
            if (GlobalWanCount > 0) // если гекко еще остались
            {
                if (GetQuestState(player) == 2) {
                    SetQuestState(player, 6); // сбежал
                }
            }
        }
    }

    DL("Player has left wan map. Player ID " + player.Id);
    // на карте никого не осталось, можно сразу удалять
    if (_MapHasPlayers(map)) {
        DeleteWanMap();
    }
}
void map_incoming_r17(Map map, Critter player)
{
    Location loc = map.GetLocation();
    if (valid(loc)) {
        // все таки добавил автосборщик, иначе где-то залипало и карта не удалялась
        loc.AutoGarbage = true;
    }

    if (player.IsOwnedByPlayer()) {
        SetQuestState(player, 2); // пришли
        GlobalHumanCount++;

        remove_events(player);

        player.OnUseSkillOn.Subscribe(player_doctor);
        player.OnDead.Subscribe(player_dead_r_17);
    }
}

// игрок умер во время квеста
void player_dead_r_17(Critter player, Critter killer)
{
    SetQuestState(player, 4);                          // умер
    if (player.ReddQWinamingoKills * 2 > GlobalWanMax) // убил больше половины
    {
        player.Experience += 5000;
    }
    else {
        player.Experience += 500;
    }
    remove_events(player);
}
bool _MapHasPlayers(Map map)
{
    for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
        Critter cr = Game.GetCritter(GlobalGroupsIds[i]);
        if (valid(cr)) {
            if (valid(map.GetCritter(cr.Id))) {
                return true;
            }
        }
    }
    return false;
}
// удаление карты
void map_deleting_r17(Map map, bool deleted)
{
    DL("Map finish started");
    Location loc = map.GetLocation();
    for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
        Critter cr = Game.GetCritter(GlobalGroupsIds[i]);
        if (cr !is null) {
            Location::UnsetKnownLoc(cr, loc);
        }
    }

    // чтобы без проблем можно было взять новый квест
    Game.ReddMarionWanLocation = ZERO_IDENT;
    DL("Map finish ended");
}

// игрок пришол на карту
void map_incoming(Map map, Critter player)
{
    if (player.IsOwnedByPlayer()) {
        if (GlobalHumanCount > 0) // есть ктото уже есть то
        {
            Location loc = Game.GetLocation(map.Id);
            // if (loc.GeckCount>0) loc.GeckCount--;
        }

        SetQuestState(player, 2); // пришли
        GlobalHumanCount++;
        player.ReddQWinamingoKills = 0;   // килсы
        player.ReddQWinamingoHealing = 0; // хиляние
        player.OnUseSkillOn.Subscribe(player_doctor);
        player.OnDead.Subscribe(player_dead);
    }
}

// удаляем прерывания у игрока
void remove_events(Critter player)
{
    player.OnUseSkillOn.Unsubscribe(player_doctor);
    player.OnDead.Unsubscribe(player_dead_r_17);
    player.ReddQWinamingoKills = 0;   // килсы
    player.ReddQWinamingoHealing = 0; // хиляние
}

// игрок умер во время квеста
void player_dead(Critter player, Critter killer)
{
    remove_events(player);
    SetQuestState(player, 4);                          // умер
    if (player.ReddQWinamingoKills > GlobalWanMax / 2) // убил больше половины
    {
        player.Experience += 5000;
    }
    else {
        player.Experience += 500;
    }
    player.ReddQWinamingoKills = 0;   // килсы
    player.ReddQWinamingoHealing = 0; // хиляние
}

// AHTUNG - карта сворачиваеться нафиг
void map_deleting(Map map, bool deleted)
{
    Location loc = map.GetLocation();
    for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
        Critter cr = Game.GetCritter(GlobalGroupsIds[i]);
        if (cr !is null) {
            Location::UnsetKnownLoc(cr, loc);
        }
    }

    Game.ReddMarionWanLocation = ZERO_IDENT;
}

bool player_doctor(Critter crit, CritterProperty skill, Critter onCritter, Item onItem, StaticItem onScenery)
{
    // цепочка if
    if (skill == CritterProperty::SkillFirstAid && valid(onCritter) && onCritter.IsOwnedByPlayer() && crit.Id != onCritter.Id &&
        !IS_TIMEOUT(crit.TimeoutSkFirstAid)) {
        crit.ReddQWinamingoHealing += 1;
    }
    // и всетаки он вылечил его (ну или пытался, что тоже важно)
    return false; // вызываем глобальный обработчик
}

// смерть трех ванаминго которые стоят в начале
void wan_dead_low(Critter crit, Critter killer)
{
    GlobalWanCountLow--;
    // Game.Log("Dead detect "+GlobalWanCountLow);
    if (GlobalWanCountLow <= 0) {
        BeginSpawn();
    }
}

void wan_dead(Critter crit, Critter killer)
{
    if (killer.IsOwnedByPlayer()) {
        killer.ReddQWinamingoKills += 1;
    }

    GlobalWanCount--;
    // если гекко кончились
    if (GlobalWanCount == 0) {
        // квест выполнен!
        // нужно уведомить участников
        for (uint i = 0; i < GlobalGroupsIds.length(); i++) {
            Critter cr = Game.GetCritter(GlobalGroupsIds[i]);
            if (valid(cr)) {
                QuestCompleteNotify(cr);
            }
        }
        if (Game.ReddMarionWanLocation != ZERO_IDENT) {
            Location loc = Game.GetLocation(Game.ReddMarionWanLocation);
            loc.AutoGarbage = true;                  // разрешаем сбор карты мусорщиком (на всякий случай)
            Game.ReddMarionWanLocation = ZERO_IDENT; // снимаем метку
        }
    }
}
/*-----Вспомогательные функции(r17)------>-->-->*/
// проверка, что таймаут не закончен
// true  - таймаут завершен, либо не назначался раньше
// false - таймер тикает, нельзя ничего делать
bool _TimeOutIsFree()
{
    if (Game.ReddMarionWanTimeout == 0) {
        return true; // с таймаутом все нормально, он сброшен
    }

    if (Game.GetFullSecond() >= Game.ReddMarionWanTimeout) {
        DL("Время на квест истекло");
        return true;
    }

    return false;
}
// проверка - квест выполняется или нет
bool _QuestAlreadyRun()
{
    return GlobalMapId != ZERO_IDENT;
}
/*---------------Диалоги (r17) ---------->-->-->*/
// проверка доступности квеста
bool d_CheckQAccess(Critter player, Critter npc)
{
    // квест доступен, если никто его не выполняет в данный момент
    // проверка, суток должно было хватить, чтобы игроки прошли эту шахту
    // квест не выполняется, можно брать
    if (!_QuestAlreadyRun()) {
        return true;
    }
    // квест выполняется, проверяем таймаут квеста
    return (_TimeOutIsFree());
}

/*-<--<--<--------Диалоги (r17) -----------------*/
