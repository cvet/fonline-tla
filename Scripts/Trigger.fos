// FOS Server
// Author: cvet, heX, Tab10id

#define AI_PLANE_ATTACK_PRIORITY_MARK (AI_PLANE_ATTACK_PRIORITY + 1)

void t_Warn(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    int npcRole = trigger.SceneryParams[0];
    Stdlib::Warn(player, npcRole);
}

void t_Attack(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not player.IsControlledByPlayer) {
        return;
    }

    int npcRole = trigger.SceneryParams[0];
    Map map = player.GetMap();
    Critter[] critters = map.GetCritters(CritterProperty::NpcRole, npcRole, CritterFindType::AliveNpc);
    for (uint i = 0; i < critters.length(); i++) {
        NpcPlanes::AddAttackPlane(critters[i], AI_PLANE_ATTACK_PRIORITY_MARK, player);
    }
}

void t_AttackStop(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not player.IsControlledByPlayer) {
        return;
    }

    int npcRole = trigger.SceneryParams[0];
    Map map = player.GetMap();
    Critter[] critters = map.GetCritters(CritterProperty::NpcRole, npcRole, CritterFindType::AliveNpc);
    for (uint i = 0; i < critters.length(); i++) {
        Critter npc = critters[i];

        // проходимся по списку планов в поисках маркированного плана
        NpcPlanes::NpcPlane[] planes = {};
        uint count = NpcPlanes::GetPlanes(npc, planes);
        for (uint j = 0; j < count; j++) {
            if ((planes[j].Attack_TargId == player.Id) and (planes[j].Priority == AI_PLANE_ATTACK_PRIORITY_MARK)) {
                if (NpcPlanes::ErasePlane(npc, j)) {
                    EnemyStack::EraseEnemyFromStack(npc, player.Id);
                }
            }
        }
    }
}

void t_Kill(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    CritterActionAnim type = CritterActionAnim(trigger.SceneryParams[0]);
    Stdlib::Kill(player, type);
}

void t_Damage(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    int dmg = trigger.SceneryParams[0];
    DamageTypes type = DamageTypes(trigger.SceneryParams[1]);
    Stdlib::Damage(player, dmg, type, dir);
}

void t_DoorOpen(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    int entryNum = trigger.SceneryParams[0];
    Stdlib::DoorControl(player, entryNum, true);
}

void door_open(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    t_DoorOpen(player, trigger, entered, dir);
}

void t_DoorClose(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    int entryNum = trigger.SceneryParams[0];
    Stdlib::DoorControl(player, entryNum, false);
}

void door_close(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    t_DoorClose(player, trigger, entered, dir);
}

// лифт, всего существуют 8 типов лифтов. Максимум - 4 этажа
// для четырехэтажного отдельный триггер
// 1ый параметр - номер гекса, на который попадет игрок
// остальные параметры - коды прототипов карт
void t_Elevator4(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    auto params = trigger.SceneryParams;
    int entryExit = params[0];
    hstring map1Pid = hstring_fromHash(params[1]);
    hstring map2Pid = hstring_fromHash(params[2]);
    hstring map3Pid = hstring_fromHash(params[3]);
    hstring map4Pid = hstring_fromHash(params[4]);
    hstring[] pids = {map1Pid, map2Pid, map3Pid, map4Pid};
    Elevator::ShowElevator(player, 0, pids, entryExit);
}

// лифт, в котором меньше чем 4 этажа
// 1ый параметр - номер гекса, на который попадет игрок
// 2о1 параметр - типа лифта (от 1 до 8. см. _defines.fos, секцию // Elevators)
// 3ий..5ый параметры - коды протоипов карт
void t_Elevator(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (entered) {
        auto params = trigger.SceneryParams;
        int entryExit = params[0];
        int elevatorType = params[1];
        hstring map1Pid = hstring_fromHash(params[2]);
        hstring map2Pid = hstring_fromHash(params[3]);
        hstring map3Pid = hstring_fromHash(params[4]);

        if (IS_TIMEOUT(player.TimeoutTransfer)) {
            player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrTimeoutTransferWait);
        }
        else if (IS_TIMEOUT(player.TimeoutBattle)) {
            player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrTimeoutBattleWait);
        }
        else {
            hstring[] pids = {map1Pid};
            if (map2Pid != EMPTY_HSTRING) {
                pids.insertLast(map2Pid);
            }
            if (map3Pid != EMPTY_HSTRING) {
                pids.insertLast(map3Pid);
            }
            Elevator::ShowElevator(player, elevatorType, pids, entryExit);
        }
    }
}

// Диалог с НПЦ рядом с триггером,  с определенной ролью. 1 параметр - роль НПЦ.
void t_DialogNpc(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    int npcRole = trigger.SceneryParams[0];
    player.Wait(0);
    Stdlib::DialogNpc(player, npcRole);
}
