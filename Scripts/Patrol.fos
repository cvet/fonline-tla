// FOS Server
// Author: rifleman17
// Скрипт патрульных для некоей локации
// используется с помощью #include
// Перед инклудом необходимо добавить дефайн с определением имени скрипта  #define SCRIPTNAME- требуется в misc-планах

#define DL #(str)
// #define DL #(str) Game.Log(str);

#define PLANE_MOVENEXT_PATROL_POINT (49)
#define MAX_DIST_TOBEGIN_PATROL     (4)
#define PLAYER_ALARM_RADIUS         (6)

class Patroller
{
    Patroller()
    {
    }

    hstring DialogId;
    hstring ProtoId;
    uint BagId;
    uint TeamId;
    uint AiPacket;
    uint PowerLvl;
    uint Id;

    Critter GetPatroller(Map map, uint x, uint y)
    {
        int[] props = {CritterProperty::DialogId,
                       DialogId.hash,
                       CritterProperty::BagId,
                       BagId,
                       CritterProperty::TeamId,
                       TeamId,
                       CritterProperty::AiId,
                       AiPacket,
                       CritterProperty::Level,
                       CLAMP(PowerLvl * 5, 1, 24),
                       CritterProperty::IsNoHome,
                       1};
        Critter cr = map.AddNpc(ProtoId, x, y, Game.Random(0, 5), Tla::GetCritPropsDict(props));
        if (!valid(cr)) {
            return null;
        }

        Id = cr.Id;
        cr.ShowCritterDist1 = PLAYER_ALARM_RADIUS;
        cr.SetupScript(_PatrollerInit);
        return cr;
    }
};

void _PatrollerInit(Critter cr, bool firstTime)
{
    if (!firstTime) {
        Game.DeleteCritter(cr);
        return;
    }

    cr.OnCritterAppearedDist1.Subscribe(_ShowCritter1);
    cr.OnNpcPlaneEnd.Subscribe(_PatrollerPlaneEnd);
    cr.OnDead.Subscribe(_PatrollerDead);
    cr.OnTalk.Subscribe(_PatrollerTalk);
    cr.OnAttack.Subscribe(_PatrollerAttack);
    cr.OnNpcPlaneBegin.Subscribe(_PatrollerPlaneBegin);
    cr.OnSomeCritterUseSkill.Subscribe(_SmthUseSkill);
    cr.OnSomeCritterUseItem.Subscribe(_SmthUseItem);
}

// точка патрулирования
class PatrolPoint
{
    // конструктор
    PatrolPoint(Map map, uint eHexNum, uint waitMinutes)
    {
        MapId = map.Id;
        EHexNum = eHexNum;
        WaitMinutes = waitMinutes;
    }

    uint EHexNum;     // номер Entry гекса
    uint WaitMinutes; // время, которое ждет патрульный в данной точке патрулирования
    uint MapId;       // ид карты, на каторой устроен патруль

    Map PatrolMap()
    {
        Map map = Game.GetMap(MapId);
        if (valid(map)) {
            return map;
        }
        else {
            Game.Log("Patrol map not found. Id " + MapId);
            return null;
        }
    }

    // ближайшая свободная точка рядом с гексом патрульной точки
    bool GetNearPatrolPoint(uint x, uint y)
    {
        Map map = Game.GetMap(MapId);
        if (!valid(map)) {
            return false;
        }

        uint16 x_ = 0, y_ = 0;
        bool result = Entrance::GetNearEntry(map, EHexNum, x_, y_);
        x = x_;
        y = y_;
        return result;
    }
};

// маршрут патрулирования
class PatrolRoute
{
    PatrolRoute()
    {
        curIndex = 0;
    }

    void AddPoint(PatrolPoint p)
    {
        curIndex = 0;
        points.insertLast(p);
    }

    PatrolPoint[] points = {};

    uint curIndex;

    PatrolPoint CurPoint()
    {
        if (points.length() == 0) {
            return null;
        }

        return points[curIndex < points.length() ? curIndex : 0];
    }

    void MoveNextPoint()
    {
        curIndex = (curIndex + 1 < points.length() ? curIndex + 1 : 0);
    }
};

class PatrolInfo
{
    PatrolInfo()
    {
        AlivePatrollers = 0;
        Route = PatrolRoute();
    }

    PatrolRoute Route;           // маршрут патрулирования
    Patroller[] Patrollers = {}; // нпц-патрульные
    uint[] AcceptedPlayers = {}; // игроки, которым разрешено находиться здесь.
    uint AlivePatrollers;        // число живых патрульных

    void AddPatroller(hstring dialog, hstring pid, uint bag, uint team, uint ai, uint lvl)
    {
        Patroller p = Patroller();

        if (!valid(p)) {
            return;
        }

        p.DialogId = dialog;
        p.ProtoId = pid;
        p.BagId = bag;
        p.TeamId = team;
        p.AiPacket = ai;
        p.PowerLvl = lvl;

        Patrollers.insertLast(p);
    }

    void MovePatrol()
    {
        for (uint i = 0; i < Patrollers.length(); i++) {
            Critter cr = Game.GetCritter(Patrollers[i].Id);
            if (!valid(cr)) {
                continue;
            }
            if (!cr.IsAlive()) {
                continue;
            }
            MovePatroller(cr);
        }
    }

    void MovePatroller(Critter cr)
    {
        PatrolPoint p = Route.CurPoint();
        if (!valid(p)) {
            return;
        }

        uint x = 0;
        uint y = 0;
        if (p.GetNearPatrolPoint(x, y)) {
            NpcPlanes::ErasePlane(cr, AI_PLANE_MISC, true);
            NpcPlanes::AddWalkPlane(cr, 0, PLANE_MOVENEXT_PATROL_POINT, 0, x, y, Game.Random(0, 5), false, 1);
        }
    }

    void BeginPatrol()
    {
        EndPatrol();
        AcceptedPlayers.clear();
        if (Route.points.length() == 0) {
            Game.Log("Begin patrol failed. Route empty");
            return;
        }

        if (Patrollers.length() == 0) {
            Game.Log("Begin patrol failed. 0 patrollers setted up");
            return;
        }

        Map map = Route.CurPoint().PatrolMap();
        if (!valid(map)) {
            return;
        }

        uint x = 0;
        uint y = 0;
        for (uint i = 0; i < Patrollers.length(); i++) {
            if (Route.CurPoint().GetNearPatrolPoint(x, y)) {
                Patrollers[i].GetPatroller(map, x, y);
                AlivePatrollers++;
            }
        }
    }

    void EndPatrol()
    {
        for (uint i = 0; i < Patrollers.length(); i++) {
            if (Patrollers[i].Id != 0) {
                Critter pat = Game.GetCritter(Patrollers[i].Id);
                if (valid(pat)) {
                    if (pat.IsNpc()) {
                        Game.DeleteCritter(pat);
                        Patrollers[i].Id = 0;
                    }
                }
            }
        }
    }

    bool CheckAllPatrollersAtPoint()
    {
        PatrolPoint p = pInfo.Route.CurPoint();
        if (!valid(p)) {
            return false;
        }

        uint x = 0;
        uint y = 0;
        if (!p.GetNearPatrolPoint(x, y)) {
            return false;
        }

        for (uint i = 0; i < Patrollers.length(); i++) {
            Critter cr = Game.GetCritter(Patrollers[i].Id);
            if (!valid(cr)) {
                continue;
            }
            if (!cr.IsAlive()) {
                continue;
            }

            // проверку на совпадение карты можно не делать
            if (Game.GetDistance(x, y, cr.HexX, cr.HexY) > MAX_DIST_TOBEGIN_PATROL) {
                if (NpcPlanes::IsNoPlanes(cr)) {
                    MovePatroller(cr);
                }
                return false;
            }
        }

        return true;
    }

    // криттер = патрульный
    bool IsPatroller(Critter cr)
    {
        for (uint i = 0; i < Patrollers.length(); i++) {
            if (cr.Id == Patrollers[i].Id) {
                return true;
            }
        }
        return false;
    }

    void AcceptPlayer(Critter player)
    {
        for (uint i = 0; i < AcceptedPlayers.length(); i++) {
            if (AcceptedPlayers[i] == player.Id) {
                return; // уже записан
            }
        }
        AcceptedPlayers.insertLast(player.Id);
    }

    // игроку разрешили тут находиться
    bool IsPlayerAccepted(Critter player)
    {
        for (uint i = 0; i < AcceptedPlayers.length(); i++) {
            if (AcceptedPlayers[i] == player.Id) {
                return true;
            }
        }
        return false;
    }
};

// глоб переменная уровня скрипта
PatrolInfo pInfo;

/* ********************* События патрульных *********************** */
void _ShowCritter1(Critter cr, Critter showCrit)
{
    if (showCrit.IsNpc()) {
        return;
    }
    if (pInfo.IsPlayerAccepted(showCrit)) {
        return;
    }

    NpcPlanes::NpcPlane[] planes = {};
    NpcPlanes::GetPlanes(cr, planes);
    for (uint i = 0; i < planes.length(); i++) {
        if (planes[i].Type == AI_PLANE_ATTACK) {
            return;
        }
    }

    _FoundPlayer(cr);
    DL("saw player");
    // NpcPlanes::AddMiscPlane(cr, AI_PLANE_PATROL_PRIORITY*5, Game.GetFullSecond()+pInfo.Route.CurPoint().WaitMinutes*60, "_FoundPlayer");

    for (uint i = 0; i < pInfo.Patrollers.length(); i++) {
        Critter pat = Game.GetCritter(pInfo.Patrollers[i].Id);
        if (!valid(pat)) {
            continue;
        }

        Critter[] talkers = pat.GetTalkingCritters();
        if (talkers.length() > 0) {
            for (uint j = 0; j < talkers.length(); j++) {
                if (talkers[j].Id == showCrit.Id) {
                    DL("someone already talked to player");
                    return;
                }
            }
        }
    }
    showCrit.Wait(0);
    Game.RunDialog(showCrit, cr, true);
}

// Npc misc plane script
void plane_MiscWait(Critter npc)
{
    if (pInfo.CheckAllPatrollersAtPoint()) {
        pInfo.Route.MoveNextPoint();
        pInfo.MovePatrol();
    }
    else {
        NpcPlanes::AddMiscPlane(npc, AI_PLANE_PATROL_PRIORITY, Game.GetFullSecond() + pInfo.Route.CurPoint().WaitMinutes * 60, plane_MiscWait);
    }
}

void _FoundPlayer(Critter cr)
{
    NpcPlanes::ErasePlane(cr, AI_PLANE_MISC, true);
    NpcPlanes::ErasePlane(cr, AI_PLANE_WALK, true);
}

void _PatrollerDead(Critter cr, Critter killer)
{
    Game.DeleteCritter(cr);
}

void _SmthUseItem(Critter cr, Critter fromCr, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (fromCr.IsNpc()) {
        return;
    }

    hstring pid = item.ProtoId;
    if (pid == Content::Item::dynamite || pid == Content::Item::plastic_explosives || pid == Content::Item::mine) {
        NpcPlanes::AddAttackPlane(cr, 0, fromCr, false);
    }
}

void _SmthUseSkill(Critter cr, Critter fromCr, CritterProperty skill, Critter onCritter, Item onItem, StaticItem onScenery)
{
    if (!valid(onCritter)) {
        return;
    }

    if (skill == CritterProperty::SkillSteal) {
        NpcPlanes::AddAttackPlane(cr, 0, fromCr, false);
    }
}

// начинается или заканчивается диалог с игроком
bool _PatrollerTalk(Critter cr, Critter player, bool attach, uint talkCount)
{
    if (!attach) {
        for (uint i = 0; i < pInfo.Patrollers.length(); i++) {
            Critter pat = Game.GetCritter(pInfo.Patrollers[i].Id);
            if (!valid(pat)) {
                continue;
            }

            // если хотя бы один патрульный с кем то разговаривает, патруль не идет дальше
            if (pat.GetTalkingCritters().length() > 0) {
                return true;
            }
        }

        // все разговоры закончены, следующая точка патрулирования
        pInfo.MovePatrol();
    }
    else {
        if (talkCount > 2) {
            return false;
        }
    }

    return true;
}

bool _PatrollerPlaneBegin(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (plane.Type == AI_PLANE_ATTACK && plane.Priority == AI_PLANE_ATTACK_PRIORITY) {
        Critter target = Game.GetCritter(plane.Attack_TargId);
        if (!valid(target)) {
            return true;
        }

        for (uint i = 0; i < pInfo.Patrollers.length(); i++) {
            if (pInfo.Patrollers[i].Id == cr.Id) {
                continue;
            }

            Critter pat = Game.GetCritter(pInfo.Patrollers[i].Id);
            if (valid(pat)) {
                NpcPlanes::NpcPlane[] planes = {};
                NpcPlanes::GetPlanes(pat, planes);

                bool hasTarget = false;
                for (uint j = 0; j < planes.length() && !hasTarget; j++) {
                    if (planes[j].Type == AI_PLANE_ATTACK && planes[j].Attack_TargId == target.Id) {
                        hasTarget = true;
                    }
                }

                DL("план добавлен");
                if (!hasTarget) {
                    NpcPlanes::AddAttackPlane(pat, AI_PLANE_ATTACK_PRIORITY + 1, target, false);
                }
            }
        }
    }
    return true;
}

bool _PatrollerAttack(Critter cr, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    return true;
}

bool _PatrollerPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    DL("Plane end/reason^" + reason + " id " + plane.Identifier + " plane x=" + plane.Walk_HexX + "plane y = " + plane.Walk_HexY);
    if (plane.Identifier == PLANE_MOVENEXT_PATROL_POINT) {
        PatrolPoint p = pInfo.Route.CurPoint();
        if (!valid(p)) {
            return true;
        }

        if (reason == REASON_SUCCESS) {
            NpcPlanes::AddMiscPlane(cr, AI_PLANE_PATROL_PRIORITY, Game.GetFullSecond() + p.WaitMinutes * 60, plane_MiscWait);
        }
        else {
            uint x = plane.Walk_HexX;
            uint y = plane.Walk_HexY;
            if (p.GetNearPatrolPoint(x, y)) {
                plane.Walk_HexX = x;
                plane.Walk_HexY = y;
                DL("Can't end patrol plane. Reason:" + reason + "hex x:" + x + "; y=" + y);
                return true;
            }
        }
    }

    return true;
}

/* *Диалоги. Помните - нужно указывать имя своего скрипта, в котором
   включен файл patrol_h, а не самого хидера */
