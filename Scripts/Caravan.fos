// FOS Server Sort 2

///@ Property Critter PrivateServer uint CaravanCrvId

/* ******************************************************************************************************************************************************** */
// Id караванов. Каждый караван нужно объявить здесь
/* ******************************************************************************************************************************************************** */
#define CARAVAN_WADE_REDD_VC      (1) // Реддинг-ВолтСити. Проводник: redd_wade. Отправление первого числа каждого месяца в 12 часов.
#define CARAVAN_SAVINEL_REDD_NR   (2) // Реддинг-НьюРено. Проводник: trdd_savinel. Отправление каждого 21 числа в 15 часов.
#define CARAVAN_STANWELL_REDD_NCR (3) // Реддинг-НКР. Проводник: redd_stanwell. Отправление каждого 11 числа в 8 часов.
#define CARAVAN_HAL_NCR_REDD      (4) // НКР-Реддинг, односторонний. Проводник: ncr_hal. Отправление 15 в 14:00
#define CARAVAN_KIT_BH_GECKO      (5) // Броукен-Хиллз - Гекко. Односторонний. Проводник: bh_kit. Отправление каждые сутки в 10:00
#define PATROL_HATE_NCR           (6)  // Односторонний ежедневный патруль рейнджеров.
#define PATROL_SHRIM_VC           (7)  // Односторонний ежедневный патруль гвардейцев ГУ.
#define CARAVAN_SELMA_ARR_VC      (8)  // Двусторонний, Арройо-ГУ, отправление в 14:00
#define CARAVAN_GAYZUN_ARR_SF     (9)  // Арройо-СФ, отправление в 19:00
#define CARAVAN_LAUMER_ARR_NCR    (10) // Арройо-НКР, отправление в
#define CARAVAN_HOSE_MOD_GECKO    (11) // Модок-Гекко, односторонний 12:00
/* ******************************************************************************************************************************************************** */
// Коды прототипов караванщиков и сумки
/* ******************************************************************************************************************************************************** */
#define BAG_Stanwell  (24)
#define BAG_Savinelly (20)
#define BAG_Hal       (20)
/* ******************************************************************************************************************************************************** */

// типы караванов
#define CRV_TYPE_ONEWAY               (1) // односторонний караван, всегда идет из начальной точки в конечную
#define CRV_TYPE_TWOWAY               (2) // двухсторонний караван, если доходит до точки назначения, в следующий раз пойдет по обратному маршруту
#define CRV_TYPE_ONEWAY_TRANSITLEADER (3) // односторонний караван, из конечной точки телепортирует начальника караванв в начальную
#define CRV_TYPE_ONEWAY_DELETELEADER  (4) // односторонний караван, через час после достижения конечной точки удаляет начальника каравана
#define CRV_TYPE_ONEWAY_DELETELEADER_BOTH \
    (5) // односторонний караван, через час после достижения конечной точки удаляет начальника каравана. Если никто не пришел к отправлению - удаляет тоже.

// статус каравана
#define CRV_STATUS_BEFORE_START (0) // караван не начинался
#define CRV_STATUS_PREPARE      (1) // появился проводник, игроки могут подавать заявки на охрану каравана
#define CRV_STATUS_START_MOVE   (2) // караван вышел из пункта А
#define CRV_STATUS_ON_GLOBAL    (3) // караван перемещается по глобалу
#define CRV_STATUS_ON_ENCOUNTER (4) // караван на случайном энкаунтере
#define CRV_STATUS_END          (5) // караван добрался до точки назначения в пункт Б

// статус квестовой переменной для игроков, сопровождающих караван
#define CARAVAN_NOQUEST           (0) // не взят
#define CARAVAN_QUEST_TAKEN       (1) // взят квест
#define CARAVAN_PLAYER_JOIN_FIRST (2) // игрок присоединился к каравану и караван начал движение впервые
// провалы. Если будет хоть один провал, по идее игрок больше не сможет охранять этот караван
#define CARAVAN_FAILURE_PLAYER_THIEFT      (3) // игрок напал на караванщиков или пытался ограбить
#define CARAVAN_FAILURE_PLAYER_ABANDONED   (4) // игрок покинул караван
#define CARAVAN_FAILURE_PLAYER_DEAD        (5) // игрок погиб во время каравана
#define CARAVAN_FAILURE_CARAVANLEADER_DEAD (6) // убит проводник на энкаунтере
#define CARAVAN_FAILURE_PLAYER_KILL_LEADER (7) // игрок убил проводника на энкаунтере
// первый и последующий успех
#define CARAVAN_SUCCESS_FIRST    (8) // игрок довел караван до точки назначения впервые
#define CARAVAN_PLAYER_JOIN_NEXT (9) // игрок присоединился к каравану и караван начал движение в последующие разы
#define CARAVAN_SUCCESS_NEXT     (10) // игрок довел караван до точки назначения в последующие разы
#define CARAVAN_QUEST_COMPLETE   (11) // игрок сдал квест

#define LEADER_SEARCH_RADIUS     (8) // радиус, в котором ищем проводника при проверках, в верной ли позиции он находится

#define MODEL_CRVNR_COWARD       (1) // модель поведения проводника: трус - пока других моделей поведения нет

#define MIN_DIST_CABS_DIST       (6) // минимальное расстояние между соседними повозками
#define STR_DONT_TOUCH           (3500) // строка, которую произносит проводник, если игрок пробует открыть повозки

// время в игрокых минутах, через которое будет телепортирован в начальную точку лидер, если тип каравана = CRV_TYPE_ONEWAY_TRANSITLEADER и караван дошел до пункта назначенния
#define TIME_TO_WAIT_AT_ENDPOINT (60 * 60 * 2)

// время в игровых минутах, через которое будет удален проводник каравана в конечной точке маршрута, если тип каравана = CRV_TYPE_ONEWAY_DELETELEADER
#define TIME_TO_DELETE_LEADER (60 * 30)

// управление квестовой переменной
#define _SetPlayerJoinFirst \
#(cr, crv) \
    { \
        if (GetQuestState(cr, crv.CaravanId) == CARAVAN_QUEST_TAKEN) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_PLAYER_JOIN_FIRST); \
    } // при первом присоединении должен быть взят квест
#define _SetPlayerSuccessFirst \
#(cr, crv) \
    { \
        if (GetQuestState(cr, crv.CaravanId) == CARAVAN_PLAYER_JOIN_FIRST) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_SUCCESS_FIRST); \
    } // для первого выполнения, должно быть первое присоединение
#define _SetPlayerThieft \
#(cr, crv) \
    { \
        SetQuestState(cr, crv.CaravanId, CARAVAN_FAILURE_PLAYER_THIEFT); \
    } // при воровстве или атаке всегда ставится статус
#define _SetPlayerAbandoned \
#(cr, crv) \
    { \
        uint q1 = GetQuestState(cr, crv.CaravanId); \
        if (q1 == CARAVAN_PLAYER_JOIN_FIRST || q1 == CARAVAN_PLAYER_JOIN_NEXT) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_FAILURE_PLAYER_ABANDONED); \
    } // статус "покинул караван" только для тех кто "присоединился"
#define _SetPlayerDead \
#(cr, crv) \
    { \
        uint q2 = GetQuestState(cr, crv.CaravanId); \
        if (q2 == CARAVAN_PLAYER_JOIN_FIRST || q2 == CARAVAN_PLAYER_JOIN_NEXT) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_FAILURE_PLAYER_DEAD); \
    } // аналогично при смерти игрока
#define _SetCaravanLeaderDead \
#(cr, crv) \
    { \
        uint q3 = GetQuestState(cr, crv.CaravanId); \
        if (q3 == CARAVAN_PLAYER_JOIN_FIRST || q3 == CARAVAN_PLAYER_JOIN_NEXT) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_FAILURE_CARAVANLEADER_DEAD); \
    } // аналогично при смерти караванщика
#define _SetPlayerKillLeader \
#(cr, crv) \
    { \
        SetQuestState(cr, crv.CaravanId, CARAVAN_FAILURE_PLAYER_KILL_LEADER); \
    }
#define _SetJoinNext \
#(cr, crv) \
    { \
        uint q4 = GetQuestState(cr, crv.CaravanId); \
        if (q4 == CARAVAN_QUEST_COMPLETE) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_PLAYER_JOIN_NEXT); \
    }
#define _SetSuccessNext \
#(cr, crv) \
    { \
        uint q5 = GetQuestState(cr, crv.CaravanId); \
        if (q5 == CARAVAN_PLAYER_JOIN_NEXT) \
            SetQuestState(cr, crv.CaravanId, CARAVAN_SUCCESS_NEXT); \
    } // после первого или последующего успеха
#define _SetPlayerJoin \
#(cr, crv) \
    { \
        uint q6 = GetQuestState(cr, crv.CaravanId); \
        if (q6 == CARAVAN_QUEST_TAKEN) { \
            _SetPlayerJoinFirst(cr, crv); \
        } \
        if (q6 == CARAVAN_QUEST_COMPLETE) { \
            _SetJoinNext(cr, crv); \
        } \
    }
bool _CanPlayerJoinCaravan(Critter cr, CaravanInfo crv)
{
    uint q7 = GetQuestState(cr, crv.CaravanId);
    return (q7 == CARAVAN_QUEST_COMPLETE || q7 == CARAVAN_NOQUEST || q7 == CARAVAN_QUEST_TAKEN);
} // после первого, последующего успеха или при взятом квесте
bool _GetPlayerQuestFailed(Critter cr, CaravanInfo crv)
{
    uint q8 = GetQuestState(cr, crv.CaravanId);
    return (q8 >= CARAVAN_FAILURE_PLAYER_THIEFT && q8 <= CARAVAN_FAILURE_PLAYER_KILL_LEADER);
} // игрок завалил ранее квест

// Debug Log
// #define DL#(s) (Game.Log(s))
#define DL #(s)
// #define DL2 #(s) (Game.Log("DL2" + s))
#define DL2 #(s)

void SetQuestState(Critter player, uint idCaravan, int state)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (not valid(ci)) {
        return;
    }
    player.SetAsInt(ci.QuestVarNum, state);
}
uint GetQuestState(Critter player, uint idCaravan)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (not valid(ci)) {
        return 0;
    }
    return player.GetAsInt(ci.QuestVarNum);
}

// вспомогательный класс для задания позиции нпц на карте
// сохраняет координаты нпц (прототип карты, позиция по Х или Y)
// умеет себя копировать
class NpcPosition
{
    // конструктор
    NpcPosition(hstring locPid, hstring mapPid, uint16 hX, uint16 hY)
    {
        MapProtoId = mapPid;
        HexX = hX;
        HexY = hY;
        LocPid = locPid;
    }

    hstring LocPid;     //
    hstring MapProtoId; // код прототипа карты
    uint16 HexX;        // позиция нпц на карте по оси X
    uint16 HexY;        // позиция нпц на карте по оси У

    NpcPosition Copy()
    {
        return NpcPosition(LocPid, MapProtoId, HexX, HexY);
    }

    Map GetMap()
    {
        return Game.GetMapByPid(MapProtoId, 0);
    }
};

// обмен значениями между двумя экземплярами класса
void SwitchNpcPosition(NpcPosition posA, NpcPosition posB)
{
    NpcPosition pos = posA.Copy();

    posA.LocPid = posB.LocPid;
    posA.MapProtoId = posB.MapProtoId;
    posA.HexX = posB.HexX;
    posA.HexY = posB.HexY;

    posB.LocPid = pos.LocPid;
    posB.MapProtoId = pos.MapProtoId;
    posB.HexX = pos.HexX;
    posB.HexY = pos.HexY;
}

// проводник каравана
// если он погибнет, миссия по охране караванов провалена
class CaravanLeaderInfo
{
    CaravanLeaderInfo()
    {
        Virtue = MODEL_CRVNR_COWARD; // других моделей поведения пока не реализовано
    }
    uint CaravanId; // код каравана, который ведет проводник

    NpcPosition StartPos; // начальные координаты лидера
    NpcPosition EndPos;   // конечные координаты лидера

    // описание НПЦ
    hstring DialogId; // диалог
    hstring NpcPid;   // прототип нпц
    uint BagId;       // инвентарь
    uint TeamId;      // команда
    uint AiPack;      // пакет ии
    ident CritterId;  // код криттера, получается уже после того, как караванщик создан
    uint8 Level;      // уровень проводника
    int Virtue;       // поведение

    bool CheckLeaderInPos(bool startPos)
    {
        NpcPosition pos = (startPos ? StartPos.Copy() : EndPos.Copy());

        Critter leader = GetLeader();
        if (!valid(leader)) {
            return false;
        }

        Map map = leader.GetMap();
        if (!valid(map)) {
            return false;
        }

        DL("map invalid mappid" + pos.MapProtoId);
        if (map.ProtoId != pos.MapProtoId) {
            return false;
        }
        // проверяем насколько далеко проводник от контрольных координат
        return (Game.GetDistance(leader.HexX, leader.HexY, pos.HexX, pos.HexY) <= LEADER_SEARCH_RADIUS);
    }

    bool TransitToPos(bool startPos)
    {
        Map map = (startPos ? StartPos.GetMap() : EndPos.GetMap());
        if (!valid(map)) {
            return false;
        }
        Critter leader = GetLeader();
        if (!valid(leader)) {
            return false;
        }
        DL("Transit leader to position:" + (startPos ? "1" : "2"));
        return Obsolete::CritterTransitToMapCoords(leader,
                                                   map.Id,
                                                   (startPos ? StartPos.HexX : EndPos.HexX),
                                                   (startPos ? StartPos.HexY : EndPos.HexY),
                                                   Game.Random(0, 5));
    }

    Critter GetLeader()
    {
        return Game.GetCritter(CritterId);
    }

    // установка лидера на указанную позицию
    bool PlaceLeaderCritterToPos(NpcPosition pos)
    {
        Map map = pos.GetMap();
        if (!valid(map)) {
            return false;
        }

        uint16 x = pos.HexX;
        uint16 y = pos.HexY;
        if (!GetFreeHex(map, 2, x, y)) {
            return false;
        }

        int[] props = {CritterProperty::DialogId,
                       DialogId.hash,
                       CritterProperty::TeamId,
                       TeamId,
                       CritterProperty::AiId,
                       AiPack,
                       CritterProperty::BagId,
                       BagId,
                       CritterProperty::Level,
                       Level};
        Critter leader = map.AddNpc(NpcPid, x, y, Game.Random(0, 5), Tla::GetCritPropsDict(props));
        if (!valid(leader)) {
            return false;
        }

        leader.CaravanCrvId = CaravanId;
        CritterId = leader.Id;
        DL("leader level " + leader.Level + "caravan level " + Level);
        return true;
    }

    // присваивание статуса проводника существующему криттеру
    void SetLeaderCritter(Critter leader)
    {
        DL("leader critter set called/ CaravanInfo=" + CaravanId);
        CritterId = leader.Id;
        leader.TeamId = TeamId;
        leader.BagId = BagId;
        leader.DialogId = DialogId;
        leader.AiId = AiPack;
        leader.Level = Level;

        leader.CaravanCrvId = CaravanId;
        CritterId = leader.Id;
    }
};

// вспомогательный класс, предмет для караванной повозки
class CaravanLootItem
{
    hstring ItemPid;          // код прототипа итема
    uint16 ItemMinAmount;     // минимальное количество итемов
    uint16 ItemMaxAmount;     // максимальное количество итемов
    uint8 ItemAppearChance;   // шанс появления итема, в процентах, 100% = всегда появляется
    bool IsReversedRouteItem; // признак - итем появится только на обратном пути

    // текущее число итемов
    uint8 Amount()
    {
        if (ItemMinAmount == ItemMaxAmount) {
            return ItemMaxAmount;
        }

        return ItemMinAmount < ItemMaxAmount ? Game.Random(ItemMinAmount, ItemMaxAmount) : Game.Random(ItemMaxAmount, ItemMinAmount);
    }

    // признак, появилось или нет в этот раз
    bool IsAppear()
    {
        return Game.Random(1, 100) < int(ItemAppearChance);
    }
};

// караванная повозка, расписывается содержимое ящиков
class CaravanCabInfo
{
    CaravanLootItem[] CabItems = {}; // вещи в повозке
    hstring CabPid;                  // прототип повозки

    CaravanCabInfo()
    {
        CabPid = Game.Random(0, 1) == 0 ? Content::Item::wagon_red : Content::Item::wagon_grey;
    }

    CaravanCabInfo(hstring cabPid)
    {
        CabPid = cabPid;
    }

    // добавление итема в повозку
    void AddLoot(hstring itemPid, uint16 minNum, uint16 maxNum, uint8 chanceAppear, bool isReversLoot)
    {
        CaravanLootItem li = CaravanLootItem();
        li.ItemPid = itemPid;
        li.ItemMinAmount = minNum;
        li.ItemMaxAmount = maxNum;
        li.ItemAppearChance = chanceAppear;
        li.IsReversedRouteItem = isReversLoot;

        CabItems.insertLast(li);
        DL("cab items:" + CabItems.length());
    }

    // размещение повозки с лутом на энкаунтере
    Item PlaceCabOnMap(Map map, uint x, uint y, bool isReveresed)
    {
        DL("trying place cab");
        Item cab = map.AddItem(x, y, CabPid, 1);
        if (!valid(cab)) {
            return null;
        }
        cab.IsNoBlock = false;
        DL("try place brahmins");
        // брамины: 1ый х=х0 у=у+1, второй ч х = х-1 у= у-3? dir=1
        if (map.IsHexMovable(x, y + 1)) {
            map.AddNpc(Content::Critter::Brahmin, x, y + 1, 1);
        }
        if (map.IsHexMovable(x - 1, y - 3)) {
            map.AddNpc(Content::Critter::Brahmin, x - 1, y - 3, 1);
        }
        uint num = 0;
        DL("cab items:" + CabItems.length());
        for (uint i = 0; i < CabItems.length(); i++) {
            DL("try item appear");
            if (CabItems[i].IsReversedRouteItem == isReveresed) {
                num = CabItems[i].Amount();
                if (CabItems[i].IsAppear() && num > 0) {
                    DL("Adding loot to cab");
                    cab.AddItem(CabItems[i].ItemPid, num, 0);
                }
            }
        }
        return cab;
    }
};

// вспомогательный класс для хранения координат
class GlobalPoint
{
    uint X;
    uint Y;

    GlobalPoint(uint x, uint y)
    {
        X = x;
        Y = y;
    }
};

// маршрут следования каравана - ломаная линия
class GlobalRouteCurve
{
    // массив координат узлов ломанного маршрута
    // должен включать и начальную с конечной точкой
    GlobalPoint[] Points = {};
    int nextPoint;

    // добавление нового узла в маршрут
    void AddPoint(GlobalPoint point)
    {
        Points.insertLast(point);
    }

    bool RouteEnded()
    {
        return (nextPoint == -1);
    }

    // если караван достиг узла ломаной маршрута, меняем координаты точки назначения на следующую в маршруте
    void SetRouteDir(uint x, uint y, float toX, float toY)
    {
        // нет ни одной точки в маршруте
        if (Points.length() == 0) {
            nextPoint = -1;
            return;
        }
        // маршрут закончен
        if (nextPoint == -1) {
            return;
        }
        // достигнут один из узлов маршрута
        if (x == Points[nextPoint].X && y == Points[nextPoint].Y) {
            // если это последняя точка маршрута, меня ничего не нужно
            if (nextPoint == (-1 + int(Points.length()))) {
                nextPoint = -1;
                return;
            }
            else {
                nextPoint++;
            }
        }
        toX = float(Points[nextPoint].X);
        toY = float(Points[nextPoint].Y);
    }

    // преобразование марщрута в обратный
    void ReverseRouteCurve()
    {
        GlobalPoint[] Points2 = array<GlobalPoint>(Points.length());

        for (uint i = 0; i < Points.length(); i++) {
            DL("try copy point");
            // TODO: проверить, что это копирование сработает
            Points2[i] = Points[i];
        }
        Points.clear();
        for (int j = (Points2.length() - 1); j >= 0; j--) {
            DL("try copy point - 2/j=" + j + "Points2.length()-1 = " + (Points2.length() - 1));
            AddPoint(Points2[j]);
            if (j == 0) {
                return;
            }
        }
        DL("Reverse route success");
    }
};

// вспомогательный класс - описания охранников каравана
class CaravanGuardInfo
{
    uint CaravanId;             // код каравана
    hstring Pid;                // код прототипа криттера
    hstring DialogId;           // диалог
    CritterInitFunc InitScript; // скрипт
    uint AiPack;                // ИИ
    uint BagId;                 // инвентарь
    uint16 TeamId;              // команда
    uint Level;                 // уровень
    uint ReactionNum; // реакция - условный параметр, показывающий, как быстро реагирует нпц на смену обстановки
    uint IsNervous;   // признак - нервный, будет часто жаловаться
    uint8 ChanceToJoin; // шанс присутствия в охране, в процентах
    bool IsUnique;      // признак, уникальный в рамках одного похода караванов

    CaravanGuardInfo(uint idCaravan, hstring pid, hstring dialogId, CritterInitFunc initScript, uint aiPack, uint bagId, uint teamId, uint level, uint reaction,
                     uint isNervous, uint8 chanceJoin, bool isUnique)
    {
        CaravanId = idCaravan;
        Pid = pid;
        DialogId = dialogId;
        @InitScript = initScript;
        AiPack = aiPack;
        BagId = bagId;
        TeamId = teamId;
        Level = level;
        ReactionNum = reaction;
        IsNervous = isNervous;
        ChanceToJoin = CLAMP(chanceJoin, 0, 100);
        IsUnique = isUnique;
    }

    // пытается поставить охранника с определенной долей вероятности.
    // если не удалось, возвращает  null
    // leader - проводник каравана
    Critter GetCritterGuard(Map map, Critter leader)
    {
        if (Game.Random(1, 100) > int(ChanceToJoin)) {
            return null;
        }

        uint16 hX = leader.HexX;
        uint16 hY = leader.HexY;
        if (!GetFreeHex(map, 4, hX, hY)) {
            return null;
        }

        int[] props = {CritterProperty::DialogId,
                       DialogId.hash,
                       CritterProperty::TeamId,
                       TeamId,
                       CritterProperty::AiId,
                       AiPack,
                       CritterProperty::BagId,
                       BagId,
                       CritterProperty::BagId,
                       Level,
                       CritterProperty::CaravanReaction,
                       ReactionNum,
                       CritterProperty::CaravanNervosityLvl,
                       IsNervous};
        Critter guard = map.AddNpc(Pid, hX, hY, Game.Random(0, 5), Tla::GetCritPropsDict(props));
        guard.SetupScript(InitScript);
        if (!valid(guard)) {
            return null;
        }
        // если охранник помечен уникальным - отмечаем его присоединившимся и криттер больше не будет генериться данным методом
        if (IsUnique) {
            ChanceToJoin = 0;
        }
        guard.CaravanCrvId = CaravanId;

        return guard;
    }
};

// вспомогательный класс для описания нпц в составе каравана, которые не отображаются в составе группы на глобале. Например, брамины при перегонке нкр-реддинг
// появляются только на энкаунтере
class CaravanNpcFollowerInfo
{
    uint CaravanId;   // код каравана
    hstring Pid;      // код прототипа криттера
    hstring DialogId; // диалог
    uint16 TeamId;    // команда
    uint BagId;       // команда

    CaravanNpcFollowerInfo()
    {
    }

    // добавление нпц рядом с итемом
    bool _AddNpcNearItem(Map map, Item item, uint8 dist)
    {
        uint16 hX = item.HexX;
        uint16 hY = item.HexY;
        if (!GetFreeHex(map, dist, hX, hY)) {
            return false;
        }

        int[] props = {CritterProperty::DialogId, DialogId.hash};
        return valid(map.AddNpc(Pid, hX, hY, Game.Random(0, 5), Tla::GetCritPropsDict(props)));
    }

    // добавление нпц рядом с криттером
    void _AddNpcNearCritter(Map map, Critter cr, uint8 dist)
    {
        AddNpcNearCritter(map, cr, dist);
    }

    Critter AddNpcNearCritter(Map map, Critter cr, uint8 dist)
    {
        uint16 hX = cr.HexX;
        uint16 hY = cr.HexY;
        if (!GetFreeHex(map, dist, hX, hY)) {
            return null;
        }

        int[] props = {CritterProperty::DialogId, DialogId.hash};
        return map.AddNpc(Pid, hX, hY, Game.Random(0, 5), Tla::GetCritPropsDict(props));
    }
};

// основное описание караванов
class CaravanInfo
{
    CaravanInfo()
    {
        MaxPlayers = 5;
        MaxGroup = 10;
        IsReversed = false;
        CaravanStatus = 0;
    }

    uint CaravanId;               // код каравана
    uint8 Type;                   // тип каравана, односторонний или двусторонний
    uint8 CaravanStatus;          // текущее состояние каравана
    uint8 GlobalSpeedMultiplayer; // множитель скорости движения по глобальной карте
    CritterProperty QuestVarNum;  // номер квестовой переменной для данного каравана
    uint MaxPlayers; // максимальное число игроков в составе каравана. Пока поставлено 5 для всех караванов.
    uint MaxGroup;   // максимальное число нпц/игроков в группе, включая проводника
    bool IsReversed; // признак - караван идет по обратному маршруту
    // описания
    CaravanLeaderInfo Leader;              // проводник каравана
    CaravanCabInfo[] Cabs = {};            // повозки
    GlobalRouteCurve CaravanRoute;         // маршрут следования каравана
    CaravanGuardInfo[] CaravanGuards = {}; // массив описаний охранников
    CaravanNpcFollowerInfo[] Followers = {}; // массив описаний спутников каравана (брамины, нейтральные персонажи итд)

    // игроки/нпц охранники
    ident[] PlayersRequested = {}; // массив Id игроков, подавших заявку на участие
    ident[] Caravaneers = {};      // массив Id игроков и нпц-караванщиков в составе каравана

    void TerminateCaravan()
    {
        CaravanStatus = CRV_STATUS_END;
        if (valid(Leader)) {
            Critter leader = Leader.GetLeader();
            if (valid(leader)) {
                DL("Leader deleted");
                Game.DeleteCritter(leader);
                Leader.CritterId = ZERO_IDENT;
            }
        }
        for (uint i = 0, l = Caravaneers.length(); i < l; i++) {
            Critter guard = Game.GetCritter(Caravaneers[i]);
            if (valid(guard)) {
                if (guard.IsNpc()) {
                    Game.DeleteCritter(guard);
                    continue;
                }
            }
        }
        _SetQuestState(this, CARAVAN_FAILURE_PLAYER_ABANDONED);
        CaravanReset();
    }

    void CaravanReset()
    {
        PlayersRequested.clear();
        // внимание! нет удаления нпц, поскольку они могут быть и на глобале и удаление сломается
        // удалением необходимо управлять в другом месте
        Caravaneers.clear();
        CaravanStatus = CRV_STATUS_BEFORE_START;
        CaravanRoute.nextPoint = 0;
    }
    // удаление охранника из списка охранников каравана
    // id - Id криттера
    bool RemoveGuard(ident id)
    {
        DL("RemoveGuard start/ Player Id = " + id);
        for (uint i = 0; i < Caravaneers.length(); i++) {
            if (id == Caravaneers[i]) {
                Caravaneers.removeAt(i);
                return true;
            }
        }
        for (uint i = 0; i < PlayersRequested.length(); i++) {
            if (id == PlayersRequested[i]) {
                PlayersRequested.removeAt(i);
                return true;
            }
        }
        return false;
    }
    // проверка, игрок является охранником данного каравана?
    bool PlayerIsGuard(ident playerId)
    {
        for (uint i = 0; i < Caravaneers.length(); i++) {
            if (playerId == Caravaneers[i]) {
                return true;
            }
        }
        return false;
    }
    // перенос игрока в список охранников
    // id - код игрока
    // внимание! нет проверки, что криттер найден. Проверять нужно в другом месте перед вызовом метода
    void RequstedToGuard(ident id)
    {
        for (uint i = 0; i < Caravaneers.length(); i++) {
            // уже есть в списках
            if (id == Caravaneers[i]) {
                return;
            }
        }
        Caravaneers.insertLast(id);
    }

    CaravanCabInfo GetCab(int8 idx)
    {
        DL("Getting cab info");
        if (!valid(Cabs)) {
            return null;
        }
        if (Cabs.length() == 0) {
            return null;
        }
        DL("cabs found");
        if (idx < 0) {
            return Cabs[Game.Random(0, Cabs.length() - 1)];
        }
        else {
            if (Cabs.length() <= uint8(idx)) {
                return Cabs[0];
            }
            return Cabs[uint8(idx)];
        }
    }

    // добавление точки в маршрут
    void AddRoutePoint(uint x, uint y)
    {
        CaravanRoute.AddPoint(GlobalPoint(x, y));
        CaravanRoute.nextPoint = 0;
    }
};

/* ******************************** вспомогательные функции ******************************** */
// ищет свободный гекс рядом с указанными координатами
// если найдет - возвращает true
// иначе - false
// карта - где ищем гекс
// радиус на котором нужно искать
// hx, hy координаты нового гекса
bool GetFreeHex(Map map, uint radius, uint16 hx, uint16 hy)
{
    if (hx == 0 || hy == 0 || hx >= (map.Width - radius) || hy >= (map.Height - radius)) {
        return false; // Check borders
    }
    int numTry = 10; // число попыток найти свободный гекс
    int xDelta = 0;
    int yDelta = 0;

    for (int i = 0; i < numTry; i++) {
        xDelta = Game.Random(0, radius * 2) - radius;
        yDelta = Game.Random(0, radius * 2) - radius;
        if (map.IsHexMovable(hx + xDelta, hy + yDelta)) {
            hx += xDelta;
            hy += yDelta;
            return true;
        }
    }
    return false;
}

// ищет на указанной карте криттера с нужным диалогом и прототипом
// ищет только нпц
Critter[] GetCrittersByDialogId(Map map, hstring dialog, hstring pid)
{
    Critter[] critters = {};

    if (!valid(map)) {
        return critters;
    }
    if (dialog == EMPTY_HSTRING) {
        return critters;
    }

    Critter[] foundCrits = map.GetCritters(pid, CritterFindType::Npc);
    for (uint i = 0; i < foundCrits.length(); i++) {
        if (foundCrits[i].DialogId == dialog) {
            critters.insertLast(foundCrits[i]);
        }
    }

    return critters;
}

///@ Property Critter PrivateServer uint8 VCDeadPatrollers Max = 10

#define MESSAGE_CARAVANEER_GOTO_HOME (212) // проводник отправит это сообщение, если двигает к домашней позиции
#define NPC_ROLE_CARAVAN_BOSS        (117) // босс каравана
#define NPC_ROLE_CARAVAN_GUIDE       (118) // проводник
#define NPC_ROLE_CARAVAN_GUARD       (119) // охранник каравана(НПЦ)

// типовые фразы

#define PHRASE_BORING       (2) // охранник заскучал
#define PHRASE_ATTACKED     (5) // фраза если охранник атакован
#define PHRASE_LOW_HP       (6) // фраза если у охранника осталось мало хп
#define PHRASE_KILL_SOMEONE (7) // фраза при убийстве охранником кого-либо
// задачи

#define PLANE_GOTO_HOME        (405) // гвард идет на новое место дислокации
#define MSG_WHERE_IS_DA_LEADER (211) // номер сообщения, которое отправляет охранник, когда хочет приблизиться к караванщику

/*---------------------- получение нескольких нпц-охранников ----------------------*/
// пытается сказать фразу в кассу к происходящему событию
// с учетом уровня "нервозности" гарда
// чем выше уровень нервозности, тем выше шанс
// guard - охранник
// msgId - номер строки в диалоге охранника
// boost - увеличивает вероятность
// если фраза сказана - функция вернет true, иначе false
bool _SayNervous(Critter guard, uint msgID, uint boost)
{
    DL2("try say nrv" + DLGSTR(guard.DialogId, msgID));
    if (Game.Random(guard.CaravanNervosityLvl + boost, 6) >= 5) {
        guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(guard.DialogId, msgID));
        return true;
    }
    return false;
}

// охранник подходит к проводнику
void _MoveToCaravanLeader(Critter guard, Critter leader, uint radius)
{
    uint16 hx = leader.HexX;
    uint16 hy = leader.HexY;
    Map map = guard.GetMap();
    if (!valid(map)) {
        return;
    }

    if (GetFreeHex(map, radius, hx, hy)) {
        bool run = false;
        if ((Game.Random(1, 3)) == 1) {
            run = true;
        }
        NpcPlanes::AddWalkPlane(guard, AI_PLANE_WALK_PRIORITY, PLANE_GOTO_HOME, 0, hx, hy, Game.Random(1, 5), run, 1);
    }
}

/*-------------------- -----обработка------   -------------------*/
// Охранник на локации, и ничего особенного не делает _GuardIdle
// иногда говорит случайную фразу из диалога
void _GuardIdle(Critter guard)
{
    CaravanInfo ci = _GetCaravan(guard.CaravanCrvId);
    // Удаление охранника, если он непонятно где завис
    // Охранники должны существовать только в момент движения или остановки каравана на энке
    if (valid(ci)) {
        if (ci.CaravanStatus == CRV_STATUS_BEFORE_START || ci.CaravanStatus == CRV_STATUS_PREPARE || ci.CaravanStatus == CRV_STATUS_END) {
            DL("kill caravan guard");
            Game.DeleteCritter(guard);
            return;
        }
    }

    if (valid(guard.GetMap())) {
        if (guard.CaravanIdleCount >= 20) {
            DL2("NextPhrase");
            if (_SayNervous(guard, PHRASE_BORING, 3)) {
                guard.CaravanIdleCount = 0;
                SendMessage::ToAllOnMap(guard, MSG_WHERE_IS_DA_LEADER, guard.Id);

                return;
            }
        }
        guard.CaravanIdleCount += guard.CaravanNervosityLvl;
        guard.CaravanIdleCount += 1;
        return;
    }
    else {
        if (guard.CaravanIdleCount > 0) {
            guard.CaravanIdleCount = 0;
        }
    }
}

// Пришло сообщение отправленное с помощью Critter::SendMessage.
void _GuardOnMessage(Critter guard, Critter fromCr, int message, any value)
{
    if (message == MESSAGE_CARAVANEER_GOTO_HOME) {
        if (fromCr.NpcRole == NPC_ROLE_CARAVAN_GUIDE && fromCr.CaravanCrvId == guard.CaravanCrvId) {
            guard.CaravanIdleCount = 0;
            NpcPlanes::AddMiscPlane(guard, AI_PLANE_MISC_PRIORITY, guard.CaravanReaction * 60, Caravan::plane_MiscGoHomePos);
        }
    }
}

// завершение выполнения некоего плана охранником
bool _GuardPlaneEnd(Critter guard, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(guard, planeId);

    // нпц без проблем дошел до домашней позиции
    if (plane.Identifier == PLANE_GOTO_HOME && reason == REASON_SUCCESS) {
        guard.HomeHexX = guard.HexX;
        guard.HomeHexY = guard.HexY;
        guard.HomeDir = Game.Random(1, 5);
    }

    // guard.Say(SAY_NORM_ON_HEAD, "reason = " +reason);
    // у нпц проблемы - не может дойти до домашней позиции
    else if (plane.Identifier == PLANE_GOTO_HOME) {
        if (reason == REASON_HEX_TOO_FAR || reason == REASON_HEX_BUSY || reason == REASON_HEX_BUSY_RING || reason == REASON_DEADLOCK ||
            reason == REASON_TRACE_FAIL || reason == REASON_POSITION_NOT_FOUND || reason == REASON_FIND_PATH_ERROR) {
            NpcPlanes::AddMiscPlane(guard, AI_PLANE_MISC_PRIORITY, guard.CaravanReaction * 60, Caravan::plane_MiscGoHomePos);
        }
    }

    return true;
}

// убит ктото
void _SomeCritterDead(Critter guard, Critter fromCrit, Critter killer)
{
    if (!valid(killer)) {
        return;
    }

    if (killer.Id == guard.Id) {
        guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(guard.DialogId, PHRASE_KILL_SOMEONE));
    }
}

// атакован кем-то
bool _GuardAttacked(Critter guard, Critter attacker)
{
    if (guard.CurrentHp * 3 < guard.MaxLife) {
        _SayNervous(guard, PHRASE_LOW_HP, 3);
    }
    else {
        _SayNervous(guard, PHRASE_ATTACKED, 0);
    }
    return false;
}

// охранник обворован
void _GuardStealing(Critter cr, Critter thief, Item item, uint count)
{
    // if( success && thief.IsOwnedByPlayer() )
    if (thief.IsOwnedByPlayer()) {
        NpcPlanes::AddAttackPlane(cr, 0, thief);
        if (!EnemyStack::CheckEnemyInStack(cr, thief.Id)) {
            EnemyStack::AddEnemyToStack(cr, thief.Id);
        }
    }
}

// убит патрульный ГУ
void _VCPatrolDead(Critter cr, Critter killer)
{
    CaravanInfo ci = _GetCaravan(cr.CaravanCrvId);
    if (not valid(ci) || ci.CaravanStatus != CRV_STATUS_ON_ENCOUNTER) {
        return;
    }
    for (uint i = 0, l = ci.Caravaneers.length(); i < l; i++) {
        Critter player = Game.GetCritter(ci.Caravaneers[i]);
        if (valid(player) && player.IsOwnedByPlayer()) {
            player.VCDeadPatrollers += 1;
        }
    }
}

/*-------------------------специфические обработки-------------------------*/
// Находчивый Василий нервно шарится по округе гораздо чаще, чем остальные
void e_VasyaIdle(Critter guard)
{
    if (NpcPlanes::IsNoPlanes(guard)) {
        if (guard.CaravanIdleCount % 3 == 1 && guard.IsFree()) {
            SendMessage::ToAllOnMap(guard, MSG_WHERE_IS_DA_LEADER, guard.Id);
        }
    }

    _GuardIdle(guard);
}

/*-------------------------планы---------------------------------*/
// охранник подходит ближе к проводнику, если у него нет других целей
void plane_MiscGoHomePos(Critter guard)
{
    SendMessage::ToAllOnMap(guard, MSG_WHERE_IS_DA_LEADER, guard.Id);
}

/*-------------------------инициализация-------------------------*/
void _DefaultGuardInit(Critter guard, bool firstTime)
{
    if (guard.IsDead()) {
        Game.DeleteCritter(guard);
        return;
    }

    if (!firstTime) {
        if (!valid(guard.GetMap())) {
            DL("Critter on global. Trying transit to home pos");
            Obsolete::CritterTransitToMapCoords(guard, guard.HomeMapId, guard.HomeHexX, guard.HomeHexY, guard.HomeDir);
            Game.DeleteCritter(guard);
            return;
        }
    }

    // void _FuncName(Critter cr, Critter fromCr, int message, any value)
    guard.OnMessage.Subscribe(_GuardOnMessage);
    guard.OnNpcPlaneEnd.Subscribe(_GuardPlaneEnd);
    guard.OnSomeCritterDead.Subscribe(_SomeCritterDead);
    guard.OnAttacked.Subscribe(_GuardAttacked);
    guard.OnIdle.Subscribe(_GuardIdle);
    guard.OnDead.Subscribe(_GuardDead);

    // охранников не ограбить
    guard.IsNoSteal = true;
    // торговать они не будут
    guard.IsNoBarter = true;
    guard.IsNoLoot = false;
    // из мертвых не встанут
    guard.ReplicationTime = -1;
}

void _GuardDead(Critter cr, Critter killer)
{
    if (cr.IsNpc()) {
        cr.AddTimeEvent(cte_DeleteCaravanGuard, REAL_MINUTE(5), 0);
    }
}

uint cte_DeleteCaravanGuard(Critter cr, any identifier, uint& rate)
{
    if (cr.IsNpc()) {
        Game.DeleteCritter(cr);
    }
    return 0;
}

// тоже, но бесконечные патроны
void _DefaultGuardInitUnlimAmmo(Critter guard, bool firstTime)
{
    guard.IsUnlimitedAmmo = true;
    _DefaultGuardInit(guard, firstTime);
}

void _VCPatrolInit(Critter guard, bool firstTime)
{
    guard.IsUnlimitedAmmo = true;
    _DefaultGuardInit(guard, firstTime);
    guard.OnDead.Subscribe(_VCPatrolDead);
}

// Патрульные для квеста Патруль Рейнджеров

void _NcrRangerPatrolInit(Critter guard, bool firstTime)
{
    guard.NcrHatePatrol = 2;

    guard.MaxLifeBase = Game.Random(150, 250);
    guard.CurrentHp = guard.MaxLife;
    guard.ExplodeResistanceBase = Game.Random(50, 90);
    guard.NormalResistanceBase = Game.Random(20, 50);
    guard.IsUnlimitedAmmo = true;
    _DefaultGuardInit(guard, firstTime);
}

/*-------------------------специфическая-------------------------*/
void _BomberInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::frag_grenade, 14);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::frag_grenade);
        guard.AddItem(Content::Item::stimpak, 10);
        guard.AddItem(Content::Item::crowbar, 1);
        guard.AddItem(Content::Item::dynamite, 1);
        Item item1 = guard.AddItem(Content::Item::leather_armor, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Armor, Content::Item::leather_armor);
        guard.ChangeItemSlot(item1.Id, CritterItemSlot::Armor);
    }

    guard.SkillThrowing = 300;

    // default init
    _DefaultGuardInit(guard, firstTime);

    guard.IsNoBarter = false;
    guard.IsUnlimitedAmmo = true;
}

void _AnaferonInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::hunting_rifle, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::hunting_rifle);
        guard.AddItem(Content::Item::_223_fmj, 50);
        guard.AddItem(Content::Item::combat_knife, 1);
        Item item1 = guard.AddItem(Content::Item::leather_armor, 1);
        guard.ChangeItemSlot(item1.Id, CritterItemSlot::Armor);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Armor, Content::Item::leather_armor);
        guard.AddItem(Content::Item::healing_powder, 6);
        guard.AddItem(Content::Item::stimpak, 2);
    }

    // default init
    _DefaultGuardInit(guard, firstTime);
    guard.IsUnlimitedAmmo = true;
}

void _VasyaInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::assault_rifle, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::assault_rifle);
        guard.AddItem(Content::Item::spiked_knuckles, 1);
        guard.AddItem(Content::Item::_5mm_jhp, 100);
        guard.AddItem(Content::Item::jet, 10);
        guard.AddItem(Content::Item::stimpak, 5);
        guard.AddItem(Content::Item::beer, 1);
        guard.AddItem(Content::Item::booze, 1);
        Item item1 = guard.AddItem(Content::Item::metal_armor, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Armor, Content::Item::metal_armor);
        guard.ChangeItemSlot(item1.Id, CritterItemSlot::Armor);
        guard.AddItem(Content::Item::lighter, 1);
        guard.AddItem(Content::Item::cigarettes, 1);
    }

    // default init
    _DefaultGuardInit(guard, firstTime);
    // поторговать с Василием? легко!
    guard.IsNoBarter = false;
    guard.OnIdle.Subscribe(e_VasyaIdle);
}

void _KillerInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        guard.AddItem(Content::Item::plasma_rifle, 1);
        Item item = guard.AddItem(Content::Item::turbo_plasma_rifle, 1);
        guard.ChangeItemSlot(item.Id, CritterItemSlot::Secondary);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::turbo_plasma_rifle);
        guard.AddItem(Content::Item::plasma_pistol_ext_cart, 1);
        guard.AddItem(Content::Item::super_sledge, 1);
        guard.AddItem(Content::Item::small_energy_cell, 100);
        guard.AddItem(Content::Item::micro_fusion_cell, 100);
        Item item1 = guard.AddItem(Content::Item::combat_armor_mk_ii, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Armor, Content::Item::combat_armor_mk_ii);
        guard.AddItem(Content::Item::super_stimpak, 15);
        guard.AddItem(Content::Item::jet, 4);
        guard.AddItem(Content::Item::psycho, 2);
    }

    guard.SkillEnergyWeapons = 280;
    guard.SkillMeleeWeapons = 200;
    guard.PerkBetterCriticals = Game.Random(0, 1);
    guard.PerkSniper = 1;
    guard.IsNoLoot = false;

    // default init
    _DefaultGuardInit(guard, firstTime);
}

void _ZombieInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::_10mm_smg, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::wakizashi_blade);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Secondary, Content::Item::wakizashi_blade);
        guard.AddItem(Content::Item::_10mm_jhp, 5);
        Item item1 = guard.AddItem(Content::Item::wakizashi_blade, 2);
        guard.AddItem(Content::Item::psycho, 10);
        guard.AddItem(Content::Item::jet, 10);
        guard.AddItem(Content::Item::stimpak, 10);
    }

    guard.NormalResistanceBase = 100;
    guard.LaserResistanceBase = 100;
    guard.FireResistanceBase = 100;
    guard.PlasmaResistanceBase = 100;
    guard.ElectricityResistanceBase = 100;
    guard.EmpResistanceBase = 100;
    guard.SkillMeleeWeapons = 300;
    guard.PerkSlayer = 1;
    guard.PerkBetterCriticals = 1;

    // default init
    _DefaultGuardInit(guard, firstTime);
}

void _MazzyInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::spiked_knuckles, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::spiked_knuckles);
        guard.ChangeItemSlot(item.Id, CritterItemSlot::Main);
    }

    // default init
    _DefaultGuardInit(guard, firstTime);
}

void _RatInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::independent, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Main, Content::Item::independent);
        guard.AddItem(Content::Item::_5mm_jhp, 50);
        guard.AddItem(Content::Item::_223_pistol, 1);
        guard.AddItem(Content::Item::_223_fmj, 30);
        guard.AddItem(Content::Item::hk_g11e, 1);
        guard.AddItem(Content::Item::_4_7mm_caseless, 50);
        guard.AddItem(Content::Item::stimpak, 5);
        guard.AddItem(Content::Item::shovel, 1);
        guard.AddItem(Content::Item::super_stimpak, 1);
        Item item1 = guard.AddItem(Content::Item::metal_armor_mk_ii, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Armor, Content::Item::metal_armor_mk_ii);
        guard.ChangeItemSlot(item1.Id, CritterItemSlot::Armor);
    }

    // default init
    _DefaultGuardInit(guard, firstTime);
}

void _PetreskuInit(Critter guard, bool firstTime)
{
    if (firstTime) {
        Item item = guard.AddItem(Content::Item::desert_eagle, 1);
        guard.AddItem(Content::Item::super_stimpak, 10);
        guard.AddItem(Content::Item::jet, 10);
        Item item1 = guard.AddItem(Content::Item::purple_robe, 1);
        FavoriteItem::SetFavoriteItemPid(guard, CritterItemSlot::Armor, Content::Item::purple_robe);
        guard.ChangeItemSlot(item1.Id, CritterItemSlot::Armor);
    }

    guard.PerkBonusHthDamage = 1;
    guard.PerkLivingAnatomy = 1;
    guard.PerkSilentDeath = 1;
    guard.PerkSlayer = 1;
    guard.PerkBetterCriticals = 1;
    guard.CriticalChanceBase = 120;
    guard.SkillUnarmed = 300;
    guard.StrengthBase = 10;

    _DefaultGuardInit(guard, firstTime);
}

void _BHCaravanGuardInit(Critter guard, bool firstTime)
{
    _DefaultGuardInitUnlimAmmo(guard, firstTime);
    // охранников не ограбить
    guard.IsNoSteal = false;
    guard.IsNoLoot = false;
    guard.OnStealing.Subscribe(_GuardStealing);
}

// */
/* ************************************* Поведение караванщика ************************************** */
void _AmplifyCaravaneer(Critter cr)
{
    DL("Critter level = " + cr.Level);
    _AmplifyCaravaneer(cr, uint(cr.Level / 6));
}

void _AmplifyCaravaneer(Critter cr, uint lvl)
{
    DL("amplify called" + lvl);
    cr.AgilityBase = CLAMP(cr.AgilityBase + lvl * 1, 5, 10);
    cr.MaxLifeBase = CLAMP(50 * lvl, 100, 780);
    cr.CurrentHp = cr.MaxLife;
    cr.LaserResistanceBase = CLAMP(cr.LaserResistanceBase + lvl * 20, 30, 250);
    cr.FireResistanceBase = CLAMP(cr.FireResistanceBase + lvl * 20, 30, 250);
    cr.PlasmaResistanceBase = CLAMP(cr.PlasmaResistanceBase + lvl * 20, 30, 250);
    cr.ElectricityResistanceBase = CLAMP(cr.ElectricityResistanceBase + lvl * 20, 30, 250);
    cr.ExplodeResistanceBase = CLAMP(cr.ExplodeResistanceBase + lvl * 20, 30, 250);
    cr.NormalResistanceBase = CLAMP(cr.ElectricityResistanceBase + lvl * 20, 30, 250);
}

// настройка поведения караванщика
void _SetEvents(Critter cr, uint model)
{
    switch (model) {
    // трус
    case MODEL_CRVNR_COWARD:
        cr.AiId = Fallout2AIPackets::PrimitiveCoward;
        cr.OnAttacked.Subscribe(e_CowardAttacked);
        break;
    default:
        break;
    }
}

bool e_CowardAttacked(Critter cr, Critter attacker)
{
    // если здоровье нпц <95%
    // cr.Say(SAY_NORM_ON_HEAD,"my health = "+ cr.CurrentHp + " max hp = "+cr.MaxLifeBase);
    if (cr.MaxLifeBase * 75 > cr.CurrentHp * 100) {
        uint16 hx = cr.HexX;
        uint16 hy = cr.HexY;
        _NpcEraseAllPlanes(cr);

        if (GetFreeHex(cr.GetMap(), 25, hx, hy)) {
            NpcPlanes::AddWalkPlane(cr, AI_PLANE_WALK_PRIORITY * 10, hx, hy, Game.Random(1, 5), true, 1);
            NpcPlanes::AddMiscPlane(cr, AI_PLANE_WALK_PRIORITY * 10 - 1, Game.GetFullSecond() + Game.Random(0, 1) * 60, Caravan::plane_MiscWaitInAttack);
        }
        return true;
    }
    return false;
}

// караванщик отбегает и ждет несколько минут
void plane_MiscWaitInAttack(Critter cr)
{
    // pass
}

///@ Property Critter Protected uint8 ReddWadeCaravanEscort     Group = Quests Quest = 4300 Max = 11
///@ Property Critter Protected uint8 ReddSavinelCaravanEscort  Group = Quests Quest = 4301 Max = 11
///@ Property Critter Protected uint8 ReddStanCaravanEscort     Group = Quests Quest = 4302 Max = 11
///@ Property Critter Protected uint8 NcrReddingCaravanEscort   Group = Quests Quest = 4244 Max = 11
///@ Property Critter Protected uint8 BHKitCaravanEscort        Group = Quests Quest = 3600 Max = 11
///@ Property Critter Protected uint8 VCShrimPatrol             Group = Quests Quest = 8826 Max = 11
///@ Property Critter Protected uint8 ArroyoSelmaCaravanEscort  Group = Quests Quest = 1807 Max = 11
///@ Property Critter Protected uint8 ArroyoGayzumCaravanEscort Group = Quests Quest = 1808 Max = 11
///@ Property Critter Protected uint8 ArroyoLaumerCaravanEscort Group = Quests Quest = 1809 Max = 11
///@ Property Critter Protected uint8 ModAurelianoCaravanEscort Group = Quests Quest = 3315 Max = 11
///@ Property Critter PrivateServer uint8 CommonCrvResetCounter Max = 15
///@ Property Critter PrivateServer uint8 ReddCrvResetCounter   Max = 9
///@ Property Critter PrivateServer uint8 NcrCrvResetCounter    Max = 5
///@ Property Critter PrivateServer uint8 BHCrvResetCounter     Max = 5
///@ Property Critter PrivateServer uint8 ArroyoCrvResetCounter Max = 15
///@ Property Critter PrivateServer uint  CaravanReaction
///@ Property Critter PrivateServer uint  CaravanNervosityLvl
///@ Property Critter PrivateServer uint  CaravanIdleCount
///@ Property Critter PrivateServer ident=>uint LastSelectedCaravan

///@ Property Item    PrivateServer ident  CaravanCabLeaderId

#define CARAVAN_WADE_REDD_VC      (1) // Реддинг-ВолтСити. Проводник: redd_wade. Отправление первого числа каждого месяца в 12 часов.
#define CARAVAN_SAVINEL_REDD_NR   (2) // Реддинг-НьюРено. Проводник: trdd_savinel. Отправление каждого 21 числа в 15 часов.
#define CARAVAN_STANWELL_REDD_NCR (3) // Реддинг-НКР. Проводник: redd_stanwell. Отправление каждого 11 числа в 8 часов.
#define CARAVAN_HAL_NCR_REDD      (4) // НКР-Реддинг, односторонний. Проводник: ncr_hal. Отправление 15 в 14:00
#define CARAVAN_KIT_BH_GECKO      (5) // Броукен-Хиллз - Гекко. Односторонний. Проводник: bh_kit. Отправление каждые сутки в 10:00
#define PATROL_HATE_NCR           (6)  // Односторонний ежедневный патруль рейнджеров.
#define PATROL_SHRIM_VC           (7)  // Односторонний ежедневный патруль гвардейцев ГУ.
#define CARAVAN_SELMA_ARR_VC      (8)  // Двусторонний, Арройо-ГУ, отправление в 14:00
#define CARAVAN_GAYZUN_ARR_SF     (9)  // Арройо-СФ, отправление в 19:00
#define CARAVAN_LAUMER_ARR_NCR    (10) // Арройо-НКР, отправление в
#define CARAVAN_HOSE_MOD_GECKO    (11) // Модок-Гекко, односторонний 12:00
// Отмывание провалов квестов на сопровождение каравана
// пока для данного квеста caravanResetVar>0 игрок может откатить караванную переменную в ноль, заплатив условному "боссу караванов"
// Расчет стоимости отмывки провала квеста
// существует переменная, в которой считается число доступных персонажу отмывок
// при каждой очередной отмывке переменная изменяется на -1, Если переменная = 0, больше игрок квест отмыть не сможет
#define CARAVAN_DEFAULT (0) // караван по умолчанию

// clang-format off

int[] crvCosts =
{
//	caravanNumber,              caravanVar,                                         caravanResetVar                             CARAVAN_FAILURE_PLAYER_THIEFT,      CARAVAN_FAILURE_PLAYER_DEAD,        CARAVAN_FAILURE_PLAYER_KILL_LEADER
//                                                                                                                                                                                                                                                ARAVAN_FAILURE_PLAYER_ABANDONED,   CARAVAN_FAILURE_CARAVANLEADER_DEAD,
    CARAVAN_DEFAULT,            CritterProperty::Invalid,                       CritterProperty::CommonCrvResetCounter,         5000,                                                    1000,                                          1000,      2000,                     6000,
    CARAVAN_WADE_REDD_VC,       CritterProperty::ReddWadeCaravanEscort,         CritterProperty::ReddCrvResetCounter,           5000,                                                    1000,                                          1000,      3000,                     5000,
    CARAVAN_SAVINEL_REDD_NR,    CritterProperty::ReddSavinelCaravanEscort,      CritterProperty::ReddCrvResetCounter,           6000,                                                    2000,                                          3000,      4000,                     7000,
    CARAVAN_STANWELL_REDD_NCR,  CritterProperty::ReddStanCaravanEscort,         CritterProperty::ReddCrvResetCounter,           10000,                                                   1000,                                          3000,      2000,                     15000,
    CARAVAN_HAL_NCR_REDD,       CritterProperty::NcrReddingCaravanEscort,       CritterProperty::NcrCrvResetCounter,            5000,                                                    3000,                                          3000,      3000,                     7000,
    CARAVAN_KIT_BH_GECKO,       CritterProperty::BHKitCaravanEscort,            CritterProperty::BHCrvResetCounter,             4000,                                                    4000,                                          1000,      2000,                     10000,
    CARAVAN_SELMA_ARR_VC,       CritterProperty::ArroyoSelmaCaravanEscort,      CritterProperty::ArroyoCrvResetCounter,         5000,                                                    1000,                                          1000,      2000,                     6000,
    CARAVAN_GAYZUN_ARR_SF,      CritterProperty::ArroyoGayzumCaravanEscort,     CritterProperty::ArroyoCrvResetCounter,         6000,                                                    3000,                                          2000,      4000,                     8000,
    CARAVAN_LAUMER_ARR_NCR,     CritterProperty::ArroyoLaumerCaravanEscort,     CritterProperty::ArroyoCrvResetCounter,         7000,                                                    4000,                                          1000,      3000,                     12000
};

// clang-format on

#define ROW_COUNT (9) // число строк в таблице отмывки провалов
#define COL_COUNT (8) // число колонок в таблице
#define CELL      #(row, col)(crvCosts[(row <ROW_COUNT ? row : 0) * COL_COUNT +(col <COL_COUNT ? col : 0)])

// Возвращает индекс строки в таблице, относящейся к указанному каравану
// Если индекс не найден, будет возвращен 0
uint RowIndex(uint caravanId)
{
    for (uint i = 0; i < ROW_COUNT; i++) {
        if (CELL(i, 0) == int(caravanId)) {
            return i;
        }
    }
    return 0;
}

// Расчет цены "отмывки" указанного каравана
// crvId - номер каравана (см. caravan_h)
// player - игрок
// возвращает цену отмывки, либо 0, в этом случае отмывка не требуется или невозможна
// либо цена провала
uint GetCrvResetCost(int crvId, Critter player)
{
    if (!CanResetCaravan(crvId, player) || !NeedResetCaravanStatus(crvId, player)) {
        return 0;
    }

    int prop = CELL(RowIndex(crvId), 1);
    return CELL(RowIndex(crvId), player.GetAsInt(CritterProperty(prop)));
}

// Проверка, может ли игрок "отмыть" указанный караван
bool CanResetCaravan(int crvId, Critter player)
{
    int prop = CELL(RowIndex(crvId), 2);
    return player.GetAsInt(CritterProperty(prop)) > 0;
}

// Проверка, нуждается ли игрок в отмывке каравана
bool NeedResetCaravanStatus(int crvId, Critter player)
{
    int prop = CELL(RowIndex(crvId), 1);
    int status = player.GetAsInt(CritterProperty(prop));
    return (status >= CARAVAN_FAILURE_PLAYER_THIEFT && status <= CARAVAN_FAILURE_PLAYER_KILL_LEADER);
}

// Проверка, не исчерпал ли игрок число возможных отмывок провалов данного каравана
bool d_CanResetCaravanStatus(Critter player, Critter npc, int crvId)
{
    return CanResetCaravan(crvId, player);
}
bool d_CanNotResetCaravanStatus(Critter player, Critter npc, int crvId)
{
    return !d_CanResetCaravanStatus(player, npc, crvId);
}
// Проверка в диалоге, нуждается ли данный караван в отмывке
bool d_NeedResetCaravanStatus(Critter player, Critter npc, int crvId)
{
    return NeedResetCaravanStatus(crvId, player);
}

// Диалог с лексемами имя караванщика (lex leader) и сумма для погашения(lex cost)
// использовать только в сочентании с r_SetSelectedCaravan!!
void dlg_GenResetCaravanText(Critter player, Critter npc, string& lexems)
{
    if (IS_DIALOG_END(lexems) or IS_DIALOG_SAY_MODE(lexems)) {
        return;
    }
    if (!valid(npc)) {
        return;
    }

    auto lastSelectedCaravan = npc.LastSelectedCaravan.clone();
    uint crvId = lastSelectedCaravan[player.Id];
    lastSelectedCaravan.remove(player.Id);
    npc.LastSelectedCaravan = lastSelectedCaravan;

    CaravanInfo ci = _GetCaravan(crvId);
    if (!valid(ci)) {
        return;
    }

    CaravanLeaderInfo li = ci.Leader;
    if (!valid(ci)) {
        return;
    }

    uint cost = GetCrvResetCost(crvId, player);

    lexems = "$leader@msg DLG " + STR_NPC_NAME_DLG(li.DialogId) + "@$money " + cost;
}

// перед выбором каравана, за который игрок хочет внести выкуп, чтобы откупиться от провала квеста
// необходимо сохранить ид каравана в уникальную переменную, чтобы потом использовать при генерации лексем
// для этого используется LastSelectedCaravan
void r_SetSelectedCaravan(Critter player, Critter npc, int crvId)
{
    if (!valid(npc)) {
        return;
    }

    auto lastSelectedCaravan = npc.LastSelectedCaravan.clone();
    lastSelectedCaravan[player.Id] = crvId;
    npc.LastSelectedCaravan = lastSelectedCaravan;
}

bool d_CheckHasEnoughMoney(Critter player, Critter npc, int crvId)
{
    uint cost = GetCrvResetCost(crvId, player);
    if (cost == 0) {
        return false;
    }

    uint money = player.CountItem(Content::Item::bottle_caps);
    return (money >= cost);
}

// Снятия статуса провала с каравана, обновление числа отмывок каравана
void r_ResetCaravanStatus(Critter player, Critter npc, int crvId)
{
    uint cost = GetCrvResetCost(crvId, player);
    if (cost == 0) {
        return;
    }

    uint money = player.CountItem(Content::Item::bottle_caps);
    if (money < cost) {
        return; // Не хватает денег на погашение провала
    }

    Item item = player.GetItem(Content::Item::bottle_caps);
    if (!valid(item)) {
        return;
    }

    Game.DeleteItem(item, cost);

    int val = player.GetAsInt(CritterProperty(CELL(RowIndex(crvId), 2)));
    player.SetAsInt(CritterProperty(CELL(RowIndex(crvId), 2)), val - 1);
    player.SetAsInt(CritterProperty(CELL(RowIndex(crvId), 1)), 0);
}

/* **************************************** Массив описаний ***************************************** */
CaravanInfo[] Caravans = {};
/* ************************************ Инициализация караванов ************************************* */
void CaravansInit()
{
    // CARAVAN_WADE_REDD_VC
    _SetupCaravan(CARAVAN_WADE_REDD_VC, CRV_TYPE_TWOWAY, 2, CritterProperty::ReddWadeCaravanEscort, 5);
    _SetupCaravanLeader(CARAVAN_WADE_REDD_VC,
                        Content::Dialog::redd_wade,
                        Content::Critter::Wade,
                        Bags::VaultCityMilitary,
                        Teams::QuestNpc,
                        Fallout2AIPackets::Peasants,
                        8);
    _SetupCaravanLiderPosition(CARAVAN_WADE_REDD_VC, Content::Location::redding, Content::Map::redding_outer, 61, 52, true);
    _SetupCaravanLiderPosition(CARAVAN_WADE_REDD_VC, Content::Location::vault_city, Content::Map::vcity_courtyard, 116, 62, false);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 675, 525);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 617, 578);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 457, 464);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 520, 208);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 578, 138);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 932, 138);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 969, 205);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 1045, 210);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 1084, 249);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 1175, 240);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 1228, 277);
    _AddRoutePoint(CARAVAN_WADE_REDD_VC, 1225, 325);
    _AddGuardInfo(CARAVAN_WADE_REDD_VC,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_WADE_REDD_VC,
                  Content::Critter::Redd_Vc_male_guard,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::VaultCityMilitary,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  45,
                  false);
    _AddGuardInfo(CARAVAN_WADE_REDD_VC,
                  Content::Critter::Redd_Vc_black_guard,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::CaravanBlackGuard,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  100,
                  false);
    _AddGuardInfo(CARAVAN_WADE_REDD_VC,
                  Content::Critter::Redd_Vc_black_guard,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::CaravanBlackGuard,
                  Teams::QuestNpc,
                  50,
                  0,
                  0,
                  5,
                  false);
    _AddGuardInfo(CARAVAN_WADE_REDD_VC,
                  Content::Critter::VaultCityPatrolFemale,
                  Content::Dialog::crvg_common_female,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolFemale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  40,
                  true);
    _AddGuardInfo(CARAVAN_WADE_REDD_VC,
                  Content::Critter::Redd_Vc_female_guard,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::VaultCityMilitary,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  75,
                  false);
    _SetupCaravanCabs(CARAVAN_WADE_REDD_VC, Game.Random(2, 3));
    // основной маршрут
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::bottle_caps, 200, 1000, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::bottle_caps, 100, 200, 35, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::bottle_caps, 1000, 2000, 10, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::gold_nugget, 10, 20, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::gold_nugget, 3, 5, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::gold_nugget, 4, 7, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, 0, Content::Item::flare, 1, 3, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, 2, Content::Item::flare, 1, 3, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, 1, Content::Item::flare, 1, 3, 100, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::morning_star_mine, 10, 30, 50, false);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::kokoweef_mine_scrip, 1, 20, 50, false);
    // обратный маршрут
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::bottle_caps, 200, 400, 100, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::stimpak, 2, 5, 100, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::first_aid_book, 1, 2, 30, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::stimpak, 1, 4, 50, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::super_stimpak, 1, 2, 100, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::jet_antidote, 1, 1, 10, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::radaway, 1, 2, 45, true);
    _AddLootToCaravanCabs(CARAVAN_WADE_REDD_VC, -1, Content::Item::stimpak, 2, 3, 90, true);

    _SheduleCaravan(CARAVAN_WADE_REDD_VC, 0, 9, 0, 12);

    // CARAVAN_SAVINEL_REDD_NR
    _SetupCaravan(CARAVAN_SAVINEL_REDD_NR, CRV_TYPE_TWOWAY, 1, CritterProperty::ReddSavinelCaravanEscort, 6);
    _SetupCaravanLeader(CARAVAN_SAVINEL_REDD_NR,
                        Content::Dialog::redd_savinel,
                        Content::Critter::MaleGunThug,
                        BAG_Savinelly,
                        Teams::QuestNpc,
                        Fallout2AIPackets::Thugs,
                        15);
    _SetupCaravanLiderPosition(CARAVAN_SAVINEL_REDD_NR, Content::Location::redding, Content::Map::redding_outer, 37, 101, true);
    _SetupCaravanLiderPosition(CARAVAN_SAVINEL_REDD_NR, Content::Location::new_reno, Content::Map::newr1, 75, 124, false);
    _AddRoutePoint(CARAVAN_SAVINEL_REDD_NR, 675, 525); // redding
    _AddRoutePoint(CARAVAN_SAVINEL_REDD_NR, 682, 668);
    _AddRoutePoint(CARAVAN_SAVINEL_REDD_NR, 721, 730);
    _AddRoutePoint(CARAVAN_SAVINEL_REDD_NR, 756, 913);
    _AddRoutePoint(CARAVAN_SAVINEL_REDD_NR, 925, 925); // new reno
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::BountyHunter_9,
                  Content::Dialog::crvg_gekkon,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  20,
                  2,
                  0,
                  25,
                  true);
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::MaleGunThug,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::RDRCBHCaravanBigGunGuardMale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  80,
                  false);
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::MaleGunThug,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::NavarroEnclavePatrolMale2,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  80,
                  false);
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::FemaleGunThug,
                  Content::Dialog::crvg_common_female,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::RDRCBHCaravanBigGunGuardFemale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  65,
                  false);
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::AgileFemaleThug,
                  Content::Dialog::crvg_common_female,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFBand1MercenearyFemale2,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  35,
                  false);
    // Бомбермен
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_bomberman,
                  _BomberInit,
                  Fallout2AIPackets::SporePlant,
                  Bags::Empty,
                  Teams::QuestNpc,
                  12,
                  1,
                  3,
                  5,
                  true);
    // Анаферон
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::FemaleHunter,
                  Content::Dialog::crvg_anaferon,
                  _AnaferonInit,
                  Fallout2AIPackets::PartyVicDefensive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  2,
                  0,
                  5,
                  true);
    // Находчивый Василий
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_vasiliy,
                  _VasyaInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  3,
                  1,
                  5,
                  true);
    // Киллелпролол
    _AddGuardInfo(CARAVAN_SAVINEL_REDD_NR,
                  Content::Critter::NCRRangerMale,
                  Content::Dialog::crvg_killerlolpro,
                  _KillerInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  30,
                  1,
                  2,
                  5,
                  true);

    _SetupCaravanCabs(CARAVAN_SAVINEL_REDD_NR, Game.Random(1, 2));
    // основной маршрут
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::bottle_caps, 200, 1000, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::bottle_caps, 100, 200, 35, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::bottle_caps, 1000, 2000, 10, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::gold_nugget, 10, 20, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::gold_nugget, 3, 5, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::gold_nugget, 4, 7, 50, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, 0, Content::Item::flare, 5, 7, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::morning_star_mine, 10, 30, 50, false);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::kokoweef_mine_scrip, 1, 20, 50, false);
    // обратный маршрут
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::bottle_caps, 200, 1000, 100, true);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::mentats, 1, 3, 35, true);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::psycho, 3, 4, 35, true);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::jet, 3, 35, 45, true);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::jet, 10, 12, 100, true);
    _AddLootToCaravanCabs(CARAVAN_SAVINEL_REDD_NR, -1, Content::Item::jet, 1, 2, 35, true);

    _SheduleCaravan(CARAVAN_SAVINEL_REDD_NR, 0, 10, 0, 15);

    // CARAVAN_STANWELL_REDD_NCR
    _SetupCaravan(CARAVAN_STANWELL_REDD_NCR, CRV_TYPE_TWOWAY, 2, CritterProperty::ReddStanCaravanEscort, 8);
    _SetupCaravanLeader(CARAVAN_STANWELL_REDD_NCR,
                        Content::Dialog::redd_stanwell,
                        Content::Critter::Stanwell,
                        BAG_Stanwell,
                        Teams::QuestNpc,
                        Fallout2AIPackets::GenericGuards,
                        21);
    _SetupCaravanLiderPosition(CARAVAN_STANWELL_REDD_NCR, Content::Location::redding, Content::Map::redding_outer, 28, 79, true);
    _SetupCaravanLiderPosition(CARAVAN_STANWELL_REDD_NCR, Content::Location::ncr, Content::Map::ncr_bazaar, 35, 82, false);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 675, 525); // redding
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 663, 573);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 631, 592);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 668, 640);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 735, 1188);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 841, 1329);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 1006, 1397);
    _AddRoutePoint(CARAVAN_STANWELL_REDD_NCR, 1125, 1425); // ncr

    _AddGuardInfo(CARAVAN_STANWELL_REDD_NCR,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  15,
                  0,
                  0,
                  100,
                  false);
    _AddGuardInfo(CARAVAN_STANWELL_REDD_NCR,
                  Content::Critter::VaultCityPatrolFemale,
                  Content::Dialog::crvg_common_female,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolFemale,
                  Teams::QuestNpc,
                  15,
                  0,
                  0,
                  80,
                  false);
    _AddGuardInfo(CARAVAN_STANWELL_REDD_NCR,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::RDRCBHCaravanBigGunGuardMale,
                  Teams::QuestNpc,
                  18,
                  0,
                  0,
                  25,
                  false);

    _SetupCaravanCabs(CARAVAN_STANWELL_REDD_NCR, Game.Random(1, 2));
    // основной маршрут
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::bottle_caps, 200, 1000, 100, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::bottle_caps, 100, 200, 35, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::bottle_caps, 1000, 2000, 10, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::gold_nugget, 10, 20, 100, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::gold_nugget, 3, 5, 100, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::gold_nugget, 4, 7, 50, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, 0, Content::Item::flare, 5, 7, 100, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::morning_star_mine, 10, 30, 50, false);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::kokoweef_mine_scrip, 1, 20, 50, false);
    // обратный маршрут
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::bottle_caps, 2200, 3000, 100, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::brahmin_skin, 10, 15, 100, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::brahmin_skin, 5, 7, 80, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::meat, 12, 15, 100, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::meat, 3, 5, 55, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::meat_jerky, 22, 25, 100, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::meat_jerky, 2, 4, 25, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::v15_computer_part, 1, 5, 25, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::motor, 1, 1, 2, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::bottle_full, 8, 25, 100, true);
    _AddLootToCaravanCabs(CARAVAN_STANWELL_REDD_NCR, -1, Content::Item::bottle_full, 3, 4, 44, true);
    _SheduleCaravan(CARAVAN_STANWELL_REDD_NCR, 0, 5, 0, 8);

    // CARAVAN_HAL_NCR_REDD
    _SetupCaravan(CARAVAN_HAL_NCR_REDD, CRV_TYPE_ONEWAY_TRANSITLEADER, 2, CritterProperty::NcrReddingCaravanEscort, 10);
    _SetupCaravanLeader(CARAVAN_HAL_NCR_REDD, Content::Dialog::ncr_hal, Content::Critter::Hal, BAG_Hal, Teams::QuestNpc, Fallout2AIPackets::ToughGuard, 21);
    _SetupCaravanLiderPosition(CARAVAN_HAL_NCR_REDD, Content::Location::ncr, Content::Map::ncr_downtown, 154, 80, true);
    _SetupCaravanLiderPosition(CARAVAN_HAL_NCR_REDD, Content::Location::redding, Content::Map::redding_outer, 73, 86, false);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 1125, 1425); // ncr
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 1006, 1397);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 841, 1329);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 735, 1188);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 668, 640);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 631, 592);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 663, 573);
    _AddRoutePoint(CARAVAN_HAL_NCR_REDD, 675, 525); // redding
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  100,
                  false);
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::VaultCityPatrolFemale,
                  Content::Dialog::crvg_common_female,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolFemale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  80,
                  false);
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::RDRCBHCaravanBigGunGuardMale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  80,
                  false);
    // брамины/ 15 штук
    for (uint i = 0; i < 15; i++) {
        _AddFollowerInfo(CARAVAN_HAL_NCR_REDD, Content::Critter::Brahmin3, EMPTY_HSTRING, Teams::QuestNpc, Bags::Empty);
    }
    // специальные охранники, можно копировать в любой караван, только поставить правильный код. У таких охранников обязательно указывать isUnique = true
    // Отец Петреску
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::ElronologistMale,
                  Content::Dialog::crvg_petresku,
                  _PetreskuInit,
                  Fallout2AIPackets::PartySulikBerserk,
                  Bags::Empty,
                  Teams::QuestNpc,
                  20,
                  2,
                  0,
                  25,
                  true);
    // Mazzy
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::Nightkin,
                  Content::Dialog::crvg_mazzy,
                  _MazzyInit,
                  Fallout2AIPackets::PartyLennyBerserk,
                  Bags::Empty,
                  Teams::QuestNpc,
                  9,
                  3,
                  0,
                  15,
                  true);
    // Бомбермен
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_bomberman,
                  _BomberInit,
                  Fallout2AIPackets::SporePlant,
                  Bags::Empty,
                  Teams::QuestNpc,
                  12,
                  1,
                  3,
                  15,
                  true);
    // Анаферон
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::FemaleHunter,
                  Content::Dialog::crvg_anaferon,
                  _AnaferonInit,
                  Fallout2AIPackets::PartyVicDefensive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  2,
                  0,
                  15,
                  true);
    // Находчивый Василий
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_vasiliy,
                  _VasyaInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  3,
                  1,
                  15,
                  true);
    // Киллелпролол
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::NCRRangerMale,
                  Content::Dialog::crvg_killerlolpro,
                  _KillerInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  30,
                  1,
                  2,
                  15,
                  true);
    // Зомби
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::ToughGhoul,
                  Content::Dialog::crvg_zombie,
                  _ZombieInit,
                  Fallout2AIPackets::PartySulikCustom,
                  Bags::Empty,
                  Teams::QuestNpc,
                  15,
                  4,
                  0,
                  15,
                  true);
    // Рэт
    _AddGuardInfo(CARAVAN_HAL_NCR_REDD,
                  Content::Critter::ToughFemaleThug,
                  Content::Dialog::crvg_rat,
                  _RatInit,
                  Fallout2AIPackets::PartyMacraeAggressive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  12,
                  1,
                  0,
                  22,
                  true);
    _SheduleCaravan(CARAVAN_HAL_NCR_REDD, 0, 10, 0, 14);

    // CARAVAN_KIT_BH_GECKO
    _SetupCaravan(CARAVAN_KIT_BH_GECKO, CRV_TYPE_ONEWAY_DELETELEADER, 2, CritterProperty::BHKitCaravanEscort, 5);
    _SetupCaravanLeader(CARAVAN_KIT_BH_GECKO,
                        Content::Dialog::bh_kit,
                        Content::Critter::MaleGunThug,
                        Bags::VaultCityMilitary,
                        Teams::QuestNpc,
                        Fallout2AIPackets::BountyHunter,
                        11);
    _SetupCaravanLiderPosition(CARAVAN_KIT_BH_GECKO, Content::Location::broken_hills, Content::Map::broken, 239, 114, true);
    _SetupCaravanLiderPosition(CARAVAN_KIT_BH_GECKO, Content::Location::gecko, Content::Map::gecko_settlement, 57, 31, false);
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1175, 875); // bh
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1304, 615);
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1306, 490);
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1341, 446);
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1313, 342);
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1265, 296);
    _AddRoutePoint(CARAVAN_KIT_BH_GECKO, 1275, 225); // gecko

    _AddGuardInfo(CARAVAN_KIT_BH_GECKO,
                  Content::Critter::FemaleHunter,
                  Content::Dialog::crvg_anaferon,
                  _AnaferonInit,
                  Fallout2AIPackets::PartyVicDefensive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  2,
                  0,
                  25,
                  true);
    _AddGuardInfo(CARAVAN_KIT_BH_GECKO,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_vasiliy,
                  _VasyaInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  3,
                  1,
                  25,
                  true);
    _AddGuardInfo(CARAVAN_KIT_BH_GECKO,
                  Content::Critter::ToughGhoul,
                  Content::Dialog::crvg_zombie,
                  _ZombieInit,
                  Fallout2AIPackets::PartySulikCustom,
                  Bags::Empty,
                  Teams::QuestNpc,
                  15,
                  4,
                  0,
                  25,
                  true);
    _AddGuardInfo(CARAVAN_KIT_BH_GECKO,
                  Content::Critter::MaleGunThug,
                  Content::Dialog::crvg_common_male,
                  _BHCaravanGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::VaultCityMilitary,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  100,
                  false);
    _AddGuardInfo(CARAVAN_KIT_BH_GECKO,
                  Content::Critter::FemaleGunThug,
                  Content::Dialog::crvg_common_female,
                  _BHCaravanGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::VaultCityMilitary,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  65,
                  false);

    _AddFollowerInfo(CARAVAN_KIT_BH_GECKO, Content::Critter::ToughGhoul, Content::Dialog::bh_ghoul_follower, Teams::QuestNpc, Bags::Empty);
    _AddFollowerInfo(CARAVAN_KIT_BH_GECKO, Content::Critter::ToughGhoul, Content::Dialog::bh_ghoul_follower, Teams::QuestNpc, Bags::Empty);
    _AddFollowerInfo(CARAVAN_KIT_BH_GECKO, Content::Critter::ToughGhoul, Content::Dialog::bh_ghoul_follower, Teams::QuestNpc, Bags::Empty);
    _AddFollowerInfo(CARAVAN_KIT_BH_GECKO, Content::Critter::ToughGhoul, Content::Dialog::bh_ghoul_follower, Teams::QuestNpc, Bags::Empty);

    _SetupCaravanCabs(CARAVAN_KIT_BH_GECKO, 1);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::bottle_caps, 200, 1000, 100, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::bottle_caps, 100, 200, 35, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::uranium_ore, 2, 5, 100, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::uranium_ore, 1, 3, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::_223_fmj, 12, 100, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::_223_fmj, 15, 50, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::_223_fmj, 1, 200, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::_223_fmj, 1, 300, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::shotgun_shells, 35, 100, 75, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::shotgun_shells, 15, 50, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::shotgun_shells, 1, 200, 25, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::meat, 3, 5, 55, false);
    _AddLootToCaravanCabs(CARAVAN_KIT_BH_GECKO, -1, Content::Item::meat_jerky, 22, 25, 100, false);
    _SheduleCaravan(CARAVAN_KIT_BH_GECKO, 0, 6, 0, 10);

    // PATROL_HATE_NCR
    _SetupCaravan(PATROL_HATE_NCR, CRV_TYPE_ONEWAY_DELETELEADER, 2, CritterProperty::NcrHatePatrol, 7);
    _SetupCaravanLeader(PATROL_HATE_NCR,
                        Content::Dialog::ncr_hate,
                        Content::Critter::BlackArmoredRebel,
                        Bags::SFCaravanVaultCityPatrolMale,
                        Teams::QuestNpc,
                        Fallout2AIPackets::BountyHunter,
                        150);
    _SetupCaravanLiderPosition(PATROL_HATE_NCR, Content::Location::ncr, Content::Map::ncr_bazaar, 119, 79, true);
    _SetupCaravanLiderPosition(PATROL_HATE_NCR, Content::Location::ncr, Content::Map::ncr_bazaar, 119, 79, false);
    _AddRoutePoint(PATROL_HATE_NCR, 1125, 1425); // ncr
    _AddRoutePoint(PATROL_HATE_NCR, 1225, 1425);
    _AddRoutePoint(PATROL_HATE_NCR, 1143, 1308);
    _AddRoutePoint(PATROL_HATE_NCR, 1058, 1436);
    _AddRoutePoint(PATROL_HATE_NCR, 1038, 1488);
    _AddRoutePoint(PATROL_HATE_NCR, 1207, 1475);
    _AddRoutePoint(PATROL_HATE_NCR, 1219, 1335);
    _AddRoutePoint(PATROL_HATE_NCR, 1125, 1425); // ncr
    _AddGuardInfo(PATROL_HATE_NCR,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_ncr_patroller,
                  _NcrRangerPatrolInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  15,
                  0,
                  0,
                  100,
                  false);
    _SheduleCaravan(PATROL_HATE_NCR, 0, 21, 0, 22);

    // PATROL_SHRIM_VC
    _SetupCaravan(PATROL_SHRIM_VC, CRV_TYPE_ONEWAY_DELETELEADER, 2, CritterProperty::VCShrimPatrol, 5);
    _SetupCaravanLeader(PATROL_SHRIM_VC,
                        Content::Dialog::vc_shrim,
                        Content::Critter::BlackArmoredRebel,
                        Bags::AllBountyHunters10,
                        Teams::QuestNpc,
                        Fallout2AIPackets::VaultGuard,
                        50);
    _SetupCaravanLiderPosition(PATROL_SHRIM_VC, Content::Location::vault_city, Content::Map::vcity_courtyard, 58, 86, true);
    _SetupCaravanLiderPosition(PATROL_SHRIM_VC, Content::Location::vault_city, Content::Map::vcity_courtyard, 58, 86, false);
    _AddRoutePoint(PATROL_SHRIM_VC, 1225, 325); // vc
    _AddRoutePoint(PATROL_SHRIM_VC, 1207, 383);
    _AddRoutePoint(PATROL_SHRIM_VC, 1154, 303);
    _AddRoutePoint(PATROL_SHRIM_VC, 1186, 263);
    _AddRoutePoint(PATROL_SHRIM_VC, 1253, 245);
    _AddRoutePoint(PATROL_SHRIM_VC, 1279, 309);
    _AddRoutePoint(PATROL_SHRIM_VC, 1265, 414);
    _AddRoutePoint(PATROL_SHRIM_VC, 1225, 325); // vc
    _AddGuardInfo(PATROL_SHRIM_VC,
                  Content::Critter::VCGuardsman,
                  Content::Dialog::vc_patroller,
                  _VCPatrolInit,
                  Fallout2AIPackets::VaultGuard,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  15,
                  0,
                  0,
                  100,
                  false);
    _SheduleCaravan(PATROL_SHRIM_VC, 0, 1, 0, 23);

    // CARAVAN_SELMA_ARR_VC
    _SetupCaravan(CARAVAN_SELMA_ARR_VC, CRV_TYPE_TWOWAY, 2, CritterProperty::ArroyoSelmaCaravanEscort, 6);
    _SetupCaravanLeader(CARAVAN_SELMA_ARR_VC,
                        Content::Dialog::arroyo_selma,
                        Content::Critter::NomadMed2,
                        131,
                        Teams::QuestNpc,
                        Fallout2AIPackets::VaultGuard,
                        20);
    _SetupCaravanLiderPosition(CARAVAN_SELMA_ARR_VC, Content::Location::arroyo, Content::Map::arroyo_bridge, 64, 73, true);
    _SetupCaravanLiderPosition(CARAVAN_SELMA_ARR_VC, Content::Location::vault_city, Content::Map::vcity_courtyard, 135, 108, false);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 175, 125);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 400, 265);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 571, 138);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 934, 138);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 964, 212);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 1043, 210);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 1207, 270);
    _AddRoutePoint(CARAVAN_SELMA_ARR_VC, 1225, 325);
    _SetupCaravanCabs(CARAVAN_SELMA_ARR_VC, 2);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::cookie, 1, 2, 15, false);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::meat_jerky, 6, 13, 50, false);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::meat, 5, 8, 50, false);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::bottle_full, 12, 25, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::brahmin_skin, 1, 23, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::gecko_pelt, 1, 32, 100, false);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::bottle_caps, 2200, 3000, 100, true);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::stimpak, 5, 9, 100, true);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::hypo, 1, 1, 10, true);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::mentats, 2, 3, 50, true);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::first_aid_kit, 1, 2, 75, true);
    _AddLootToCaravanCabs(CARAVAN_SELMA_ARR_VC, -1, Content::Item::paramedics_bag, 1, 1, 100, true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::ElronologistMale,
                  Content::Dialog::crvg_petresku,
                  _PetreskuInit,
                  Fallout2AIPackets::PartySulikBerserk,
                  Bags::Empty,
                  Teams::QuestNpc,
                  20,
                  2,
                  0,
                  25,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::Nightkin,
                  Content::Dialog::crvg_mazzy,
                  _MazzyInit,
                  Fallout2AIPackets::PartyLennyBerserk,
                  Bags::Empty,
                  Teams::QuestNpc,
                  9,
                  3,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_bomberman,
                  _BomberInit,
                  Fallout2AIPackets::SporePlant,
                  Bags::Empty,
                  Teams::QuestNpc,
                  12,
                  1,
                  3,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::FemaleHunter,
                  Content::Dialog::crvg_anaferon,
                  _AnaferonInit,
                  Fallout2AIPackets::PartyVicDefensive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  2,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_vasiliy,
                  _VasyaInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  8,
                  3,
                  1,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::NCRRangerMale,
                  Content::Dialog::crvg_killerlolpro,
                  _KillerInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  30,
                  1,
                  2,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::ToughGhoul,
                  Content::Dialog::crvg_zombie,
                  _ZombieInit,
                  Fallout2AIPackets::PartySulikCustom,
                  Bags::Empty,
                  Teams::QuestNpc,
                  15,
                  4,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::ToughFemaleThug,
                  Content::Dialog::crvg_rat,
                  _RatInit,
                  Fallout2AIPackets::PartyMacraeAggressive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  12,
                  1,
                  0,
                  32,
                  true);
    _AddGuardInfo(CARAVAN_SELMA_ARR_VC,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  100,
                  false);
    _SheduleCaravan(CARAVAN_SELMA_ARR_VC, 0, 12, 0, 14);

    // CARAVAN_GAYZUN_ARR_SF
    _SetupCaravan(CARAVAN_GAYZUN_ARR_SF, CRV_TYPE_TWOWAY, 2, CritterProperty::ArroyoGayzumCaravanEscort, 9);
    _SetupCaravanLeader(CARAVAN_GAYZUN_ARR_SF,
                        Content::Dialog::arroyo_gayzum,
                        Content::Critter::MaleSlaver,
                        131,
                        Teams::QuestNpc,
                        Fallout2AIPackets::GenericGuards,
                        40);
    _SetupCaravanLiderPosition(CARAVAN_GAYZUN_ARR_SF, Content::Location::arroyo, Content::Map::arroyo_bridge, 63, 76, true);
    _SetupCaravanLiderPosition(CARAVAN_GAYZUN_ARR_SF, Content::Location::san_francisco, Content::Map::sf_china, 118, 95, false);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 175, 125);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 430, 499);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 580, 619);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 562, 696);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 568, 892);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 534, 899);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 612, 1216);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 599, 1401);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 580, 1429);
    _AddRoutePoint(CARAVAN_GAYZUN_ARR_SF, 475, 1325);
    _SetupCaravanCabs(CARAVAN_GAYZUN_ARR_SF, 2);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::gecko_pelt, 1, 32, 100, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::meat_jerky, 6, 13, 50, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::meat, 5, 8, 50, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::bottle_full, 12, 25, 100, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::brahmin_skin, 1, 23, 100, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::gecko_pelt, 1, 32, 100, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::bottle_caps, 100, 3000, 100, false);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::small_energy_cell, 100, 500, 100, true);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::micro_fusion_cell, 12, 100, 100, true);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::electronic_lockpicks, 1, 2, 75, true);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::multi_tool, 1, 2, 75, true);
    _AddLootToCaravanCabs(CARAVAN_GAYZUN_ARR_SF, -1, Content::Item::v15_computer_part, 10, 30, 100, true);
    _AddGuardInfo(CARAVAN_GAYZUN_ARR_SF,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  35,
                  0,
                  0,
                  100,
                  false);
    _AddGuardInfo(CARAVAN_GAYZUN_ARR_SF,
                  Content::Critter::NCRRangerMale,
                  Content::Dialog::crvg_killerlolpro,
                  _KillerInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  30,
                  1,
                  2,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_GAYZUN_ARR_SF,
                  Content::Critter::ToughGhoul,
                  Content::Dialog::crvg_zombie,
                  _ZombieInit,
                  Fallout2AIPackets::PartySulikCustom,
                  Bags::Empty,
                  Teams::QuestNpc,
                  55,
                  4,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_GAYZUN_ARR_SF,
                  Content::Critter::ToughFemaleThug,
                  Content::Dialog::crvg_rat,
                  _RatInit,
                  Fallout2AIPackets::PartyMacraeAggressive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  55,
                  1,
                  0,
                  12,
                  true);
    _AddGuardInfo(CARAVAN_GAYZUN_ARR_SF,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  35,
                  0,
                  0,
                  100,
                  false);
    _SheduleCaravan(CARAVAN_GAYZUN_ARR_SF, 0, 17, 0, 19);

    // CARAVAN_LAUMER_ARR_NCR
    _SetupCaravan(CARAVAN_LAUMER_ARR_NCR, CRV_TYPE_TWOWAY, 2, CritterProperty::ArroyoLaumerCaravanEscort, 10);
    _SetupCaravanLeader(CARAVAN_LAUMER_ARR_NCR,
                        Content::Dialog::arroyo_laumer,
                        Content::Critter::BanditMale,
                        29,
                        Teams::QuestNpc,
                        Fallout2AIPackets::GenericGuards,
                        45);
    _SetupCaravanLiderPosition(CARAVAN_LAUMER_ARR_NCR, Content::Location::arroyo, Content::Map::arroyo_bridge, 63, 72, true);
    _SetupCaravanLiderPosition(CARAVAN_LAUMER_ARR_NCR, Content::Location::ncr, Content::Map::ncr_bazaar, 77, 84, false);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 175, 125);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 434, 501);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 582, 594);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 656, 941);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 795, 1343);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 1017, 1408);
    _AddRoutePoint(CARAVAN_LAUMER_ARR_NCR, 1125, 1425);
    _SetupCaravanCabs(CARAVAN_LAUMER_ARR_NCR, 3);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::gecko_pelt, 1, 32, 100, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::meat_jerky, 6, 13, 50, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::meat, 5, 8, 50, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::bottle_full, 12, 25, 100, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::brahmin_skin, 1, 23, 100, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::gecko_pelt, 1, 32, 100, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::bottle_caps, 100, 3000, 100, false);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::doctors_bag, 1, 2, 100, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::motor, 1, 1, 100, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::chemicals, 5, 10, 100, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::plasma_transformer, 2, 3, 100, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::robot_motivator, 1, 2, 100, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::plasma_rifle, 1, 2, 75, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::magneto_laser_pistol, 1, 2, 50, true);
    _AddLootToCaravanCabs(CARAVAN_LAUMER_ARR_NCR, -1, Content::Item::welding, 5, 12, 75, true);
    _AddGuardInfo(CARAVAN_LAUMER_ARR_NCR,
                  Content::Critter::NCRRangerMale,
                  Content::Dialog::crvg_killerlolpro,
                  _KillerInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::Empty,
                  Teams::QuestNpc,
                  30,
                  1,
                  2,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_LAUMER_ARR_NCR,
                  Content::Critter::ToughGhoul,
                  Content::Dialog::crvg_zombie,
                  _ZombieInit,
                  Fallout2AIPackets::PartySulikCustom,
                  Bags::Empty,
                  Teams::QuestNpc,
                  55,
                  4,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_LAUMER_ARR_NCR,
                  Content::Critter::ToughFemaleThug,
                  Content::Dialog::crvg_rat,
                  _RatInit,
                  Fallout2AIPackets::PartyMacraeAggressive,
                  Bags::Empty,
                  Teams::QuestNpc,
                  55,
                  1,
                  0,
                  11,
                  true);
    _AddGuardInfo(CARAVAN_LAUMER_ARR_NCR,
                  Content::Critter::VaultCityPatrolMale,
                  Content::Dialog::crvg_common_male,
                  _DefaultGuardInitUnlimAmmo,
                  Fallout2AIPackets::BountyHunter,
                  Bags::SFCaravanVaultCityPatrolMale,
                  Teams::QuestNpc,
                  45,
                  0,
                  0,
                  100,
                  false);
    _SheduleCaravan(CARAVAN_LAUMER_ARR_NCR, 0, 6, 0, 10);

    // CARAVAN_HOSE_MOD_GECKO
    _SetupCaravan(CARAVAN_HOSE_MOD_GECKO, CRV_TYPE_ONEWAY_DELETELEADER, 1, CritterProperty::ModAurelianoCaravanEscort, 6);
    _SetupCaravanLeader(CARAVAN_HOSE_MOD_GECKO,
                        Content::Dialog::mod_aureliano,
                        Content::Critter::WeakGunGuard,
                        102,
                        Teams::QuestNpc,
                        Fallout2AIPackets::GenericGuards,
                        22);
    _SetupCaravanLiderPosition(CARAVAN_HOSE_MOD_GECKO, Content::Location::modoc, Content::Map::modoc, 114, 90, true);
    _SetupCaravanLiderPosition(CARAVAN_HOSE_MOD_GECKO, Content::Location::gecko, Content::Map::gecko_settlement, 59, 32, false);
    _AddRoutePoint(CARAVAN_HOSE_MOD_GECKO, 925, 275);
    _AddRoutePoint(CARAVAN_HOSE_MOD_GECKO, 973, 210);
    _AddRoutePoint(CARAVAN_HOSE_MOD_GECKO, 1024, 226);
    _AddRoutePoint(CARAVAN_HOSE_MOD_GECKO, 1216, 265);
    _AddRoutePoint(CARAVAN_HOSE_MOD_GECKO, 1275, 225);
    for (uint i = 0; i < 20; i++) {
        _AddFollowerInfo(CARAVAN_HOSE_MOD_GECKO, Content::Critter::Brahmin3, EMPTY_HSTRING, Teams::QuestNpc, Bags::Empty);
    }
    _AddGuardInfo(CARAVAN_HOSE_MOD_GECKO,
                  Content::Critter::Nightkin,
                  Content::Dialog::crvg_mazzy,
                  _MazzyInit,
                  Fallout2AIPackets::PartyLennyBerserk,
                  Bags::Empty,
                  Teams::QuestNpc,
                  9,
                  3,
                  0,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_HOSE_MOD_GECKO,
                  Content::Critter::ToughMaleThug,
                  Content::Dialog::crvg_bomberman,
                  _BomberInit,
                  Fallout2AIPackets::SporePlant,
                  Bags::Empty,
                  Teams::QuestNpc,
                  12,
                  1,
                  3,
                  15,
                  true);
    _AddGuardInfo(CARAVAN_HOSE_MOD_GECKO,
                  Content::Critter::MaleGunThug,
                  Content::Dialog::crvg_common_male,
                  _BHCaravanGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::VaultCityMilitary,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  100,
                  false);
    _AddGuardInfo(CARAVAN_HOSE_MOD_GECKO,
                  Content::Critter::FemaleGunThug,
                  Content::Dialog::crvg_common_female,
                  _BHCaravanGuardInit,
                  Fallout2AIPackets::BountyHunter,
                  Bags::VaultCityMilitary,
                  Teams::QuestNpc,
                  10,
                  0,
                  0,
                  65,
                  false);
    _SheduleCaravan(CARAVAN_HOSE_MOD_GECKO, 0, 8, 0, 12);
}

/* **************************************** Основные методы ***************************************** */
// караван по идентификатору
CaravanInfo _GetCaravan(uint idCaravan)
{
    if (!valid(Caravans)) {
        return null;
    }
    if (Caravans.length() == 0) {
        return null;
    }

    for (uint i = 0; i < Caravans.length(); i++) {
        if (Caravans[i].CaravanId == idCaravan) {
            return Caravans[i];
        }
    }
    return null;
}

// добавление нового описания караванов
// idCaravan - код каравана
// crvType = тип каравана
// speed = множитель скорости движения по глобальной карте
// qVar = номер квестовой переменная для данного каравана
// maxGrp = максимальный размер группы каравана включая игроков и караванщика
void _SetupCaravan(uint idCaravan, uint8 crvType, uint8 speed, CritterProperty qVar, uint8 maxGrp)
{
    // проверяем, что каравана с таким ид нет в массиве
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (valid(ci)) {
        ci.CaravanReset();
    }
    else {
        ci = CaravanInfo();
        Caravans.insertLast(ci);
        ci.CaravanId = idCaravan;
    }
    ci.Type = crvType;
    ci.GlobalSpeedMultiplayer = speed;
    ci.QuestVarNum = qVar;
    ci.MaxGroup = maxGrp;
}

// настройка лидера каравана
// idCaravan - код каравана.
// dialog - номер диалога нпц
// pid = прототип криттера
// bag = номер сумки
// team = номер команды
void _SetupCaravanLeader(uint idCaravan, hstring dialog, hstring pid, uint bag, uint team, uint ai, uint level)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }

    // внимание! если нпц - караван лидер уже был ранее добавлен, об удалении криттера при необходимости, нужно позаботиться дополнительно
    // проверка ci.Leader.Id!=0
    ci.Leader = CaravanLeaderInfo();
    DL2("_SetupCaravanLeader 1. IdCaravan" + ci.CaravanId + "; Level" + ci.Leader.Level);
    ci.Leader.DialogId = dialog;
    ci.Leader.NpcPid = pid;
    ci.Leader.BagId = bag;
    ci.Leader.TeamId = team;
    ci.Leader.AiPack = ai;
    ;
    ci.Leader.Level = level;
    DL2("new level" + ci.Leader.Level);
    ci.Leader.CaravanId = idCaravan;
}

// настройка лидера каравана по существующему НПЦ
// idCaravan - код каравана
// leader - нпц проводник. Он должен уже существовать.
void _SetupCaravanLeader(uint idCaravan, Critter leader)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }

    ci.Leader = CaravanLeaderInfo();
    DL2("_SetupCaravanLeader 2. " + idCaravan + " IdCaravan" + ci.CaravanId + "; Level" + ci.Leader.Level);
    ci.Leader.DialogId = leader.DialogId;
    ci.Leader.NpcPid = leader.ProtoId;
    ci.Leader.BagId = leader.BagId;
    ci.Leader.TeamId = leader.TeamId;
    ci.Leader.AiPack = leader.AiId;
    ci.Leader.CaravanId = idCaravan;
    ci.Leader.CritterId = leader.Id;
    DL2("new level" + ci.Leader.Level);
    leader.CaravanCrvId = idCaravan;
}

// настройка положения лидера караванов в исходной и конечной точках
// idCaravan - код каравана.
// locPid - код прототипа локации
// mapPid - код прототипа карты
// x, y - координаты гекса на котором появится нпц
// isStartPos - признак, стартовая или конечная позиция. Если true - устанавливаем StartPos, иначе EndPos
void _SetupCaravanLiderPosition(uint idCaravan, hstring locPid, hstring mapPid, uint16 x, uint16 y, bool isStartPos)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }
    if (!valid(ci.Leader)) {
        return;
    }

    if (isStartPos) {
        ci.Leader.StartPos = NpcPosition(locPid, mapPid, x, y);
    }
    else {
        ci.Leader.EndPos = NpcPosition(locPid, mapPid, x, y);
    }
}

// настройка караванных повозок, появляющихся на локации
// idCaravan - код каравана.
// numCabs - число повозок, которые нужно добавить
void _SetupCaravanCabs(uint idCaravan, uint8 numCabs)
{
    CaravanInfo ci = _GetCaravan(idCaravan);

    if (!valid(ci)) {
        return;
    }
    ci.Cabs.clear();

    for (uint8 i = 0; i < numCabs; i++) {
        ci.Cabs.insertLast(CaravanCabInfo());
    }
}

// добавление описания лута в одну из повозок
// idCaravan - код каравана.
// cabNum - порядковый номер повозки, если <0 лут будет добавлен в рандомную повозку
// itemPid - прототип итема
// minNum - минимальное число
// maxNum - максимальеное число
// chanceAppear - шанс в процентах на появление
void _AddLootToCaravanCabs(uint idCaravan, int8 cabNum, hstring itemPid, uint minNum, uint maxNum, uint8 chanceAppear, bool isReverseRouteLoot)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }

    CaravanCabInfo cab = ci.GetCab(cabNum);
    if (!valid(cab)) {
        return;
    }

    cab.AddLoot(itemPid, minNum, maxNum, chanceAppear, isReverseRouteLoot);
}

// добавление точки маршрута движения по глобалу
// idCaravan - код каравана.
// x - координаты на глобальной карте по оси Х
// у - координаты на глобальной карте по оси У
void _AddRoutePoint(uint idCaravan, uint x, uint y)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }

    ci.AddRoutePoint(x, y);
}

// добавление описания охранника
// idCaravan - код каравана.
// pid - прототип криттера
// dialogId - диалог
// initScript - имя скрипта
// aiPack - пакет АИ
// bagId - сумка
// teamId - команда
// level - уровень
// reaction - скорость реакции на события
// isNervous - уровень "нервозности"
// chanceJoin
// isUnique
void _AddGuardInfo(uint idCaravan, hstring pid, hstring dialogId, CritterInitFunc initScript, uint aiPack, uint bagId, uint teamId, uint level, uint reaction,
                   uint isNervous, uint8 chanceJoin, bool isUnique)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }

    ci.CaravanGuards.insertLast(
        CaravanGuardInfo(idCaravan, pid, dialogId, initScript, aiPack, bagId, teamId, level, reaction, isNervous, chanceJoin, isUnique));
}

// добавление спутников-нпц, не участвующих в заварушке
// idCaravan - код каравана.
// pid - прототип криттера
// dialog - диалог
// team - команда
// bag - инвентарь
void _AddFollowerInfo(uint idCaravan, hstring pid, hstring dialog, uint team, uint bag)
{
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        return;
    }

    CaravanNpcFollowerInfo f = CaravanNpcFollowerInfo();
    if (!valid(f)) {
        return;
    }

    f.CaravanId = idCaravan;
    f.Pid = pid;
    f.DialogId = dialog;
    f.TeamId = team;
    f.BagId = bag;

    ci.Followers.insertLast(f);
}

/* ************************ Расписание движения караванов. Подготовка и начало. ********************* */
// в базе события не сохраняются, поскольку при рестарте сервера караван ломается
// каждый караван отправляется один раз в месяц
// idCaravan - код уже существующего описания каравана
// prepareDay - день, в который проводник начинает принимать заявки на участие
// prepareHour - час в который проводник начинает принимать заявки на участие
// startDay - день отправления караванов
// startHour - час отправления караванов
bool _SheduleCaravan(uint idCaravan, uint prepareDay, uint prepareHour, uint startDay, uint startHour)
{
    any[] values = {};

    values.insertLast(idCaravan);
    values.insertLast(prepareDay);
    values.insertLast(prepareHour);
    values.insertLast(startDay);
    values.insertLast(startHour);

    uint time = Time::GetNearFullSecond(0, 0, prepareDay, prepareHour, 0, 0);
    DL2("_SheduleCaravan idCaravan = " + idCaravan);
    Game.DeferredCall(GAME_SECOND_TO_TICK(time - Game.GetFullSecond()), StartPrepareCaravan, values);
    return true;
}

void StartPrepareCaravan(any[] values)
{
    if (values.length() == 0) {
        Game.Log("Shedule caravan error");
        return;
    }

    uint idCaravan = values[0];
    uint prepareDay = values[1];
    uint prepareHour = values[2];
    uint startDay = values[3];
    uint startHour = values[4];
    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        Game.Log("Can not found CaravanInfo Id=" + idCaravan);
        return;
    }

    if (!valid(ci.Leader)) {
        Game.Log("Invalid LeaderInfo CaravanId=" + idCaravan);
        return;
    }

    DL2("e_PrepareCaravan idCaravan = " + ci.CaravanId + ";");
    if (ci.Leader.CritterId != ZERO_IDENT) {
        Critter leader = ci.Leader.GetLeader();
        if (valid(leader)) {
            if (leader.IsDead()) {
                Game.DeferredCall(GAME_HOUR_TO_TICK(4), StartPrepareCaravan, values);
                return;
            }
        }
    }

    uint time = Time::GetNearFullSecond(0, 0, startDay, startHour, 0, 0);
    Game.DeferredCall(GAME_SECOND_TO_TICK(time - Game.GetFullSecond()), BeginCaravan, values);
    PrepareCaravan(idCaravan);
}

void BeginCaravan(any[] values)
{
    if (values.length() < 5) {
        Game.Log("Shedule caravan error");
        return;
    }

    uint idCaravan = values[0];
    uint prepareDay = values[1];
    uint prepareHour = values[2];
    uint startDay = values[3];
    uint startHour = values[4];

    CaravanInfo ci = _GetCaravan(idCaravan);
    if (!valid(ci)) {
        Game.Log("Can not found CaravanInfo Id=" + idCaravan);
        return;
    }

    if (!valid(ci.Leader)) {
        Game.Log("Invalid LeaderInfo CaravanId=" + idCaravan);
        return;
    }

    StartCaravan(idCaravan);
    Game.DeferredCall(GAME_SECOND_TO_TICK(Time::GetNearFullSecond(0, 0, prepareDay, prepareHour, 0, 0) - Game.GetFullSecond()), StartPrepareCaravan, values);
}

/* **************************** Проводник караванов. Скрипт и обработчики *************************** */
void _CaravanLeaderInit(Critter leader, bool firstTime)
{
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        return;
    }

    CaravanLeaderInfo li = ci.Leader;
    if (valid(li)) {
        li.CritterId = leader.Id;
    }

    if (firstTime) {
        leader.Level = ci.Leader.Level;
        _AmplifyCaravaneer(leader);
    }

    leader.CharismaBase = 10;
    leader.OnGlobalMapProcess.Subscribe(_CaravanLeaderOnGlobal);
    leader.OnDead.Subscribe(_CaravanLeaderOnDead);
    leader.OnSomeCritterDead.Subscribe(_CaravanLeaderOnSeeSmthDead);
    leader.OnGlobalMapInvite.Subscribe(_CaravanLeaderOnInvite);
    leader.OnMessage.Subscribe(_CaravanLeaderOnMessage);
    leader.OnSomeCritterUseSkill.Subscribe(_CaravanLeaderOnSmthUseSkill);
    leader.OnNpcPlaneEnd.Subscribe(_CaravanLeaderOnPlaneEnd);
    _SetEvents(leader, ci.Leader.Virtue);
}

bool _CaravanLeaderOnPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    Map map = cr.GetMap();
    if (valid(map)) {
        if (reason != REASON_SUCCESS && plane.Type == AI_PLANE_WALK && map.IsHexMovable(plane.Walk_HexX, plane.Walk_HexY)) {
            plane.Walk_Cut--;
        }
    }
    return true;
}

// снятие обработчиков, если не известен караван
void _CancelEvents(Critter leader)
{
    leader.OnGlobalMapProcess.Unsubscribe(_CaravanLeaderOnGlobal);
    leader.OnDead.Unsubscribe(_CaravanLeaderOnDead);
    leader.OnSomeCritterDead.Unsubscribe(_CaravanLeaderOnSeeSmthDead);
    leader.OnGlobalMapInvite.Unsubscribe(_CaravanLeaderOnInvite);
    leader.OnMessage.Unsubscribe(_CaravanLeaderOnMessage);
    leader.OnSomeCritterUseSkill.Unsubscribe(_CaravanLeaderOnSmthUseSkill);
    leader.OnNpcPlaneEnd.Unsubscribe(_CaravanLeaderOnPlaneEnd);
}

// при воровстве у караванщиков игрок становится врагом каравана
void _CaravanLeaderOnSmthUseSkill(Critter cr, Critter thief, CritterProperty skill, Critter onCritter, Item onItem, StaticItem onScenery)
{
    if (!valid(onCritter)) {
        return;
    }

    CaravanInfo ci = _GetCaravan(onCritter.CaravanCrvId);
    if (!valid(ci)) {
        return;
    }

    if (skill == CritterProperty::SkillSteal && ci.PlayerIsGuard(onCritter.Id)) {
        _SetPlayerThieft(thief, ci);
        ci.RemoveGuard(thief.Id);
        _PlayerToCaravanEnemy(thief, ci);
    }
}

const uint[] entries = {
    243,
    244,
    0}; // гексы на которых можно поставить, в первую очередь пробуем поставить на точках входа нпц, чтобы игроки были на некотором расстоянии от повозок
void FindCabPlace(Map map, uint[] x, uint[] y, uint maxCabs)
{
    uint16 hX = 0;
    uint16 hY = 0;
    uint16 oX1 = 0; // координаты объекта, повозка№1
    uint16 oY1 = 0;
    uint16 oX2 = 0; // координаты объекта повозка№2
    uint16 oY2 = 0;

    // i - индекс номер гекса в массиве entries
    // j = индекс гекса среди найденных на карте
    // l - число гексов данного номера
    // ents - число номеров гекса в массиве entries
    // tries - число попыток найти место для кабов
    for (uint i = 0, j = 0, tries = 0, l = Entrance::MapCountEntry(map, entries[j]), ents = entries.length(); i < l && j < ents && tries < 30; i++) {
        tries++;
        if (Entrance::MapGetEntryCoords(map, entries[j], i, hX, hY)) {
            // координаты гекса нашли
            // находим позицию в половинном расстоянии
            oX1 = uint(hX - (MIN_DIST_CABS_DIST / 2));                               // смещение по оси х на запад
            oY1 = uint(hY + (MIN_DIST_CABS_DIST / 2) * (1 - Game.Random(0, 1) * 2)); // смещение по оси y на юг или на север
            if (GetFreeHex(map, 1, oX1, oY1)) {
                // считаем, что первая точка найдена
                oX2 = uint(hX + (MIN_DIST_CABS_DIST / 2));                               // смещение по оси х на запад
                oY2 = uint(hY + (MIN_DIST_CABS_DIST / 2) * (1 - Game.Random(0, 1) * 2)); // смещение по оси y на юг или на север

                if (GetFreeHex(map, 1, oX2, oY2)) {
                    // вторая точка тоже найдена
                    // помещаем координаты в массивы
                    x.insertLast(oX1);
                    y.insertLast(oY1);
                    x.insertLast(oX2);
                    y.insertLast(oY2);
                    if (maxCabs > 0 && x.length() > maxCabs) {
                        break;
                    }
                }
            }
        }

        // к следующему номеру гексов, если на предыдушем не нашли ничего
        if (i + 1 == l && j + 1 < ents) {
            j++;
            l = Entrance::MapCountEntry(map, entries[j]);
            i = 0;
        }
    }
}

// сообщение от нпц
void _CaravanLeaderOnMessage(Critter leader, Critter fromCr, int message, any value)
{
    if (message == MSG_WHERE_IS_DA_LEADER) {
        _MoveToCaravanLeader(fromCr, leader, Game.Random(2, 10));
    }
}

// вход на энкаунтер
bool _CaravanLeaderOnInvite(Critter leader, Item car, uint encounterDescriptor, int combatMode, ident mapId, uint16 hexX, uint16 hexY, uint8 dir)
{
    Critter[] group = GlobalmapGroupExtended::GetGlobalGroup(leader);
    Worldmap::InviteToEncounter(group, null, encounterDescriptor, combatMode, mapId, hexX, hexY, dir);
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        return true;
    }

    if (!_CheckHasPlayerInGroup(group)) {
        if (ci.Type == CRV_TYPE_ONEWAY_DELETELEADER || ci.Type == CRV_TYPE_ONEWAY_DELETELEADER_BOTH) {
            ci.CaravanStatus == CRV_STATUS_END;
            Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_TO_DELETE_LEADER), DeleteLeader, leader.Id);
            // Обязательно сохраняем эвент. Иначе можно оказаться с двумя начлаьниками караванов.
        }
        ci.TerminateCaravan();
        return true;
    }

    Map map = Game.GetMap(mapId);
    if (!valid(map)) {
        Game.Log("Invalid map");
        return true;
    }

    ci.CaravanStatus = CRV_STATUS_ON_ENCOUNTER;

    // ищем место для нескольких повозок
    // кладем по две повозки
    // находим место, где можно поставить 2 повозки
    // между повозками расстояние должно быть 7..8 гексов
    uint[] x = {};
    uint[] y = {};
    FindCabPlace(map, x, y, 100); // TODO: поставить нормальное ограничение, сейчас использую для проверки, сколько точек будет найдено

    Item[] cabItems = {};
    for (uint i = 0, lx = x.length(), ly = y.length(), lc = ci.Cabs.length(); i < lx && i < ly && i < lc; i++) {
        Item cab = ci.Cabs[i].PlaceCabOnMap(map, x[i], y[i], ci.IsReversed);

        if (valid(cab)) {
            cabItems.insertLast(cab);
            cab.CaravanCabLeaderId = leader.Id;
            cab.OnCritterUseSkill.Subscribe(_OnTryOpenCabs);
            cab.IsNoBlock = false;
        }
    }

    // располагаем небоевых нпц в составе каравана
    if (cabItems.length() > 0) {
        for (uint j = 0; j < ci.Followers.length(); j++) {
            ci.Followers[j]._AddNpcNearItem(map, cabItems[Game.Random(0, (cabItems.length() - 1))], 8);
        }
        // если есть повозки, проводник ходит от одной к другой
        leader.OnIdle.Subscribe(_CaravanLeaderIdleOnEncounter);
        leader.CaravanIdleCount = 9;
    }
    else {
        if (ci.Followers.length() > 0) {
            Critter firstFollower = ci.Followers[0].AddNpcNearCritter(map, leader, 1);
            if (valid(firstFollower)) {
                for (uint k = 1; k < ci.Followers.length(); k++) {
                    ci.Followers[k]._AddNpcNearCritter(map, firstFollower, 6);
                }
            }
            else {
                for (uint k = 1; k < ci.Followers.length(); k++) {
                    ci.Followers[k]._AddNpcNearCritter(map, leader, 20);
                }
            }
        }
    }
    return true;
}

bool _OnTryOpenCabs(Item item, Critter cr, CritterProperty skill)
{
    // залезть в контейнер можно только, если проводник мертв
    Critter leader = Game.GetCritter(item.CaravanCabLeaderId);
    if (valid(leader)) {
        if (!leader.IsAlive()) {
            return true;
        }

        leader.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Text, STR_DONT_TOUCH);
        return false;
    }
    return true;
}

// при долгом простое, проводник перемещается к одной из повозок
void _CaravanLeaderIdleOnEncounter(Critter leader)
{
    DL("leader enc iddle fired/ Geck" + leader.IsGeck);
    if (leader.CaravanIdleCount > 9) {
        Map map = leader.GetMap();
        if (!valid(map)) {
            return;
        }

        Item[] cabs = map.GetItems(Game.Random(0, 1) == 0 ? Content::Item::wagon_red : Content::Item::wagon_grey);
        if (!cabs.isEmpty()) {
            leader.CaravanIdleCount = 0;
            uint idx = Game.Random(0, cabs.length() - 1);
            uint16 hx = cabs[idx].HexX;
            uint16 hy = cabs[idx].HexY;
            if (GetFreeHex(map, 4, hx, hy)) {
                NpcPlanes::AddWalkPlane(leader, AI_PLANE_WALK_PRIORITY, hx, hy, Game.Random(0, 5), (Game.Random(0, 5) == 1 ? true : false), 1);
            }
        }
    }
    else {
        leader.CaravanIdleCount += 1;
    }
}

// смерть игрока = провал квеста для этого игрока
void _CaravanLeaderOnSeeSmthDead(Critter leader, Critter fromCrit, Critter killer)
{
    DL("_CaravanLeaderOnSeeSmthDead");
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        // перестраховка
        _CancelEvents(leader);
        Game.Log("Caravan error; CaravanInfo not found");
        return;
    }

    if (!ci.PlayerIsGuard(fromCrit.Id)) {
        return;
    }

    // убит игрок-охранник
    if (fromCrit.IsOwnedByPlayer()) {
        _SetPlayerDead(fromCrit, ci);
        return;
    }

    // игрок охранник убил нпц-охранника
    if (!valid(killer)) {
        return;
    }

    if (killer.IsOwnedByPlayer()) {
        _SetPlayerThieft(killer, ci);
        _PlayerToCaravanEnemy(killer, ci);
    }
}

// смерть проводника = провал квеста всем игрокам
void _CaravanLeaderOnDead(Critter leader, Critter killer)
{
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        // перестраховка
        _CancelEvents(leader);
        Game.Log("Caravan error; CaravanInfo not found");
        return;
    }

    if (ci.CaravanStatus > CRV_STATUS_PREPARE && ci.CaravanStatus < CRV_STATUS_END) {
        _SetQuestState(ci, CARAVAN_FAILURE_CARAVANLEADER_DEAD);
        if (valid(killer)) {
            if (killer.IsOwnedByPlayer()) {
                _SetPlayerKillLeader(killer, ci);
                _PlayerToCaravanEnemy(killer, ci);
                ci.RemoveGuard(killer.Id);
            }
        }
    }

    // удаляем проводника досрочно
    if (ci.Type == CRV_TYPE_ONEWAY_DELETELEADER || ci.Type == CRV_TYPE_ONEWAY_DELETELEADER_BOTH) {
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_TO_DELETE_LEADER), DeleteLeader, leader.Id);
        // Обязательно сохраняем эвент. Иначе можно оказаться с двумя начлаьниками караванов.
    }
}

// глобальная карта
bool _CaravanLeaderOnGlobal(Critter leader, int type, Item car, float x, float y, float toX, float toY, float speed, uint encounterDescriptor,
                            bool waitForAnswer)
{
    Critter[] group = GlobalmapGroupExtended::GetGlobalGroup(leader);
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        // перестраховка
        _CancelEvents(leader);
        Game.Log("Caravan error; CaravanInfo not found");
        return false;
    }

    if (type == Tla::GlobalProcessMove || type == Tla::GlobalProcessStopped) {
        // во всех остальных случаях необходимо проверить, что в группе есть хотя бы один игрок
        if (!_CheckHasPlayerInGroup(group)) {
            // Удаляем караван и лидера
            ci.TerminateCaravan();
            return true;
        }
    }
    else {
        for (uint i = 0; i < group.length(); i++) {
            if (group[i].IsOwnedByPlayer()) {
                _SetPlayerJoin(group[i], ci);
            }
        }
    }

    if (encounterDescriptor != 0) {
        return false; // Энкаунтер
    }

    ci.CaravanRoute.SetRouteDir(uint(x), uint(y), toX, toY);
    // установка направления движения

    if (type != Tla::GlobalProcessMove) {
        // все точки маршрута пройдены или не назначены
        if (ci.CaravanRoute.RouteEnded()) {
            Location loc = Game.GetLocationByPid(ci.Leader.EndPos.LocPid);
            uint endX = loc.WorldX;
            uint endY = loc.WorldY;
            if ((endX == uint(x)) and (endY == uint(y))) {
                // маршрут закончен
                if (_EndCaravan(leader)) {
                    return true;
                }
                else {
                    // проблемы с завершением каравана
                    Worldmap::FindEncounter(group, null, uint(x), uint(y), encounterDescriptor, waitForAnswer, true);
                    Game.Log("Can not end caravan");
                    return true;
                }
            }
            else {
                // encounterDescriptor = 0;
                toX = endX;
                toY = endY;
            }
        }
        speed = GLOBAL_MAP_BASE_SPEED * ci.GlobalSpeedMultiplayer;
        return true;
    }

    waitForAnswer = false;
    return false;
}

/* ********************************* Этап№1 сбор заявок от игроков ********************************** */
void PrepareCaravan(uint CaravanId)
{
    CaravanInfo ci = _GetCaravan(CaravanId);
    if (!valid(ci)) {
        return;
    }

    ci.CaravanReset();
    ci.CaravanStatus = CRV_STATUS_PREPARE;

    Critter leader = ci.Leader.GetLeader();
    if (!valid(leader)) {
        Critter[] critters = GetCrittersByDialogId(ci.Leader.StartPos.GetMap(), ci.Leader.DialogId, ci.Leader.NpcPid);
        if (!critters.isEmpty()) {
            leader = critters[0];
            ci.Leader.SetLeaderCritter(leader);
        }
        else {
            critters = GetCrittersByDialogId(ci.Leader.EndPos.GetMap(), ci.Leader.DialogId, ci.Leader.NpcPid);
            if (!critters.isEmpty()) {
                leader = critters[0];
                ci.Leader.SetLeaderCritter(leader);
            }
        }
        if (!valid(leader)) {
            if (!ci.Leader.PlaceLeaderCritterToPos(ci.Leader.StartPos)) {
                return;
            }
        }
    }

    if (!ci.Leader.CheckLeaderInPos(true)) {
        if (!ci.Leader.TransitToPos(true)) {
            return;
        }
    }

    leader = ci.Leader.GetLeader();
    if (!valid(leader)) {
        return;
    }

    _SetEvents(leader, ci.Leader.Virtue);
}

/* ********************************** Этап№2 отправление каравана *********************************** */
void StartCaravan(any caravanId)
{
    CaravanInfo ci = _GetCaravan(caravanId);
    if (!valid(ci)) {
        return;
    }

    Critter leader = ci.Leader.GetLeader();
    if (!valid(leader)) {
        return;
    }
    if (leader.IsDead()) {
        return;
    }

    Map map = leader.GetMap();
    if (!valid(map)) {
        return;
    }

    // проверка, хватает ли игроков
    if (ci.PlayersRequested.length() == 0) {
        ci.CaravanStatus = CRV_STATUS_BEFORE_START;
        return;
    }

    uint curPlayersInGrp = 0;
    // группа караванщиков
    Critter[] caravanGroup = {};
    caravanGroup.insertLast(leader);
    // всех игроков в группу, сколько разрешено
    for (uint i = 0; i < ci.PlayersRequested.length(); i++) {
        Critter player = Game.GetCritter(ci.PlayersRequested[i]);
        if (!valid(player)) {
            continue;
        }
        if (player.IsDead()) {
            continue;
        }

        Map playerMap = player.GetMap();
        if (!valid(player.GetMap())) {
            continue;
        }

        if (Game.GetDistance(leader.HexX, leader.HexY, player.HexX, player.HexY) <= LEADER_SEARCH_RADIUS) {
            ci.RequstedToGuard(player.Id);
            caravanGroup.insertLast(player);
            curPlayersInGrp++;
        }

        if (curPlayersInGrp >= ci.MaxPlayers) {
            break;
        }
    }

    ci.PlayersRequested.resize(ci.MaxPlayers);
    if (curPlayersInGrp == 0) {
        return;
    }

    // число попыток, чтобы не завис цикл
    uint numTry = 0;
    // индекс из списка определений охранников
    uint idx = 0;
    // добавление НПЦ-охранников в группу ci.CaravanGuards
    while (caravanGroup.length() < ci.MaxGroup && ci.CaravanGuards.length() > 0) {
        DL("adding guards");
        numTry++;
        if (numTry >= 20) {
            break; // 20 попыток должно хватить
        }

        Critter guard = ci.CaravanGuards[idx].GetCritterGuard(map, leader);
        idx = (idx + 1 < ci.CaravanGuards.length() ? idx + 1 : 0);
        if (valid(guard)) {
            ci.Caravaneers.insertLast(guard.Id);
            caravanGroup.insertLast(guard);
        }
    }

    // основной скрипт проводника
    leader.SetupScript(_CaravanLeaderInit);
    ci.CaravanStatus = CRV_STATUS_START_MOVE;
    // начало движения по глобальной карте
    leader.TransitToGlobal();
}

/* **************************** Этап№3. Выход со случайного энкаунтера ****************************** */
void _ContinueCaravan(Critter leader)
{
    DL("continue caravan started");
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        Game.Log("Error: CaravanInfo not found. Id = " + leader.CaravanCrvId);
        return;
    }

    Map map_leader = leader.GetMap();
    if (!valid(map_leader)) {
        return;
    }

    Critter[] caravanGroup = {};
    caravanGroup.insertLast(leader);
    DL("try find caravaneers");
    ident[] deadGuardIds = {};
    for (uint i = 0; i < ci.Caravaneers.length(); i++) {
        Critter guard = Game.GetCritter(ci.Caravaneers[i]);
        if (!valid(guard)) {
            deadGuardIds.insertLast(ci.Caravaneers[i]); // охранника нужно убрать из списка
            // TODO: добавить установку значения переменной для инвалидных охранников
            continue;
        }

        // охранник найден
        Map map = guard.GetMap();
        if (!valid(map)) {
            deadGuardIds.insertLast(ci.Caravaneers[i]); // охранника нужно убрать из списка
            if (guard.IsOwnedByPlayer()) {
                _SetPlayerAbandoned(guard, ci);
            }
            continue;
        }

        if (guard.IsDead() || map.Id != map_leader.Id) {
            deadGuardIds.insertLast(ci.Caravaneers[i]); // охранника нужно убрать из списка
            if (guard.IsOwnedByPlayer()) {
                _SetPlayerAbandoned(guard, ci);
            }
            continue;
        }

        caravanGroup.insertLast(guard);
    }

    for (uint j = 0; j < deadGuardIds.length(); j++) {
        ci.RemoveGuard(deadGuardIds[j]);
    }

    DL("status sent");
    ci.CaravanStatus = CRV_STATUS_ON_GLOBAL;
    if (_CheckHasPlayerInGroup(caravanGroup)) {
        leader.TransitToGlobal();
    }
}

/* ***************************** Этап 4. Завершение движения каравана ******************************* */
// завершение каравана. Караван пришел в пункт назначения.
bool _EndCaravan(Critter leader)
{
    CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
    if (!valid(ci)) {
        _CancelEvents(leader);
        Game.Log("Error: CaravanInfo not found. Id = " + leader.CaravanCrvId);
        return false;
    }

    // переключаем статус квеста игрокам
    for (uint i = 0; i < ci.Caravaneers.length(); i++) {
        Critter player = Game.GetCritter(ci.Caravaneers[i]);
        if (valid(player)) {
            if (player.IsOwnedByPlayer()) {
                _SetPlayerSuccessFirst(player, ci);
                _SetSuccessNext(player, ci);
            }
        }
    }

    if (!valid(ci.Leader)) {
        return false;
    }
    if (!valid(ci.Leader.EndPos)) {
        return false;
    }

    Map map = ci.Leader.EndPos.GetMap();
    if (!valid(map)) {
        return false;
    }

    uint16 hx = ci.Leader.EndPos.HexX;
    uint16 hy = ci.Leader.EndPos.HexY;
    if (!GetFreeHex(map, 3, hx, hy)) {
        return false;
    }
    if (!Obsolete::CritterTransitToMapEntry(leader, map.Id, hstring("0"))) {
        return false;
    }

    leader.HomeMapId = map.Id;
    leader.HomeHexX = hx;
    leader.HomeHexY = hy;
    leader.HomeDir = leader.Dir;
    ci.CaravanStatus = CRV_STATUS_END;

    // удаляем нпц-охранников
    for (uint j = 0; j < ci.Caravaneers.length(); j++) {
        Critter guard = Game.GetCritter(ci.Caravaneers[j]);
        if (valid(guard)) {
            if (guard.IsNpc()) {
                Game.DeleteCritter(guard);
            }
        }
    }
    _CancelEvents(leader);
    if (ci.Type == CRV_TYPE_TWOWAY) {
        ci.CaravanRoute.ReverseRouteCurve();
        SwitchNpcPosition(ci.Leader.StartPos, ci.Leader.EndPos);
        ci.IsReversed = (ci.IsReversed ? false : true);
    }

    if (ci.Type == CRV_TYPE_ONEWAY_TRANSITLEADER) {
        Game.DeferredCall(GAME_SECOND_TO_TICK(TIME_TO_WAIT_AT_ENDPOINT), TransitToStartPos, leader.Id);
    }

    if (ci.Type == CRV_TYPE_ONEWAY_DELETELEADER || ci.Type == CRV_TYPE_ONEWAY_DELETELEADER_BOTH) {
        ci.CaravanStatus == CRV_STATUS_END;
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_TO_DELETE_LEADER + TIME_TO_WAIT_AT_ENDPOINT), DeleteLeader, leader.Id);
        // Обязательно сохраняем эвент. Иначе можно оказаться с двумя начлаьниками караванов.
    }

    DL("End Caravan success");
    return true;
}

void DeleteLeader(any value)
{
    DL("try delete leader");
    Critter leader = Game.GetCritter(value);
    if (valid(leader)) {
        CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
        if (valid(ci)) {
            ci.CaravanReset();
            CaravanLeaderInfo li = ci.Leader;
            if (valid(li)) {
                if (li.CritterId != leader.Id) {
                    Game.Log("Wrong eader id");
                    return;
                }
            }
        }
        if (leader.IsNpc()) {
            Game.DeleteCritter(leader);
        }
    }
    DL("success");
}

void TransitToStartPos(any value)
{
    Critter leader = Game.GetCritter(value);
    if (valid(leader)) {
        CaravanInfo ci = _GetCaravan(leader.CaravanCrvId);
        if (valid(ci)) {
            if (valid(ci.Leader)) {
                ci.Leader.TransitToPos(true);
            }
        }
    }
}

/* ********************************************* ОБЩЕЕ ********************************************** */
// проверка, в массиве есть хотя бы один игрок
bool _CheckHasPlayerInGroup(Critter[] group)
{
    for (uint i = 0; i < group.length(); i++) {
        if (group[i].IsOwnedByPlayer()) {
            return true;
        }
    }
    return false;
}

// Инструкция атаковать игрока всем караванщикам
void _PlayerToCaravanEnemy(Critter player, CaravanInfo ci)
{
    DL("_PlayerToCaravanEnemy start");
    for (uint i = 0; i < ci.Caravaneers.length(); i++) {
        Critter cr = Game.GetCritter(ci.Caravaneers[i]);
        if (valid(cr)) {
            if (cr.IsNpc() && !EnemyStack::CheckEnemyInStack(cr, player.Id)) {
                EnemyStack::AddEnemyToStack(cr, player.Id);
            }
        }
    }
}

// установка статуса всем караванщикам, независимо от того, онлайн игрок или нет
// у переменной должен быть статус >0
void _SetQuestState(CaravanInfo ci, int state)
{
    DL("_SetQuestState start");
    for (uint i = 0; i < ci.Caravaneers.length(); i++) {
        Critter cr = Game.GetCritter(ci.Caravaneers[i]);
        if (valid(cr)) {
            if (cr.IsNpc()) {
                continue;
            }
            _SetQuestState(ci.QuestVarNum, state, cr);
        }
    }
}

// установка статуса переменной для конкретного криттера
// статус у переменной должен быть>0
void _SetQuestState(CritterProperty prop, int state, Critter cr)
{
    if (cr.GetAsInt(prop) < CRV_STATUS_PREPARE) {
        return;
    }
    cr.SetAsInt(prop, state);
}

/* ******************************************** ДИАЛОГИ ********************************************* */
// функция для использования в диалогах: признак = группа полная (максимум 5 игроков)
bool d_IsFullParty(Critter player, Critter caravaneer)
{
    // получаем описание каравана
    CaravanInfo ci = _GetCaravan(caravaneer.CaravanCrvId);
    if (!valid(ci)) {
        Game.Log("Error: CaravanInfo not found. Id = " + caravaneer.CaravanCrvId);
        return true;
    }

    return (ci.PlayersRequested.length() > ci.MaxPlayers);
}

// функция для использования в диалогах: признак = еще не набрано 5 игроков
bool d_NotIsFullParty(Critter player, Critter caravaneer)
{
    return not d_IsFullParty(player, caravaneer);
}

// функция для использования в диалогах: признак = заявка игрока уже принята
bool d_HasPlayerRequest(Critter player, Critter caravaneer)
{
    CaravanInfo crv = _GetCaravan(caravaneer.CaravanCrvId);
    if (!valid(crv)) {
        Game.Log("Error: CaravanInfo not found. Id = " + caravaneer.CaravanCrvId);
        return false;
    }
    for (uint i = 0; i < crv.PlayersRequested.length(); i++) {
        if (crv.PlayersRequested[i] == player.Id) {
            return true;
        }
    }
    return false;
}

// функция для использования в диалогах: признак = заявка игрока еще не принята
bool d_NotHasPlayerRequest(Critter player, Critter caravaneer)
{
    return not d_HasPlayerRequest(player, caravaneer);
}

// признак - может идти в сопровождение
bool d_CanJoin(Critter player, Critter caravaneer)
{
    CaravanInfo crv = _GetCaravan(caravaneer.CaravanCrvId);
    if (!valid(crv)) {
        Game.Log("Error: CaravanInfo not found. Id = " + caravaneer.CaravanCrvId);
        return false;
    }
    return _CanPlayerJoinCaravan(player, crv);
}

// записывает игрока в список желающих
void r_PutPlayerRequest2Info(Critter player, Critter caravaneer)
{
    CaravanInfo crv = _GetCaravan(caravaneer.CaravanCrvId);
    if (!valid(crv)) {
        Game.Log("Error: CaravanInfo not found. Id = " + caravaneer.CaravanCrvId);
        return;
    }
    if (!d_HasPlayerRequest(player, caravaneer)) {
        crv.PlayersRequested.insertLast(player.Id);
    }
}

// продолжение движения каравана
void r_ContinueCaravan(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return;
    }
    CaravanInfo crv = _GetCaravan(npc.CaravanCrvId);
    if (!valid(crv)) {
        Game.Log("Error: CaravanInfo not found. Id = " + npc.CaravanCrvId);
        return;
    }
    if (crv.CaravanStatus != CRV_STATUS_ON_ENCOUNTER) {
        return;
    }
    if (d_HasPlayerRequest(player, npc)) {
        _ContinueCaravan(npc);
    }
}

// Мгновенно запускает караван, вне расписания
void r_StartCaravan(Critter player, Critter npc)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (valid(ci)) {
        r_PutPlayerRequest2Info(player, npc);
        DL("time start");
        StartCaravan(npc.CaravanCrvId);
    }
}

// проверка, в каком состоянии караван для нпц
bool d_IsCaravanStatus(Critter player, Critter npc, int status)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (!valid(ci)) {
        Game.Log("Error: CaravanInfo not found. Id = " + npc.CaravanCrvId);
        if (status == 0) {
            return true;
        }
        return false;
    }
    return (int(ci.CaravanStatus) == status);
}

bool d_NotIsCaravanStatus(Critter player, Critter npc, int status)
{
    return !d_IsCaravanStatus(player, npc, status);
}

// признак, караван не начинался или закончен
bool d_CaravanEndedOrNotStarted(Critter player, Critter npc)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (!valid(ci)) {
        // Game.Log("Error: CaravanInfo not found. Id = " + npc.CaravanCrvId);
        return true;
    }
    // Game.Log("st"+ci.CaravanStatus);
    return (ci.CaravanStatus == CRV_STATUS_BEFORE_START || ci.CaravanStatus == CRV_STATUS_END);
}

// проверка, игрок ни разу не заваливал квест на сопровождение данного каравана
bool d_PlayerHasNoCaravanFailures(Critter player, Critter npc)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (!valid(ci)) {
        // Game.Log("Error: CaravanInfo not found. Id = " + npc.CaravanCrvId);
        return true;
    }
    return !_GetPlayerQuestFailed(player, ci);
}

// проверка караван пойдет обратно или в начальном направлении
bool d_IsCaravanReversed(Critter player, Critter npc)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (!valid(ci)) {
        Game.Log("Error: CaravanInfo not found. Id = " + npc.CaravanCrvId);
        return false;
    }
    return (ci.IsReversed);
}

bool d_NotIsCaravanReversed(Critter player, Critter npc)
{
    return !d_IsCaravanReversed(player, npc);
}

// Обновленные функции
bool d_PlayerHired(Critter player, Critter npc)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (valid(ci)) {
        for (uint i = 0; i < ci.PlayersRequested.length(); i++) {
            if (ci.PlayersRequested[i] == player.Id) {
                return true;
            }
        }
    }
    return false;
}

bool d_NotPlayerHired(Critter player, Critter npc)
{
    return !d_PlayerHired(player, npc);
}

bool d_HasFailures(Critter player, Critter npc)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (valid(ci)) {
        return _GetPlayerQuestFailed(player, ci);
    }
    return false;
}

bool d_NotHasFailures(Critter player, Critter npc)
{
    return !d_HasFailures(player, npc);
}

bool d_Status(Critter player, Critter npc, int status)
{
    CaravanInfo ci = _GetCaravan(npc.CaravanCrvId);
    if (valid(ci)) {
        return int(ci.CaravanStatus) == status;
    }
    return false;
}

bool d_NotStatus(Critter player, Critter npc, int status)
{
    return !d_Status(player, npc, status);
}

void r_SaveCaravanId(Critter player, Critter npc, int caravanId)
{
    if (valid(npc)) {
        auto lastSelectCaravan = player.LastSelectedCaravan.clone();
        lastSelectCaravan[npc.Id] = caravanId;
        player.LastSelectedCaravan = lastSelectCaravan;
    }
}
// lex name. lex where
void dlg_WhereIsCaravaner(Critter player, Critter npc, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    if (not valid(npc)) {
        return;
    }

    auto lastSelectCaravan = player.LastSelectedCaravan;
    if (!lastSelectCaravan.exists(npc.Id)) {
        return;
    }

    lexems = "$nameэтот караванщик$whereчерт его знает куда. Не могу понять";
    CaravanInfo crv = _GetCaravan(lastSelectCaravan[npc.Id]);
    if (valid(crv)) {
        if (valid(crv.Leader)) {
            Critter cr = crv.Leader.GetLeader();
            if (valid(cr)) {
                lexems = "$name@msg DLG " + STR_NPC_NAME_DLG(cr.DialogId) + "@";
                uint16 worldX = cr.WorldX;
                uint16 worldY = cr.WorldY;
                Map map = cr.GetMap();
                if (valid(map)) {
                    Location loc = map.GetLocation();
                    if (valid(loc) && !loc.AutoGarbage) {
                        lexems += "$where@msg GM " + STR_LOC_NAME(loc.ProtoId) + "@";
                        return;
                    }
                }
                lexems += "$where Пустошь, их координаты: " + worldX + ":" + worldY;
            }
        }
    }
}
