// FOS Server
// Author: cvet

///@ Property Critter PrivateServer uint TerminalPlayerId
///@ Property Critter PrivateServer uint TerminalDialogId

#define ANSWER_END                  (0xF1)

#define FORCE_DIALOG_PAY_SELF       (3)
#define FORCE_DIALOG_PAY_OTHER_NEXT (8)

#define STR_GENERIC_ERROR           (DLGSTR(uint(Content::Dialog::repl_terminal), 0)) // Критическая ошибка. Пожалуйста обратитесь в службу поддержки.
#define STR_PLAYER_NOT_FOUND \
    (DLGSTR(Content::Dialog::repl_terminal, 1)) // Данный клиент не найден. Возможно вы ошиблись в имени, либо клиент не в зоне доступа.
#define STR_INVALID_MONEY_COUNT  (DLGSTR(Content::Dialog::repl_terminal, 2))
#define STR_ZERO_MONEY_COUNT     (DLGSTR(Content::Dialog::repl_terminal, 3))
#define STR_NEGATIVE_MONEY_COUNT (DLGSTR(Content::Dialog::repl_terminal, 4))
#define STR_NOT_ENAUGTH_MONEY    (DLGSTR(Content::Dialog::repl_terminal, 5))
#define STR_ZERO_BALANCE         (DLGSTR(Content::Dialog::repl_terminal, 6))
#define STR_NEGATIVE_BALANCE     (DLGSTR(Content::Dialog::repl_terminal, 7))
#define STR_OPERATION_SUCCESS    (DLGSTR(Content::Dialog::repl_terminal, 10))

#define SEND_ERROR_RETURN \
#(cr, error) \
    { \
        cr.SayMsg(SAY_NETMSG, TEXTMSG_DLG, error); \
        cr.GetOwner().ClientCall.AddDialogStr(error, "", false); \
        return; \
    }
#define SEND_ERROR_RETURN0 \
#(cr, error) \
    { \
        cr.SayMsg(SAY_NETMSG, TEXTMSG_DLG, error); \
        cr.GetOwner().ClientCall.AddDialogStr(error, "", false); \
        return 0; \
    }

const uint DialogNone = 0;
const uint DialogTransferReal = 3;
const uint DialogTransferVirtual = 4;
const uint DialogTakeMoney = 5;
const uint DialogSetTargetName = 7;

/// Event PlayerSaidText(Critter critter, string text, bool fromDialog)
void ModuleInit()
{
    // Game.OnPlayerSaidText.Subscribe( OnPlayerSaidText );
}

void OnPlayerSaidText(Critter critter, const string text, bool fromDialog, uint talkerId, bool isNpc)
{
    if (valid(critter) && fromDialog && !text.isEmpty()) {
        switch (critter.TerminalDialogId) {
        case DialogTransferReal: {
            TransferMoney(critter, text, true);
            break;
        }
        case DialogTransferVirtual: {
            TransferMoney(critter, text, false);
            break;
        }
        case DialogTakeMoney: {
            TakeMoney(critter, text);
            break;
        }
        case DialogSetTargetName: {
            Player player = Game.GetPlayer(text);
            if (player == null) {
                critter.TerminalPlayerId = 0;
                SEND_ERROR_RETURN(critter, STR_PLAYER_NOT_FOUND);
            }
            critter.TerminalPlayerId = player.GetOwnedCritter().Id;
            critter.GetOwner().ClientCall.ForceDialogResult(Content::Dialog::repl_terminal.uhash, isNpc, 1, true);
            break;
        }
        }
    }
}

bool s_Terminal(Critter player, StaticItem terminal, Item item, int skill)
{
    if (player.IsOwnedByPlayer() && skill == 0 && not valid(item)) {
        Game.RunDialog(player, Content::Dialog::repl_terminal, terminal.HexX, terminal.HexY, false);
    }

    return true;
}

void r_PaySelf(Critter player, Critter terminal)
{
    player.TerminalPlayerId = player.Id;
}

// Функция вызывается в момент загрузки диалога. Можно использовать ее для определения, какая именно ветка загрузилась )остальные аналогично)
void dlg_Reset(Critter player, Critter terminal, string& lexems)
{
    player.TerminalDialogId = DialogNone; // Сброс
    player.TerminalPlayerId = 0;
    player.CanSendSay = false;
}

uint r_ChoosePlayerResult(Critter player, Critter terminal)
{
    if (player.TerminalPlayerId == 0) {
        return 0;
    }

    if (player.TerminalPlayerId == player.Id) {
        return FORCE_DIALOG_PAY_SELF;
    }
    return FORCE_DIALOG_PAY_OTHER_NEXT;
}

uint dlg_ChoosePlayer(Critter player, Critter terminal, string& playerName)
{
    player.TerminalDialogId = DialogSetTargetName;
    player.CanSendSay = true;

    if (player.TerminalPlayerId > 0) {
        // Если получатель известен, открыть окно ввода суммы
        if (player.TerminalPlayerId == player.Id) {
            return FORCE_DIALOG_PAY_SELF;
        }
        return FORCE_DIALOG_PAY_OTHER_NEXT;
    }

    return 0;
}

void dlg_TransferReal(Critter player, Critter terminal, string& moneyCount)
{
    player.TerminalDialogId = DialogTransferReal;
    player.CanSendSay = true;
}

void dlg_TransferVirtual(Critter player, Critter terminal, string& moneyCount)
{
    player.TerminalDialogId = DialogTransferVirtual;
    player.CanSendSay = true;
}

void dlg_TakeMoney(Critter player, Critter terminal, string& moneyCount)
{
    player.TerminalDialogId = DialogTakeMoney;
    player.CanSendSay = true;
}

void TakeMoney(Critter player, string moneyCount)
{
    if (player.ReplicationMoney == 0) {
        SEND_ERROR_RETURN(player, STR_ZERO_BALANCE);
    }
    if (player.ReplicationMoney < 0) {
        SEND_ERROR_RETURN(player, STR_NEGATIVE_BALANCE);
    }
    int money = 0;
    if (!moneyCount.tryToInt(money)) {
        SEND_ERROR_RETURN(player, STR_INVALID_MONEY_COUNT);
    }
    if (money == 0) {
        SEND_ERROR_RETURN(player, STR_ZERO_MONEY_COUNT);
    }
    if (money < 0) {
        SEND_ERROR_RETURN(player, STR_NEGATIVE_MONEY_COUNT);
    }
    if (money > player.ReplicationMoney) {
        SEND_ERROR_RETURN(player, STR_NOT_ENAUGTH_MONEY);
    }
    player.ReplicationMoney -= money;
    player.AddItem(Content::Item::bottle_caps, money);
    player.SayMsg(SAY_NETMSG, TEXTMSG_DLG, STR_OPERATION_SUCCESS);
    player.GetOwner().ClientCall.AddDialogStr(STR_OPERATION_SUCCESS, "", false);
}

void TransferMoney(Critter player, string moneyCount, bool forReal)
{
    // Get money to transfer.
    int money = 0;
    if (!moneyCount.tryToInt(money)) {
        SEND_ERROR_RETURN(player, STR_INVALID_MONEY_COUNT);
    }
    if (money == 0) {
        SEND_ERROR_RETURN(player, STR_ZERO_MONEY_COUNT);
    }
    if (money < 0) {
        SEND_ERROR_RETURN(player, STR_NEGATIVE_MONEY_COUNT);
    }

    // Get stored critter.
    Critter cr = Game.GetCritter(player.TerminalPlayerId);
    if (not valid(cr)) {
        SEND_ERROR_RETURN(player, STR_PLAYER_NOT_FOUND);
    }

    // Transfer money.
    if (forReal) {
        if (uint(money) > player.CountItem(Content::Item::bottle_caps)) {
            SEND_ERROR_RETURN(player, STR_NOT_ENAUGTH_MONEY);
        }
        player.DeleteItem(Content::Item::bottle_caps, money);
    }
    else {
        if (money > player.ReplicationMoney) {
            SEND_ERROR_RETURN(player, STR_NOT_ENAUGTH_MONEY);
        }
        player.ReplicationMoney -= money;
    }

    cr.ReplicationMoney += money;
    player.SayMsg(SAY_NETMSG, TEXTMSG_DLG, STR_OPERATION_SUCCESS);
    player.GetOwner().ClientCall.AddDialogStr(STR_OPERATION_SUCCESS, "", false);
}
