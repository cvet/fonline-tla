// FOS Server
void ModuleInit()
{
    Game.OnInit.Subscribe(init);
}

void init()
{
    Assert(Game.IsResourcePresent("TraderTable.json"));
    Json::JSON @tradersSettings = Json::JSONParse(Game.ReadResource("TraderTable.json"));
    tradersSettings.forEach(@ReadTradeSettings);
    CurrentSettings = null;
}

void ReadTradeSettings(Json::JSON @settingsInfo, uint index)
{
    TradeSettings settings = TradeSettings();
    TradersSettings.insertLast(settings);
    CurrentSettings = settings;
    string dialogId;
    settingsInfo["TraderDialogId"] >> dialogId;
    settingsInfo["UpdateTimeHours"] >> settings.UpdateTimeHours;
    settingsInfo["BarterSkill"] >> settings.BarterSkill;
    settings.TraderDialogId = hstring(dialogId);
    settingsInfo["Goods"].forEach(@ReadGoods);
}

void ReadGoods(Json::JSON @goodsInfo, uint index)
{
    string name;
    int count = 0;
    goodsInfo["Proto"] >> name;
    goodsInfo["Count"] >> count;

    CurrentSettings.Goods[hstring(name)] = count;
}

TradeSettings CurrentSettings;
TradeSettings[] TradersSettings = {};

void _CashTraderInit(Critter trader, bool firstTime)
{
    trader.IsBarterOnlyCash = true;
    _TraderInit(trader, firstTime);
}

void _TraderInit(Critter trader, bool firstTime)
{
    int traderIndex = GetTraderIndex(trader);
    if (traderIndex >= 0) {
        trader.BagId = 0;
        trader.TalkDistance = 5;
        trader.MaxTalkers = 6;
        trader.ReplicationTime = 30;
        trader.SkillBarter = TradersSettings[traderIndex].BarterSkill;
        trader.IsNoItemGarbager = true;
        trader.IsNoBarter = false;
        trader.IsNoDrop = true;
        trader.IsNoSteal = true;
        trader.IsNoLoot = true;
        trader.IsNoEnemyStack = true;

        if (trader.GetTimeEvents(Tla::CteTrader) == 0) {
            uint nextCall = UpdateItems(trader);
            if (nextCall > 0) {
                trader.AddTimeEvent(cte_UpdateItems, nextCall, Tla::CteTrader);
            }
        }
    }
}

uint cte_UpdateItems(Critter trader, any identifier, uint& stage)
{
    if (trader.IsDead()) {
        return IS_TIMEOUT(trader.TimeoutReplication) ? trader.TimeoutReplication - Game.GetFullSecond() : Time::RealMinute(1);
    }
    return UpdateItems(trader);
}

int GetTraderIndex(Critter trader)
{
    hstring dialogId = trader.DialogId;
    if (dialogId != EMPTY_HSTRING) {
        for (uint i = 0, l = TradersSettings.length(); i < l; i++) {
            if (TradersSettings[i].TraderDialogId == dialogId) {
                return i;
            }
        }
    }
    return -1;
}

uint UpdateItems(Critter trader)
{
    int traderIndex = GetTraderIndex(trader);
    if (traderIndex < 0) {
        return 0;
    }

    // Delete all
    Item[] items = trader.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
    Game.DestroyItems(items);

    // Add new
    for (uint i = 0, j = TradersSettings[traderIndex].Goods.length(); i < j; i++) {
        hstring pid = TradersSettings[traderIndex].Goods.getKey(i);
        if (pid != EMPTY_HSTRING) {
            int needCount = TradersSettings[traderIndex].Goods.getValue(i);
            if (needCount > 0) {
                ProtoItem proto = Game.GetProtoItem(pid);
                if (proto.Deteriorable) {
                    if (proto.Stackable) {
                        Item item = trader.AddItem(pid, needCount);
                        if (valid(item)) {
                            Repair::SetDeterioration(item, Game.Random(5, 25)); // 5%..25% procent of deteoration
                        }
                    }
                    else {
                        while (needCount > 0) {
                            Item item = trader.AddItem(pid, 1);
                            if (valid(item)) {
                                Repair::SetDeterioration(item, Game.Random(5, 25)); // 5%..25% procent of deteoration
                            }
                            needCount--;
                        }
                    }
                }
                else {
                    trader.AddItem(pid, needCount);
                }
            }
        }
    }

    // Calculate next update time
    int hour = TradersSettings[traderIndex].UpdateTimeHours;
    if (hour <= 0) {
        return 0;
    }
    return (hour * 60 * 60) * Game.Random(50, 150) / 100; // +- 50%
}

class TradeSettings
{
    hstring TraderDialogId;
    int UpdateTimeHours;
    uint BarterSkill;
    dict<hstring, int> Goods = {};
}