// FOS Server

// Проверка, на попытку установки взрывчатки или мины.
bool IsMined(Critter sapper, Item item, Critter miner, int minerMinSkill, hstring[] BadPid)
{
    if (!valid(miner)) {
        return false;
    }
    if (!valid(sapper)) {
        return false;
    }
    // Проверяем - видим ли мы минёра.
    if (!miner.IsSeenBy(sapper)) {
        return false;
    }
    // Заминировать нас не так-то просто, нужно быть действительно мастером и удачливым ловкачем. Ну и конечно рандом.
    if ((miner.AgilityBase + miner.LuckBase + Game.Random(1, 10)) / 3 < 7 || miner.SkillTraps < minerMinSkill) {
        for (uint i = 0; i < BadPid.length(); i++) {
            if (item.ProtoId == BadPid[i]) {
                return true;
            }
        }
    }
    return false;
}

// Проверка, на попытку установки взрывчатки или мины.
/*bool IsMined( Critter sapper, Item item, Critter miner, int minerMinSkill, hstring[] BadPid )
   {
        //uint[] BadPids = BadPid;
        return IsMined( sapper, item, miner, minerMinSkill, BadPid );
        //return false;
   }*/

// Проверяем игрока на наличие оружия в руках. Можно указать допустимое оружие, например заточку.
bool SearchWeapon(Item item, hstring[] itemsAllowed)
{
    if (valid(item)) {
        if (item.Type == ItemType::Weapon && itemsAllowed.length() > 0) // если у игрока в руке оружие
        {
            for (uint i = 0; i < itemsAllowed.length(); i++) {
                if (item.ProtoId == itemsAllowed[i]) {
                    return false;
                }
            }
            return true;
        }
        else if (item.Type == ItemType::Weapon && itemsAllowed.length() <= 0) {
            return true;
        }
        return false;
    }
    return false;
}

// Проверяем игрока на наличие оружия в руках.
bool SearchWeapon(Item item)
{
    hstring[] itemsAllowed = {};
    return SearchWeapon(item, itemsAllowed);
}

// Проверяем игрока на наличие в инвентаре запретных предметов
bool EquipmentInspection(Critter player, hstring[] itemsForbidden)
{
    if (!player.IsControlledByPlayer) {
        return false;
    }

    Item[] items = player.GetItems();
    return SearchedForbidden(items, itemsForbidden);
}

// Ищем Id запретных предметов в масииве.
bool SearchedForbidden(Item[] items, hstring[] itemsForbidden)
{
    // Перебираем проверяемый массив предметов и сравниваем их ID с ID запрещённых предметов.
    for (uint it = 0; it < items.length(); it++) {
        for (uint itf = 0; itf < itemsForbidden.length(); itf++) {
            if (items[it].ProtoId == itemsForbidden[itf]) {
                return true;
            }
        }
    }
    return false;
}
