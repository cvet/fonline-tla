// FOS Server Sort 1

// Позволяет определить, знает ли игрок об указанной локации или нет.
bool IsKnownLoc(Critter cr, ident locId)
{
    return cr.IsKnownLocation(locId);
}

bool IsKnownLoc(Critter cr, Location loc)
{
    if (loc == null) {
        return false;
    }

    return IsKnownLoc(cr, loc.Id);
}

bool IsKnownLoc(Critter cr, hstring locPid)
{
    return IsKnownLoc(cr, Game.GetLocationByPid(locPid));
}

// Делает локацию видимой для криттера.
void SetKnownLoc(Critter cr, ident locId)
{
    if (locId == ZERO_IDENT) {
        return;
    }

    cr.SetKnownLocation(locId);
}

void SetKnownLoc(Critter cr, Location loc)
{
    if (loc == null) {
        return;
    }

    SetKnownLoc(cr, loc.Id);
}

void SetKnownLoc(Critter cr, hstring locPid)
{
    SetKnownLoc(cr, Game.GetLocationByPid(locPid));
}

// Делает локацию невидимой для криттера.
void UnsetKnownLoc(Critter cr, ident locId)
{
    cr.UnsetKnownLocation(locId);
}

void UnsetKnownLoc(Critter cr, Location loc)
{
    if (loc == null) {
        return;
    }

    UnsetKnownLoc(cr, loc.Id);
}

void UnsetKnownLoc(Critter cr, hstring locPid)
{
    UnsetKnownLoc(cr, Game.GetLocationByPid(locPid));
}

// Локация, которая автоматически удаляется через определенное время.
// Установка даты удаления локации в переменную. Внимание, одной установки переменной недостаточно для удаления локации.
// Location - локация, для которой назначается переменная
// time - игровое время в секундах,
void SetLocationDeleteTime(Location loc, uint time)
{
    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(time), DeferredDeleteLocation, loc.Id);
}

void DeferredDeleteLocation(any value)
{
    Location loc = Game.GetLocation(value);
    if (loc !is null) {
        loc.AutoGarbage = true;
    }
}

// Создание видимой для игрока локации и запоминание ее Id  в переменную, если номер переменной > 0.
// player - персонаж, для которого будет сохранена локация
// locPid - код прототипа локации
// worldX, worldY - координаты локации на глобальной карте
// delta - максимальное смещение локации относительно указанных координат
// varNum - номер переменной игрока в которую сохраняется код Id локации
Location CreateLocationForCritter(Critter player, hstring locPid, int worldX, int worldY, int delta, uint varNum)
{
    Location loc = Game.CreateLocation(locPid, worldX + Game.Random(-1 * delta, delta), worldY + Game.Random(-1 * delta, delta), null);
    if (!valid(loc)) {
        return null;
    }

    loc.AutoGarbage = false;
    SetKnownLoc(player, loc.Id);
    if (varNum > 0) {
        player.SetAsAny(CritterProperty(varNum), loc.Id);
    }
    return loc;
}

bool IsCanEnter(Location loc, uint playersCount)
{
    if (loc.MaxPlayers != 0) {
        for (uint i = 0; i < loc.GetMapCount(); i++) {
            playersCount += loc.GetMapByIndex(i).GetCritters(CritterFindType::Players).length();
            if (playersCount >= loc.MaxPlayers) {
                return false;
            }
        }
    }
    return true;
}

void _DeadInit(Critter cr, bool firstTime)
{
    CritterState::ToDead(cr, cr.ActionAnimAlive, null);
    cr.ReplicationTime = -1;
}

void ValidateKnownLocations(Critter cr)
{
    ident[] knownLocs = cr.KnownLocations.clone();
    for (int i = knownLocs.length() - 1; i >= 0; i--) {
        if (Game.GetLocation(knownLocs[i]) == null) {
            knownLocs.removeAt(i);
        }
    }
    cr.KnownLocations = knownLocs;
}
