// FOS Server
// Author: rifleman17
// Музыкальный автомат. В предмет бросается монетка, он проигрывает одну случайную мелодию

#define SILENCE_TIME   (Time::RealMinute(3))
#define STR_OUTOFORDER (25)
#define STR_LOWMONEY   (26)
#define PLAY_RADIUS    (25)
#define PRICE          (10)

const string[] trackList = {"akiss.acm", "Maybe.ogg", "ccboogie.ogg", "ppmamma.ogg"};

void _JukeBoxInit(Item item, bool firstTime)
{
    item.OnCritterUseOnSelf.Subscribe(_UseOnJukeBox);
}

bool _UseOnJukeBox(Item item, Critter cr, Item usedItem, uint param)
{
    if (valid(usedItem) && usedItem.ProtoId == Content::Item::bottle_caps) {
        if (usedItem.Count < PRICE) {
            // Не хватает денег
            cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_LOWMONEY, "$price" + PRICE);
            return true;
        }
        else {
            if (item.LastUsedTime != 0 && item.LastUsedTime + SILENCE_TIME > Game.GetFullSecond()) {
                // Недавно использовался
                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_OUTOFORDER);
                return true;
            }
            else {
                uint idx = Game.Random(0, trackList.length() - 1);
                uint16 x = 0, y = 0;
                Map map = item.GetMapPosition(x, y);
                if (valid(map)) {
                    item.IsShowAnim = true;
                    Game.SavedDeferredCall(30000, OffJukeBox, item.Id);
                    Critter[] critters = map.GetCritters(x, y, PLAY_RADIUS, CritterFindType::Players);
                    Game.DeleteItem(usedItem, 10);
                    item.LastUsedTime = Game.GetFullSecond();
                    for (uint i = 0; i < critters.length(); i++) {
                        Media::PlayMusic(critters[i], trackList[idx], 0, 0);
                    }
                    return true;
                }
            }
        }
    }
    return false;
}

void OffJukeBox(any value)
{
    Item item = Game.GetItem(value);
    if (valid(item)) {
        item.IsShowAnim = false;
    }
}

// Покупка автоматов в Нью-Рено

#define ENTRY_JB (142)

bool d_JukeboxesCheck(Critter player, Critter npc)
{
    Map map = Game.GetMap(Content::Map::newr_eld);
    if (valid(map)) {
        if (map.GetItems(Content::Item::jukebox_off).length() > 0) {
            return true;
        }
    }
    return false;
}

bool d_NotJukeboxesCheck(Critter player, Critter npc)
{
    return !d_JukeboxesCheck(player, npc);
}

bool d_CanPlaceJukeBox(Critter player, Critter npc)
{
    Location loc = Game.GetLocation(QuestWarehouse::GetLocId(player));
    if (valid(loc)) {
        Map map = loc.GetMapByIndex(0);
        if (valid(map)) {
            if (Entrance::MapCountEntry(map, ENTRY_JB) == 1) {
                if (map.GetItems(Content::Item::jukebox_off).length() == 0) {
                    return true;
                }
            }
        }
    }
    return false;
}

bool d_CanNotPlaceJukeBox(Critter player, Critter npc)
{
    return !d_CanPlaceJukeBox(player, npc);
}

bool d_AlreadyHasJukeBox(Critter player, Critter npc)
{
    Location loc = Game.GetLocation(QuestWarehouse::GetLocId(player));
    if (valid(loc)) {
        Map map = loc.GetMapByIndex(0);
        if (valid(map)) {
            if (Entrance::MapCountEntry(map, ENTRY_JB) == 1) {
                if (map.GetItems(Content::Item::jukebox).length() > 0) {
                    return true;
                }
            }
        }
    }
    return false;
}

void r_SellJukeBox(Critter player, Critter npc)
{
    Location loc = Game.GetLocation(QuestWarehouse::GetLocId(player));
    if (valid(loc)) {
        Map map = loc.GetMapByIndex(0);
        if (valid(map)) {
            if (Entrance::MapCountEntry(map, ENTRY_JB) == 1) {
                if (map.GetItems(Content::Item::jukebox_off).isEmpty()) {
                    uint16 hX = 0;
                    uint16 hY = 0;
                    if (Entrance::MapGetEntryCoords(map, ENTRY_JB, 0, hX, hY)) {
                        map.AddItem(hX, hY, Content::Item::jukebox, 1);
                        Map mapEld = Game.GetMap(Content::Map::newr_eld);
                        if (valid(mapEld)) {
                            Item[] items = mapEld.GetItems(Content::Item::jukebox_off);
                            if (!items.isEmpty()) {
                                Game.DeleteItem(items[0]);
                            }
                        }
                    }
                }
            }
        }
    }
}
