// FOS Server
// Author: Тринитротолуол
// Для квеста "Сгубить браминов".
// Выдает Дантон.
// Увести за собой и убить двоих браминов (с пастбища Эйдена). При этом есть шанс, равный 100%-(удача*10),
// что игрока поймает на горячем Эйден. Дальше – несколько вариантов: либо сдать Дантона, либо убежать, либо бой,
// либо убедить Эйдена отпустить игрока.

///@ Property Critter Protected uint8 KlamDantonBramin Group = Quests Quest = 3211 Max = 8

// ----------------------------------------------------------------------------
void InitBrahmin(Map map, bool firstTime)
{
    // ...
}

// ------------------------- Игровые события ----------------------------------
void Follow(any[] values) // следовать за игроком
{
    Critter cow = Game.GetCritter(values[0]);
    if (not valid(cow)) {
        Game.Log("ERROR: npc not valid");
        return;
    }

    uint16 x = 0, y = 0;
    if (not ProccesingValues(values[1], values[2], cow, x, y)) {
        EndFollow(values[1], cow);
        return;
    }

    values[2] = uint(values[2]) + 1;
    NpcPlanes::ErasePlane(cow, AI_PLANE_WALK, true);
    NpcPlanes::AddWalkPlane(cow, AI_PLANE_WALK_PRIORITY + 2, x, y, 6, false, 3);

    Game.SavedDeferredCall(3000, Follow, values);
}

// ------------------------ Диалоговые функции ---------------------------------
void r_FollowForPlayer(Critter player, Critter cow)
{
    if (not valid(cow)) {
        return;
    }
    if (cow.IsControlledByPlayer) {
        return;
    }

    cow.IsNoHome = true;

    any[] values = {cow.Id, player.Id, 0};
    Game.SavedDeferredCall(3000, Follow, values);
}

void r_ChangeDir(Critter player, Critter cow)
{
    if (not valid(cow)) {
        return;
    }
    if (cow.IsControlledByPlayer) {
        return;
    }

    cow.HomeMapId = cow.GetMap().Id;
    cow.HomeHexX = cow.HexX;
    cow.HomeHexY = cow.HexY;
    cow.HomeDir = player.Dir;
}

// ------------------------------ Триггеры --------------------------------------
void t_StopTrigger(Critter cow, StaticItem trigger, bool entered, uint8 dir)
{
    if (cow.NpcRole != MapKlamath::RoleCows) {
        return;
    }
    if (cow.IsNoHome) {
        return;
    }

    EnemyStack::ClearEnemyStack(cow);
    NpcPlanes::ErasePlane(cow, -1, true);
}

// --------------------------- Инструментарий------------------------------------
void EndFollow(ident playerId, Critter cow)
{
    uint state = GetQuestState(playerId);
    if (state != 2 && state != 4) {
        return;
    }

    SetQuestState(playerId, state - 1);

    cow.IsNoHome = false;
}

bool ProccesingValues(ident playerId, uint time, Critter cow, uint16 resultX, uint16 resultY)
{
    Map mapCow = cow.GetMap();
    if (not valid(mapCow)) {
        Game.Log("ERROR: map not valid");
        return false;
    }

    Critter player = Game.GetCritter(playerId);
    if (not valid(player)) {
        return false; // игрок ушел в оффлайн
    }

    Map mapPlayer = player.GetMap();
    if (not valid(mapPlayer)) {
        return false; // игрок ушел на глобал
    }

    if (mapCow.Id != mapPlayer.Id) {
        return false; // игрок ушел на другую карту
    }

    if (time >= 60) {
        return false; // ограничение, по времени, на следование брамина за игроком
    }

    resultX = player.HexX;
    resultY = player.HexY;
    return true;
}

void SetQuestState(ident playerId, uint state)
{
    Critter player = Game.GetCritter(playerId);
    if (valid(player)) {
        player.KlamDantonBramin = state;
    }
}

uint GetQuestState(ident playerId)
{
    Critter player = Game.GetCritter(playerId);
    if (valid(player)) {
        return player.KlamDantonBramin;
    }
    return 0;
}
