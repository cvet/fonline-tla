// FOS Client Sort 2

void TryExit()
{
    Gui::Screen screen = Gui::GetActiveScreen();
    if (false) // screen.IsHardcoded )
    {
        Game.CustomCall("TryExit");
        return;
    }

    switch (screen.Index) {
    case CLIENT_SCREEN_NONE:
        break;

    case CLIENT_MAIN_SCREEN_LOGIN:
        Settings.Quit = true;
        break;
    case CLIENT_MAIN_SCREEN_REGISTRATION:
        Game.ShowScreen(CLIENT_MAIN_SCREEN_LOGIN);
        break;
    case CLIENT_MAIN_SCREEN_WAIT:
        Game.CustomCall("NetDisconnect");
        break;
    case CLIENT_MAIN_SCREEN_GLOBAL_MAP:
    case CLIENT_MAIN_SCREEN_GAME:
        if (Settings.Cursor == CursorType::UseItem || Settings.Cursor == CursorType::UseWeapon || Settings.Cursor == CursorType::UseSkill)
            Settings.Cursor = CursorType::Default;
        else
            Game.ShowScreen(CLIENT_SCREEN_MENU);
        break;

    default:
        if (!screen.IsMain)
            Game.HideScreen(screen.Index);
        break;
    }
}

void NextCursor()
{
    switch (Settings.Cursor) {
    case CursorType::Default:
        Settings.Cursor = CursorType::Move;
        break;
    case CursorType::Move: {
        Critter chosen = Game.GetChosen();
        if (chosen != null && !IS_TIMEOUT(chosen.TimeoutBattle) && CritterItem::GetActive(chosen).Type == ItemType::Weapon)
            Settings.Cursor = CursorType::UseWeapon;
        else
            Settings.Cursor = CursorType::Default;
    } break;
    case CursorType::UseItem:
        Settings.Cursor = CursorType::Default;
        break;
    case CursorType::UseWeapon:
        Settings.Cursor = CursorType::Default;
        break;
    case CursorType::UseSkill:
        Settings.Cursor = CursorType::Move;
        break;
    default:
        Settings.Cursor = CursorType::Default;
        break;
    }
}
