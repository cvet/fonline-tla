// FOS Server

#define MSG_IM_HAVE_ILLEGAL_ITEMS (129) // Номер сообщения, отсылаемого игроком, если у него в инвентаре есть запрещенные предметы
#define STR_NO_ILLEGAL_ITEMS      (5200) // Номер строки "ты зачем принес сюда это!"

class CGuardsManagerForHell : GuardLib::CGuardsManager
{
    CGuardsManagerForHell()
    {
        super();
        // Dialog = Content::Dialog::hell_guard;
    }
};

// класс с алгоритмом
CGuardsManagerForHell Grd = CGuardsManagerForHell();

bool GuardItemTest(Item item)
{
    return Grd.GuardItemTest(item);
}

// /////////
// Функция для универсальных охранников:
// /////////

void _GuardInit1(Critter cr, bool firstTime) // Охрана поверхности Ада. "1" потому, что просто Init уже есть в GuardLib.
{
    cr.BonusLook = 30;
    cr.CriticalChanceBase = 30;
    cr.ActionPointsBase = 12;
    cr.MaxLifeBase = 100;
    cr.IsNoSteal = true;
    cr.IsNoEnemyStack = true;
    cr.IsNoPush = true;
    cr.IsNoSupply = true;
    cr.PerkTerminator = 1; // Так надо.

    FighterPattern::FighterPattern fp = FighterPattern::FighterPattern();
    fp.ForceArmourLvl = 6; // возможный максимум на текущий момент
    fp.MustHealLvl = 60;   // процент здоровья, при котором нпц начнет лечиться
    fp.ForceCritterArmour(cr);
    fp._SetOnAttackedEvents(cr);
    cr.FighterPatternCanGenStim = 1000; // число стимпаков

    // Выше - всё из fighter pattern.
    // Ниже - из библиотеки охраны, только npc заменён на cr.

    cr.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    cr.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    cr.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    cr.OnMessage.Subscribe(_GuardOnMessage);
    cr.OnMessage.Subscribe(_GuardMessage);
    cr.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    cr.OnSomeCritterStealing.Subscribe(_GuardStealing);
    cr.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    cr.OnSomeCritterUseItem.Subscribe(_GuardSmthUseItem);
    cr.OnSomeCritterDropItem.Subscribe(_GuardSmthDropItem);

    // Костыль для неработающей TeamId=16.
    cr.OnSomeCritterAttack.Subscribe(_TurretSmthAttack);

    if (not firstTime && cr.GetTimeEvents(Tla::CteObserving) == 0) {
        cr.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

void _GuardInit2(Critter cr, bool firstTime) // Охрана репликационных центров.
{
    cr.BonusLook = 50;
    cr.CriticalChanceBase = 95;
    cr.ActionPointsBase = 16;
    cr.MaxLifeBase = 150;
    cr.PerkBetterCriticals = 1;
    cr.IsNoSteal = true;
    cr.IsNoDrop = true;
    cr.IsNoLoot = true;
    cr.IsNoEnemyStack = true;
    cr.IsNoPush = true;
    cr.PerkTerminator = 1;

    FighterPattern::FighterPattern fp = FighterPattern::FighterPattern();
    fp.ForceArmourLvl = 6;
    fp.MustHealLvl = 60;
    fp.ForceCritterArmour(cr);
    fp._SetOnAttackedEvents(cr);
    cr.FighterPatternCanGenStim = 1000;

    cr.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    cr.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    cr.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    cr.OnMessage.Subscribe(_GuardOnMessage);
    cr.OnMessage.Subscribe(_GuardMessage);
    cr.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    cr.OnSomeCritterStealing.Subscribe(_GuardStealing);
    cr.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    cr.OnSomeCritterUseItem.Subscribe(_GuardSmthUseItem);
    cr.OnSomeCritterDropItem.Subscribe(_GuardSmthDropItem);
    cr.OnSomeCritterAttack.Subscribe(_TurretSmthAttack);

    if (not firstTime && cr.GetTimeEvents(Tla::CteObserving) == 0) {
        cr.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

void _GuardMessage(Critter cr, Critter fromCr, int message, any value)
{
    if (message == MSG_IM_HAVE_ILLEGAL_ITEMS) {
        NpcPlanes::AddAttackPlane(cr, 0, value);
        Critter target = Game.GetCritter(value);
        if (!valid(target)) {
            return;
        }
        if (target.IsNpc()) {
            return;
        }
        if (Game.Random(0, 4) == 1) {
            cr.SayMsg(SAY_SHOUT, TextPackName::Text, STR_NO_ILLEGAL_ITEMS, Obsolete::GetPlayerName(value));
        }
    }
}

void _GuardSmthStealing(Critter guard, Critter fromCr, Critter thief, bool success, Item item, uint count)
{
    if (thief.IsOwnedByPlayer() && guard.IsAlive()) {
        NpcPlanes::AddAttackPlane(guard, 0, thief, 1);
    }
}

void _GuardSmthDropItem(Critter npc, Critter fromCr, Item item)
{
    if (fromCr.IsOwnedByPlayer() && npc.IsAlive()) {
        auto pid = item.ProtoId;
        if (pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine || pid == Content::Item::active_dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr);
        }
    }
    if (!npc.IsAlive()) {
        return;
    }
    if (!CheckItemIsIllegal(item)) {
        return;
    }
    NpcPlanes::AddPickPlane(npc, AI_PLANE_ATTACK_PRIORITY, item, ZERO_IDENT, true);
}

void _GuardSmthUseItem(Critter npc, Critter whoUse, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (whoUse.IsOwnedByPlayer() && npc.IsAlive()) {
        auto pid = item.ProtoId;
        if (pid == Content::Item::plastic_explosives || pid == Content::Item::mine || pid == Content::Item::toggle_switch || pid == Content::Item::dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, whoUse);
        }
    }
}

// Illegal items list and checks

const hstring[] Pids_IllegalItems = {Content::Item::active_dynamite,
                                     Content::Item::active_plastic_explosive,
                                     Content::Item::active_mine,
                                     Content::Item::toggle_switch};

bool HasIllegalItems(Critter cr)
{
    Item[] items = cr.GetItems();
    for (uint i = 0; i < items.length(); i++) {
        if (CheckItemIsIllegal(items[i])) {
            return true;
        }
    }
    return false;
}

bool CheckItemIsIllegal(Item item)
{
    if (!valid(item)) {
        return false;
    }
    return UtilsForArray::Present(item.ProtoId, Pids_IllegalItems.clone());
}

// Аналогичное для турелей, но они не кричат:

void _TurretInit(Critter cr, bool firstTime)
{
    cr.BonusLook = 30;
    cr.PerkTerminator = 1;
    cr.IsNoSteal = true;
    cr.IsNoEnemyStack = true;
    cr.IsNoSupply = true;

    FighterPattern::FighterPattern fp = FighterPattern::FighterPattern();
    fp.ForceArmourLvl = 6; // возможный максимум на текущий момент
    fp.MustHealLvl = 60;   // процент здоровья, при котором нпц начнет лечиться
    fp.ForceCritterArmour(cr);
    fp._SetOnAttackedEvents(cr);
    // Выше - всё из fighter pattern.
    // Ниже - из библиотеки охраны, только npc заменён на cr.

    cr.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    cr.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    cr.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    cr.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    cr.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    cr.OnSomeCritterAttack.Subscribe(_TurretSmthAttack);

    if (not firstTime && cr.GetTimeEvents(Tla::CteObserving) == 0) {
        cr.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

void _TurretSmthAttack(Critter turret, Critter attacker, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    if (attacker.IsOwnedByPlayer()) {
        NpcPlanes::AddAttackPlane(turret, 0, attacker);
    }
}

// Усиление для гражданских

void _PowerInit(Critter cr, bool firstTime)
{
    cr.BonusLook = 30;
    cr.CriticalChanceBase = 30;
    cr.ActionPointsBase = 12;
    cr.IsNoEnemyStack = true;
    cr.IsNoPush = true;
    cr.PerkTerminator = 1;
    cr.TalkDistance = 5;
    cr.IsNoSupply = true;
    FighterPattern::FighterPattern fp = FighterPattern::FighterPattern();
    fp.ForceArmourLvl = 6; // возможный максимум на текущий момент
    fp.MustHealLvl = 60;   // процент здоровья, при котором нпц начнет лечиться
    fp.ForceCritterArmour(cr);
    fp._SetOnAttackedEvents(cr);
    cr.FighterPatternCanGenStim = 1000; // число стимпаков
}

// Наследование GuardLib

// Инициализация нпц. происходит при вводе нпц в игру
void _GuardInit(Critter npc, bool firstTime)
{
    // вешаем обработчики событий
    npc.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    npc.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    npc.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    npc.OnMessage.Subscribe(_GuardOnMessage);
    npc.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    npc.OnSomeCritterUseItem.Subscribe(_GuardOnUseItem);
    npc.OnSomeCritterStealing.Subscribe(_GuardStealing);
    npc.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    npc.OnSomeCritterDropItem.Subscribe(_GuardOnDropItem); // r17

    // Создаем событие наблюдения
    if (not firstTime && npc.GetTimeEvents(Tla::CteObserving) == 0) {
        npc.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

uint cte_Observing(Critter npc, any identifier, uint& stage)
{
    return Grd.EventObserving(npc);
}

void _GuardOnAddCritter(Critter crit, Critter showCrit)
{
    Grd.EventOnAddCritter(crit, showCrit);
}

void _GuardOnRemoveCritter(Critter crit, Critter hideCrit)
{
    Grd.EventOnRemoveCritter(crit, hideCrit);
}

bool _GuardEndPlane(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    Grd.EventEndPlane(npc);
    return true;
}

void _GuardOnMoveItem(Critter crit, Critter fromCrit, Item item, uint8 fromSlot)
{
    Grd.EventOnMoveItem(crit, fromCrit, item, fromSlot);
}

void _GuardOnMessage(Critter crit, Critter fromCrit, int message, any value)
{
    Grd.EventOnMessage(crit, fromCrit, message, value);
}

void _GuardOnUseItem(Critter crit, Critter fromCrit, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    Grd.EventOnUseItem(crit, fromCrit, item, onCritter, onItem, null);
}

void _GuardOnDropItem(Critter crit, Critter fromCrit, Item item) // r17
{
    Grd.EventOnDropItem(crit, fromCrit, item);
}

void _GuardOnSmthAttack(Critter crit, Critter fromCrit, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    Grd.EventOnSmthAttack(crit, fromCrit, target);
}

void _GuardStealing(Critter crit, Critter thief, Critter fromCrit, Item item, uint count)
{
    Grd.EventStealing(crit, fromCrit, thief, false, item, count);
}
