// FOS Server Sort 3

// Author rifleman17
// Энкаунтер квест, периодически доступный. В караванах попадается охранник, который за деньги продает карту с координатами запертого ящика.

///@ Property Item PrivateServer uint GECachesNumParameters
///@ Property Location PrivateServer bool GECachesCacheChecked

// Game event
void StatusOn()
{
    Game.GameEventCaches = true;
}

// Выдача карты
void r_GiveCart(Critter player, Critter npc)
{
    Item item = player.AddItem(Content::Item::map, 1);
    if (valid(item)) {
        ElectronicLock::GenerateCode(item);
        item.Info = 2;
        item.GECachesNumParameters = Game.Random(0, Parameters.length() - 1);
        item.Lexems =
            "$location@msg gm " + STR_LOC_NAME(hstring_fromHash(Parameters[item.GECachesNumParameters][0][0])) + "@$code" + ElectronicLock::GetCode(item);
        item.SetupScript(_TreasureMapInit);
        item.IsQuestItem = true;
    }
}

void _TreasureMapInit(Item item, bool firstTime)
{
    item.OnFinish.Subscribe(_TreasureMapFinish);
}

void _TreasureMapFinish(Item item)
{
    //
}

const hstring[] ContainerPids = {Content::Item::fridge,
                                 Content::Item::ice_chest_left,
                                 Content::Item::ice_chest_right,
                                 Content::Item::desk_0,
                                 Content::Item::desk_1,
                                 Content::Item::dresser_0,
                                 Content::Item::dresser_1,
                                 Content::Item::dresser_2,
                                 Content::Item::footlocker_clean_left,
                                 Content::Item::footlocker_rusty_left,
                                 Content::Item::footlocker_clean_right,
                                 Content::Item::footlocker_rusty_right,
                                 Content::Item::locker_clean_left,
                                 Content::Item::locker_rusty_left,
                                 Content::Item::locker_clean_right,
                                 Content::Item::locker_rusty_right,
                                 Content::Item::workbench,
                                 Content::Item::container_wood_crate,
                                 Content::Item::locker_7,
                                 Content::Item::locker_8};

#define aPids_WeaponSmallGuns (1)
#define aPids_WeaponPistols   (2)
#define aPids_WeaponRifles    (3)
#define aPids_WeaponUnarmed   (4)
#define aPids_ArmorMedium     (5)
#define aPids_AmmoOther       (6)
#define aPids_Drugs           (7)

void PlaceLoot2Container(Map map, Critter cr)
{
    Location loc = map.GetLocation();
    if (loc.IsEncounter && not loc.GECachesCacheChecked) {
        Item[] items = cr.GetItems(Content::Item::map);
        for (uint i = 0; i < items.length(); i++) {
            Item item = items[i];
            if (item.IsQuestItem) {
                loc.GECachesCacheChecked = true;
                // карта найдена, теперь проверяем, что карта подходит и есть контейнеры из списка
                // если карт несколько, остальные игнорируются
                Item container = GetValidContainer(loc);
                Location locWhere = Game.GetLocation(hstring_fromHash(Parameters[item.GECachesNumParameters][0][0]));
                if (valid(container) && valid(locWhere) && GlobalDistance(locWhere, loc) < Settings.GlobalMapZoneLength * 2) {
                    item.IsQuestItem = false;
                    Game.SavedDeferredCall(HOUR_TICKS(1), DeferredDestroyItem, item.Id);
                    container.SetupScript(ElectronicLock::_LockedInit);
                    for (uint i2 = 0; i2 < Parameters[item.GECachesNumParameters][1].length(); i2 += 2) {
                        container.AddItem(hstring_fromHash(Parameters[item.GECachesNumParameters][1][i2]),
                                          Parameters[item.GECachesNumParameters][1][i2 + 1],
                                          ContainerItemStack::Root);
                    }

                    if (Parameters[item.GECachesNumParameters].length() > 2) {
                        if (Parameters[item.GECachesNumParameters][2].length() >= 3) {
                            hstring pid;
                            switch (Parameters[item.GECachesNumParameters][2][0]) {
                            case aPids_WeaponSmallGuns:
                                pid = PidsGroups::Pids_WeaponSmallGuns[Game.Random(0, PidsGroups::Pids_WeaponSmallGuns.length() - 1)];
                                break;
                            case aPids_WeaponPistols:
                                pid = PidsGroups::Pids_WeaponPistols[Game.Random(0, PidsGroups::Pids_WeaponPistols.length() - 1)];
                                break;
                            case aPids_WeaponRifles:
                                pid = PidsGroups::Pids_WeaponRifles[Game.Random(0, PidsGroups::Pids_WeaponRifles.length() - 1)];
                                break;
                            case aPids_WeaponUnarmed:
                                pid = PidsGroups::Pids_WeaponUnarmed[Game.Random(0, PidsGroups::Pids_WeaponUnarmed.length() - 1)];
                                break;
                            case aPids_ArmorMedium:
                                pid = PidsGroups::Pids_ArmorMedium[Game.Random(0, PidsGroups::Pids_ArmorMedium.length() - 1)];
                                break;
                            case aPids_AmmoOther:
                                pid = PidsGroups::Pids_AmmoOther[Game.Random(0, PidsGroups::Pids_AmmoOther.length() - 1)];
                                break;
                            case aPids_Drugs:
                                pid = PidsGroups::Pids_Drugs[Game.Random(0, PidsGroups::Pids_Drugs.length() - 1)];
                                break;
                            }
                            if (pid != EMPTY_HSTRING) {
                                container.AddItem(pid,
                                                  Game.Random(Parameters[item.GECachesNumParameters][2][1], Parameters[item.GECachesNumParameters][2][2]),
                                                  ContainerItemStack::Root);
                            }
                        }
                    }

                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, 7115);
                }

                return;
            }
        }
    }
}

uint GlobalDistance(Location loc1, Location loc2)
{
    if (!valid(loc1) || !valid(loc2)) {
        return 0;
    }
    return uint(DISTANCE(loc1.WorldX, loc1.WorldY, loc2.WorldX, loc2.WorldY));
}

void DeferredDestroyItem(any value)
{
    Item item = Game.GetItem(value);
    if (valid(item)) {
        Game.DestroyItem(item);
    }
}

Item GetValidContainer(Location loc)
{
    Item[] containers = {};
    for (uint i = 0, l = loc.GetMapCount(); i < l; i++) {
        Map map = loc.GetMapByIndex(i);
        containers.insertLast(map.GetItems(ItemProperty::Type, ItemType::Container));
    }

    Item[] validContainers = {};
    for (uint i = 0; i < containers.length(); i++) {
        if (ContainerPids.find(containers[i].ProtoId) >= 0) {
            validContainers.insertLast(containers[i]);
        }
    }

    if (validContainers.isEmpty()) {
        return null;
    }

    return validContainers[Game.Random(0, validContainers.length() - 1)];
}

// clang-format off

int[][][] Parameters =
{
    {
        { Content::Location::arroyo.hash },
        { Content::Item::leather_jacket.hash, 1, Content::Item::desert_eagle.hash, 1, Content::Item::_44_magnum_jhp.hash, 100, Content::Item::bottle_caps.hash, 500, Content::Item::stimpak.hash, 5 },
        { aPids_Drugs, 1, 2 }
    },
    {
        { Content::Location::arroyo.hash },
        { Content::Item::sawed_off_shotgun.hash, 1, Content::Item::shotgun_shells.hash, 1, Content::Item::_44_magnum_jhp.hash, 100, Content::Item::bottle_caps.hash, 500, Content::Item::stimpak.hash, 3 },
        { aPids_WeaponPistols, 1, 1 }
    },
    {
        { Content::Location::klamath.hash },
        { Content::Item::leather_jacket.hash, 1, Content::Item::hunting_rifle.hash, 1, Content::Item::_223_fmj.hash, 50, Content::Item::bottle_caps.hash, 800, Content::Item::nuka_cola.hash, 2, Content::Item::gamma_gulp_beer.hash, 1 },
        { aPids_WeaponUnarmed, 1, 1 }
    },
    {
        { Content::Location::den.hash },
        { Content::Item::leather_jacket.hash, 1, Content::Item::louisville_slugger.hash, 1, Content::Item::cookie.hash, 1, Content::Item::bottle_caps.hash, 1000, Content::Item::booze.hash, 2, Content::Item::stimpak.hash, 5 },
        { aPids_WeaponRifles, 1, 1 }
    },
    {
        { Content::Location::redding.hash },
        { Content::Item::leather_armor_mk_ii.hash, 1, Content::Item::assault_rifle.hash, 1, Content::Item::_5mm_ap.hash, 300, Content::Item::bottle_caps.hash, 1200, Content::Item::stimpak.hash, 5, Content::Item::antidote.hash, 2 },
        { aPids_AmmoOther, 50, 90 }
    },
    {
        { Content::Location::modoc.hash },
        { Content::Item::leather_armor.hash, 1, Content::Item::_14mm_pistol.hash, 1, Content::Item::_14mm_ap.hash, 100, Content::Item::bottle_caps.hash, 1000, Content::Item::stimpak.hash, 5, Content::Item::healing_powder.hash, 2, Content::Item::bottle_empty.hash, 3 },
        { aPids_WeaponRifles, 1, 1 }
    },
    {
        { Content::Location::barter_ground.hash },
        { Content::Item::leather_armor_mk_ii.hash, 1, Content::Item::sniper_rifle.hash, 1, Content::Item::_223_fmj.hash, 100, Content::Item::bottle_caps.hash, 3000, Content::Item::stimpak.hash, 10, Content::Item::buffout.hash, 1 },
        { aPids_Drugs, 4, 5 }
    },
    {
        { Content::Location::barter_ground.hash },
        { Content::Item::cured_leather_armor.hash, 1, Content::Item::combat_knife.hash, 1, Content::Item::cattle_prod.hash, 1, Content::Item::bottle_caps.hash, 1500, Content::Item::stimpak.hash, 5, Content::Item::jet.hash, 10, Content::Item::bottle_ammiak.hash, 2 },
        { aPids_ArmorMedium, 1, 1 }
    },
    {
        { Content::Location::new_reno.hash },
        { Content::Item::metal_armor.hash, 1, Content::Item::combat_shotgun.hash, 1, Content::Item::shotgun_shells.hash, 300, Content::Item::bottle_caps.hash, 1500, Content::Item::stimpak.hash, 5, Content::Item::power_fist.hash, 1 },
        { aPids_WeaponPistols, 1, 1 }
    },
    {
        { Content::Location::broken_hills.hash },
        { Content::Item::metal_armor_mk_ii.hash, 1, Content::Item::_223_pistol.hash, 1, Content::Item::_223_fmj.hash, 100, Content::Item::bottle_caps.hash, 1600, Content::Item::stimpak.hash, 5, Content::Item::super_stimpak.hash, 2, Content::Item::spiked_knuckles.hash, 1 },
        { aPids_WeaponRifles, 1, 1 }
    },
    {
        { Content::Location::gecko.hash },
        { Content::Item::black_robe.hash, 1, Content::Item::fn_fal.hash, 1, Content::Item::explosive_rocket.hash, 10, Content::Item::bottle_caps.hash, 1500, Content::Item::stimpak.hash, 5, Content::Item::rocket_launcher.hash, 1 },
        { aPids_WeaponSmallGuns, 1, 1 }
    },
    {
        { Content::Location::vault_city.hash },
        { Content::Item::tesla_armor.hash, 1, Content::Item::independent.hash, 1, Content::Item::frag_grenade.hash, 10, Content::Item::bottle_caps.hash, 1500, Content::Item::stimpak.hash, 10, Content::Item::mentats.hash, 4 },
        { aPids_ArmorMedium, 1, 1 }
    },
    {
        { Content::Location::ncr.hash },
        { Content::Item::combat_armor.hash, 1, Content::Item::minigun.hash, 1, Content::Item::_5mm_ap.hash, 500, Content::Item::bottle_caps.hash, 3500, Content::Item::super_stimpak.hash, 5, Content::Item::mentats.hash, 2, Content::Item::plasma_grenade.hash, 5 },
        { aPids_AmmoOther, 200, 250 }
    },
    {
        { Content::Location::san_francisco.hash },
        { Content::Item::brotherhood_combat_armor.hash, 1, Content::Item::flamer.hash, 1, Content::Item::flamethrower_fuel_mk_ii.hash, 10, Content::Item::bottle_caps.hash, 4500, Content::Item::super_stimpak.hash, 5, Content::Item::rad_x.hash, 3, Content::Item::_2mm_ec_ammo.hash, 200, Content::Item::pk12_gauss_pistol.hash, 1 },
        { aPids_Drugs, 3, 5 }
    }
};

// clang-format on
