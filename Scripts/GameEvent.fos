// FOS Server Sort 2

///@ Property Game PrivateServer uint8[] GameEventManagerData
///@ Property Game PrivateServer uint=>uint8[] GameEventData

#define STATUS_NEVER_OCCURED (0)
#define STATUS_RUNNING       (1)
#define STATUS_OCCURED       (2)
#define STATUS_ENDED         (3)

#define DL                   #(s)(Game.Log("GE: " + s))
// #define DL                      # ( s )

funcdef void CallFunc();

class GameEventOccurCondition
{
    uint GameEventIndex;
    uint Status;
};

class GameEvent
{
    uint DataIndex;                                 // Индекс события в таблице
    uint Status;                                    // Текущее состояние события
    GameEventOccurCondition[] OccurConditions = {}; // Условия происхождения события
    string HandlerFunction;                         // Имя фукнции обработчика события
    uint TimeOccur;                                 // Время, через которое произойдет событие после того, как все условия соблюдены
    bool TimeIsAbsolute;                            // Признак, что время является абсолютным
    bool FirstEventNoConditions;                    // Признак, для первого события не требуется выполнение условий
    ident RunningEventId;                           // Код тайм эвента, который уже запущен
    uint NextEventIndex;                            // Код следующего события, если предусмотрен
    uint ServerTime;                                // Время, когда произойдет событие

    GameEvent()
    {
    }

    GameEvent(uint idx)
    {
        DataIndex = idx;
        Load();
    }

    void AddCondition(uint eventIndex, uint status)
    {
        for (uint i = 0; i < OccurConditions.length(); i++) {
            if (OccurConditions[i].GameEventIndex == eventIndex && OccurConditions[i].Status == status) {
                return;
            }
        }
        GameEventOccurCondition condition;
        condition.GameEventIndex = eventIndex;
        condition.Status = status;
        OccurConditions.insertLast(condition);
    }

    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set(Status);
        save.Set(HandlerFunction);
        save.Set(ServerTime);
        uint len = OccurConditions.length();
        save.Set(len);
        for (uint i = 0; i < len; i++) {
            save.Set(OccurConditions[i].GameEventIndex);
            save.Set(OccurConditions[i].Status);
        }
        save.Set(TimeOccur);
        save.Set(TimeIsAbsolute);
        save.Set(FirstEventNoConditions);
        save.Set(RunningEventId);
        save.Set(NextEventIndex);
        dict<uint, uint8[]> gameEventData = Game.GameEventData.clone();
        gameEventData[DataIndex] = save.GetData();
        Game.GameEventData = gameEventData;
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        uint eId = 0;
        uint status = 0;
        if (load.SetData(Game.GameEventData.get(DataIndex, array<uint8>())) > 0) {
            load.Get(Status);
            load.Get(HandlerFunction);
            load.Get(ServerTime);
            uint len = 0;
            load.Get(len);
            for (uint i = 0; i < len; i++) {
                load.Get(eId);
                load.Get(status);
                AddCondition(eId, status);
            }
            load.Get(TimeOccur);
            load.Get(TimeIsAbsolute);
            load.Get(FirstEventNoConditions);
            load.Get(RunningEventId);
            load.Get(NextEventIndex);
        }
    }

    string ToString()
    {
        return "DataIndex: " + DataIndex + ";Status: " + Status + ";HandlerFunction: " + HandlerFunction + ";TimeOccur: " + TimeOccur +
               ";TimeIsAbsolute: " + (TimeIsAbsolute ? "yes" : "no") + ";FirstEventNoConditions: " + (FirstEventNoConditions ? "YES" : "NO") +
               ";RunningEventId: " + RunningEventId;
    }

    void Run()
    {
        uint time = TimeIsAbsolute ? TimeOccur : Game.GetFullSecond() + TimeOccur;
        DL(" Time to start event id " + DataIndex + ": " + time);
        Run(time);
    }

    void Run(uint time)
    {
        ServerTime = time;
        if (TimeOccur > 0 and time < Game.GetFullSecond()) {
            Game.Log("Cannot run event (id=" + DataIndex + "). Time is lost:" + time);
            return;
        }
        RunningEventId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(time - Game.GetFullSecond()), ProcessGameEvent, DataIndex);
        DL("Event " + DataIndex + " running. TimeEventId = " + RunningEventId);
        DL("Tostring::::" + ToString());
        Status = STATUS_RUNNING;
        Save();
    }

    void Stop()
    {
        if (Status != STATUS_RUNNING) {
            return;
        }
        if (RunningEventId != ZERO_IDENT) {
            Game.CancelDeferredCall(RunningEventId);
        }
        RunningEventId = ZERO_IDENT;
        Status = STATUS_ENDED;
        Save();
    }
};

class GameEventManager
{
    uint[] GameEventsIndexes = {};

    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set(GameEventsIndexes);
        Game.GameEventManagerData = save.GetData();
    }

    void Load()
    {
        GameEventsIndexes.clear();
        auto load = Serializator::Serializator();
        if (load.SetData(Game.GameEventManagerData) > 0) {
            load.Get(GameEventsIndexes);
        }
    }

    GameEvent GetGameEventByIndex(uint index)
    {
        GameEvent event = GameEvent(index);
        if (valid(event)) {
            event.Load();
            return event;
        }
        return null;
    }

    // Проверяет, можно ли создать событие, если да, запускает его
    void CheckEventsCanOccure()
    {
        for (uint i = 0, l = GameEventsIndexes.length(); i < l; i++) {
            GameEvent event = GetGameEventByIndex(GameEventsIndexes[i]);
            if (valid(event) && CanOccure(event)) {
                event.Run();
            }
        }
    }

    bool CanOccure(GameEvent event)
    {
        if (valid(event)) {
            if (event.Status == STATUS_RUNNING) {
                return false;
            }
            if (event.FirstEventNoConditions && event.Status == STATUS_NEVER_OCCURED) {
                DL("Can occured");
                return true;
            }
            if (event.OccurConditions.length() == 0) {
                return false;
            }
            for (uint j = 0, k = event.OccurConditions.length(); j < k; j++) {
                GameEvent condition = GetGameEventByIndex(event.OccurConditions[j].GameEventIndex);
                DL("condition!" + "status:" + condition.Status + "Occer condirion:" + event.OccurConditions[j].Status);
                if (!valid(condition) || condition.Status != event.OccurConditions[j].Status) {
                    // не найден эвент, либо не удовлетворяет условиям
                    return false;
                }
            }
            // все условия соблюдены
            return true;
        }
        return false;
    }

    void RunEvent(uint idx, uint time)
    {
        GameEvent event = GetGameEventByIndex(idx);
        if (valid(event)) {
            event.Run(time);
        }
    }

    void RunEvent(uint idx)
    {
        GameEvent event = GetGameEventByIndex(idx);
        if (valid(event)) {
            event.Run();
        }
    }

    void StopEvent(uint idx)
    {
        GameEvent event = GetGameEventByIndex(idx);
        if (valid(event)) {
            event.Stop();
            CheckEventsCanOccure();
        }
    }
};

void ProcessGameEvent(any value)
{
    DL("e_GameEvent");
    uint key = value;
    GameEventManager mng = GameEventManager();
    mng.Load();
    GameEvent event = mng.GetGameEventByIndex(key);
    DL("valid event? status" + event.Status);
    if (valid(event) && event.Status == STATUS_RUNNING) {
        event.Status = STATUS_OCCURED;
        event.Save();
        GameEvent nextEvent;
        if (event.NextEventIndex > 0) {
            nextEvent = mng.GetGameEventByIndex(event.NextEventIndex);
            if (valid(nextEvent) && mng.CanOccure(nextEvent)) {
                nextEvent.Run();
            }
        }
        else {
            mng.CheckEventsCanOccure();
        }

        CallFunc func;
        if (event.HandlerFunction == "GameEventRacing::RunPreparePhase") {
            @func = GameEventRacing::RunPreparePhase;
        }
        else if (event.HandlerFunction == "GameEventRacing::RunBeginPhase") {
            @func = GameEventRacing::RunBeginPhase;
        }
        else if (event.HandlerFunction == "GameEventRacing::RunRacingPhase") {
            @func = GameEventRacing::RunRacingPhase;
        }
        else if (event.HandlerFunction == "GameEventRacing::RunStopPhase") {
            @func = GameEventRacing::RunStopPhase;
        }
        else if (event.HandlerFunction == "GameEventStorehouse::CreateStoreHouse") {
            @func = GameEventStorehouse::CreateStoreHouse;
        }
        else if (event.HandlerFunction == "GameEventCaches::StatusOn") {
            @func = GameEventCaches::StatusOn;
        }
        else if (event.HandlerFunction == "Purgatory::RunPreparationStage") {
            @func = Purgatory::RunPreparationStage;
        }
        else if (event.HandlerFunction == "Purgatory::RunBeginStage") {
            @func = Purgatory::RunBeginStage;
        }
        else if (event.HandlerFunction == "Purgatory::RunFightStage") {
            @func = Purgatory::RunFightStage;
        }
        else if (event.HandlerFunction == "Purgatory::RunEndStage") {
            @func = Purgatory::RunEndStage;
        }
        else if (event.HandlerFunction == "GameEventReplicator::BeginEvent") {
            @func = GameEventReplicator::BeginEvent;
        }
        else if (event.HandlerFunction == "GameEventReplicator::StopEvent") {
            @func = GameEventReplicator::StopEvent;
        }

        Game.DeferredCall(0, func);
        if (event.NextEventIndex == event.DataIndex && valid(nextEvent)) {
            event.Status = STATUS_RUNNING;
        }
        else {
            event.Status = STATUS_ENDED;
        }
        event.Save();
    }
    mng.Save();
}

void DeclareEvents()
{
#define EVENT_RACING_PREPARE    (1)
#define EVENT_RACING_BEGIN      (2)
#define EVENT_RACING_RUN        (3)
#define EVENT_RACING_STOP       (4)
#define EVENT_STOREHOUSE        (5)
#define EVENT_CACHE             (6)
#define EVENT_PURGATORY_PREPARE (7)
#define EVENT_PURGATORY_BEGIN   (8)
#define EVENT_PURGATORY_FIGHT   (9)
#define EVENT_PURGATORY_END     (10)
#define EVENT_ZOMBIE            (11)
#define EVENT_ZOMBIE_STOP       (12)

#define STATUS_NEVER_OCCURED    (0)
#define STATUS_RUNNING          (1)
#define STATUS_OCCURED          (2)
#define STATUS_ENDED            (3)

#define GAME_MONTH              #(mon)(GAME_MONTH_TO_TICK(mon))
#define GAME_DAY                #(day)(GAME_DAY_TO_TICK(day))
#define GAME_WEEK               #(week)(GAME_DAY(7) * week)
#define GAME_HOUR               #(hour)(GAME_HOUR_TO_TICK(hour))

    // void DeclareEvent(uint idx, string handler, uint timeOccure, bool timeAbsolute, bool defaultStart, uint nextEventIdx)
    // void DeclareCondition(uint idx, uint eventCondition, uint status)

    DeclareEvent(EVENT_RACING_PREPARE, "GameEventRacing::RunPreparePhase", GAME_MONTH(4), false, true, EVENT_RACING_BEGIN);
    DeclareCondition(EVENT_RACING_PREPARE, EVENT_RACING_STOP, STATUS_OCCURED);
    DeclareEvent(EVENT_RACING_BEGIN, "GameEventRacing::RunBeginPhase", GAME_WEEK(2), false, false, 0);
    DeclareCondition(EVENT_RACING_BEGIN, EVENT_RACING_PREPARE, STATUS_OCCURED);
    DeclareEvent(EVENT_RACING_RUN, "GameEventRacing::RunRacingPhase", GAME_DAY(1), false, false, EVENT_RACING_STOP);
    DeclareEvent(EVENT_RACING_STOP, "GameEventRacing::RunStopPhase", GAME_DAY(1), false, false, EVENT_RACING_PREPARE);
    DeclareCondition(EVENT_RACING_STOP, EVENT_RACING_RUN, STATUS_OCCURED);
    DeclareEvent(EVENT_STOREHOUSE, "GameEventStorehouse::GameEventStorehouse::CreateStoreHouse", GAME_MONTH(1), false, true, EVENT_STOREHOUSE);
    DeclareCondition(EVENT_STOREHOUSE, EVENT_STOREHOUSE, STATUS_OCCURED);
    DeclareEvent(EVENT_CACHE, "GameEventCaches::StatusOn", GAME_DAY(7), false, true, EVENT_CACHE);
    DeclareCondition(EVENT_CACHE, EVENT_CACHE, STATUS_OCCURED);
    DeclareEvent(EVENT_PURGATORY_PREPARE, "Purgatory::RunPreparationStage", GAME_MONTH(1), false, true, EVENT_PURGATORY_BEGIN);
    DeclareCondition(EVENT_PURGATORY_PREPARE, EVENT_PURGATORY_END, STATUS_OCCURED);
    DeclareEvent(EVENT_PURGATORY_BEGIN, "Purgatory::RunBeginStage", GAME_DAY(1), false, false, EVENT_PURGATORY_FIGHT);
    DeclareCondition(EVENT_PURGATORY_BEGIN, EVENT_PURGATORY_PREPARE, STATUS_OCCURED);
    DeclareEvent(EVENT_PURGATORY_FIGHT, "Purgatory::RunFightStage", Time::RealMinute(5), false, false, EVENT_PURGATORY_END);
    DeclareCondition(EVENT_PURGATORY_FIGHT, EVENT_PURGATORY_BEGIN, STATUS_OCCURED);
    DeclareEvent(EVENT_PURGATORY_END, "Purgatory::RunEndStage", GAME_DAY(2), false, false, EVENT_PURGATORY_PREPARE);
    DeclareCondition(EVENT_PURGATORY_END, EVENT_PURGATORY_FIGHT, STATUS_OCCURED);
    DeclareEvent(EVENT_ZOMBIE, "GameEventReplicator::BeginEvent", GAME_MONTH(5), false, true, 0);
    DeclareCondition(EVENT_ZOMBIE, EVENT_ZOMBIE_STOP, STATUS_OCCURED);
    DeclareEvent(EVENT_ZOMBIE_STOP, "GameEventReplicator::StopEvent", GAME_MONTH(1), false, false, EVENT_ZOMBIE);
}

void DeclareCondition(uint idx, uint eventCondition, uint status)
{
    GameEventManager mng;
    mng.Load();
    GameEvent event = mng.GetGameEventByIndex(idx);
    if (valid(event)) {
        event.AddCondition(eventCondition, status);
        event.Save();
    }
}

void DeclareEvent(uint idx, string handler, uint timeOccure, bool timeAbsolute, bool defaultStart, uint nextEventIdx)
{
    GameEventManager mng;
    mng.Load();
    if (mng.GameEventsIndexes.find(idx) >= 0) {
        return;
    }
    GameEvent event = GameEvent();
    event.DataIndex = idx;
    event.Status = STATUS_NEVER_OCCURED;
    event.HandlerFunction = handler;
    event.TimeOccur = timeOccure;
    event.TimeIsAbsolute = timeAbsolute;
    event.FirstEventNoConditions = defaultStart;
    event.NextEventIndex = nextEventIdx;
    mng.GameEventsIndexes.insertLast(idx);
    event.Save();
    mng.Save();
}

bool CheckEventStatus(uint idx, uint status)
{
    GameEventManager mng;
    mng.Load();
    GameEvent event = mng.GetGameEventByIndex(idx);
    if (valid(event) && event.Status == status) {
        return true;
    }
    return false;
}

uint GetEventOccurenceTime(uint idx)
{
    GameEventManager mng;
    mng.Load();
    GameEvent event = mng.GetGameEventByIndex(idx);
    if (valid(event) && event.Status == STATUS_RUNNING) {
        return event.ServerTime;
    }
    return 0;
}

void CheckAllGameEvents()
{
    GameEventManager mng;
    mng.Load();
    mng.CheckEventsCanOccure();
}

void RunGameEvent(uint idx, uint time)
{
    GameEventManager mng;
    mng.Load();
    mng.RunEvent(idx, time);
}

void RunGameEvent(uint idx)
{
    GameEventManager mng;
    mng.Load();
    mng.RunEvent(idx);
}

void StopGameEvent(uint idx)
{
    GameEventManager mng;
    mng.Load();
    mng.StopEvent(idx);
}

bool d_GameEventStatus(Critter player, Critter npc, int idx, int status)
{
    return CheckEventStatus(uint(idx), uint(status));
}
