// FOS Mapper

// Author: cvet
// Mapper main script

void ModuleInit()
{
    Game.OnStart.Subscribe(start);
    Game.OnFinish.Subscribe(finish);
    // Game.OnLoop.Subscribe( loop );
    Game.OnConsoleMessage.Subscribe(console_message);
    Game.OnRenderIface.Subscribe(render_iface);
    Game.OnRenderMap.Subscribe(render_map);
    Game.OnMouseDown.Subscribe(mouse_down);
    Game.OnMouseUp.Subscribe(mouse_up);
    Game.OnMouseMove.Subscribe(mouse_move);
    Game.OnKeyDown.Subscribe(key_down);
    Game.OnKeyUp.Subscribe(key_up);
    Game.OnInputLost.Subscribe(input_lost);
    Game.OnEditMapLoad.Subscribe(map_load);
    Game.OnEditMapSave.Subscribe(map_save);
    Game.OnInspectorProperties.Subscribe(inspector_properties);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on new mapper instance creating.
// Return true to handle event and close new instance or
// return false to allow creating of new mapper instance.
bool new_instance(string commandLine)
{
    return false;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on mapper loaded.
void start()
{
    // Game.LoadFont( Fonts::Big, "*Big" );
    Game.LoadFont(Fonts::Default, "*Default");
    InitializeTabs();
}

void InitializeTabs()
{
    ProtoItem[] allProtos = Game.GetProtoItems();

    // Tiles
    hstring[] tilePids = {};
    for (uint i = 0; i < allProtos.length(); i++) {
        if (allProtos[i].IsTile) {
            tilePids.insertLast(allProtos[i].ProtoId);
        }
    }
    Game.TabSetItemPids(TAB_TILES, "Tiles", tilePids);

    // FAST TAB
    Game.TabDelete(TAB_FAST_ITEMS);
    hstring[] pids = {};

    // Special hexes
    pids.clear();
    pids.insertLast(Content::Item::Block);
    pids.insertLast(Content::Item::BlockLight);
    pids.insertLast(Content::Item::Entrance);
    pids.insertLast(Content::Item::ExitGrid);
    pids.insertLast(Content::Item::MinimapInvisibleBlock);
    pids.insertLast(Content::Item::ScrollBlock);
    pids.insertLast(Content::Item::Trigger);
    Game.TabSetItemPids(TAB_FAST_ITEMS, "001 - special", pids);
    pids.clear();
    pids.insertLast(Content::Item::generic_2612); // woodfire.frm
    pids.insertLast(Content::Item::generic_2827); // mblight3.frm
    pids.insertLast(Content::Item::generic_2828); // mblight4.frm
    pids.insertLast(Content::Item::generic_2907); // art/scenery/mblight3.frm
    pids.insertLast(Content::Item::generic_2908); // art/scenery/mblight4.frm
    pids.insertLast(Content::Item::generic_2935); // atorch1.frm
    pids.insertLast(Content::Item::generic_2936); // atorch2.frm
    pids.insertLast(Content::Item::generic_3373); // atorch3.frm..atorch6.frm
    pids.insertLast(Content::Item::generic_3374);
    pids.insertLast(Content::Item::generic_3375);
    pids.insertLast(Content::Item::generic_3376);
    Game.TabSetItemPids(TAB_FAST_ITEMS, "002 - light", pids);

    // ARMOR TAB
    Game.TabDelete(TAB_CUSTOM0);
    pids.clear();
    pids.insertLast(Content::Item::leather_armor);
    pids.insertLast(Content::Item::metal_armor);
    pids.insertLast(Content::Item::powered_armor);
    pids.insertLast(Content::Item::combat_armor);
    pids.insertLast(Content::Item::leather_jacket);
    pids.insertLast(Content::Item::purple_robe);
    pids.insertLast(Content::Item::hardened_power_armor);
    pids.insertLast(Content::Item::brotherhood_combat_armor);
    pids.insertLast(Content::Item::tesla_armor);
    pids.insertLast(Content::Item::cured_leather_armor);
    pids.insertLast(Content::Item::advanced_power_armor);
    pids.insertLast(Content::Item::advanced_power_armor_mk2);
    pids.insertLast(Content::Item::leather_armor_mk_ii);
    pids.insertLast(Content::Item::metal_armor_mk_ii);
    pids.insertLast(Content::Item::combat_armor_mk_ii);
    pids.insertLast(Content::Item::keepbrige_robe);
    Game.TabSetItemPids(TAB_CUSTOM0, "001 - Fallout 2 armor", pids);
    pids.clear();
    pids.insertLast(Content::Item::black_combat_armor);
    pids.insertLast(Content::Item::jumpsuit);
    pids.insertLast(Content::Item::fake_jumpsuit);
    pids.insertLast(Content::Item::black_robe);
    pids.insertLast(Content::Item::chitin_armor);
    pids.insertLast(Content::Item::chitin_armor_mk_ii);
    pids.insertLast(Content::Item::end_boss_plasma_gun);
    Game.TabSetItemPids(TAB_CUSTOM0, "002 - FOnline armor", pids);
    Game.TabSetName(TAB_CUSTOM0, "Arm");

    // DRUGS TAB
    Game.TabDelete(TAB_CUSTOM1);
    pids.clear();
    pids.insertLast(Content::Item::stimpak);
    pids.insertLast(Content::Item::radaway);
    pids.insertLast(Content::Item::antidote);
    pids.insertLast(Content::Item::mentats);
    pids.insertLast(Content::Item::mutated_fruit);
    pids.insertLast(Content::Item::iguana_on_a_stick);
    pids.insertLast(Content::Item::buffout);
    pids.insertLast(Content::Item::meat_on_a_stick);
    pids.insertLast(Content::Item::nuka_cola);
    pids.insertLast(Content::Item::rad_x);
    pids.insertLast(Content::Item::psycho);
    pids.insertLast(Content::Item::beer);
    pids.insertLast(Content::Item::booze);
    pids.insertLast(Content::Item::super_stimpak);
    pids.insertLast(Content::Item::jet);
    pids.insertLast(Content::Item::jet_antidote);
    pids.insertLast(Content::Item::healing_powder);
    pids.insertLast(Content::Item::gamma_gulp_beer);
    pids.insertLast(Content::Item::roentgen_rum);
    pids.insertLast(Content::Item::hypo_poison);
    pids.insertLast(Content::Item::cookie);
    pids.insertLast(Content::Item::monument_chunck);
    pids.insertLast(Content::Item::rot_gut);
    pids.insertLast(Content::Item::mutated_toe);
    pids.insertLast(Content::Item::kitty_sex_drug_agility);
    pids.insertLast(Content::Item::kitty_sex_drug_intelligence);
    pids.insertLast(Content::Item::kitty_sex_drug_strength);
    pids.insertLast(Content::Item::hypo);
    pids.insertLast(Content::Item::box_of_doughnuts);
    Game.TabSetItemPids(TAB_CUSTOM1, "001 - Drugs", pids);
    Game.TabSetName(TAB_CUSTOM1, "Drg");

    // WEAPON TAB
    Game.TabDelete(TAB_CUSTOM2);

    pids.clear();
    pids.insertLast(Content::Item::knife);
    pids.insertLast(Content::Item::club);
    pids.insertLast(Content::Item::sledgehammer);
    pids.insertLast(Content::Item::spear);
    pids.insertLast(Content::Item::_10mm_pistol);
    pids.insertLast(Content::Item::_10mm_smg);
    pids.insertLast(Content::Item::hunting_rifle);
    pids.insertLast(Content::Item::flamer);
    pids.insertLast(Content::Item::minigun);
    pids.insertLast(Content::Item::rocket_launcher);
    pids.insertLast(Content::Item::plasma_rifle);
    pids.insertLast(Content::Item::laser_pistol);
    pids.insertLast(Content::Item::desert_eagle);
    pids.insertLast(Content::Item::rock);
    pids.insertLast(Content::Item::crowbar);
    pids.insertLast(Content::Item::brass_knuckles);
    pids.insertLast(Content::Item::_14mm_pistol);
    pids.insertLast(Content::Item::assault_rifle);
    pids.insertLast(Content::Item::plasma_pistol);
    pids.insertLast(Content::Item::frag_grenade);
    pids.insertLast(Content::Item::plasma_grenade);
    pids.insertLast(Content::Item::pulse_grenade);
    pids.insertLast(Content::Item::gatling_laser);
    pids.insertLast(Content::Item::throwing_knife);
    pids.insertLast(Content::Item::flare);
    pids.insertLast(Content::Item::shotgun);
    pids.insertLast(Content::Item::super_sledge);
    pids.insertLast(Content::Item::ripper);
    pids.insertLast(Content::Item::laser_rifle);
    pids.insertLast(Content::Item::alien_laser_pistol);
    pids.insertLast(Content::Item::_9mm_mauser);
    pids.insertLast(Content::Item::sniper_rifle);
    pids.insertLast(Content::Item::molotov_cocktail);
    pids.insertLast(Content::Item::cattle_prod);
    pids.insertLast(Content::Item::red_ryder_bb_gun);
    pids.insertLast(Content::Item::red_ryder_le_bb_gun);
    pids.insertLast(Content::Item::active_flare);
    pids.insertLast(Content::Item::turbo_plasma_rifle);
    pids.insertLast(Content::Item::spiked_knuckles);
    pids.insertLast(Content::Item::power_fist);
    pids.insertLast(Content::Item::combat_knife);
    pids.insertLast(Content::Item::_223_pistol);
    pids.insertLast(Content::Item::combat_shotgun);
    pids.insertLast(Content::Item::jonny_bb_gun);
    pids.insertLast(Content::Item::hk_caws);
    pids.insertLast(Content::Item::robo_rocket_launcher);
    pids.insertLast(Content::Item::sharp_spear);
    pids.insertLast(Content::Item::tommy_gun);
    pids.insertLast(Content::Item::scoped_hunting_rifle);
    pids.insertLast(Content::Item::eyeball_fist_1);
    pids.insertLast(Content::Item::eyeball_fist_2);
    pids.insertLast(Content::Item::boxing_gloves);
    pids.insertLast(Content::Item::plated_boxing_gloves);
    pids.insertLast(Content::Item::hk_p90c);
    pids.insertLast(Content::Item::springer_rifle);
    pids.insertLast(Content::Item::zip_gun);
    pids.insertLast(Content::Item::_44_magnum_revolver);
    pids.insertLast(Content::Item::switchblade);
    pids.insertLast(Content::Item::sharpened_pole);
    pids.insertLast(Content::Item::grease_gun);
    pids.insertLast(Content::Item::bozar);
    pids.insertLast(Content::Item::fn_fal);
    pids.insertLast(Content::Item::hk_g11);
    pids.insertLast(Content::Item::independent);
    pids.insertLast(Content::Item::pancor_jackhammer);
    pids.insertLast(Content::Item::light_support_weapon);
    pids.insertLast(Content::Item::plant_spike);
    pids.insertLast(Content::Item::deathclaw_claw_1);
    pids.insertLast(Content::Item::deathclaw_claw_2);
    pids.insertLast(Content::Item::shiv);
    pids.insertLast(Content::Item::wrench);
    pids.insertLast(Content::Item::sawed_off_shotgun);
    pids.insertLast(Content::Item::louisville_slugger);
    pids.insertLast(Content::Item::m60);
    pids.insertLast(Content::Item::needler_pistol);
    pids.insertLast(Content::Item::avenger_minigun);
    pids.insertLast(Content::Item::solar_scorcher);
    pids.insertLast(Content::Item::hk_g11e);
    pids.insertLast(Content::Item::m72_gauss_rifle);
    pids.insertLast(Content::Item::phazer);
    pids.insertLast(Content::Item::pk12_gauss_pistol);
    pids.insertLast(Content::Item::vindicator_minigun);
    pids.insertLast(Content::Item::yk32_pulse_pistol);
    pids.insertLast(Content::Item::yk42b_pulse_rifle);
    pids.insertLast(Content::Item::_44_magnum_speedloader);
    pids.insertLast(Content::Item::super_cattle_prod);
    pids.insertLast(Content::Item::improved_flamethrower);
    pids.insertLast(Content::Item::laser_rifle_ext_cap);
    pids.insertLast(Content::Item::magneto_laser_pistol);
    pids.insertLast(Content::Item::fn_fal_night_scope);
    pids.insertLast(Content::Item::desert_eagle_ext_mag);
    pids.insertLast(Content::Item::assault_rifle_ext_mag);
    pids.insertLast(Content::Item::plasma_pistol_ext_cart);
    pids.insertLast(Content::Item::mega_power_fist);
    pids.insertLast(Content::Item::holy_hand_grenade);
    pids.insertLast(Content::Item::gold_nugget);
    pids.insertLast(Content::Item::uranium_ore);
    pids.insertLast(Content::Item::fire_gecko_flame_weapon);
    pids.insertLast(Content::Item::refined_ore);
    pids.insertLast(Content::Item::special_boxer_weapon);
    pids.insertLast(Content::Item::ring_boxing_gloves);
    pids.insertLast(Content::Item::ring_plated_boxing_gloves);
    pids.insertLast(Content::Item::gun_turret_weapon);
    pids.insertLast(Content::Item::fn_fal_hpfa);
    pids.insertLast(Content::Item::lil_jesus_weapon);
    pids.insertLast(Content::Item::dual_minigun);
    pids.insertLast(Content::Item::heavy_dual_minigun);
    pids.insertLast(Content::Item::wakizashi_blade);
    pids.insertLast(Content::Item::end_boss_kife);
    pids.insertLast(Content::Item::end_boss_plasma_gun);
    Game.TabSetItemPids(TAB_CUSTOM2, "001 - Fallout 2 weapons", pids);

    pids.clear();
    pids.insertLast(Content::Item::heavy_dual_minigun_long_range);
    pids.insertLast(Content::Item::mauser_smg);
    pids.insertLast(Content::Item::elephant_gun);
    Game.TabSetItemPids(TAB_CUSTOM2, "002 - FOnline weapons", pids);

    Game.TabSetName(TAB_CUSTOM2, "Wpn");

    // AMMO TAB
    Game.TabDelete(TAB_CUSTOM3);
    pids.clear();
    pids.insertLast(Content::Item::_10mm_jhp);
    pids.insertLast(Content::Item::_10mm_ap);
    pids.insertLast(Content::Item::_44_magnum_jhp);
    pids.insertLast(Content::Item::flamethrower_fuel);
    pids.insertLast(Content::Item::explosive_rocket);
    pids.insertLast(Content::Item::_14mm_ap);
    pids.insertLast(Content::Item::_223_fmj);
    pids.insertLast(Content::Item::_5mm_jhp);
    pids.insertLast(Content::Item::_5mm_ap);
    pids.insertLast(Content::Item::rocket_ap);
    pids.insertLast(Content::Item::small_energy_cell);
    pids.insertLast(Content::Item::micro_fusion_cell);
    pids.insertLast(Content::Item::shotgun_shells);
    pids.insertLast(Content::Item::_44_fmj_magnum);
    pids.insertLast(Content::Item::_9mm_ball);
    pids.insertLast(Content::Item::bbs);
    pids.insertLast(Content::Item::robo_rocket_ammo);
    pids.insertLast(Content::Item::_45_caliber_ammo);
    pids.insertLast(Content::Item::_2mm_ec_ammo);
    pids.insertLast(Content::Item::_4_7mm_caseless);
    pids.insertLast(Content::Item::_9mm_ammo);
    pids.insertLast(Content::Item::hn_needler_cartridge);
    pids.insertLast(Content::Item::hn_ap_needler_cartridge);
    pids.insertLast(Content::Item::_7_62mm_ammo);
    pids.insertLast(Content::Item::flamethrower_fuel_mk_ii);
    pids.insertLast(Content::Item::_700_nitro_express);
    Game.TabSetItemPids(TAB_CUSTOM3, "001 - Ammo", pids);
    Game.TabSetName(TAB_CUSTOM3, "Amm");

    // MSC TAB
    Game.TabDelete(TAB_CUSTOM4);

    pids.clear();
    pids.insertLast(Content::Item::bottle_caps);
    pids.insertLast(Content::Item::first_aid_kit);
    pids.insertLast(Content::Item::steel);
    pids.insertLast(Content::Item::dynamite);
    pids.insertLast(Content::Item::stealth_boy);
    pids.insertLast(Content::Item::water_chip);
    pids.insertLast(Content::Item::dog_tags);
    pids.insertLast(Content::Item::electronic_bug);
    pids.insertLast(Content::Item::holodisk);
    pids.insertLast(Content::Item::motion_sensor);
    pids.insertLast(Content::Item::briefcase);
    pids.insertLast(Content::Item::big_book_of_science);
    pids.insertLast(Content::Item::multi_tool);
    pids.insertLast(Content::Item::deans_electronics);
    pids.insertLast(Content::Item::electronic_lockpicks);
    pids.insertLast(Content::Item::fuzzy_painting);
    pids.insertLast(Content::Item::first_aid_book);
    pids.insertLast(Content::Item::lockpicks);
    pids.insertLast(Content::Item::plastic_explosives);
    pids.insertLast(Content::Item::scout_handbook);
    pids.insertLast(Content::Item::watch);
    pids.insertLast(Content::Item::motor);
    pids.insertLast(Content::Item::doctors_bag);
    pids.insertLast(Content::Item::scorpion_tail);
    pids.insertLast(Content::Item::pump_parts);
    pids.insertLast(Content::Item::gold_locket);
    pids.insertLast(Content::Item::lighter);
    pids.insertLast(Content::Item::guns_and_bullets);
    pids.insertLast(Content::Item::tape_recorder);
    pids.insertLast(Content::Item::urn);
    pids.insertLast(Content::Item::tanglers_hand);
    pids.insertLast(Content::Item::flower);
    pids.insertLast(Content::Item::necklace);
    pids.insertLast(Content::Item::psychic_nullifier);
    pids.insertLast(Content::Item::water_flask);
    pids.insertLast(Content::Item::rope);
    pids.insertLast(Content::Item::access_card);
    pids.insertLast(Content::Item::black_coc_badge);
    pids.insertLast(Content::Item::red_coc_badge);
    pids.insertLast(Content::Item::disk_fev);
    pids.insertLast(Content::Item::disk_security);
    pids.insertLast(Content::Item::disk_alpha_experiment);
    pids.insertLast(Content::Item::disk_delta_experiment);
    pids.insertLast(Content::Item::disk_vrees_experiment);
    pids.insertLast(Content::Item::disk_brotherhood_honor_code);
    pids.insertLast(Content::Item::disk_mutant_transmissions);
    pids.insertLast(Content::Item::active_geiger_counter);
    pids.insertLast(Content::Item::active_motion_sensor);
    pids.insertLast(Content::Item::active_stealth_boy);
    pids.insertLast(Content::Item::barter_tandi);
    pids.insertLast(Content::Item::disk_brotherhood_history);
    pids.insertLast(Content::Item::disk_maxson_history);
    pids.insertLast(Content::Item::disk_maxson_journal);
    pids.insertLast(Content::Item::security_card);
    pids.insertLast(Content::Item::yellow_pass_key);
    pids.insertLast(Content::Item::small_statuette);
    pids.insertLast(Content::Item::cats_paw);
    pids.insertLast(Content::Item::box_of_noodles);
    pids.insertLast(Content::Item::frozen_dinner);
    pids.insertLast(Content::Item::technical_manual);
    pids.insertLast(Content::Item::motivator);
    pids.insertLast(Content::Item::disk_vault_records);
    pids.insertLast(Content::Item::disk_military_base_sec_code);
    pids.insertLast(Content::Item::chemistry_manual);
    pids.insertLast(Content::Item::disk_regulator_transmissions);
    pids.insertLast(Content::Item::anna_gold_locket);
    pids.insertLast(Content::Item::car_fuel_cell_controller);
    pids.insertLast(Content::Item::car_fuel_injection);
    pids.insertLast(Content::Item::day_pass);
    pids.insertLast(Content::Item::fake_citizenship);
    pids.insertLast(Content::Item::cornelius_gold_watch);
    pids.insertLast(Content::Item::hy_mag_part);
    pids.insertLast(Content::Item::rubber_boots);
    pids.insertLast(Content::Item::slag_message);
    pids.insertLast(Content::Item::smith_cool_item);
    pids.insertLast(Content::Item::vic_radio);
    pids.insertLast(Content::Item::vic_water_flask);
    pids.insertLast(Content::Item::robot_parts);
    pids.insertLast(Content::Item::broc_flower);
    pids.insertLast(Content::Item::xander_root);
    pids.insertLast(Content::Item::trophy_of_recognition);
    pids.insertLast(Content::Item::gecko_pelt);
    pids.insertLast(Content::Item::golden_gecko_pelt);
    pids.insertLast(Content::Item::flint);
    pids.insertLast(Content::Item::neural_interface);
    pids.insertLast(Content::Item::dixon_eye);
    pids.insertLast(Content::Item::clifton_eye);
    pids.insertLast(Content::Item::meat_jerky);
    pids.insertLast(Content::Item::radscorpion_parts);
    pids.insertLast(Content::Item::firewood);
    pids.insertLast(Content::Item::car_fuel_cell);
    pids.insertLast(Content::Item::shovel);
    pids.insertLast(Content::Item::holodisk_fake_v13);
    pids.insertLast(Content::Item::cheezy_poofs);
    pids.insertLast(Content::Item::plank);
    pids.insertLast(Content::Item::trapper_town_key);
    pids.insertLast(Content::Item::clipboard);
    pids.insertLast(Content::Item::gecko_data_disk);
    pids.insertLast(Content::Item::reactor_data_disk);
    pids.insertLast(Content::Item::deck_of_tragic_cards);
    pids.insertLast(Content::Item::yellow_reactor_keycard);
    pids.insertLast(Content::Item::red_reactor_keycard);
    pids.insertLast(Content::Item::plasma_transformer);
    pids.insertLast(Content::Item::super_tool_kit);
    pids.insertLast(Content::Item::talisman);
    pids.insertLast(Content::Item::part_requisition_form);
    pids.insertLast(Content::Item::blue_condom);
    pids.insertLast(Content::Item::green_condom);
    pids.insertLast(Content::Item::red_condom);
    pids.insertLast(Content::Item::cosmetic_case);
    pids.insertLast(Content::Item::hypodermic_needle);
    pids.insertLast(Content::Item::cybernetic_brain);
    pids.insertLast(Content::Item::human_brain);
    pids.insertLast(Content::Item::chimp_brain);
    pids.insertLast(Content::Item::abnormal_brain);
    pids.insertLast(Content::Item::dice);
    pids.insertLast(Content::Item::loaded_dice);
    pids.insertLast(Content::Item::easter_egg);
    pids.insertLast(Content::Item::magic_8_ball);
    pids.insertLast(Content::Item::mutagenic_syrum);
    pids.insertLast(Content::Item::cats_paw_issue_5);
    pids.insertLast(Content::Item::heart_pills);
    pids.insertLast(Content::Item::moore_bad_briefcase);
    pids.insertLast(Content::Item::moore_good_briefcase);
    pids.insertLast(Content::Item::lynette_holo);
    pids.insertLast(Content::Item::westin_holo);
    pids.insertLast(Content::Item::spy_holo);
    pids.insertLast(Content::Item::dr_henry_papers);
    pids.insertLast(Content::Item::presidential_pass);
    pids.insertLast(Content::Item::ranger_pin);
    pids.insertLast(Content::Item::ranger_map);
    pids.insertLast(Content::Item::computer_voice_module);
    pids.insertLast(Content::Item::robot_motivator);
    pids.insertLast(Content::Item::geck);
    pids.insertLast(Content::Item::v15_keycard);
    pids.insertLast(Content::Item::v15_computer_part);
    pids.insertLast(Content::Item::field_medic_kit);
    pids.insertLast(Content::Item::paramedics_bag);
    pids.insertLast(Content::Item::exp_lockpick_set);
    pids.insertLast(Content::Item::elec_lockpick_mkii);
    pids.insertLast(Content::Item::oil_can);
    pids.insertLast(Content::Item::stables_id_badge);
    pids.insertLast(Content::Item::vault_13_shack_key);
    pids.insertLast(Content::Item::spectacles);
    pids.insertLast(Content::Item::empty_jet);
    pids.insertLast(Content::Item::oxygen_tank);
    pids.insertLast(Content::Item::poison_tank);
    pids.insertLast(Content::Item::mine_part);
    pids.insertLast(Content::Item::morning_star_mine);
    pids.insertLast(Content::Item::excavator_chip);
    pids.insertLast(Content::Item::stone_head);
    pids.insertLast(Content::Item::medical_supplies);
    pids.insertLast(Content::Item::gold_tooth);
    pids.insertLast(Content::Item::howitzer_shell);
    pids.insertLast(Content::Item::ramirez_box_closed);
    pids.insertLast(Content::Item::ramirez_box_open);
    pids.insertLast(Content::Item::mirror_shades);
    pids.insertLast(Content::Item::deck_of_cards);
    pids.insertLast(Content::Item::marked_deck_of_cards);
    pids.insertLast(Content::Item::temple_key);
    pids.insertLast(Content::Item::pocket_lint);
    pids.insertLast(Content::Item::bio_gel);
    pids.insertLast(Content::Item::blondie_dog_tag);
    pids.insertLast(Content::Item::angel_eyes_dog_tag);
    pids.insertLast(Content::Item::tuco_dog_tag);
    pids.insertLast(Content::Item::raiders_map);
    pids.insertLast(Content::Item::sheriff_badge);
    pids.insertLast(Content::Item::vertibird_plans);
    pids.insertLast(Content::Item::bishops_holodisk);
    pids.insertLast(Content::Item::account_book);
    pids.insertLast(Content::Item::brahmin_skin);
    pids.insertLast(Content::Item::torn_paper_1);
    pids.insertLast(Content::Item::torn_paper_2);
    pids.insertLast(Content::Item::torn_paper_3);
    pids.insertLast(Content::Item::password_paper);
    pids.insertLast(Content::Item::explosive_switch);
    pids.insertLast(Content::Item::elron_field_rep);
    pids.insertLast(Content::Item::enclave_holodisk_5);
    pids.insertLast(Content::Item::enclave_holodisk_1);
    pids.insertLast(Content::Item::enclave_holodisk_2);
    pids.insertLast(Content::Item::enclave_holodisk_3);
    pids.insertLast(Content::Item::enclave_holodisk_4);
    pids.insertLast(Content::Item::evacuation_holodisk);
    pids.insertLast(Content::Item::experiment_holodisk);
    pids.insertLast(Content::Item::medical_holodisk);
    pids.insertLast(Content::Item::password_holodisk);
    pids.insertLast(Content::Item::smitty_meal);
    pids.insertLast(Content::Item::ball_gag);
    pids.insertLast(Content::Item::becky_book);
    pids.insertLast(Content::Item::elron_member_holo);
    pids.insertLast(Content::Item::daisies);
    pids.insertLast(Content::Item::metal_trash);
    pids.insertLast(Content::Item::enlightened_one_letter);
    pids.insertLast(Content::Item::broadcast_holodisk);
    pids.insertLast(Content::Item::sierra_mission_holodisk);
    pids.insertLast(Content::Item::navcom_parts);
    pids.insertLast(Content::Item::fallout_2_hintbook);
    pids.insertLast(Content::Item::players_ear);
    pids.insertLast(Content::Item::masticators_ear);
    pids.insertLast(Content::Item::memo);
    pids.insertLast(Content::Item::k9_motivator);
    pids.insertLast(Content::Item::ncr_history_holodisk);
    pids.insertLast(Content::Item::mr_nixon_doll);
    pids.insertLast(Content::Item::tanker_fob);
    pids.insertLast(Content::Item::elron_teach_holo);
    pids.insertLast(Content::Item::kokoweef_mine_scrip);
    pids.insertLast(Content::Item::pres_access_key);
    pids.insertLast(Content::Item::dermal_pip_boy_disk);
    pids.insertLast(Content::Item::mem_chip_blue);
    pids.insertLast(Content::Item::mem_chip_green);
    pids.insertLast(Content::Item::mem_chip_red);
    pids.insertLast(Content::Item::mem_chip_yellow);
    pids.insertLast(Content::Item::decomposing_body);
    pids.insertLast(Content::Item::blow_up_doll);
    pids.insertLast(Content::Item::popped_blow_up_doll);
    pids.insertLast(Content::Item::pip_boy_medical_enhancer);
    pids.insertLast(Content::Item::real_bottle_caps);
    pids.insertLast(Content::Item::map);
    pids.insertLast(Content::Item::bottle_empty);
    pids.insertLast(Content::Item::bottle_full);
    pids.insertLast(Content::Item::part_of_rope);
    pids.insertLast(Content::Item::gunpowder);
    pids.insertLast(Content::Item::metal_ore);
    pids.insertLast(Content::Item::mineral);
    pids.insertLast(Content::Item::tube);
    pids.insertLast(Content::Item::meat);
    pids.insertLast(Content::Item::mouse_skin);
    pids.insertLast(Content::Item::cigarettes);
    pids.insertLast(Content::Item::bottle_glass);
    pids.insertLast(Content::Item::axe);
    pids.insertLast(Content::Item::mine);
    pids.insertLast(Content::Item::chosen_holo);
    pids.insertLast(Content::Item::chosen_holo_decoded);
    pids.insertLast(Content::Item::letter_to_lin);
    pids.insertLast(Content::Item::letter_to_todd);
    pids.insertLast(Content::Item::edward_report);
    pids.insertLast(Content::Item::letter_to_sindy);
    pids.insertLast(Content::Item::letter_to_cassidy);
    pids.insertLast(Content::Item::fire_gecko_pelt);
    pids.insertLast(Content::Item::danton_poison);
    pids.insertLast(Content::Item::arroyo_syringe);
    pids.insertLast(Content::Item::death_star_plans);
    pids.insertLast(Content::Item::fallout_3_holo);
    pids.insertLast(Content::Item::fake_geck);
    pids.insertLast(Content::Item::used_geck);
    pids.insertLast(Content::Item::welding);
    pids.insertLast(Content::Item::welding_used);
    pids.insertLast(Content::Item::rags);
    pids.insertLast(Content::Item::nitroglycerin);
    pids.insertLast(Content::Item::chemicals);
    pids.insertLast(Content::Item::tnt);
    pids.insertLast(Content::Item::hexogen);
    pids.insertLast(Content::Item::plastic_explosives_dull);
    pids.insertLast(Content::Item::sandbag_empty);
    Game.TabSetItemPids(TAB_CUSTOM4, "001 - Misc", pids);

    pids.clear();
    pids.insertLast(Content::Item::eb_long_hor);
    pids.insertLast(Content::Item::eb_long_vert);
    pids.insertLast(Content::Item::eb_blocker);
    pids.insertLast(Content::Item::energy_barier_access_card);
    pids.insertLast(Content::Item::eb_trigger);
    pids.insertLast(Content::Item::eb_short_hor1);
    pids.insertLast(Content::Item::eb_short_vert1);
    pids.insertLast(Content::Item::eb_short_hor1_red);
    pids.insertLast(Content::Item::eb_short_vert1_red);
    pids.insertLast(Content::Item::eb_short_hor2);
    pids.insertLast(Content::Item::eb_short_vert2);
    pids.insertLast(Content::Item::eb_short_hor2_red);
    pids.insertLast(Content::Item::eb_short_vert2_red);
    pids.insertLast(Content::Item::eb_short_hor3);
    pids.insertLast(Content::Item::eb_short_vert3);
    pids.insertLast(Content::Item::eb_short_hor3_red);
    pids.insertLast(Content::Item::eb_short_vert3_red);
    pids.insertLast(Content::Item::eb_emitter_hor1);
    pids.insertLast(Content::Item::eb_emitter_vert1);
    pids.insertLast(Content::Item::eb_emitter_hor2);
    pids.insertLast(Content::Item::eb_emitter_vert2);
    pids.insertLast(Content::Item::eb_emitter_hor3);
    pids.insertLast(Content::Item::eb_emitter_vert3);
    Game.TabSetItemPids(TAB_CUSTOM4, "002 - E. barriers", pids);

    Game.TabSetName(TAB_CUSTOM4, "Msc");

    // MSC2 TAB
    Game.TabDelete(TAB_CUSTOM5);
    // Key
    pids.clear();
    pids.insertLast(Content::Item::key);
    pids.insertLast(Content::Item::keys);
    pids.insertLast(Content::Item::red_pass_key);
    pids.insertLast(Content::Item::blue_pass_key);
    pids.insertLast(Content::Item::nuke_key);
    pids.insertLast(Content::Item::yellow_pass_key);
    pids.insertLast(Content::Item::temple_key);
    pids.insertLast(Content::Item::jail_key);
    Game.TabSetItemPids(TAB_CUSTOM5, "001 - keys", pids);

    // Msc2 items
    pids.clear();
    pids.insertLast(Content::Item::geiger_counter);
    pids.insertLast(Content::Item::holodisk);
    pids.insertLast(Content::Item::radio);
    pids.insertLast(Content::Item::active_dynamite);
    pids.insertLast(Content::Item::active_plastic_explosive);
    pids.insertLast(Content::Item::toggle_switch);
    pids.insertLast(Content::Item::memo);
    pids.insertLast(Content::Item::map);
    pids.insertLast(Content::Item::active_mine);
    pids.insertLast(Content::Item::postman_letter);
    pids.insertLast(Content::Item::chosen_holo);
    pids.insertLast(Content::Item::chosen_holo_decoded);
    pids.insertLast(Content::Item::letter_to_lin);
    pids.insertLast(Content::Item::letter_to_todd);
    pids.insertLast(Content::Item::edward_report);
    pids.insertLast(Content::Item::letter_to_sindy);
    pids.insertLast(Content::Item::letter_to_cassidy);
    pids.insertLast(Content::Item::hubologist_book);
    pids.insertLast(Content::Item::rebel_tag);
    pids.insertLast(Content::Item::sandbag_1);
    pids.insertLast(Content::Item::sandbag_2);
    pids.insertLast(Content::Item::sandbag_3);
    pids.insertLast(Content::Item::sandbag_4);
    pids.insertLast(Content::Item::sandbag_5);
    pids.insertLast(Content::Item::kotw_beer);
    pids.insertLast(Content::Item::chitin_armor_recipe);
    pids.insertLast(Content::Item::fake_letter);
    Game.TabSetItemPids(TAB_CUSTOM5, "002 - Msc2", pids);

    // Custom
    pids.clear();
    pids.insertLast(Content::Item::jukebox);
    pids.insertLast(Content::Item::jukebox_off);
    Game.TabSetItemPids(TAB_CUSTOM5, "003 - rifleman", pids);

    // Cars
    pids.clear();
    pids.insertLast(Content::Item::buggy);
    pids.insertLast(Content::Item::buggy_bag);
    pids.insertLast(Content::Item::scout);
    pids.insertLast(Content::Item::scout_bag);
    pids.insertLast(Content::Item::hummer);
    pids.insertLast(Content::Item::hummer_bag);
    pids.insertLast(Content::Item::highwayman);
    pids.insertLast(Content::Item::highwayman_bag);
    pids.insertLast(Content::Item::vertibird);
    pids.insertLast(Content::Item::vertibird_bag);
    pids.insertLast(Content::Item::boat);
    pids.insertLast(Content::Item::boat_bag);
    Game.TabSetItemPids(TAB_CUSTOM5, "003 - cars", pids);

    // Etc.
    pids.clear();
    pids.insertLast(Content::Item::wanted_sign);
    Game.TabSetItemPids(TAB_CUSTOM5, "004 - etc.", pids);
    Game.TabSetName(TAB_CUSTOM5, "Msc2");

    // Containers and doors
    Game.TabDelete(TAB_CUSTOM6);

    // Containers
    pids.clear();
    pids.insertLast(Content::Item::fridge);
    pids.insertLast(Content::Item::ice_chest_left);
    pids.insertLast(Content::Item::ice_chest_right);
    pids.insertLast(Content::Item::bookcase_0);
    pids.insertLast(Content::Item::bookcase_1);
    pids.insertLast(Content::Item::bookcase_2);
    pids.insertLast(Content::Item::bookcase_3);
    pids.insertLast(Content::Item::bookcase_4);
    pids.insertLast(Content::Item::bookcase_5);
    pids.insertLast(Content::Item::desk_0);
    pids.insertLast(Content::Item::desk_1);
    pids.insertLast(Content::Item::dresser_0);
    pids.insertLast(Content::Item::dresser_1);
    pids.insertLast(Content::Item::dresser_2);
    pids.insertLast(Content::Item::backpack);
    pids.insertLast(Content::Item::brown_bag);
    pids.insertLast(Content::Item::alien_side);
    pids.insertLast(Content::Item::alien_forward);
    pids.insertLast(Content::Item::footlocker_clean_left);
    pids.insertLast(Content::Item::footlocker_rusty_left);
    pids.insertLast(Content::Item::footlocker_clean_right);
    pids.insertLast(Content::Item::footlocker_rusty_right);
    pids.insertLast(Content::Item::locker_clean_left);
    pids.insertLast(Content::Item::locker_rusty_left);
    pids.insertLast(Content::Item::locker_clean_right);
    pids.insertLast(Content::Item::locker_rusty_right);
    pids.insertLast(Content::Item::wall_locker_clean_left);
    pids.insertLast(Content::Item::wall_locker_clean_right);
    pids.insertLast(Content::Item::wall_locker_rusty_left);
    pids.insertLast(Content::Item::wall_locker_rusty_right);
    pids.insertLast(Content::Item::bookself_0);
    pids.insertLast(Content::Item::bookself_1);
    pids.insertLast(Content::Item::bookself_2);
    pids.insertLast(Content::Item::misc_bookcase_0);
    pids.insertLast(Content::Item::bookself_3);
    pids.insertLast(Content::Item::misc_bookcase_1);
    pids.insertLast(Content::Item::shelves_0);
    pids.insertLast(Content::Item::shelves_1);
    pids.insertLast(Content::Item::shelves_2);
    pids.insertLast(Content::Item::misc_shelves_0);
    pids.insertLast(Content::Item::shelves_3);
    pids.insertLast(Content::Item::misc_shelves_1);
    pids.insertLast(Content::Item::workbench);
    pids.insertLast(Content::Item::tool_board);
    pids.insertLast(Content::Item::iguana_stand);
    pids.insertLast(Content::Item::table_0);
    pids.insertLast(Content::Item::table_1);
    pids.insertLast(Content::Item::stuff_0);
    pids.insertLast(Content::Item::stuff_1);
    pids.insertLast(Content::Item::stuff_2);
    pids.insertLast(Content::Item::stuff_3);
    pids.insertLast(Content::Item::stuff_4);
    pids.insertLast(Content::Item::stuff_5);
    pids.insertLast(Content::Item::stuff_6);
    pids.insertLast(Content::Item::stuff_7);
    pids.insertLast(Content::Item::stuff_8);
    pids.insertLast(Content::Item::stuff_9);
    pids.insertLast(Content::Item::stuff_10);
    pids.insertLast(Content::Item::stuff_11);
    pids.insertLast(Content::Item::container_wood_crate);
    pids.insertLast(Content::Item::desk_3);
    pids.insertLast(Content::Item::desk_4);
    pids.insertLast(Content::Item::desk_5);
    pids.insertLast(Content::Item::desk_6);
    pids.insertLast(Content::Item::desk_7);
    pids.insertLast(Content::Item::desk_8);
    pids.insertLast(Content::Item::desk_9);
    pids.insertLast(Content::Item::locker_7);
    pids.insertLast(Content::Item::locker_8);
    pids.insertLast(Content::Item::box_0);
    pids.insertLast(Content::Item::box_1);
    pids.insertLast(Content::Item::box_2);
    pids.insertLast(Content::Item::box_3);
    pids.insertLast(Content::Item::box_4);
    pids.insertLast(Content::Item::box_5);
    pids.insertLast(Content::Item::box_6);
    pids.insertLast(Content::Item::box_7);
    pids.insertLast(Content::Item::vault_dweller_bones);
    pids.insertLast(Content::Item::remainsof_gizmo);
    pids.insertLast(Content::Item::desk_10);
    pids.insertLast(Content::Item::small_pot);
    pids.insertLast(Content::Item::tall_pot);
    pids.insertLast(Content::Item::chest);
    pids.insertLast(Content::Item::left_arroyo_bookcase);
    pids.insertLast(Content::Item::right_arroyo_bookcase);
    pids.insertLast(Content::Item::olive_pot);
    pids.insertLast(Content::Item::flower_pot);
    pids.insertLast(Content::Item::human_bones);
    pids.insertLast(Content::Item::crashed_verti_bird);
    pids.insertLast(Content::Item::gravesite_1);
    pids.insertLast(Content::Item::gravesite_2);
    pids.insertLast(Content::Item::gravesite_3);
    pids.insertLast(Content::Item::gravesite_4);
    pids.insertLast(Content::Item::lg_lt_ammo_crate);
    pids.insertLast(Content::Item::sm_lt_ammo_crate);
    pids.insertLast(Content::Item::lg_rt_ammo_crate);
    pids.insertLast(Content::Item::sm_rt_ammo_crate);
    pids.insertLast(Content::Item::lf_gravesite_1);
    pids.insertLast(Content::Item::lf_gravesite_2);
    pids.insertLast(Content::Item::lf_gravesite_3);
    pids.insertLast(Content::Item::stone_head);
    pids.insertLast(Content::Item::wagon_red);
    pids.insertLast(Content::Item::wagon_grey);
    pids.insertLast(Content::Item::car_trunk);
    pids.insertLast(Content::Item::hidden_container);
    pids.insertLast(Content::Item::wall_safe);
    pids.insertLast(Content::Item::floor_safe);
    pids.insertLast(Content::Item::pool_table_1);
    pids.insertLast(Content::Item::pool_table_2);
    pids.insertLast(Content::Item::pool_table_3);
    pids.insertLast(Content::Item::pool_table_4);
    pids.insertLast(Content::Item::pool_table_5);
    pids.insertLast(Content::Item::pool_table_6);
    pids.insertLast(Content::Item::poor_box);
    pids.insertLast(Content::Item::dead_redshirt_0);
    pids.insertLast(Content::Item::dead_redshirt_1);
    pids.insertLast(Content::Item::dead_redshirt_2);
    pids.insertLast(Content::Item::mining_machine);
    Game.TabSetItemPids(TAB_CUSTOM6, "001 - Containers", pids);

    // Door
    pids.clear();
    pids.insertLast(Content::Item::door_2002);
    pids.insertLast(Content::Item::door_2008);
    pids.insertLast(Content::Item::door_2018);
    pids.insertLast(Content::Item::door_2019);
    pids.insertLast(Content::Item::door_2022);
    pids.insertLast(Content::Item::door_2023);
    pids.insertLast(Content::Item::door_2077);
    pids.insertLast(Content::Item::door_2087);
    pids.insertLast(Content::Item::door_2088);
    pids.insertLast(Content::Item::door_2089);
    pids.insertLast(Content::Item::door_2142);
    pids.insertLast(Content::Item::door_2143);
    pids.insertLast(Content::Item::door_2144);
    pids.insertLast(Content::Item::door_2151);
    pids.insertLast(Content::Item::door_2153);
    pids.insertLast(Content::Item::door_2154);
    pids.insertLast(Content::Item::door_2173);
    pids.insertLast(Content::Item::door_2195);
    pids.insertLast(Content::Item::door_2196);
    pids.insertLast(Content::Item::door_2258);
    pids.insertLast(Content::Item::door_2259);
    pids.insertLast(Content::Item::door_2260);
    pids.insertLast(Content::Item::door_2261);
    pids.insertLast(Content::Item::door_2332);
    pids.insertLast(Content::Item::door_2333);
    pids.insertLast(Content::Item::door_2346);
    pids.insertLast(Content::Item::door_2361);
    pids.insertLast(Content::Item::door_2362);
    pids.insertLast(Content::Item::door_2406);
    pids.insertLast(Content::Item::door_2421);
    pids.insertLast(Content::Item::door_2437);
    pids.insertLast(Content::Item::door_2438);
    pids.insertLast(Content::Item::door_2448);
    pids.insertLast(Content::Item::door_2470);
    pids.insertLast(Content::Item::door_2481);
    pids.insertLast(Content::Item::door_2482);
    pids.insertLast(Content::Item::door_2486);
    pids.insertLast(Content::Item::door_2581);
    pids.insertLast(Content::Item::door_2645);
    pids.insertLast(Content::Item::door_2825);
    pids.insertLast(Content::Item::door_2826);
    pids.insertLast(Content::Item::door_2848);
    pids.insertLast(Content::Item::door_2849);
    pids.insertLast(Content::Item::door_2850);
    pids.insertLast(Content::Item::door_2934);

    pids.insertLast(Content::Item::door_2954);
    pids.insertLast(Content::Item::door_2955);
    pids.insertLast(Content::Item::door_2956);
    pids.insertLast(Content::Item::door_2957);
    pids.insertLast(Content::Item::door_2958);
    pids.insertLast(Content::Item::door_2959);
    pids.insertLast(Content::Item::door_2960);
    pids.insertLast(Content::Item::door_2961);
    pids.insertLast(Content::Item::door_2962);
    pids.insertLast(Content::Item::door_2978);
    pids.insertLast(Content::Item::door_2981);
    pids.insertLast(Content::Item::door_2982);
    pids.insertLast(Content::Item::door_2983);
    pids.insertLast(Content::Item::door_2984);
    pids.insertLast(Content::Item::door_2995);
    pids.insertLast(Content::Item::door_3159);
    pids.insertLast(Content::Item::door_3160);
    pids.insertLast(Content::Item::door_3169);
    pids.insertLast(Content::Item::door_3170);
    pids.insertLast(Content::Item::door_3337);
    pids.insertLast(Content::Item::door_3358);
    pids.insertLast(Content::Item::door_3387);
    pids.insertLast(Content::Item::door_3388);
    pids.insertLast(Content::Item::door_3389);
    pids.insertLast(Content::Item::door_3390);
    pids.insertLast(Content::Item::door_3391);
    pids.insertLast(Content::Item::door_3392);
    pids.insertLast(Content::Item::door_3417);
    pids.insertLast(Content::Item::door_3418);
    pids.insertLast(Content::Item::door_3434);
    pids.insertLast(Content::Item::door_3435);
    pids.insertLast(Content::Item::door_3449);
    pids.insertLast(Content::Item::door_3466);
    pids.insertLast(Content::Item::door_3467);
    pids.insertLast(Content::Item::door_3479);
    pids.insertLast(Content::Item::door_3480);
    pids.insertLast(Content::Item::door_3491);
    pids.insertLast(Content::Item::door_3492);
    pids.insertLast(Content::Item::door_3531);
    pids.insertLast(Content::Item::door_3532);
    pids.insertLast(Content::Item::door_3533);
    pids.insertLast(Content::Item::door_3534);
    pids.insertLast(Content::Item::door_3535);
    pids.insertLast(Content::Item::door_3536);
    pids.insertLast(Content::Item::door_3573);
    pids.insertLast(Content::Item::door_3574);
    pids.insertLast(Content::Item::door_3575);
    pids.insertLast(Content::Item::door_3576);
    pids.insertLast(Content::Item::door_3709);
    pids.insertLast(Content::Item::door_3710);
    pids.insertLast(Content::Item::door_3745);
    pids.insertLast(Content::Item::door_3748);
    pids.insertLast(Content::Item::door_3818);
    pids.insertLast(Content::Item::door_3819);
    pids.insertLast(Content::Item::door_4757);
    pids.insertLast(Content::Item::door_4758);
    pids.insertLast(Content::Item::door_4759);
    pids.insertLast(Content::Item::door_4760);
    pids.insertLast(Content::Item::door_4761);
    pids.insertLast(Content::Item::door_4762);
    pids.insertLast(Content::Item::door_4763);
    pids.insertLast(Content::Item::door_4764);
    pids.insertLast(Content::Item::door_4765);
    pids.insertLast(Content::Item::door_4766);
    pids.insertLast(Content::Item::door_4768);
    pids.insertLast(Content::Item::door_4769);
    Game.TabSetItemPids(TAB_CUSTOM6, "002 - Doors", pids);

    Game.TabSetName(TAB_CUSTOM6, "C/D");

    // GRIDS TAB
    Game.TabDelete(TAB_CUSTOM7);

    // Scenery
    pids.clear();
    pids.insertLast(Content::Item::grid_2068);
    pids.insertLast(Content::Item::grid_2139);
    pids.insertLast(Content::Item::grid_2140);
    pids.insertLast(Content::Item::grid_2197);
    pids.insertLast(Content::Item::grid_2348);
    pids.insertLast(Content::Item::grid_2349);
    pids.insertLast(Content::Item::grid_2350);
    pids.insertLast(Content::Item::grid_2351);
    pids.insertLast(Content::Item::grid_2352);
    pids.insertLast(Content::Item::grid_2353);
    pids.insertLast(Content::Item::grid_2354);
    pids.insertLast(Content::Item::grid_2355);
    pids.insertLast(Content::Item::grid_2356);
    pids.insertLast(Content::Item::grid_2583);
    pids.insertLast(Content::Item::grid_2584);
    pids.insertLast(Content::Item::grid_2977);
    pids.insertLast(Content::Item::grid_3293);
    pids.insertLast(Content::Item::grid_3297);
    pids.insertLast(Content::Item::grid_3298);
    pids.insertLast(Content::Item::grid_3645);
    pids.insertLast(Content::Item::grid_3647);
    pids.insertLast(Content::Item::grid_3648);
    pids.insertLast(Content::Item::grid_3655);
    pids.insertLast(Content::Item::grid_3660);
    pids.insertLast(Content::Item::grid_3685);
    pids.insertLast(Content::Item::grid_3835);
    Game.TabSetItemPids(TAB_CUSTOM7, "001 - ladders", pids);

    // Grids
    pids.clear();
    pids.insertLast(Content::Item::grid_4016);
    pids.insertLast(Content::Item::grid_4017);
    pids.insertLast(Content::Item::grid_4018);
    pids.insertLast(Content::Item::grid_4019);
    pids.insertLast(Content::Item::grid_4020);
    pids.insertLast(Content::Item::grid_4021);
    pids.insertLast(Content::Item::grid_4022);
    pids.insertLast(Content::Item::grid_4023);
    pids.insertLast(Content::Item::grid_4031);
    pids.insertLast(Content::Item::grid_4032);
    pids.insertLast(Content::Item::grid_4033);
    pids.insertLast(Content::Item::grid_4034);
    pids.insertLast(Content::Item::grid_4035);
    pids.insertLast(Content::Item::grid_4036);
    pids.insertLast(Content::Item::grid_4037);
    pids.insertLast(Content::Item::grid_4038);
    pids.insertLast(Content::Item::grid_4039);
    pids.insertLast(Content::Item::grid_4040);
    pids.insertLast(Content::Item::grid_4041);
    pids.insertLast(Content::Item::grid_4042);
    pids.insertLast(Content::Item::grid_4043);
    pids.insertLast(Content::Item::grid_4044);
    pids.insertLast(Content::Item::grid_4045);
    pids.insertLast(Content::Item::grid_4046);
    Game.TabSetItemPids(TAB_CUSTOM7, "002 - exit grids", pids);
    Game.TabSetName(TAB_CUSTOM7, "Grd");

    // GENERIC SCENERY TAB
    Game.TabDelete(TAB_CUSTOM8);

    pids.clear();
    pids.insertLast(Content::Item::generic_2001);
    for (uint i = 2003; i <= 2007; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "000 - City Jink 1", pids);

    pids.clear();
    for (uint i = 2009; i <= 2017; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    pids.insertLast(Content::Item::generic_2020);
    pids.insertLast(Content::Item::generic_2021);
    for (uint i = 2024; i <= 2048; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2050; i <= 2062; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "001 - Vault 13", pids);

    pids.clear();
    for (uint i = 2063; i <= 2066; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2069; i <= 2076; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2078; i <= 2086; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2090; i <= 2093; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "002 - Stones and misc", pids);

    pids.clear();
    for (uint i = 2094; i <= 2127; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "003 - Junktown", pids);

    pids.clear();
    for (uint i = 2129; i <= 2138; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "004 - Necro sewer", pids);

    pids.clear();
    for (uint i = 2145; i <= 2150; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2155; i <= 2172; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2174; i <= 2193; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "005 - BroVault", pids);

    pids.clear();
    pids.insertLast(Content::Item::generic_2194);
    for (uint i = 2198; i <= 2257; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2262; i <= 2331; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2334; i <= 2343; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "006 - Necro city", pids);

    pids.clear();
    pids.insertLast(Content::Item::generic_2345);
    pids.insertLast(Content::Item::generic_2347);
    pids.insertLast(Content::Item::generic_2357);
    pids.insertLast(Content::Item::generic_2358);
    pids.insertLast(Content::Item::generic_2359);
    pids.insertLast(Content::Item::generic_2360);
    Game.TabSetItemPids(TAB_CUSTOM8, "007 - Cathedral", pids);

    pids.clear();
    for (uint i = 2363; i <= 2383; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "008 - S. Sands", pids);

    pids.clear();
    for (uint i = 2384; i <= 2405; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2407; i <= 2420; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2422; i <= 2423; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "009 - TentsIndstr", pids);

    pids.clear();
    for (uint i = 2425; i <= 2436; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2439; i <= 2447; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    pids.insertLast(Content::Item::generic_2449);
    Game.TabSetItemPids(TAB_CUSTOM8, "010 - M.base/Cath", pids);

    pids.clear();
    for (uint i = 2450; i <= 2466; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "011 - Gamble", pids);

    pids.clear();
    for (uint i = 2467; i <= 2469; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "012 - Old elev.", pids);

    pids.clear();
    for (uint i = 2471; i <= 2480; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "013 - Warehouse", pids);

    pids.clear();
    for (uint i = 2483; i <= 2485; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2487; i <= 2508; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "014 - Pray@Follow", pids);

    pids.clear();
    for (uint i = 2509; i <= 2515; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "015 - Crrap", pids);

    pids.clear();
    for (uint i = 2516; i <= 2526; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "016 - Bro Elders", pids);

    pids.clear();
    for (uint i = 2527; i <= 2532; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "017 - Carts", pids);

    pids.clear();
    for (uint i = 2533; i <= 2543; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "018 - Bro sport", pids);

    pids.clear();
    for (uint i = 2544; i <= 2580; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    pids.insertLast(Content::Item::generic_2582);
    for (uint i = 2585; i <= 2590; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "019 - Ind,Bro,Cath", pids);

    pids.clear();
    for (uint i = 2591; i <= 2644; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2646; i <= 2685; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "020 - InOut", pids);

    pids.clear();
    for (uint i = 2686; i <= 2696; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "021 - Cliffs", pids);

    pids.clear();
    for (uint i = 2697; i <= 2824; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "022 - Master", pids);

    pids.clear();
    for (uint i = 2827; i <= 2847; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "023 - Robo", pids);

    pids.clear();
    for (uint i = 2851; i <= 2900; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "024 - Signs", pids);

    pids.clear();
    for (uint i = 2901; i <= 2908; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "025 - Robo2", pids);

    pids.clear();
    for (uint i = 2909; i <= 2933; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2935; i <= 2953; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "026 - Arroyo", pids);

    pids.clear();
    for (uint i = 2963; i <= 2975; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "027 - Klamath", pids);

    pids.clear();
    for (uint i = 2979; i <= 2980; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2985; i <= 2994; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 2996; i <= 3018; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "028 - GeckoInd", pids);

    pids.clear();
    for (uint i = 3019; i <= 3141; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    pids.insertLast(Content::Item::generic_3448);
    Game.TabSetItemPids(TAB_CUSTOM8, "029 - Reno", pids);

    pids.clear();
    for (uint i = 3142; i <= 3158; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3161; i <= 3168; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3171; i <= 3191; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "030 - Indstr", pids);

    pids.clear();
    for (uint i = 3192; i <= 3215; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "031 - CavWall", pids);

    pids.clear();
    for (uint i = 3216; i <= 3227; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "032 - Bodies", pids);

    pids.clear();
    for (uint i = 3230; i <= 3236; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "033 - Sierra", pids);

    pids.clear();
    for (uint i = 3237; i <= 3253; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3294; i <= 3296; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "034 - GrvsGrss", pids);

    pids.clear();
    for (uint i = 3254; i <= 3273; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "035 - NCR", pids);

    pids.clear();
    for (uint i = 3274; i <= 3292; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3305; i <= 3320; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "036 - Beams", pids);

    pids.clear();
    for (uint i = 3299; i <= 3304; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3321; i <= 3329; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "037 - Gore", pids);

    pids.clear();
    for (uint i = 3330; i <= 3336; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3338; i <= 3357; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3359; i <= 3379; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3468; i <= 3472; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3706; i <= 3708; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "038 - Bulk", pids);

    pids.clear();
    for (uint i = 3380; i <= 3386; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3436; i <= 3447; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "039 - VCity", pids);

    pids.clear();
    for (uint i = 3393; i <= 3416; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3419; i <= 3432; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "040 - Signs", pids);

    pids.clear();
    for (uint i = 3473; i <= 3478; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3481; i <= 3490; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "041 - Reno Bulk", pids);

    pids.clear();
    for (uint i = 3493; i <= 3530; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    pids.insertLast(Content::Item::generic_3537);
    for (uint i = 3636; i <= 3644; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3649; i <= 3651; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3746; i <= 3747; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "042 - Enclave", pids);

    pids.clear();
    for (uint i = 3450; i <= 3465; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3538; i <= 3572; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3577; i <= 3599; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3609; i <= 3619; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "043 - Frisco", pids);

    pids.clear();
    for (uint i = 3600; i <= 3608; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "044 - TempleAnt", pids);

    pids.clear();
    for (uint i = 3620; i <= 3635; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3652; i <= 3654; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    pids.insertLast(Content::Item::generic_3656);
    for (uint i = 3684; i <= 3687; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "045 - Mining", pids);

    pids.clear();
    for (uint i = 3657; i <= 3659; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3661; i <= 3683; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "046 - NCR", pids);

    pids.clear();
    for (uint i = 3688; i <= 3705; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "047 - Vertywhat?", pids);

    pids.clear();
    for (uint i = 3711; i <= 3720; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "048 - Tanker", pids);

    pids.clear();
    for (uint i = 3721; i <= 3736; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3737; i <= 3744; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3749; i <= 3755; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "049 - Greece", pids);

    pids.clear();
    for (uint i = 3756; i <= 3792; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "050 - Moar Bulk ", pids);

    pids.clear();
    for (uint i = 3793; i <= 3817; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3820; i <= 3834; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 3836; i <= 3852; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "051 - Colored stuff", pids);

    pids.clear();
    for (uint i = 4001; i <= 4010; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 4013; i <= 4015; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 4024; i <= 4030; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 4047; i <= 4060; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "052 - Effects", pids);

    pids.clear();
    for (uint i = 4277; i <= 4282; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "053 - Craft", pids);

    pids.clear();
    for (uint i = 4500; i <= 4590; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "054 - Tactics", pids);

    pids.clear();
    for (uint i = 4594; i <= 4611; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "055 - Fallout:BGE", pids);

    pids.clear();
    for (uint i = 4612; i <= 4657; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "056 - Hell", pids);

    pids.clear();
    for (uint i = 4667; i <= 4756; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    for (uint i = 4770; i <= 4999; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM8, "FOnline latest", pids);

    Game.TabSetName(TAB_CUSTOM8, "Gen");

    // WALLS TAB
    Game.TabDelete(TAB_CUSTOM9);
    pids.clear();
    for (uint i = 5000; i <= 9999; i++) {
        pids.insertLast(hstring("generic_" + i));
    }
    Game.TabSetItemPids(TAB_CUSTOM9, "001 - Vault 13", pids);
    Game.TabSetName(TAB_CUSTOM9, "Wall");
    /*
       Game.TabDelete( TAB_CRITTERS );
       pids.clear();
       pids.insertLast( hstring("Scavengers") );
       Game.Log( hstring("Scavengers") + "; scavengers" + hstring("Scavengers") );
       pids.insertLast( hstring("Scavengers") );
       pids.insertLast( Content::Critter::RegularRat );
       Game.TabSetCritterPids( TAB_CRITTERS, "Cannonz", pids );
       Game.TabSetName( TAB_CRITTERS, "CZ'" );
     */
    // "void Game.TabSetCritterPids(int tab, string subTab, array<hstring>@+ critterPids)",
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on mapper finish.
void finish()
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Main loop function. Returned time of next call in milliseconds.
void loop() // uint wait)
{
    uint wait = 60000;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on console message. Return false to disable engine processing.
bool console_message(string& message)
{
    // Command prefixes
    // ~ load map
    // ^ save map
    //  critter animation
    // # run script
    // * other
    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Render interface function. You can use Draw* functions only there.
void render_iface()
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Render map function. You can use DrawMap* functions only there. This drawing before 1 iface layer.
void render_map()
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Mouse behaviours. Click states look in _client_defines.fos, Mouse click states.
// Return false to disable engine events.
bool mouse_down(MouseButton button)
{
    return true;
}

bool mouse_up(MouseButton button)
{
    return true;
}

void mouse_move(int x, int y)
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Keyboard behaviours. Key codes look in _mapper_defines.fos DirectInput keyboard scan codes.
// Return false to disable engine events.
bool key_down(KeyCode key, string keyText)
{
    return true;
}

bool key_up(KeyCode key)
{
    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on mouse/keyboard input lost (alt-tab, minimize, lost focus).
void input_lost()
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on map loading.
void map_load(Map map)
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on map saving.
void map_save(Map map)
{
    //
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called to customize inspector properties.
void inspector_properties(Entity entity, int[] & properties)
{
    Critter cr = cast<Critter>(entity);
    Item item = cast<Item>(entity);
    if (cr !is null) {
        properties.set(array<int> = {
                           CritterProperty::HexX,
                           CritterProperty::HexY,
                           CritterProperty::Dir,
                           -1,
                           CritterProperty::InitScript,
                           CritterProperty::DialogId,
                           CritterProperty::AiId,
                           CritterProperty::BagId,
                           CritterProperty::TeamId,
                           CritterProperty::NpcRole,
                           CritterProperty::ReplicationTime,
                       });
    }
    else if (item !is null) {
        properties.set(array<int> = {
                           ItemProperty::HexX,
                           ItemProperty::HexY,
                           ItemProperty::Type,
                           -1,
                           ItemProperty::PicMap,
                           ItemProperty::OffsetX,
                           ItemProperty::OffsetY,
                           ItemProperty::InitScript,
                       });

        if (item.IsLight) {
            properties.insertLast(-1);
            properties.insertLast(ItemProperty::LightIntensity);
            properties.insertLast(ItemProperty::LightDistance);
            properties.insertLast(ItemProperty::LightFlags);
            properties.insertLast(ItemProperty::LightColor);
        }

        if (item.Type == ItemType::Container || item.Type == ItemType::Door) {
            properties.insertLast(-1);
            properties.insertLast(ItemProperty::Locker_Locked);
            properties.insertLast(ItemProperty::LockerId);
            properties.insertLast(ItemProperty::LockerComplexity);
        }

        if (item.Type == ItemType::Grid) {
            properties.insertLast(-1);
            properties.insertLast(ItemProperty::Grid_ToMap);
            properties.insertLast(ItemProperty::Grid_ToMapEntry);
            properties.insertLast(ItemProperty::Grid_ToMapDir);
        }

        if (item.Type == ItemType::Generic && !item.IsTrigger) {
            properties.insertLast(-1);
            properties.insertLast(ItemProperty::SceneryScript);
            properties.insertLast(ItemProperty::SceneryParams);
        }

        if (item.IsTrigger) {
            properties.insertLast(-1);
            properties.insertLast(ItemProperty::TriggerScript);
            properties.insertLast(ItemProperty::TriggerNum);
            properties.insertLast(ItemProperty::SceneryParams);
        }
    }
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Some useful functions.
// #ConvertMaps
// #MapTime         value
// #MapNoLogOut     value
// #MapScriptModule moduleName
// #MapScriptFunc   funcName

Map GetActiveMap()
{
    int cur = 0;
    Map[] maps = Game.GetLoadedMaps(cur);
    if (cur == -1) {
        return null;
    }
    return maps[cur];
}

// Maps convertation to text format
string ConvertMaps(string str)
{
    string[] mapNames = Game.GetMapFileNames("");

    uint success = 0;
    uint fail = 0;
    for (uint i = 0; i < mapNames.length(); i++) {
        Map map = Game.LoadMap(mapNames[i]);
        if (not(map is null)) {
            Game.SaveMap(map, mapNames[i]);
            Game.UnloadMap(map);
            success++;
        }
        else {
            Game.Message("Fail to load " + mapNames[i]);
            fail++;
        }
    }

    return "Done, maps converted " + (success + fail) + ", success " + success + ", fail " + fail + ".";
}

// Map parameters
string MapTime(string str)
{
    // GetActiveMap().Time = str.toInt();
    return "Done.";
}

string MapNoLogOut(string str)
{
    // GetActiveMap().NoLogOut = str.toInt() != 0;
    return "Done.";
}

string MapScript(string str)
{
    // GetActiveMap().Script = str;
    return "Done.";
}
