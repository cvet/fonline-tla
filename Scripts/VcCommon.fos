// FOS Server

///@ Property Critter Protected     uint8 VCAmandaHelpJoshua Group = Quests Quest = 8836 Max = 9
///@ Property Critter PrivateServer uint8 VCMailRemembered       Max = 1
///@ Property Critter PrivateServer uint8 VCBeautyHoloRemembered Max = 1
///@ Property Critter PrivateServer uint  VCityCommonBarkusTimeSay

///@ Property Item PrivateServer bool VCityCommonIsMail
///@ Property Item PrivateServer ident VCityCommonMailOwnerId

///@ Property Map PrivateServer uint VCLastBarDialog

// Квест "Семья". Вэлери
#define STR_LOW_SPEECH   (5800) // Строка при чтении письма - низкая речь.
#define STR_HIGH_SPEECH  (5801) // Строка при чтении письма - высокая речь.
#define STR_HIGH_SPEECH2 (5802) // Чтобы сократить объем текста - выводим за два приема.
#define MIN_SPEECH       (100)  // Минимальная речь для того, чтобы прочесть письмо.

void r_GiveMail(Critter cr, Critter npc)
{
    Item item = cr.AddItem(Content::Item::postman_letter, 1);
    if (valid(item)) {
        item.Lexems = "$reciever@text Dialogs " + STR_NPC_NAME_DLG(Content::Dialog::klam_vic) + " @$location@text Locations " +
                      STR_LOC_NAME(Content::Location::klamath) + " @";
        item.SetupScript(_ValeryMailInit);
        item.VCityCommonIsMail = true;
        item.VCityCommonMailOwnerId = cr.Id;
    }
}

void _ValeryMailInit(Item item, bool firstTime)
{
    item.OnCritterUse.Subscribe(_MailUse);
}

bool _MailUse(Item item, Critter cr, uint param)
{
    if (cr.Id != item.VCityCommonMailOwnerId) {
        return false;
    }

    if (cr.SkillSpeech < MIN_SPEECH) {
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_LOW_SPEECH);
    }
    else {
        if (cr.VCMailRemembered == 0) {
            cr.VCMailRemembered = 1;
            cr.Experience += 500;
        }
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_HIGH_SPEECH);
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_HIGH_SPEECH2);
    }
    return true;
}

bool d_HasMail(Critter cr, Critter npc)
{
    Item[] items = cr.GetItems();
    for (uint i = 0; i < items.length(); i++) {
        if (items[i].ProtoId == Content::Item::postman_letter && items[i].VCityCommonIsMail) {
            return true;
        }
    }
    return false;
}

bool d_NoMail(Critter cr, Critter npc)
{
    return (!d_HasMail(cr, npc));
}

// Квест, "Свет мой, Зеркальце". ГУ, Хелен Трой
#define HOLO_MSG_ID      (55)
#define STR_LOW_SCIENCE  (5805)
#define STR_HIGH_SCIENCE (5806)
#define MIN_SCIENCE      (100)
#define MIN_DOCTOR       (80)

void r_WriteHolodisk(Critter player, Critter npc, int val)
{
    if (player.CountItem(Content::Item::holodisk) == 0) {
        return;
    }
    player.DestroyItem(Content::Item::holodisk, 1);
    Item holo = player.AddItem(Content::Item::holodisk, 1);
    holo.SetupScript(_HoloInit);
}

void _HoloInit(Item holo, bool firstTime)
{
    holo.HolodiskNum = HOLO_MSG_ID;
    holo.OnCritterUse.Subscribe(_HoloUse);
    holo.OnCritterUseSkill.Subscribe(_HoloSkill);
}

bool _HoloSkill(Item item, Critter cr, CritterProperty skill)
{
    return false;
}

bool _HoloUse(Item item, Critter cr, uint param)
{
    if (cr.Gender == 0) {
        return true;
    }

    if (cr.SkillScience >= MIN_SCIENCE && cr.SkillDoctor >= MIN_DOCTOR) {
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_HIGH_SCIENCE);
        if (cr.VCBeautyHoloRemembered == 0) {
            cr.VCBeautyHoloRemembered = 1;
        }
    }
    else {
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_LOW_SCIENCE);
    }

    return true;
}

// Клиника для доктора Блэка.

void r_CancelDoctorMerc(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return;
    }
    Merc::CancelMerc(npc);
    npc.SetupScript(MapGeckCity::_GeckTraderInit);
}

bool d_CheckIsBlackHere(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return false;
    }
    Map map = npc.GetMap();
    if (!valid(map)) {
        return false;
    }
    return !map.GetCritters(Content::Item::vic_water_flask, CritterFindType::AliveNpc).isEmpty();
}

bool d_CheckNotBlackHere(Critter player, Critter npc)
{
    return (!d_CheckIsBlackHere(player, npc));
}

// Проказник Баркус
#define STR_BARKUS_MALE   (1)
#define STR_BARKUS_FEMALE (2)
void _BarkusInit(Critter cr, bool firstTime)
{
    cr.ShowCritterDist1 = 8;
    cr.OnCritterAppearedDist1.Subscribe(_BarkusShowCr);
}

void _BarkusShowCr(Critter cr, Critter showCrit)
{
    if (cr.VCityCommonBarkusTimeSay < Game.GetFullSecond() && showCrit.IsControlledByPlayer && showCrit.IsAlive()) {
        if (showCrit.VCAmandaHelpJoshua >= 7) {
            cr.SayMsg(SAY_NORM, TextPackName::Text, DLGSTR(cr.DialogId, (cr.Gender == 0 ? STR_BARKUS_MALE : STR_BARKUS_FEMALE)));
            cr.VCityCommonBarkusTimeSay = Game.GetFullSecond() + Settings.TimeMultiplier * 30; // Не чаще двух раз в минуту
        }
    }
}

// Диалог посетителей бара у стойки
#define ROLE_BAR_TALKER (56) // Роль говорунов

void _BarTalkerInit(Critter cr, bool firstTime)
{
    cr.NpcDialogTimeWait = 4;
    cr.OnMessage.Subscribe(NpcDialog::_NpcMessage);
}

void t_RunNpcDialog(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (!entered || !player.IsControlledByPlayer) {
        return;
    }
    Map map = player.GetMap();
    if (!valid(map)) {
        return;
    }
    if (Game.GetFullSecond() >= map.VCLastBarDialog) {
        map.VCLastBarDialog = Game.GetFullSecond() + Time::RealMinute(30);
        Critter cr = map.GetCritter(CritterProperty::NpcRole, ROLE_BAR_TALKER, CritterFindType::AliveNpc);
        if (valid(cr)) {
            NpcDialog::BeginDialog(cr, 5);
        }
    }
}
