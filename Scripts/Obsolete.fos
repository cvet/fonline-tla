// FOS Server Client

#ifdef __SERVER

Item FindAmmoForWeapon(Critter npc, AbstractItem weapon)
{
    auto ammo = npc.GetItem(weapon.AmmoPid);
    if (ammo != null) {
        return ammo;
    }

    ammo = npc.GetItem(weapon.Weapon_DefaultAmmoPid);
    if (ammo != null) {
        return ammo;
    }

    auto otherAmmo = npc.GetItems(ItemProperty::Type, ItemType::Ammo);
    for (uint i = 0; i < otherAmmo.length(); i++) {
        ammo = otherAmmo[i];
        if (ammo.Ammo_Caliber == weapon.Weapon_Caliber) {
            return ammo;
        }
    }

    return null;
}

bool CritterTransitToMapCoords(Critter cr, ident mapId, uint16 hexX, uint16 hexY, uint8 dir)
{
    any[] params = {mapId, cr.Id, hexX, hexY, dir};

    Game.DeferredCall(0, CritterTransitToMapCoordsSuccess, params);

    Yield(0);

    return cr.MapId == mapId && cr.HexX == hexX && cr.HexY == hexY && cr.Dir == dir;
}

void CritterTransitToMapCoordsSuccess(any[] values)
{
    Map map = Game.GetMap(values[0]);
    Critter cr = Game.GetCritter(values[1]);

    cr.TransitToMap(map, values[2], values[3], values[4]);
}

bool CritterTransitToMapEntry(Critter cr, ident mapId, hstring entry)
{
    Map map = Game.GetMap(mapId);
    if (valid(cr) && valid(map)) {
        int entries = Entrance::MapCountEntry(map, entry);
        if (entries > 0) {
            int skip = Game.Random(0, entries - 1);
            uint16 hexX = 0;
            uint16 hexY = 0;
            if (Entrance::MapGetEntryCoords(map, entry, skip, hexX, hexY)) {
                cr.TransitToMap(map, hexX, hexY, Game.Random(0, 5));
                return true;
            }
        }
    }
    Game.Log("CritterTransitToMapEntry failed");
    return false;
}

string GetPlayerName(ident crId)
{
    Critter cr = Game.GetCritter(crId);
    if (valid(cr) && cr.IsControlledByPlayer) {
        return cr.Name;
    }

    return "";
}

uint GetCrittersInPath(Map map, uint16 fromHx, uint16 fromHy, uint16 toHx, uint16 toHy, float angle, uint dist, CritterFindType findType, Critter[] critters)
{
    if (valid(map)) {
        Critter[] foundedCritters = map.GetCrittersInPath(fromHx, fromHy, toHx, toHy, angle, dist, findType);
        uint founded = foundedCritters.length();
        if (critters != null) {
            for (uint i = 0; i < founded; i++) {
                critters.insertLast(foundedCritters[i]);
            }
        }
        return founded;
    }
    return 0;
}

uint GetCrittersInPath(Map map, uint16 fromHx, uint16 fromHy, uint16 toHx, uint16 toHy, float angle, uint dist, CritterFindType findType, Critter[] critters,
                       uint16& preBlockHx, uint16& preBlockHy, uint16& blockHx, uint16& blockHy)
{
    if (valid(map)) {
        Critter[] foundedCritters = map.GetCrittersInPath(fromHx, fromHy, toHx, toHy, angle, dist, findType, preBlockHx, preBlockHy, blockHx, blockHy);
        uint founded = foundedCritters.length();
        if (critters != null) {
            for (uint i = 0; i < founded; i++) {
                critters.insertLast(foundedCritters[i]);
            }
        }
        return founded;
    }
    return 0;
}

Item GetMapCar(Map map, uint16 hexX, uint16 hexY)
{
    Item[] items = map.GetItems(hexX, hexY);

    for (int i = 0, l = items.length(); i < l; i++) {
        Item item = items[i];
        if (valid(item) && item.Type == ItemType::Car) {
            return item;
        }
    }

    return null;
}

Item MapGetDoor(Map map, uint16 hexX, uint16 hexY)
{
    if (valid(map)) {
        Item[] items = map.GetItems(hexX, hexY);

        if (!items.isEmpty()) {
            for (int i = 0, l = items.length(); i < l; i++) {
                Item item = items[i];
                if (valid(item) && item.Type == ItemType::Door) {
                    return item;
                }
            }
        }
    }
    return null;
}

#endif
