// FOS Server
// Author: rifleman17
// Поведение болотников во время нашествия на сан-франциско
/* Стадия №1
   Если есть возможность атаковать кого-то, болотники атакуют.
   Если дорога перекрыта, остаются на месте.
   Периодически перемещаются в случайном направлении на 1 гекс с использованием Critter::MoveRandom
 */

#define DL
#define ENTRY_EXIT_SF (160)

///@ Property Critter PrivateServer uint8 MirelurkCombatCurStage
///@ Property Critter PrivateServer uint  MirelurkCombatTimeNextStage
///@ Property Critter PrivateServer uint  MirelurkCombatLastBrokenBag
///@ Property Critter PrivateServer ident MirelurkCombatDestroyingItem

#define SRCH_RADIUS_STAGE_1     (15) // Радиус поиска целей для первого этапа
#define SRCH_RADIUS_STAGE_2     (25) // Радиус поиска целей для второго этапа
#define SRCH_RADIUS_STAGE_3     (35) // Радиус поиска целей для третьего этапа.

#define ATTACK_NPC_PRIORITY     (AI_PLANE_ATTACK_PRIORITY)     // Приоритет атаки рядовых НПЦ
#define ATTACK_PLAYER_PRIORITY  (AI_PLANE_ATTACK_PRIORITY * 3) // Приоритет атаки игроков
#define ATTACK_BOS_DEF_PRIORITY (AI_PLANE_ATTACK_PRIORITY * 2) // Приоритет атаки представителей БС
#define CHANGE_STAGE_PRIORITY   (ATTACK_PLAYER_PRIORITY - 1)   // Приоритет плана на смену состояния
#define MOVE_OUT_PRIORITY \
    (ATTACK_BOS_DEF_PRIORITY - 1) // Приоритет плана удрать из доков. Ниже приоритета на убийство бойцов БОС и игроков, но выше всех остальных
#define DESTROY_SANDBAG_PRIORITY (ATTACK_PLAYER_PRIORITY + 1) // приоритет плана "ломать мешки"
#define IDLE_COUNT_STAGE_1TO2    (300) // Число простоев, после которого болотники начинают жить в режиме№2
#define IDLE_COUNT_STAGE_2TO3    (300) // Число простоев, после которого болотники начинают жить в режиме№3
#define IDLE_COUNT_TO_MOVEOUT    (300) // Число простоев на третьей стадии, после которого болотники начинают линять из района Доков.
#define MSG_ALL2STAGE_2          (214) // Номер сообщения, после получения которого все болотники переходят в режим№2
#define STR_ALL2STAGE_2          (5100) // Строка, которую произносит болотник, когда инициирует переход на новую стадию
#define STR_DESTROY_SANDBAGS     (5100) // Строка, которую произносит болотник перед поломкой мешка
#define STR_STAGE2_MSG_RECIEVED  (5101) // Строка, которую произносит болоник в состоянии 1, когда получает сообщение о переходе в состояние 2
#define PLANE_ID_DESTROY         (121)  // Id плана - разрушения мешков
#define PLANE_ID_MOVEOUT         (122)  // Id плана - выход из доков наружу
#define TIME_TO_NEXT_STAGE       (30 * 60) // Базовое время перехода в следующее состояние (30 игровых минут)
#define MAX_STAGE_NUM            (3)       // Последняя стадия модели поведения

#define _SearchRadius            #(stage)(stage == 1 ? SRCH_RADIUS_STAGE_1 : (stage == 2 ? SRCH_RADIUS_STAGE_2 : SRCH_RADIUS_STAGE_3)) // Радиус поиска врагов
#define _AttackPriority \
#(target)(target.IsControlledByPlayer ? ATTACK_PLAYER_PRIORITY : (target.TeamId == Teams::BoSTrooper ? ATTACK_BOS_DEF_PRIORITY : ATTACK_NPC_PRIORITY))

void _MirelurkInit(Critter cr, bool firstTime)
{
    cr.MirelurkCombatCurStage = 1;
    cr.MirelurkCombatTimeNextStage = Game.GetFullSecond() + TIME_TO_NEXT_STAGE;
    cr.IsNoHome = true;
    cr.OnIdle.Subscribe(_MirelurkIdle);
    cr.OnNpcPlaneEnd.Subscribe(_MirelurkPlaneEnd);
    // cr.OnDead.Subscribe(_Dead);
}

// Основной скрипт болотника
// В нем переключаются состояния, выбираются цели для атаки и разрушения баррикад
// В нем же принимаются решения о том, что пора линять с карты
void _MirelurkIdle(Critter cr)
{
    // Обработчики срабатывают только, если на карте есть игроки
    if (!IsPlayerOnMap(cr)) {
        return;
    }
    // Если есть какие-то планы, тоже не обрабатывается
    if (!NpcPlanes::IsNoPlanes(cr)) {
        return;
    }
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }
    // Если нужно, делаем изменение стадии модели поведения
    ChangeStageIfNeaded(cr);
    // Ищем цель, доступную для атаки
    TryFoundAccessibleTarget(cr, map);
    // Если так и нет никаких планов
    if (NpcPlanes::IsNoPlanes(cr)) {
        // Чем позже стадия, тем ниже шанс на случайное перемещение
        if (Game.Random(3 - cr.MirelurkCombatCurStage, 4) == 4) {
            MoveRandom::CritterMoveRandom(cr);
        }
        // Во время третьей стадии болотники начинают уходить с карты
        TryMoveOut(map, cr);
    }
}

// Завершение плана перемещения к мешкам, чтобы разрушить
// Или перемещения к сетке выхода
bool _MirelurkPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (reason == REASON_GAG_ITEM) // Болотники должны ломать баррикады по-другому, не так, как обычные криттеры
    {
        return false;
    }
    if (plane.Identifier == PLANE_ID_DESTROY && plane.Type == AI_PLANE_WALK) {
        if (reason == REASON_SUCCESS) {
            DestroyBarricade(cr, plane.IdentifierExt);
        }
        else {
            return false;
        }
    }
    if (plane.Identifier == PLANE_ID_MOVEOUT) {
        if (reason == REASON_SUCCESS) {
            // Болотник добрался до точки выхода
            Game.DestroyCritter(cr);
            return false;
        }
        return true;
    }
    return true;
}

// Изменение стадии поведения, если подошло время
void ChangeStageIfNeaded(Critter cr)
{
    if (cr.MirelurkCombatCurStage < MAX_STAGE_NUM) {
        if (Game.GetFullSecond() >= cr.MirelurkCombatTimeNextStage) {
            // Game.Log("Stage changed"+cr.MirelurkCombatCurStage);
            cr.MirelurkCombatCurStage += 1;
            cr.SayMsg(SAY_EMOTE, TextPackName::Text, STR_ALL2STAGE_2);
            cr.MirelurkCombatTimeNextStage = Game.GetFullSecond() + TIME_TO_NEXT_STAGE * cr.MirelurkCombatCurStage;
        }
    }
}

// Попытка найти цель для атаки, до которой можно дойти
void TryFoundAccessibleTarget(Critter cr, Map map)
{
    DL("searching target");
    uint radius = _SearchRadius(cr.MirelurkCombatCurStage);
    uint16 crX = cr.HexX;
    uint16 crY = cr.HexY;
    // Первоочередная цель - игроки
    Critter[] crits = {};
    crits.insertLast(map.GetCritters(crX, crY, radius, CritterFindType::AlivePlayers));
    crits.insertLast(map.GetCritters(crX, crY, radius, CritterFindType::AliveNpc));
    Critter target;
    for (uint i = 0, l = crits.length(); i < l; i++) {
        target = crits[i];
        if (!valid(target)) {
            continue;
        }
        if (cr.Id == target.Id) {
            continue;
        }
        // DL("CheckPathLen cr.Id"+target.Id+"crX:"+crX+";crY:"+crY+"; target X:"+target.HexX+";Y:"+target.HexY+".
        // Distance:"+Game.GetDistance(cr,target));//TODO COMMENT
        uint16 len = map.GetPathLength(cr, target.HexX, target.HexY, 1 + cr.Multihex);
        DL("len=" + len);
        if (len > 0) {
            if (target.IsControlledByPlayer || cr.TeamId != target.TeamId) {
                DL("Attack plane added");
                NpcPlanes::AddAttackPlane(cr, _AttackPriority(target), target);
            }
        }
    }
    // Если стадия 2я и дальше, болотники будут ломать мешки (если нет доступных целей для атаки). Иначе выход
    if (!NpcPlanes::IsNoPlanes(cr) || cr.MirelurkCombatCurStage < 2) {
        return;
    }
    // Если таймаут на поломку баррикады - выход
    if (Game.GetFullSecond() < cr.MirelurkCombatLastBrokenBag) {
        return;
    }
    cr.MirelurkCombatLastBrokenBag = Game.GetFullSecond() + Game.Random(1, 8) * 60; // Следующая попытка поломать будет через 1..8 игровых минут
    // Проверяем, не было ли уже попыток что-то сломать, если было, код предмета сохранен в cr.MirelurkCombatDestroyingItem
    if (cr.MirelurkCombatDestroyingItem != ZERO_IDENT) {
        Item sb = map.GetItem(cr.MirelurkCombatDestroyingItem);
        if (valid(sb)) {
            // Действительно, мешок найден.
            AddDestroyBarricadePlane(cr, map, sb);
            return;
        }
        else {
            // Очистка запомненного итема
            cr.MirelurkCombatDestroyingItem = ZERO_IDENT;
        }
    }
    // Собираем элементы баррикады в радиусе атаки
    Item[] gagItems = {};
    gagItems.insertLast(map.GetItems(crX, crY, radius, Content::Item::sandbag_1));
    gagItems.insertLast(map.GetItems(crX, crY, radius, Content::Item::sandbag_2));
    gagItems.insertLast(map.GetItems(crX, crY, radius, Content::Item::sandbag_3));
    gagItems.insertLast(map.GetItems(crX, crY, radius, Content::Item::sandbag_4));
    gagItems.insertLast(map.GetItems(crX, crY, radius, Content::Item::sandbag_5));

    DL("trying found sandbags");
    uint16 counter = 0; // максимум 300 попыток
    for (uint i = 0; i < crits.length() && counter < 300; i++) {
        target = crits[i];
        if (target.IsDead()) {
            continue;
        }
        if (target.Id == cr.Id) {
            continue;
        }

        for (uint j = 0; j < gagItems.length(); j++) {
            if (counter++ > 300) {
                DL("too many tries");
                break;
            }

            Item item = gagItems[j];
            if (!valid(target) || !valid(item)) {
                continue;
            }

            // НПЦ может дойти до мешка?
            DL("npc can reach sandbag?");
            if (map.GetPathLength(cr, item.HexX, item.HexY, 1 + cr.Multihex) == 0) {
                continue; // не пройдет
            }

            // От мешка можно дайти до игрока?
            if (map.GetPathLength(target, item.HexX, item.HexY, 1 + cr.Multihex) == 0) {
                continue; // нет
            }

            AddDestroyBarricadePlane(cr, map, item);
            return;
        }
    }
}

// Добавление плана "подойти, чтобы сломать баррикаду в таком-то месте"
bool AddDestroyBarricadePlane(Critter cr, Map map, Item barricade)
{
    uint16 bX = barricade.HexX;
    uint16 bY = barricade.HexY;
    // Находим координаты гекса, к которому можно подойти
    uint16 crX = cr.HexX;
    uint16 crY = cr.HexY;
    uint16 x = bX;
    uint16 y = bY;
    for (uint8 dir = 0; dir < 6; dir++) {
        // TODO: выбор кратчайшего маршрута из возможных
        map.MoveHexByDir(x, y, dir, 1);
        if (map.GetPathLength(cr, x, y, 0 + cr.Multihex) > 0) {
            return NpcPlanes::AddWalkPlane(cr, DESTROY_SANDBAG_PRIORITY, PLANE_ID_DESTROY, barricade.Id, x, y, Game.GetDirection(x, y, bX, bY), false, 0);
            // Подходящий гекс найден
        }
        x = bX;
        y = bY;
    }
    DL("can't destroy");
    return false;
}

// Попытка добавить план на выход с локации
void TryMoveOut(Map map, Critter cr)
{
    if (cr.MirelurkCombatCurStage < 3) {
        return;
    }
    if (Game.GetFullSecond() < cr.MirelurkCombatTimeNextStage) {
        return;
    }
    uint16 x = cr.HexX;
    uint16 y = cr.HexY;
    bool pathFounded = false;
    if (Entrance::GetNearEntry(map, ENTRY_EXIT_SF, x, y)) {
        uint tries = 0;
        while (!map.IsHexMovable(x, y) && tries < 10) {
            cr.SayMsg(SAY_EMOTE, TextPackName::Text, STR_STAGE2_MSG_RECIEVED);
            if (Caravan::GetFreeHex(map, tries, x, y)) {
                pathFounded = true;
                break;
            }
            tries++;
        }
        if (pathFounded) {
            NpcPlanes::AddWalkPlane(cr, MOVE_OUT_PRIORITY, PLANE_ID_MOVEOUT, 0, x, y, Game.Random(0, 5), false, 0);
            return;
        }
    }
}

/* Вспомогательные методы */
// Вспомогательная проверка. Если на карте нет игроков, болотники ничего не делают
bool IsPlayerOnMap(Critter cr)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return false;
    }

    return !map.GetCritters(CritterFindType::Players).isEmpty();
}

// Разрушение баррикады из мешков по коду предмета
void DestroyBarricade(Critter cr, ident itemId)
{
    // Game.Log("destroy!");
    Item sandbag = Game.GetItem(itemId);
    if (valid(sandbag)) {
        if (Sandbag::IsSandBag(sandbag.ProtoId)) {
            cr.SayMsg(SAY_EMOTE, TextPackName::Text, STR_DESTROY_SANDBAGS);
            cr.MirelurkCombatDestroyingItem = sandbag.Id;
            cr.SetDir(Game.GetDirection(cr.HexX, cr.HexY, sandbag.HexX, sandbag.HexY));
            _CritAnimateUse(cr);
            Sandbag::_SandBagSkill(sandbag, cr, CritterProperty::SkillRepair);
        }
    }
}
