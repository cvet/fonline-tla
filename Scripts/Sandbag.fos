// FOS Server
// Author: rifleman17

#define STR_TEAR_SANDBAG       (200) // Мешок порвался у вас в руках.
#define STR_CANT_PLACE_SANDBAG (201) // В этом месте больше невозможно уложить ни одного мешка.
#define STR_TEAR_REPAIR        (202) // Вы рвете мешок и песок рассыпается на землю.
#define MIN_ENTRY_DIST         (5)   // Минимальное расстояние до ближайшего ентайр гекса, на котором можно расположить мешок

hstring[] SandbagPids = {Content::Item::sandbag_1, Content::Item::sandbag_2, Content::Item::sandbag_3, Content::Item::sandbag_4, Content::Item::sandbag_5};

// Кладет мешок на карту в указанных координатах
// - проверяется возможность положить мешок
// - проверяется, что в координатах нет двери или контейнера - на них мешки класть нельзя. Новый мешок в таком случае удаляется
// - если на данном гексе уже лежит стопка из 5 мешков, еще один добавить нельзя
bool AddSandBag(Map map, Critter player, uint16 x, uint16 y, Item sandBag)
{
    auto pidCur = sandBag.ProtoId;
    if (pidCur != Content::Item::sandbag_1) {
        return false;
    }

    if (CheckIsNearEntry(sandBag)) // Удаление мешка если рядом есть спецгекс
    {
        Game.DestroyItem(sandBag);
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_TEAR_SANDBAG);
        return false;
    }

    Item[] items = map.GetItems(x, y);
    if (!items.isEmpty()) {
        for (uint i = 0; i < items.length(); i++) {
            // На нужном нам гексе может быть неизвестное число мешков
            // Все мешки удаляем
            // - остальные предметы не трогаем, за исключением контейнеров или дверей
            // - мешок в дверной проем поставить нельзя, на контейнер положить нельзя
            //   в этом случае новый мешок просто удаляется и выдается сообщение
            Item item = items[i];
            if (item.Id == sandBag.Id) {
                continue;
            }

            if (item.Type == ItemType::Container || item.Type == ItemType::Door) {
                // Найдена дверь или контейнер в нужных координатах, удаляем мешок, которым игрок пытался заблокировать проход или контейнер
                Game.DestroyItem(sandBag);
                player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_TEAR_SANDBAG);
                return false;
            }

            // TODO:       Если будет большое число эксплоитов с огораживанием сеток выхода и дверей, в этом месте можно будет добавить удаление
            // мешка, если в некоем радиусе есть дверь, стена итд

            hstring iPid = item.ProtoId;
            if (iPid == Content::Item::sandbag_1) {
                pidCur = Content::Item::sandbag_2;
                Game.DestroyItem(item);
            }
            else if (iPid == Content::Item::sandbag_2) {
                pidCur = Content::Item::sandbag_3;
                Game.DestroyItem(item);
            }
            else if (iPid == Content::Item::sandbag_3) {
                pidCur = Content::Item::sandbag_4;
                Game.DestroyItem(item);
            }
            else if (iPid == Content::Item::sandbag_4) {
                pidCur = Content::Item::sandbag_5;
                Game.DestroyItem(item);
            }
            else if (iPid == Content::Item::sandbag_5) {
                player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_CANT_PLACE_SANDBAG);
                player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_TEAR_SANDBAG);
                Game.DestroyItem(sandBag);
                return true;
            }
        }
    }
    if (pidCur != sandBag.ProtoId) {
        // Проверка, что на гексе с мешком не стоит игрок
        // иначе его можно заложить мешками и он будет непростреливаемым
        if (valid(map.GetCritter(x, y))) {
            // в этом гексе уже лежит мешок, и на нем стоит человек
            Game.DestroyItem(sandBag);
            player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_TEAR_SANDBAG);
            return false;
        }

        sandBag = ChangeSandBagProto(sandBag, pidCur);
    }
    ItemMovement::MoveItem(sandBag, 1, map, x, y);
    return true;
}

Item ChangeSandBagProto(Item sb, hstring pidNew)
{
    sb = Item::ChangeProto(sb, pidNew);
    sb.IsGag = true;
    return sb;
}

// Попытка забрать верхний мешок из стопки
bool TakeSandBag(Map map, Critter player, Item takeFrom)
{
    hstring pid = takeFrom.ProtoId;
    bool lastSB = false;
    hstring newPid;
    if (pid == Content::Item::sandbag_1) {
        lastSB = true;
    }
    else if (pid == Content::Item::sandbag_2) {
        newPid = Content::Item::sandbag_1;
    }
    else if (pid == Content::Item::sandbag_3) {
        newPid = Content::Item::sandbag_2;
    }
    else if (pid == Content::Item::sandbag_4) {
        newPid = Content::Item::sandbag_3;
    }
    else if (pid == Content::Item::sandbag_5) {
        newPid = Content::Item::sandbag_4;
    }
    else {
        return false;
    }

    // Проверка, сможет ли игрок поднять мешок
    int freeWeight = player.CarryWeight - player.ItemsWeight;
    ProtoItem sandBagProto = Game.GetProtoItem(Content::Item::sandbag_1);
    if (!valid(sandBagProto)) {
        return false;
    }

    if (freeWeight < int(sandBagProto.Weight)) {
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrOverweight);
        return false;
    }
    // Если это последний мешок в стопке на земле - перемещаем предмет в инвентарь персонажа
    // Иначе, уменьшаем высоту стопки
    if (lastSB) {
        ItemMovement::MoveItem(takeFrom, 0, player);
        return true;
    }
    else {
        takeFrom = ChangeSandBagProto(takeFrom, newPid);
        player.AddItem(Content::Item::sandbag_1, 1);
        return true;
    }
}

// Признак - этот протитип - относится к мешкам
bool IsSandBag(hstring pid)
{
    return SandbagPids.find(pid) != -1;
}

// При использовании итема на итем. При false вызывается обработчик криттера, потом глобальный on_use_item. При true выход.
bool _SandBagUseOnMe(Item item, Critter cr, Item usedItem, uint param)
{
    if (!valid(usedItem)) {
        return false;
    }
    if (!IsSandBag(usedItem.ProtoId)) {
        return false;
    }

    uint16 x = 0, y = 0;
    Map map = item.GetMapPosition(x, y);
    if (valid(map)) {
        AddSandBag(map, cr, x, y, usedItem);
    }
    return true;
}

// При использовнии навыка на итеме. При false вызывается обработчик криттера, потом глобальный on_use_skill. При true выход.
bool _SandBagSkill(Item item, Critter cr, CritterProperty skill)
{
    hstring pid = item.ProtoId;
    if (!IsSandBag(pid)) {
        return false;
    }

    if (!cr.IsControlledByPlayer) {
        if (pid == Content::Item::sandbag_1) {
            Game.DestroyItem(item);
            return true;
        }

        if (pid == Content::Item::sandbag_2) {
            pid = Content::Item::sandbag_1;
        }
        else if (pid == Content::Item::sandbag_3) {
            pid = Content::Item::sandbag_2;
        }
        else if (pid == Content::Item::sandbag_4) {
            pid = Content::Item::sandbag_3;
        }
        else if (pid == Content::Item::sandbag_5) {
            pid = Content::Item::sandbag_4;
        }

        item = ChangeSandBagProto(item, pid);
        return true;
    }
    switch (skill) {
    case CritterProperty::SpecialSkillPickOnGround:
        if (cr.GetMap() != null) {
            TakeSandBag(cr.GetMap(), cr, item);
        }
        return true;
    case CritterProperty::SkillRepair:
        // При использовании ремонта на мешок - мешок можно порвать
        // пока шанс 100%, включается таймаут на ремонт
        if (cr.IsControlledByPlayer && IS_TIMEOUT(cr.TimeoutSkRepair)) {
            cr.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillWeariness);
            return true;
        }

        cr.TimeoutSkRepair = REPAIR_TIMEOUT(cr);

        cr.AddItem(Content::Item::sandbag_empty, 1);
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_TEAR_REPAIR);

        if (pid == Content::Item::sandbag_1) {
            Game.DestroyItem(item);
            return true;
        }

        if (pid == Content::Item::sandbag_2) {
            pid = Content::Item::sandbag_1;
        }
        else if (pid == Content::Item::sandbag_3) {
            pid = Content::Item::sandbag_2;
        }
        else if (pid == Content::Item::sandbag_4) {
            pid = Content::Item::sandbag_3;
        }
        else if (pid == Content::Item::sandbag_5) {
            pid = Content::Item::sandbag_4;
        }

        item = ChangeSandBagProto(item, pid);
        return true;
    case SKILL_TAKE_CONT:
        return false;
    case SKILL_TAKE_ALL_CONT:
        return true;
    default:
        return false;
    }
    return false;
}

// При выбросе итема.
void _SandBagDrop(Item item, Critter cr)
{
    if (!IsSandBag(item.ProtoId)) {
        return;
    }

    uint16 x = 0, y = 0;
    Map map = item.GetMapPosition(x, y);
    if (valid(map)) {
        AddSandBag(map, cr, x, y, item);
    }
}

bool CheckIsNearEntry(Item item) // Проверка, что рядом с предметом нет EntryHex'a
{
    if (item.MapId == ZERO_IDENT) {
        return false;
    }

    Map map = Game.GetMap(item.MapId);
    if (!valid(map)) {
        return false;
    }

    hstring[] entryNames = Entrance::MapGetAllEntries(map);
    hstring[] ignoredEntries = array<hstring> = {hstring("154"), hstring("155"), hstring("156"), hstring("157"), hstring("158"), hstring("159")};
    uint16 x = 0;
    uint16 y = 0;

    for (int i = 0, l = entryNames.length(); i < l; i++) {
        hstring entryName = entryNames[i];
        if (!ignoredEntries.exists(entryName)) {
            int totalEntries = Entrance::MapCountEntry(map, entryName);
            for (int j = 0; j < totalEntries; j++) {
                if (Entrance::MapGetEntryCoords(map, entryName, j, x, y)) {
                    if (Game.GetDistance(item.HexX, item.HexY, x, y) < MIN_ENTRY_DIST) {
                        return true;
                    }
                }
            }
        }
    }

    return false;
}

void _SandBagInit(Item sb, bool firstTime)
{
    if (CheckIsNearEntry(sb)) {
        Game.DestroyItem(sb);
        return;
    }

    sb.IsGag = true;
    sb.OnCritterDrop.Subscribe(_SandBagDrop);
    sb.OnCritterUseSkill.Subscribe(_SandBagSkill);
    sb.OnCritterUseOnSelf.Subscribe(_SandBagUseOnMe);
}

// DEBUG
void SandContour(Critter cr, int len, int num, int)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    num = CLAMP(num - 1, 0, 4);

    uint16 x = cr.HexX;
    uint16 y = cr.HexY;
    for (int dir = 0; dir < 6; dir++) {
        for (int i = 0; i < len; i++) {
            map.AddItem(x, y, SandbagPids[num], 1);
            map.MoveHexByDir(x, y, dir, 1);
        }
    }
}
