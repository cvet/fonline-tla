// FOS Server Sort 2
// Author: cvet

///@ Property Map PrivateServer bool WarehouseTurretActive

#define TURRET_PID          (Content::Critter::AutoCannon)
#define SCIENCE_OFF_TURRETS (110)
#define STR_TURRETS_ON      (1200)
#define STR_TURRETS_OFF     (1201)
#define STR_COMPUTER_BEEP   (1205)
#define NPC_ROLE_TURRET     (1)

bool IsTurretActive(Critter turret)
{
    if (not turret.IsAlive()) {
        return false;
    }

    Map map = turret.GetMap();
    if (not valid(map)) {
        return false;
    }

    return map.WarehouseTurretActive;
}

void TurretScanArea(Critter turret)
{
    if (not IsTurretActive(turret)) {
        return;
    }

    Critter[] players = turret.GetCritters(false, CritterFindType::AlivePlayers);
    for (uint i = 0; i < players.length(); i++) {
        Critter player = players[i];
        EnemyStack::AddEnemyToStack(turret, player.Id);
        NpcPlanes::AddAttackPlane(turret, 0, player);
    }
}

void TurretsTurnOn(Map map)
{
    // Already on
    if (map.WarehouseTurretActive) {
        return;
    }
    map.WarehouseTurretActive = true;

    // Scan area for attack
    Critter[] turrets = map.GetCritters(TURRET_PID, CritterFindType::AliveNpc);
    for (uint i = 0; i < turrets.length(); i++) {
        TurretScanArea(turrets[i]);
    }
}

void TurretsTurnOff(Map map)
{
    // Already off
    if (!map.WarehouseTurretActive) {
        return;
    }
    map.WarehouseTurretActive = false;

    // If turrets has attack plane, clear it
    Critter[] turrets = map.GetCritters(TURRET_PID, CritterFindType::Npc);
    for (uint i = 0; i < turrets.length(); i++) {
        NpcPlanes::ErasePlane(turrets[i], AI_PLANE_ATTACK, true);
        EnemyStack::ClearEnemyStack(turrets[i]);
    }
}

// Computer On/Off turrets
// bool s_Computer( Critter cr, StaticItem computer, CritterProperty skill, Item item )
bool s_Computer(Critter cr, StaticItem computer, Item item, int skill)
{
    Map map = cr.GetMap();
    if (not valid(map)) {
        return true;
    }

    if (skill != int(CritterProperty::SkillScience) || cr.SkillScience < SCIENCE_OFF_TURRETS) {
        map.SetTextMsg(computer.HexX, computer.HexY, COLOR_GRAY, TEXTMSG_TEXT, STR_COMPUTER_BEEP);
        return true;
    }

    // Switch state
    if (!map.WarehouseTurretActive) {
        TurretsTurnOn(map);
        map.SetTextMsg(computer.HexX, computer.HexY, COLOR_GRAY, TEXTMSG_TEXT, STR_TURRETS_ON);
    }
    else {
        TurretsTurnOff(map);
        map.SetTextMsg(computer.HexX, computer.HexY, COLOR_GRAY, TEXTMSG_TEXT, STR_TURRETS_OFF);
    }

    return true;
}

// Turret functions
void _TurretInit(Critter turret, bool firstTime)
{
    turret.OnIdle.Subscribe(_TurretIdle);
    turret.OnCritterAppeared.Subscribe(_TurretShowCritter);
    turret.OnNpcPlaneBegin.Subscribe(_TurretBeginPlane);
    turret.IsUnlimitedAmmo = true;
}

void _TurretIdle(Critter turret)
{
    TurretScanArea(turret);
}

void _TurretShowCritter(Critter turret, Critter cr)
{
    if (cr.IsOwnedByPlayer() && IsTurretActive(turret)) {
        EnemyStack::AddEnemyToStack(turret, cr.Id);
        NpcPlanes::AddAttackPlane(turret, 0, cr);
    }
}

bool _TurretBeginPlane(Critter turret, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(turret, planeId);

    if (plane.Type == AI_PLANE_ATTACK && not IsTurretActive(turret)) {
        return false;
    }
    return true;
}
