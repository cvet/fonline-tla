// FOS Common

// Author: heX
// ver 2.0
// array utility functions

// функции перегружаються по мере необходимости поэтому многих типов тут может не быть.
// функции типа int, uint есть всегда.

// ищет значение в массиве ///////////////////////////

int FindInArray(hstring[] arr, hstring value)
{
    uint count = arr.length();
    for (uint i = 0; i < count; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

// int

int FindInArray(int[] arr, int value)
{
    uint count = arr.length();
    for (uint i = 0; i < count; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

bool FindInArray(int[] arr, int id, int& index)
{
    for (uint i = 0; i < arr.length(); i++) {
        if (id == arr[i]) {
            index = i;
            return true;
        }
    }
    index = -1;
    return false;
}

// uint

int FindInArray(uint[] arr, uint value)
{
    uint count = arr.length();
    for (uint i = 0; i < count; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

bool FindInArray(uint[] arr, uint id, int& index)
{
    for (uint i = 0; i < arr.length(); i++) {
        if (id == arr[i]) {
            index = i;
            return true;
        }
    }
    index = -1;
    return false;
}

// uint16

int FindInArray(uint16[] arr, uint16 value)
{
    uint count = arr.length();
    for (uint i = 0; i < count; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

// uint8

int FindInArray(uint8[] arr, uint8 value)
{
    uint count = arr.length();
    for (uint i = 0; i < count; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

bool FindInArray(uint8[] arr, uint8 id, int& index)
{
    for (uint i = 0; i < arr.length(); i++) {
        if (id == arr[i]) {
            index = i;
            return true;
        }
    }
    index = -1;
    return false;
}

// ident

int FindInArray(ident[] arr, ident value)
{
    uint count = arr.length();
    for (uint i = 0; i < count; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

bool FindInArray(ident[] arr, ident id, int& index)
{
    for (uint i = 0; i < arr.length(); i++) {
        if (id == arr[i]) {
            index = i;
            return true;
        }
    }
    index = -1;
    return false;
}

// присутствует ли это в массиве ///////////////////////////////

bool Present(hstring what, hstring[] where)
{
    if (FindInArray(where, what) == -1) {
        return false;
    }
    else {
        return true;
    }
}

bool Present(int what, int[] where)
{
    if (FindInArray(where, what) == -1) {
        return false;
    }
    else {
        return true;
    }
}

bool Present(uint what, uint[] where)
{
    if (FindInArray(where, what) == -1) {
        return false;
    }
    else {
        return true;
    }
}

bool Present(uint16 what, uint16[] where)
{
    if (FindInArray(where, what) == -1) {
        return false;
    }
    else {
        return true;
    }
}

bool Present(ident what, ident[] where)
{
    if (FindInArray(where, what) == -1) {
        return false;
    }
    else {
        return true;
    }
}

void MergeArrays(uint[] arrayTo, uint[] arrayFrom)
{
    for (uint i = 0, l = arrayFrom.length(); i < l; i++) {
        arrayTo.insertLast(arrayFrom[i]);
    }
}

void MergeArrays(int[] arrayTo, int[] arrayFrom)
{
    for (uint i = 0, l = arrayFrom.length(); i < l; i++) {
        arrayTo.insertLast(arrayFrom[i]);
    }
}

void MergeArrays(uint8[] arrayTo, uint8[] arrayFrom)
{
    for (uint i = 0, l = arrayFrom.length(); i < l; i++) {
        arrayTo.insertLast(arrayFrom[i]);
    }
}

void MergeArrays(hstring[] arrayTo, hstring[] arrayFrom)
{
    for (uint i = 0, l = arrayFrom.length(); i < l; i++) {
        arrayTo.insertLast(arrayFrom[i]);
    }
}
