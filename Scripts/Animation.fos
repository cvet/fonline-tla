// FOS Client Mapper

string[] animsList = {"harobe", "hfcmbt", "hfjmps", "hflthr", "hfmaxx", "hfmetl", "hmbjmp", "hmbmet", "hmcmbt", "hmjmps", "hmlthr", "hmmaxx",
                      "hmmetl", "mamtn2", "nablue", "naghul", "naglow", "napowr", "narobe", "nmval0", "nfbrlp", "magunn", "nfmaxx", "nfmetl",
                      "nfpeas", "nachld", "mabrom", "nftrmp", "nfvred", "nmbpea", "nmbrlp", "nmbsnp", "nmgrch", "nmlosr", "nmlthr", "nmmaxx",
                      "nmval1", "nmpeas", "malieu", "nabrwn", "nmdocc", "hfprim", "hmwarr", "nfprim", "nmwarr", "nmvalt", "macybr", "hanpwr",
                      "nmnice", "nfnice", "nfvalt", "mabran", "nmbonc", "nmbrsr", "navgul", "mafire", "nmasia", "nflynn", "nawhit", "nmcopp",
                      "nmmyrn", "nmlabb", "nmfatt", "nmrgng", "nmgang", "nfasia", "nmmexi", "nmboxx", "nmoldd", "nfchld", "hmljmp", "hmllth",
                      "hmlmax", "hmlmet", "hmlwar", "hfcabl", "hmcmbl", "maddog", "mahand"};

void ModuleInit()
{
    Game.OnCritterAnimation.Subscribe(OnCritterAnimation);
    Game.OnCritterAnimationSubstitute.Subscribe(OnCritterAnimationSubstitute);
    Game.OnCritterAnimationFallout.Subscribe(OnCritterAnimationFallout);
}

void OnCritterAnimation(hstring modelName, CritterStateAnim stateAnim, CritterActionAnim actionAnim, uint& pass, uint& flags, int& ox, int& oy,
                        string& animation)
{
    if (modelName == CRTYPE_TACTICS_RHUMANOID) {
        animation = ProcessTactics(modelName, stateAnim, actionAnim, pass, flags, ox, oy);
    }

    animation = ""; // ProcessTactics("Rhumanoid", stateAnim, actionAnim, pass, flags, ox, oy);
}

string ProcessTactics(string crTypeName, uint stateAnim, uint actionAnim, uint& pass, uint& flags, int& ox, int& oy)
{
    // Todo: Implement overlays

    // string@ crTypeName = GetCritterTypeName( crType );//теперь это ModelName
    string animName;

    // Some specific types
    bool isTurret = false;
    bool isVehicle = false;
    bool isMutantFreak = false;
    bool isBrain = false;

    string firstLetter = crTypeName[0];
    if (firstLetter == "C") { // Characters

        animName = "sprites/characters/";
        isMutantFreak = (crTypeName == "CMutantFreak");
        isBrain = (crTypeName == "CBrain");
    }
    else if (firstLetter == "A") { // Animals
        animName = "sprites/critters/";
    }
    else if (firstLetter == "R") { // Robots
        animName = "sprites/robots/";
    }
    else if (firstLetter == "T") { // Turrets
        animName = "sprites/robots/RobotTurrets/";
        isTurret = true;
    }
    else if (firstLetter == "V") { // Vehicles
        if (crTypeName == "VTankTurret") {
            crTypeName = "VTank Turret";
        }
        animName = "sprites/vehicles/";
        isVehicle = true;
    }
    else {
        return "";
    }

    animName += crTypeName.substr(1, crTypeName.length() - 1);
    animName += "$";

    // Color offsets
    // 0 - other
    // 1 - skin
    // 2 - hair
    // 3 - armor
    // Format: [index,R,G,B]
    const string[] colorOffsets = {
        //   R   G   B      Index
        "0,0,0",       // 0  None
        "30,-30,-30",  // 1  Red
        "-30,30,-30",  // 2  Green
        "-30,-30,30",  // 3  Blue
        "-30,30,30",   // 4  Turquoise
        "30,-30,30",   // 5  Purple
        "30,30,-30",   // 6  Yellow
        "30,30,30",    // 7  Light
        "60,60,60",    // 8  White
        "-30,-30,-30", // 9  Dark
        "-60,-60,-60", // 10 Black
        "0,0,0",       // 11 ...
        "0,0,0",       // 12 ...
        "0,0,0",       // 13 ...
        "0,0,0",       // 14 ...
        "0,0,0"        // 15 ...
    };

    uint skinColor = (stateAnim >> 20) & 0xF;
    uint hairColor = (stateAnim >> 24) & 0xF;
    uint armorColor = (stateAnim >> 28) & 0xF;

    if (skinColor != 0) {
        animName += "[1," + colorOffsets[skinColor] + "]";
    }
    if (hairColor != 0) {
        animName += "[2," + colorOffsets[hairColor] + "]";
    }
    if (armorColor != 0) {
        animName += "[3," + colorOffsets[armorColor] + "]";
    }

    // Check flags
    bool isDead = (actionAnim >= CritterActionAnim::DeadProneFront && actionAnim <= CritterActionAnim::DeadBurnRun);
    bool isCrouch = (!isDead && (stateAnim & STATE_ANIM_CROUCH) != 0);
    bool isProne = (!isDead && !isCrouch && (stateAnim & STATE_ANIM_PRONE) != 0);

    // Keep only weapon
    stateAnim &= STATE_ANIM_WEAPON_MASK;

    // Turret
    if (isTurret) {
        // Todo:
        animName += "StandArmed.spr";
        return animName;
    }

    // Vehicle
    if (isVehicle) {
        // Todo:
        animName += "Idle.spr";
        return animName;
    }

    // Mutant Freak
    if (isMutantFreak) {
        if (isDead) {
            animName += "Death.spr";
        }
        else if (actionAnim >= CritterActionAnim::PunchRight && actionAnim <= CritterActionAnim::KickCombo) {
            animName += "Attack.spr";
        }
        else {
            animName += "Breathe.spr";
        }
        return animName;
    }

    // Generic critter
    if (!isDead) {
        // Some critters not have Breathe, use Default instead
        if (pass == 10) {
            animName += "Default.spr";
            return animName;
        }

        // Position
        if (isCrouch) {
            animName += "Crouch";
        }
        else if (isProne) {
            animName += "Prone";
        }
        else {
            animName += "Stand";
        }

        switch (actionAnim) {
        // Todo: Climb, Climbdown, Climbup
        case CritterActionAnim::Walk:
            animName += "Walk";
            break;
        case CritterActionAnim::Limp:
            animName += "Walk";
            break;
        case CritterActionAnim::SneakWalk:
            animName += "Walk";
            break;
        case CritterActionAnim::Run:
            animName += "Run";
            break;
        case CritterActionAnim::PanicRun:
            animName += "Run";
            break;
        case CritterActionAnim::SneakRun:
            animName += "Run";
            break;
        case CritterActionAnim::DodgeFront:
            animName += "DodgeOne";
            break;
        case CritterActionAnim::DodgeBack:
            animName += "DodgeTwo";
            break;
        case CritterActionAnim::DamageFront:
            animName += "Recoil";
            break;
        case CritterActionAnim::DamageBack:
            animName += "Recoil";
            break;
        case CritterActionAnim::KnockFront:
            animName += "Fallback";
            break;
        case CritterActionAnim::KnockBack:
            animName += "Fallforward";
            break;
        case CritterActionAnim::StandupFront:
            animName += "Getupback";
            break;
        case CritterActionAnim::StandupBack:
            animName += "Getupforward";
            break;
        case CritterActionAnim::IdleProneFront:
            animName += "Fallenback";
            break;
        case CritterActionAnim::IdleProneBack:
            animName += "Fallenforward";
            break;
        case CritterActionAnim::PickUp:
            animName += "Pickup";
            break;
        case CritterActionAnim::Loot:
            animName += "Pickup";
            break;
        case CritterActionAnim::Push:
            animName += "Attack";
            break;
        case CritterActionAnim::PunchRight:
            animName += "Attack";
            break;
        case CritterActionAnim::KickHi:
            animName += "Attack";
            break;
        case CritterActionAnim::Thrust1H:
            animName += "Attack";
            break;
        case CritterActionAnim::Swing1H:
            animName += "Attack";
            break;
        case CritterActionAnim::Single:
            animName += "Attack";
            break;
        case CritterActionAnim::Burst:
            animName += "Attack";
            break;
        case CritterActionAnim::Sweep:
            animName += "Attack";
            break;
        case CritterActionAnim::Flame:
            animName += "Attack";
            break;
        case CritterActionAnim::Throw:
            animName += "Attack";
            break;
        case CritterActionAnim::Fidget:
            animName += "Fidget";
            break;
        case CritterActionAnim::Stand:
            animName += "Stand";
            break;
        case CritterActionAnim::Crouch:
            animName += "Crouch";
            break;
        case CritterActionAnim::Prone:
            animName += "Prone";
            break;

        case CritterActionAnim::Idle:
            animName += "Breathe";
            if (stateAnim == CritterStateAnim::Unarmed) {
                pass = 10; // Allow another call, see upper
            }
            break;

        case CritterActionAnim::ShowWeapon:
        case CritterActionAnim::HideWeapon:
        case CritterActionAnim::Use:
        case CritterActionAnim::SwitchItems:
        case CritterActionAnim::Steal:
            if (pass == 0) {
                animName += "Magic";
                pass++; // Allow another call, see below
            }
            else {
                animName += "Magichigh";
            }
            break;

        default:
            return "";
        }

        switch (stateAnim) {
        case CritterStateAnim::Unarmed:
            animName += "";
            break;
        case CritterStateAnim::Knife:
            animName += "Knife";
            break;
        case CritterStateAnim::Club:
            animName += "Club";
            break;
        case CritterStateAnim::Hammer:
            animName += "Club";
            break; // N/A
        case CritterStateAnim::Spear:
            animName += "Spear";
            break;
        case CritterStateAnim::Pistol:
            animName += "Pistol";
            break;
        case CritterStateAnim::SMG:
            animName += "SMG";
            break;
        case CritterStateAnim::Shootgun:
            animName += "Rifle";
            break; // N/A
        case CritterStateAnim::HeavyRifle:
            animName += "Heavy";
            break;
        case CritterStateAnim::Minigun:
            animName += "Minigun";
            break;
        case CritterStateAnim::RocketLauncher:
            animName += "Rocket";
            break;
        case CritterStateAnim::Flamer:
            animName += "Heavy";
            break; // N/A
        case CritterStateAnim::Rifle:
            animName += "Rifle";
            break;
        case CritterStateAnim::Sword:
            animName += "Knife";
            break; // N/A
        case CritterStateAnim::LongSword:
            animName += "Knife";
            break; // N/A
        case CritterStateAnim::Axe:
            animName += "Club";
            break; // N/A
        case CritterStateAnim::Bow:
            animName += "Spear";
            break; // N/A
        default:
            break;
        }

        // Attack
        switch (actionAnim) {
        case CritterActionAnim::PunchRight:
        case CritterActionAnim::PunchLeft:
        case CritterActionAnim::PunchCombo:
            if (isBrain) {
                animName += "HeadButt";
            }
            else {
                animName += "UnarmedOne";
            }
            break;
        case CritterActionAnim::KickHi:
        case CritterActionAnim::KickLo:
        case CritterActionAnim::KickCombo:
            if (isBrain) {
                animName += "Whip";
            }
            else {
                animName += "UnarmedTwo";
            }
            break;

        case CritterActionAnim::Single:
            animName += "Single";
            break; // RocketSingleOverlay
        case CritterActionAnim::Burst:
            animName += "Burst";
            break;
        case CritterActionAnim::Sweep:
            animName += "Burst";
            break;
        case CritterActionAnim::Flame:
            animName += "Single";
            break;
        case CritterActionAnim::Throw:
            animName += "Throw";
            break;

        case CritterActionAnim::Thrust1H:
        case CritterActionAnim::Thrust2H:
        case CritterActionAnim::Swing1H:
        case CritterActionAnim::Swing2H:
            if (stateAnim == CritterStateAnim::Knife || stateAnim == CritterStateAnim::Sword || stateAnim == CritterStateAnim::LongSword) {
                animName += "Slash";
            }
            else if (stateAnim == CritterStateAnim::Club || stateAnim == CritterStateAnim::Hammer || stateAnim == CritterStateAnim::Axe) {
                animName += "Swing";
            }
            else { // Spear
                animName += "Thrust";
            }
            break;

        default:
            break;
        }
    }
    else {
        animName += "";
        switch (actionAnim) {
        case CritterActionAnim::DeadProneFront:
            animName += "StandFallenback";
            break;
        case CritterActionAnim::DeadProneBack:
            animName += "StandFallenforward";
            break;
        case CritterActionAnim::DeadFront:
            animName += "Death";
            break;
        case CritterActionAnim::DeadBack:
            animName += "Death";
            break;
        case CritterActionAnim::DeadBloodySingle:
            animName += "DeathBighole";
            break;
        case CritterActionAnim::DeadBloodyBurst:
            animName += "DeathRiddled";
            break;
        case CritterActionAnim::DeadBurst:
            animName += "DeathRiddled";
            break;
        case CritterActionAnim::DeadPulse:
            animName += "DeathMelt";
            break;
        case CritterActionAnim::DeadPulseDust:
            animName += "DeathElectrify";
            break; // ElectrifyOverlay
        case CritterActionAnim::DeadLaser:
            animName += "DeathCutinhalf";
            break;
        case CritterActionAnim::DeadFused:
            animName += "DeathMelt";
            break; // MeltOverlay
        case CritterActionAnim::DeadExplode:
            animName += "DeathExplode";
            break;
        case CritterActionAnim::DeadBurn:
            animName += "DeathFire";
            break; // FireOverlay
        case CritterActionAnim::DeadBurnRun:
            animName += "DeathFire";
            break; // FireOverlay
        default:
            return "";
        }
    }

    animName += ".spr";
    return animName;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on animation substitute seeking.
bool OnCritterAnimationSubstitute(hstring modelNameBase, CritterStateAnim stateAnimBase, CritterActionAnim actionAnimBase, hstring& modelName,
                                  CritterStateAnim& stateAnim, CritterActionAnim& actionAnim)
{
    // Check model alias
    hstring modelNameAlias = CritterAnims::GetCritterAlias(modelNameBase);

    if (modelName == modelNameBase && modelName != modelNameAlias) {
        switch (actionAnim) {
        case CritterActionAnim::DeadPulse:
        case CritterActionAnim::DeadPulseDust:
        case CritterActionAnim::DeadBurn:
        case CritterActionAnim::DeadBurnRun:
            modelName = modelNameAlias;
            return true;
        default:
            break;
        }
    }

    modelName = modelNameBase;

    // Check Unarmed specific substitute
    if ((stateAnim & STATE_ANIM_WEAPON_MASK) == CritterStateAnim::Unarmed) {
        bool swapped = true;
        switch (actionAnim) {
        case CritterActionAnim::Limp:
            actionAnim = CritterActionAnim::Walk;
            break;
        case CritterActionAnim::Run:
            actionAnim = CritterActionAnim::Walk;
            break;
        case CritterActionAnim::PanicRun:
            actionAnim = CritterActionAnim::Run;
            break;
        case CritterActionAnim::SneakWalk:
            actionAnim = CritterActionAnim::Walk;
            break;
        case CritterActionAnim::SneakRun:
            actionAnim = CritterActionAnim::SneakWalk;
            break;
        case CritterActionAnim::PickUp:
            actionAnim = CritterActionAnim::Use;
            break;
        case CritterActionAnim::SwitchItems:
            actionAnim = CritterActionAnim::Use;
            break;
        default:
            swapped = false;
            break;
        }
        if (swapped) {
            return true;
        }
    }

    // Check actionAnim substitute
    bool swapped = true;
    switch (actionAnim) {
    case CritterActionAnim::IdleStunned:
        actionAnim = CritterActionAnim::Idle;
        break;
    case CritterActionAnim::IdleCombat:
        actionAnim = CritterActionAnim::Idle;
        break;
    case CritterActionAnim::Climbing:
        actionAnim = CritterActionAnim::Use;
        break;
    case CritterActionAnim::PunchLeft:
        actionAnim = CritterActionAnim::PunchRight;
        break;
    case CritterActionAnim::PunchCombo:
        actionAnim = CritterActionAnim::PunchLeft;
        break;
    case CritterActionAnim::KickHi:
        actionAnim = CritterActionAnim::PunchRight;
        break;
    case CritterActionAnim::KickLo:
        actionAnim = CritterActionAnim::KickHi;
        break;
    case CritterActionAnim::KickCombo:
        actionAnim = CritterActionAnim::KickHi;
        break;
    case CritterActionAnim::Swing1H:
        actionAnim = CritterActionAnim::Thrust1H;
        break;
    case CritterActionAnim::Thrust2H:
        actionAnim = CritterActionAnim::Thrust1H;
        break;
    case CritterActionAnim::Swing2H:
        actionAnim = CritterActionAnim::Swing1H;
        break;
    case CritterActionAnim::Sweep:
        actionAnim = CritterActionAnim::Burst;
        break;
    case CritterActionAnim::Burst:
        actionAnim = CritterActionAnim::Single;
        break;
    case CritterActionAnim::Butt:
        actionAnim = CritterActionAnim::PunchRight;
        break;
    case CritterActionAnim::Flame:
        actionAnim = CritterActionAnim::Single;
        break;
    case CritterActionAnim::NoRecoil:
        actionAnim = CritterActionAnim::Use;
        break;
    case CritterActionAnim::Throw:
        actionAnim = CritterActionAnim::PunchRight;
        break;
    case CritterActionAnim::Reload:
        actionAnim = CritterActionAnim::Use;
        break;
    case CritterActionAnim::Repair:
        actionAnim = CritterActionAnim::Reload;
        break;
    case CritterActionAnim::DodgeBack:
        actionAnim = CritterActionAnim::DodgeFront;
        break;
    case CritterActionAnim::DamageBack:
        actionAnim = CritterActionAnim::DamageFront;
        break;
    case CritterActionAnim::DamageMulBack:
        actionAnim = CritterActionAnim::DamageMulFront;
        break;
    case CritterActionAnim::WalkDamageBack:
        actionAnim = CritterActionAnim::WalkDamageFront;
        break;
    case CritterActionAnim::LimpDamageBack:
        actionAnim = CritterActionAnim::LimpDamageFront;
        break;
    case CritterActionAnim::RunDamageBack:
        actionAnim = CritterActionAnim::RunDamageFront;
        break;
    case CritterActionAnim::Loot:
        actionAnim = CritterActionAnim::PickUp;
        break;
    case CritterActionAnim::Steal:
        actionAnim = CritterActionAnim::Use;
        break;
    case CritterActionAnim::Push:
        actionAnim = CritterActionAnim::PunchRight;
        break;
    case CritterActionAnim::ShowWeapon:
        actionAnim = CritterActionAnim::Use;
        break;
    case CritterActionAnim::HideWeapon:
        actionAnim = CritterActionAnim::Use;
        break;

    case CritterActionAnim::KnockBack:
        actionAnim = CritterActionAnim::KnockFront;
        break;
    case CritterActionAnim::LaydownBack:
        actionAnim = CritterActionAnim::LaydownFront;
        break;
    case CritterActionAnim::IdleProneBack:
        actionAnim = CritterActionAnim::IdleProneFront;
        break;
    case CritterActionAnim::StandupBack:
        actionAnim = CritterActionAnim::StandupFront;
        break;
    case CritterActionAnim::DeadProneBack:
        actionAnim = CritterActionAnim::DeadProneFront;
        break;
    case CritterActionAnim::DamageProneBack:
        actionAnim = CritterActionAnim::DamageProneFront;
        break;
    case CritterActionAnim::DamageMulProneBack:
        actionAnim = CritterActionAnim::DamageMulProneFront;
        break;
    case CritterActionAnim::TwitchProneBack:
        actionAnim = CritterActionAnim::TwitchProneFront;
        break;

    case CritterActionAnim::DeadFront:
        actionAnim = CritterActionAnim::KnockFront;
        break;
    case CritterActionAnim::DeadBack:
        actionAnim = CritterActionAnim::KnockBack;
        break;
    case CritterActionAnim::DeadBloodySingle:
    case CritterActionAnim::DeadBloodyBurst:
    case CritterActionAnim::DeadBurst:
    case CritterActionAnim::DeadPulse:
    case CritterActionAnim::DeadPulseDust:
    case CritterActionAnim::DeadLaser:
    case CritterActionAnim::DeadFused:
    case CritterActionAnim::DeadExplode:
    case CritterActionAnim::DeadBurn:
    case CritterActionAnim::DeadBurnRun:
        actionAnim = CritterActionAnim::DeadFront;
        break;

    default:
        swapped = false;
        break;
    }
    if (swapped) {
        return true;
    }

    // Restore actionAnim
    actionAnim = actionAnimBase;

    // Find stateAnim substitute
    uint flags = stateAnim & STATE_ANIM_FLAGS_MASK;                   // Store flags
    stateAnim = CritterStateAnim(stateAnim & STATE_ANIM_WEAPON_MASK); // Keep only weapon

    switch (stateAnim) {
    case CritterStateAnim::Knife:
        stateAnim = CritterStateAnim::Unarmed;
        break;
    case CritterStateAnim::Club:
        stateAnim = CritterStateAnim::Knife;
        break;
    case CritterStateAnim::Hammer:
        stateAnim = CritterStateAnim::Club;
        break;
    case CritterStateAnim::Spear:
        stateAnim = CritterStateAnim::Knife;
        break;
    case CritterStateAnim::Pistol:
        stateAnim = CritterStateAnim::Unarmed;
        break;
    case CritterStateAnim::SMG:
        stateAnim = CritterStateAnim::Pistol;
        break;
    case CritterStateAnim::Shootgun:
        stateAnim = CritterStateAnim::SMG;
        break;
    case CritterStateAnim::Rifle:
        stateAnim = CritterStateAnim::Shootgun;
        break;
    case CritterStateAnim::Minigun:
        stateAnim = CritterStateAnim::Rifle;
        break;
    case CritterStateAnim::RocketLauncher:
        stateAnim = CritterStateAnim::Minigun;
        break;
    case CritterStateAnim::Flamer:
        stateAnim = CritterStateAnim::RocketLauncher;
        break;
    case CritterStateAnim::HeavyRifle:
        stateAnim = CritterStateAnim::Rifle;
        break;
    case CritterStateAnim::Sword:
        stateAnim = CritterStateAnim::Knife;
        break;
    case CritterStateAnim::LongSword:
        stateAnim = CritterStateAnim::Knife;
        break;
    case CritterStateAnim::Axe:
        stateAnim = CritterStateAnim::Hammer;
        break;
    case CritterStateAnim::Bow:
        stateAnim = CritterStateAnim::Knife;
        break;
    default:
        return false;
    }

    stateAnim = CritterStateAnim(stateAnim | flags); // Merge weapon and flags

    return true;
}

// Convert from common to fallout specific
bool OnCritterAnimationFallout(hstring modelName, CritterStateAnim stateAnim, CritterActionAnim actionAnim, uint& fStateAnim, uint& fActionAnim,
                               uint& fStateAnimEx, uint& fActionAnimEx, uint& flags)
{
    // Still only weapon
    stateAnim = CritterStateAnim(stateAnim & STATE_ANIM_WEAPON_MASK);

    // Weapon
    switch (stateAnim) {
    case CritterStateAnim::Unarmed:
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterStateAnim::Knife:
        fStateAnim = FalloutAnims1::Knife;
        break;
    case CritterStateAnim::Club:
        fStateAnim = FalloutAnims1::Club;
        break;
    case CritterStateAnim::Hammer:
        fStateAnim = FalloutAnims1::Hammer;
        break;
    case CritterStateAnim::Spear:
        fStateAnim = FalloutAnims1::Spear;
        break;
    case CritterStateAnim::Pistol:
        fStateAnim = FalloutAnims1::Pistol;
        break;
    case CritterStateAnim::SMG:
        fStateAnim = FalloutAnims1::Uzi;
        break;
    case CritterStateAnim::Shootgun:
        fStateAnim = FalloutAnims1::Shootgun;
        break;
    case CritterStateAnim::HeavyRifle:
        fStateAnim = FalloutAnims1::Rifle;
        break;
    case CritterStateAnim::Minigun:
        fStateAnim = FalloutAnims1::Minigun;
        break;
    case CritterStateAnim::RocketLauncher:
        fStateAnim = FalloutAnims1::RocketLauncher;
        break;
    case CritterStateAnim::Flamer:
        fStateAnim = FalloutAnims1::Rifle;
        break;
    case CritterStateAnim::Rifle:
        fStateAnim = FalloutAnims1::Rifle;
        break;
    case CritterStateAnim::Sword:
        fStateAnim = FalloutAnims1::Knife;
        break;
    case CritterStateAnim::LongSword:
        fStateAnim = FalloutAnims1::Knife;
        break;
    case CritterStateAnim::Axe:
        fStateAnim = FalloutAnims1::Club;
        break;
    case CritterStateAnim::Bow:
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    default:
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    }

    // Action
    switch (actionAnim) {
    case CritterActionAnim::Idle:
        fActionAnim = FalloutAnims2::Stay;
        flags |= ANIM_FLAG_FIRST_FRAME;
        break;
    case CritterActionAnim::IdleStunned:
        fActionAnim = FalloutAnims2::Stay;
        flags |= ANIM_FLAG_FIRST_FRAME;
        break;
    case CritterActionAnim::Walk:
        fActionAnim = FalloutAnims2::Walk;
        break;
    case CritterActionAnim::Limp:
        fActionAnim = FalloutAnims2::Walk;
        break;
    case CritterActionAnim::Run:
        fActionAnim = FalloutAnims2::Run;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::PanicRun:
        fActionAnim = FalloutAnims2::Run;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::ShowWeapon:
        fActionAnim = FalloutAnims2::Show;
        break;
    case CritterActionAnim::HideWeapon:
        fActionAnim = FalloutAnims2::Hide;
        break;
    case CritterActionAnim::PrepareWeapon:
        fActionAnim = FalloutAnims2::PrepareWeapon;
        break;
    case CritterActionAnim::TurnOffWeapon:
        fActionAnim = FalloutAnims2::TurnoffWeapon;
        break;
    case CritterActionAnim::Fidget:
        fActionAnim = FalloutAnims2::Stay;
        break;
    // case CritterActionAnim::Climbing:
    // fActionAnim = ;
    // break;
    case CritterActionAnim::PickUp:
        fActionAnim = FalloutAnims2::Pickup;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::Use:
        fActionAnim = FalloutAnims2::Use;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::SwitchItems:
        fActionAnim = FalloutAnims2::Use;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::Loot:
        fActionAnim = FalloutAnims2::Pickup;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::Steal:
        fActionAnim = FalloutAnims2::Use;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::Push:
        fActionAnim = FalloutAnims2::Punch;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::IdleCombat:
        fActionAnim = FalloutAnims2::Stay;
        flags |= ANIM_FLAG_FIRST_FRAME;
        break;
    case CritterActionAnim::PunchRight:
        fActionAnim = FalloutAnims2::Punch;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::KickHi:
        fActionAnim = FalloutAnims2::Kick;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::Thrust1H:
        fActionAnim = FalloutAnims2::Thrust;
        break;
    case CritterActionAnim::Thrust2H:
        fActionAnim = FalloutAnims2::Thrust;
        break;
    case CritterActionAnim::Swing1H:
        fActionAnim = FalloutAnims2::Swing;
        break;
    case CritterActionAnim::Swing2H:
        fActionAnim = FalloutAnims2::Swing;
        break;
    case CritterActionAnim::Single:
        fActionAnim = FalloutAnims2::Shoot;
        break;
    case CritterActionAnim::Burst:
        fActionAnim = FalloutAnims2::Burst;
        break;
    case CritterActionAnim::Sweep:
        fActionAnim = FalloutAnims2::Burst;
        break;
    case CritterActionAnim::Flame:
        fActionAnim = FalloutAnims2::Flame;
        break;
    case CritterActionAnim::Butt:
        fActionAnim = FalloutAnims2::Punch;
        fStateAnim = FalloutAnims1::Unarmed;
        break;
    case CritterActionAnim::Throw:
        fActionAnim = (fStateAnim == FalloutAnims1::Unarmed ? FalloutAnims2::ThrowEmpty : FalloutAnims2::ThrowWeapon);
        break;
    case CritterActionAnim::DodgeFront:
        fActionAnim = (fStateAnim == FalloutAnims1::Unarmed ? FalloutAnims2::DodgeEmpty : FalloutAnims2::DodgeWeapon);
        break;
    case CritterActionAnim::DodgeBack:
        fActionAnim = (fStateAnim == FalloutAnims1::Unarmed ? FalloutAnims2::DodgeEmpty : FalloutAnims2::DodgeWeapon);
        break;
    case CritterActionAnim::DamageFront:
        fActionAnim = FalloutAnims2::DamageFront;
        break;
    case CritterActionAnim::DamageBack:
        fActionAnim = FalloutAnims2::DamageBack;
        break;
    case CritterActionAnim::DamageMulFront:
        fActionAnim = FalloutAnims2::DamageFront;
        break;
    case CritterActionAnim::DamageMulBack:
        fActionAnim = FalloutAnims2::DamageBack;
        break;
    case CritterActionAnim::KnockFront:
        fActionAnim = FalloutAnims2::KnockFront;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::KnockBack:
        fActionAnim = FalloutAnims2::KnockBack;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::StandupFront:
        fActionAnim = FalloutAnims2::StandupFront;
        fStateAnim = FalloutAnims1::Knockout;
        break;
    case CritterActionAnim::StandupBack:
        fActionAnim = FalloutAnims2::StandupBack;
        fStateAnim = FalloutAnims1::Knockout;
        break;
    case CritterActionAnim::DeadProneFront:
        fActionAnim = FalloutAnims2::DeadFront2;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadProneBack:
        fActionAnim = FalloutAnims2::DeadBack2;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadBloodySingle:
        fActionAnim = FalloutAnims2::DeadBloodySingle;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadBloodyBurst:
        fActionAnim = FalloutAnims2::DeadBloodyBurst;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadBurst:
        fActionAnim = FalloutAnims2::DeadBurst;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadPulse:
        fActionAnim = FalloutAnims2::DeadPulse;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadPulseDust:
        fActionAnim = FalloutAnims2::DeadPulseDust;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadLaser:
        fActionAnim = FalloutAnims2::DeadLaser;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadFused:
        fActionAnim = FalloutAnims2::DeadFused;
        fStateAnim = FalloutAnims1::Dead;
        break;
    case CritterActionAnim::DeadExplode:
        fActionAnim = FalloutAnims2::DeadExplode;
        fStateAnim = FalloutAnims1::Dead;
        break;

    case CritterActionAnim::IdleProneFront:
        fActionAnim = FalloutAnims2::KnockFront;
        fStateAnim = FalloutAnims1::Dead;
        flags |= ANIM_FLAG_LAST_FRAME;
        break;
    case CritterActionAnim::IdleProneBack:
        fActionAnim = FalloutAnims2::KnockBack;
        fStateAnim = FalloutAnims1::Dead;
        flags |= ANIM_FLAG_LAST_FRAME;
        break;

    case CritterActionAnim::DeadBurn:
        fActionAnim = FalloutAnims2::DeadBurn;
        fStateAnim = FalloutAnims1::Dead;
        break; // FalloutAnims2::DeadBurn2
    case CritterActionAnim::DeadBurnRun:
        fActionAnim = FalloutAnims2::DeadBurnRun;
        fStateAnim = FalloutAnims1::Dead;
        fActionAnimEx = FalloutAnims2::DeadBurn;
        fStateAnimEx = FalloutAnims1::Dead;
        break;

    case CritterActionAnim::DeadFront:
        fStateAnim = FalloutAnims1::Dead;
        fStateAnimEx = FalloutAnims1::Dead;
        fActionAnim = FalloutAnims2::KnockFront;
        fActionAnimEx = FalloutAnims2::DeadFront2;
        break;
    case CritterActionAnim::DeadBack:
        fStateAnim = FalloutAnims1::Dead;
        fStateAnimEx = FalloutAnims1::Dead;
        fActionAnim = FalloutAnims2::KnockBack;
        fActionAnimEx = FalloutAnims2::DeadBack2;
        break;
    case CritterActionAnim::NoRecoil:
    case CritterActionAnim::Reload:
    case CritterActionAnim::Repair:
        fStateAnimEx = fStateAnim;
        fActionAnim = FalloutAnims2::PrepareWeapon;
        fActionAnimEx = FalloutAnims2::TurnoffWeapon;
        break;

    // CritterActionAnim::BeginCombat
    // CritterActionAnim::EndCombat
    // CritterActionAnim::PunchLeft
    // CritterActionAnim::PunchCombo
    // CritterActionAnim::KickLo
    // CritterActionAnim::KickCombo
    // CritterActionAnim::WalkDamageFront
    // CritterActionAnim::WalkDamageBack
    // CritterActionAnim::LimpDamageFront
    // CritterActionAnim::LimpDamageBack
    // CritterActionAnim::RunDamageFront
    // CritterActionAnim::RunDamageBack
    // CritterActionAnim::LaydownFront
    // CritterActionAnim::LaydownBack
    // CritterActionAnim::DamageProneFront
    // CritterActionAnim::DamageProneBack
    // CritterActionAnim::DamageMulProneFront
    // CritterActionAnim::DamageMulProneBack
    // CritterActionAnim::TwitchProneFront
    // CritterActionAnim::TwitchProneBack
    default:
        return false;
    }

    return true;
}

#ifdef __CLIENT
void PlayAnimSound(hstring modelName, int gender, CritterStateAnim stateAnim, CritterActionAnim actionAnim)
{
    if (actionAnim == CritterActionAnim::Walk || actionAnim == CritterActionAnim::Limp || actionAnim == CritterActionAnim::Run ||
        actionAnim == CritterActionAnim::PanicRun || actionAnim == CritterActionAnim::SneakWalk || actionAnim == CritterActionAnim::SneakRun) {
        return;
    }

    bool isFemale = gender == GenderType::Female;
    string modelNameSound = CritterAnims::GetCritterSound(modelName);
    if (modelNameSound == "") {
        return;
    }

    // Convert indicies to fallout specific
    uint fStateAnim = 0, fActionAnim = 0, fStateAnimEx = 0, fActionAnimEx = 0, fFlags = 0;
    if (!OnCritterAnimationFallout(modelName, stateAnim, actionAnim, fStateAnim, fActionAnim, fStateAnimEx, fActionAnimEx, fFlags) || fFlags != 0) {
        return;
    }

    // Make name
    const string abc = "_abcdefghijklmnopqrstuvwxyz0123456789";
    string sound = modelNameSound;
    sound += " ";
    sound[sound.length() - 1] = abc[fStateAnim];
    sound += " ";
    sound[sound.length() - 1] = abc[fActionAnim];
    sound += ".acm";

    // Convert "ha" to "hm" / "hf"
    if (sound[0] == "h" && sound[1] == "a") {
        sound[1] = (isFemale ? "f" : "m");
    }

    // Try play
    if (Game.PlaySound(sound)) {
        return;
    }

    // Find substitutes for humans
    if (sound[0] == "h") {
        // Try find by mask (hmxxxxab)
        for (uint i = 2, j = modelNameSound.length(); i < j; i++) {
            sound[i] = "x";
        }
        if (Game.PlaySound(sound)) {
            return;
        }

        // Convert "hf" to "hm"
        if (sound[1] == "f") {
            sound[1] = "m";
            if (Game.PlaySound(sound)) {
                return;
            }
        }
    }
}
#endif
