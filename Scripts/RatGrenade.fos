// FOS Server Sort 2
// Author: rifleman17
// Метательные крысы

///@ Property Critter PrivateServer hstring RatGrenadeProtoId
///@ Property Critter PrivateServer ident RatGrenadeOwnerId

///@ Property Item PrivateServer ident RatGrenadeInvokeId

#define STR_AWAKE_GLOBAL (30) // Одна из ваших оглушенных крыс пришла в себя и удрала из рюкзака! Черт. Чем это так пахнет, и что это за жидкость?
#define STR_AWAKE_MAP    (31) // Одна оглушенная крыса, по всей видимости очнулась, и выскочила из рюкзака. Прикончите эту тварь немедленно.
#define STR_VENOMED      (32) // Вы вкололи супертоксин оглушенной крысе. Теперь с каждым укусом она может отравить жертву.

// #define DL                     # (s) ( Game.Log( "RATS: " + s ) )
#define DL #(s)

void _RatGrenadeInit(Item item, bool firstTime)
{
    DL("item init");

    if (firstTime) {
        // Есть шанс, что крыса очнется через пять реальных минут
        if (Game.Random(1, 4) < 2) {
            DL("Awaking rat after 5 real minutes");
            item.RatGrenadeInvokeId = Game.DeferredCall(MINUTE_TICKS(Game.Random(4, 5)), AwakeRat, item.Id);
            DL("Awaking rat after 5 real minutes. EventId = " + item.RatGrenadeInvokeId);
        }
    }

    item.OnCritterAttack.Subscribe(_RatGrenadeAttack);
    item.OnCritterUseOnSelf.Subscribe(_RatGrenadeUseOnMe);
    item.OnFinish.Subscribe(_RatGrenadeFinish);
}

bool _RatGrenadeUseOnMe(Item item, Critter cr, Item usedItem, uint param)
{
    hstring pid = item.ProtoId;
    if (pid == Content::Item::rat_grenade && usedItem.ProtoId == Content::Item::supertoxine) {
        // Только при использовании в инвентаре, не на земле
        Item[] items = cr.GetItems();
        for (uint i = 0; i < items.length(); i++) {
            Item foundedItem = items[i];
            if (foundedItem.Id == item.Id) {
                Game.DeleteItem(foundedItem);
                cr.AddItem(Content::Item::rat_grenade_venom, 1);
                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_VENOMED);
                return true;
            }
        }
    }
    return false;
}

void AwakeRat(any value)
{
    DL("Rat awaken");
    Item item = Game.GetItem(value);
    if (valid(item)) {
        item.RatGrenadeInvokeId = ZERO_IDENT;
        if (item.CritterId != ZERO_IDENT) {
            Critter cr = Game.GetCritter(item.CritterId);
            if (valid(cr)) {
                Map map = cr.GetMap();
                if (valid(map)) {
                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_AWAKE_MAP);
                    uint16 x = cr.HexX;
                    uint16 y = cr.HexY;
                    if (Caravan::GetFreeHex(map, 2, x, y)) {
                        uint8 dir = Game.GetDirection(x, y, cr.HexX, cr.HexY);
                        dict<CritterProperty, any> ratVars = {{CritterProperty::RatGrenadeProtoId, item.ProtoId},
                                                              {CritterProperty::RatGrenadeOwnerId, item.CritterId}};
                        Critter rat = map.AddNpc(Content::Critter::RegularRat, x, y, dir, ratVars);
                        rat.SetupScript(_RatInit);
                        if (valid(rat)) {
                            NpcPlanes::AddAttackPlane(rat, 0, cr);
                        }
                    }
                }
                else {
                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_AWAKE_GLOBAL);
                }
                Game.DeleteItem(item);
            }
        }
    }
}

bool _RatGrenadeAttack(Item item, Critter cr, Critter target, uint8 weaponMode, ProtoItem ammo)
{
    DL("Rat attack");
    if (!target.IsNoPvp) {
        any[] values = {cr.Id, target.Id, item.Id, 1};
        Game.SavedDeferredCall(1, RatAttack, values);
    }
    if (target.BodyType == BodyTypes::Floater) {
        switch (cr.ModLourenceFloater) {
        case 1:
            cr.ModLourenceFloater = 2;
            break;
        case 3:
            cr.ModLourenceFloater = 4;
            break;
        }
    }
    return false;
}

void RatAttack(any[] values)
{
    Critter target = Game.GetCritter(values[1]);
    Item item = Game.GetItem(values[2]);
    if (valid(item) && valid(target)) {
        uint16 hX = target.HexX;
        uint16 hY = target.HexY;
        if (item.MapId != ZERO_IDENT) {
            Map map = item.GetMapPosition(hX, hY);
            if (valid(map)) {
                if (Caravan::GetFreeHex(map, 2, hX, hY)) {
                    uint8 dir = Game.GetDirection(hX, hY, target.HexX, target.HexY);
                    dict<CritterProperty, any> ratVars = {{CritterProperty::RatGrenadeProtoId, item.ProtoId},
                                                          {CritterProperty::RatGrenadeOwnerId, item.CritterId}};
                    Critter rat = map.AddNpc(Content::Critter::RegularRat, hX, hY, dir, ratVars);
                    rat.SetupScript(_RatInit);
                    if (valid(rat)) {
                        NpcPlanes::AddAttackPlane(rat, 0, target);
                        Game.DeleteItem(item);
                    }
                }
            }
        }
        else {
            if (values[3] < 2) {
                DL("Rat in inventory");
                values[3] = 2;
                Game.SavedDeferredCall(2, RatAttack, values);
            }
        }
    }
}

void _RatGrenadeFinish(Item item)
{
    DL("Rat grenade finish");
    if (item.RatGrenadeInvokeId != ZERO_IDENT) {
        Game.CancelDeferredCall(item.RatGrenadeInvokeId);
    }
}

// Скрипт крысы, вылезающей из гранаты, если она проснулась
void _RatInit(Critter cr, bool firstTime)
{
    Mob::_MobInit(cr, firstTime);
    cr.TeamId = Teams::Mob0;
    cr.ReplicationTime = -1;
    cr.OnDead.Subscribe(_RatDead);
    DL("v7 " + cr.RatGrenadeProtoId);
    if (cr.RatGrenadeProtoId == Content::Item::rat_grenade_venom) {
        cr.Toxic = 120;
    }
    else if (cr.RatGrenadeProtoId == Content::Item::rat_grenade_tnt) {
        cr.AddTimeEvent(cte_ExplodeRat, Time::RealSecond(Game.Random(5, 10)), 0);
    }

    cr.AddTimeEvent(cte_DeleteRat, Time::RealMinute(Game.Random(5, 10)), 0);
}

uint cte_ExplodeRat(Critter cr, any identifier, uint& rate)
{
    DL("Exploded");
    Map map = cr.GetMap();
    if (valid(map)) {
        Explode::Explode(cr.GetMap(), cr.HexX, cr.HexY, null, Content::Item::active_dynamite, cr.RatGrenadeOwnerId, Game.Random(0, 50), Game.Random(0, 1));
    }
    else {
        Game.DeleteCritter(cr);
    }
    return 0;
}

void _RatDead(Critter cr, Critter killer)
{
    DL("Rat dead");
    cr.AddTimeEvent(cte_DeleteRat, Time::RealMinute(5), 0);
}

uint cte_DeleteRat(Critter cr, any identifier, uint& rate)
{
    DL("Delete Rat");
    if (!cr.IsControlledByPlayer) {
        Game.DeleteCritter(cr);
    }
    return 0;
}
