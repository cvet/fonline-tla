// FOS Server Client
// TODO: При движении в группе неизвестно, что будет, если не лидер группы посмотрит город.
///@ RemoteCall Client ShowTownView(ident locId, int mapIndex)
///@ RemoteCall Client ShowGMTown(ident locId, hstring locPid, int[] indexMaps)

///@ RemoteCall Server Rpc_TransitToMap(ident locId, int mapIndex)
///@ RemoteCall Server Rpc_ShowTownView(ident locId, int mapIndex)
///@ RemoteCall Server Rpc_ShowGMTown()

#ifdef __SERVER

void Rpc_ShowGMTown(Player player)
{
    Critter cr = player.GetOwnedCritter();

    Location[] locs = {};
    locs = Game.GetVisibleLocations(cr.WorldX, cr.WorldY, 0, cr);
    if (locs.length() == 0) {
        return;
    }

    Location loc = locs[0];
    hstring[] entraceMaps = loc.MapEntrances.clone();
    hstring[] mapProtos = loc.MapProtos.clone();
    int[] indexMaps = {};
    for (uint i = 0; i < entraceMaps.length(); i += 2) {
        indexMaps.insertLast(mapProtos.find(entraceMaps[i]));
    }

    cr.GetOwner().ClientCall.ShowGMTown(loc.Id, loc.ProtoId, indexMaps);
}

void Rpc_ShowTownView(Player player, ident locId, int mapIndex)
{
    Critter cr = player.GetOwnedCritter();
    Location loc = Game.GetLocation(locId);
    Map map = loc.GetMapByIndex(mapIndex);
    hstring[] entraceMaps = loc.MapEntrances.clone();
    int entNum = entraceMaps.find(map.ProtoId);
    if (entNum == -1) {
        return;
    }

    // uint16 hx = 0, hy = 0;
    // cr.GetOwner().ClientCall.ShowTownView( locId, mapIndex );
    // Entrance::MapGetEntryCoords( map, entraceMaps[entNum], 0, hx, hy  );
    // cr.ViewMap( map, 40, map.Width / 2, map.Height / 2, 3 );
}

void Rpc_TransitToMap(Player player, ident locId, int mapIndex)
{
    Critter cr = player.GetOwnedCritter();
    Location loc = Game.GetLocation(locId);
    Map map = loc.GetMapByIndex(mapIndex);
    hstring[] entraceMaps = loc.MapEntrances.clone();
    int entNum = entraceMaps.find(map.ProtoId);
    if (entNum == -1) {
        return;
    }

    uint16 hx = 0, hy = 0;
    Entrance::MapGetEntryCoords(map, entraceMaps[entNum], 0, hx, hy);
    Obsolete::CritterTransitToMapCoords(cr, map.Id, map.Width / 2, map.Height / 2, Game.Random(0, 5));
}
#endif

#ifdef __CLIENT
void ShowGMTown(ident locId, hstring locPid, int[] indexMaps)
{
    Game.ShowScreen(CLIENT_SCREEN_GM_TOWN, dict<string, any> = {{"LocationId", locId}, {"LocationPid", locPid}, {"IndexMaps", Stdlib::IntArrToStr(indexMaps)}});
}

ident CurrentLocationId;
int CurrentEntrance;

void ShowTownView(ident locId, int entrance)
{
    Game.HideScreen();

    CurrentLocationId = locId;
    CurrentEntrance = entrance;

    // r17: движок сам показывает этот скрин при просмотре карты, но с пустым контекстом (без ид локации и номера энтайра)
    // Скрин может быть показан позже скриптового вызова
    // Game.HideScreen( CLIENT_SCREEN_TOWN_VIEW );
    // Game.ShowScreen( CLIENT_SCREEN_TOWN_VIEW, dict<string, any> = {{"LocationId", locId}, {"LocationEntrance", entrance}} );
}
#endif
