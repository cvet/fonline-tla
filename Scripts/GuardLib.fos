// FOS Server
// //Old script name: GuardLib.fosh. Patched 01.10 22:41:08
// Author: heX
// Прототип скриптов охраны
// ver 0.5

/*
        Todo:
        event_on_use_item - поставить проверку на кого использовали
        вынести весь функционал в отдельный файл (пусть даже пока без класса).
        поправить: наркотики и алкоголь не вызывают атаку.
        пропускать без обыска если это гражданин.
        пропускать не гражданина только если есть дневной пропуск.
        сделать таймауты на несмертельное 'наказание' игрока (а то охранник может долго бегать за игроком).
        сделать чтобы предупреждения дольше висели в памяти.
        сделать бан-лист - список провинившихся игроков которых небудут пропускать в город.
        конфискацию - при использовании наркотиков и алкоголя охрана принудительно обыскивает тебя и отнимает все это.
        изгнание - после 12 ночи всех не граждан выгоняют, ворота закрывают.
        пожалуй для рукопашного оружия предупреждения нужно более медленно наращивать

        Content::Item::day_pass - Дневной пропуск
        Content::Item::fake_citizenship - Фальшивое удостоверение Гражданина
 */

// for guard searching script / для обыска
// зона предупреждение игрока
const int MessagePlayerOnWarningHex = 1;
// зона обыскивание игрока
const int MessagePlayerOnSearchHex = 2;
// зона атаки
const int MessagePlayerOnAtackHex = 3;
// зона первые ворота города (охрана дает последнее предупреждение)
const int MessagePlayerOnPreEnter = 4;

// игрок 'просит' чтобы его пристрелили
const int MessagePleaseKillMeIAmIdiot = 13;
// посылают ее охране города чтобы они атаковали нарушителя границы
#define MESSAGE_TO_GUARD_FOR_ATACK_PLAYER (14)

// НЕ РЕАЛИЗОВАННО
// типы нарушений
// поддерживаються константы класса SK_* (Skills)
// но многие SK_* еще не работают - смотри исходник.
// ? #define ALERT_TYPE_PICK_ANY_ITEM (18)
// ? #define ALERT_TYPE_DROP_ANY_ITEM (19)
#define ALERT_TYPE_UNKNOWN (20)
#define ALERT_TYPE_ALCO    (21)
#define ALERT_TYPE_DRUG    (22)
const int AlertTypeEnterOnDeny = 23;
#define ALERT_TYPE_CONTRABAND (24)
#define ALERT_TYPE_SHOWGUN    (25)
#define ALERT_TYPE_SHOT       (26)
#define ALERT_TYPE_SHAHID     (27)
#define ALERT_TYPE_KILL       (28)
#define ALERT_TYPE_MAX        (30)

// задания охранны
#define JOB_MISC       (0)  // -хз
#define JOB_ATTACK     (1)  // -атака (общая атака)
#define JOB_WALK       (2)  // -идити
#define JOB_PICK       (3)  // поднять вещь
#define JOB_PATROL     (4)  // патрулирование
#define JOB_COURIER    (5)  // -курьер
#define JOB_FORFEITURE (6)  // конфискация запрещенных вещей
#define JOB_PUNISH     (7)  // наказать на нарушение
#define JOB_KILL       (8)  // убить
#define JOB_SUPPORT    (9)  // поддержка (бежать к зоне конфликта)
#define JOB_HOLD       (10) // удерживать позицию

// скорость проверки на наличие оружия
// не рекомендуеться сильно изменять
#define OBSERV_PERIOD  (REAL_SECOND(Game.Random(1, 6)))
#define PERCEPTION_ADD (7)
const int MaxAlert = 10;
#define ATACK_MINUS_HP (10)

// //////////////////////////////////////////////////////////////////

// НЕ РЕАЛИЗОВАННО
class TPlayerCard
{
    // карточка игрока за которым следит охрана
    uint Id;         // id игрока
    int8 AlertCount; // счетчик предупреждений
    int8 AlertType;  // тип предупреждения (покачто не используеться)
    int8 Time; // тайм аут - чтобы убирать из списка устаревшие записи (покачто не используеться)
};

// НЕ РЕАЛИЗОВАННО
class TGuardCard
{
    // карточка охранника
    uint Id;     // id охранника
    uint Targer; // цель
    uint Job;    // задание
    int8 Time;   // тайм аут - охраннику надоедает выполять задание (покачто не используеться)
};

// прототип системы охраны
class CGuardsManager
{
    // НЕ РЕАЛИЗОВАННО
    TGuardCard[] Guards = {};   // охранники
    TPlayerCard[] Players = {}; // игроки

    // системные массивы
    // нужно переделать в class
    ident[] Observing = {}; // Массив с id игроков за которыми следит охрана
    int8[] AlertCount = {}; // счетчик предупреждений
    int8[] AlertType = {};  // тип предупреждения (покачто не используеться)
    int8[] TimeOut = {};    // тайм аут (покачто не используеться)

    // настройки системы

    // номер диалога откуда беруться сообщения
    hstring DialogId;

    // прибавка к зрению
    // дистанция_обзора = npc.perception + PerceptionAdd
    int PerceptionAdd;

    // максимум предупреждений
    int MaxAlert;

    // если нпс снял столько жизней жизней (или больше) у нарушителя
    // то нпс прекращяет атаку (если игрок убрал оружие)
    int AtackMinusHp;

    // время тайм-аута после которого охраннику надоедает гоняться за нарушителем
    // НЕ РЕАЛИЗОВАННО
    int AtackTimeout;

    // таблица приоритетов предупреждений. если 0 то игнор этого типа.
    int[] AlertPriority = {};

    // инициализация
    CGuardsManager()
    {
        MaxAlert = GuardLib::MaxAlert;
        PerceptionAdd = PERCEPTION_ADD;
        AtackMinusHp = ATACK_MINUS_HP;

        AlertPriority.resize(ALERT_TYPE_MAX);
        AtackTimeout = 0;
    }

    // начинаем наблюдение за игроком
    int AddObserving(Critter player)
    {
        int i = UtilsForArray::FindInArray(Observing, player.Id);
        if (i == -1) {
            int8 zero = 0;
            Observing.insertLast(player.Id);
            AlertCount.insertLast(zero);
            AlertType.insertLast(zero);
            TimeOut.insertLast(zero);
            return Observing.length() - 1;
        }
        else {
            return i;
        }
    }

    // удаляем игрока из Observing
    void DelObserving(uint index)
    {
        Observing.removeAt(index);
        AlertCount.removeAt(index);
        AlertType.removeAt(index);
        TimeOut.removeAt(index);
    }

    // удаляем игрока из Observing
    void DelObserving(Critter player)
    {
        int i = UtilsForArray::FindInArray(Observing, player.Id);
        if (i != -1) {
            DelObserving(i);
        }
    }

    // охранник делает предупреждение
    // или даже бьет
    void GuardWarn(Critter npc, Critter bastard, int alertLevel)
    {
        if (alertLevel == 0) {
            return;
        }

        string tmp = MaxAlert;
        // нужна проверка на AlertType
        if (alertLevel > MaxAlert) {
            npc.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 3));
            int minhp = bastard.CurrentHp - AtackMinusHp;
            if (minhp < 0) {
                minhp = 0;
            }
            NpcPlanes::AddAttackPlane(npc, 0, bastard, minhp);
        }
        else if (alertLevel > MaxAlert / 2) {
            npc.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 2));
            if (NpcPlanes::IsNoPlanes(npc)) {
                NpcPlanes::AddWalkPlane(npc, 0, bastard.HexX, bastard.HexY, Game.GetDirection(npc.HexX, npc.HexY, bastard.HexX, bastard.HexY), false, 3);
            }
        }
        else {
            // npc.SetDir(Game.GetDirection(npc.HexX, npc.HexY, bastard.HexX, bastard.HexY));
            npc.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 1));
        }
    }

    // переодическое наблюдение
    void GuardObserving(Critter npc, bool modifyAlertCount)
    {
        ident myMap = npc.MapId;
        for (uint i = 0; i < Observing.length(); i++) {
            // проходимся по listObserving в поисках плохих мальчиков
            Critter player = Game.GetCritter(Observing[i]);
            if (valid(player)) {
                if ((myMap != player.MapId) || (player.CurrentHp <= 0)) {
                    // после смерти не вызываеться on_remove_critter поэтому игрок может 'телепортироваться'
                    DelObserving(player);
                    continue;
                }
                if (Game.GetDistance(npc, player) < uint(npc.Perception + PerceptionAdd)) { // кто подошел близко
                    if (GuardItemTest(_CritGetItemHand(player))) {
                        // и все еще держит пушку в руках
                        if (modifyAlertCount && (AlertCount[i] < MaxAlert * 2)) {
                            AlertCount[i]++;
                        }
                        GuardWarn(npc, player, AlertCount[i]);
                    }
                    else // если он убрал пушку то успокаиваемся
                    {
                        if (AlertCount[i] <= -MaxAlert) {
                            DelObserving(player);
                        }
                        // отключил это поведение
                        // if (modifyAlertCount)
                        //	AlertCount[i]--;
                    }
                }
            }
            else // иначе удаляем запись
            {
                DelObserving(i);
                continue;
            }
        }
    }

    // тестируем предмет на разрешонность
    bool GuardItemTest(Item item)
    {
        if (valid(item)) {
            if (item.Type == ItemType::Weapon) // если у игрока в руке оружие
            {
                if (item.ProtoId == Content::Item::shiv) {
                    return false; // незамечаем заточку
                }
                return true;
            }
        }

        return false;
    }

    // //////////////
    // EVENT section
    // //////////////

    // Вызывается, когда в поле зрения NPC появляется криттер.
    void EventOnAddCritter(Critter guard, Critter player)
    {
        if (guard.CurrentHp <= 0) {
            return;
        }
        if ((not player.IsControlledByPlayer) || (player.CurrentHp <= 0)) {
            return;
        }

        if (GuardItemTest(_CritGetItemHand(player))) // если достал пушку
        {
            int i = AddObserving(player);      // то начинаем наблюдать...
            AlertType[i] = ALERT_TYPE_SHOWGUN; // запоминаем тип нарушения
            // если стоит близко то выдаем предупреждение
            if (Game.GetDistance(guard, player) < uint(guard.Perception + PerceptionAdd)) {
                GuardWarn(guard, player, i);
            }
        }
    }

    // Вызывается, когда из поля зрения NPC исчезает криттер.
    void EventOnRemoveCritter(Critter guard, Critter player)
    {
        if (guard.CurrentHp <= 0) {
            return;
        }
        if (not player.IsControlledByPlayer) {
            return;
        }

        int idx = -1;
        if (UtilsForArray::FindInArray(Observing, player.Id, idx)) { // если нашли
            if (AlertCount[idx] <= 0) {                              // если нет притензий
                DelObserving(idx);
            }
        }
        // забываем про него
    }

    // Вызывается если криттер освободился от задания
    void EventEndPlane(Critter guard)
    {
        // if reason!!!
        if (not guard.IsAlive()) {
            return;
        }
        if (NpcPlanes::GetPlanes(guard, null) > 1) {
            return; // else // если guard занят
        }
        // guard.Wait(1000); // иначе подождем чютьчють - отключенно потомучто плохо работает
        GuardObserving(guard, false);
    }

    // Вызывается, когда в поле зрения NPC кто-либо перемещает итем из одного слота в другой.
    void EventOnMoveItem(Critter guard, Critter player, Item item, uint8 fromSlot)
    {
        if (guard.CurrentHp <= 0) {
            return;
        }
        if ((not player.IsControlledByPlayer) || (player.CurrentHp <= 0)) {
            return;
        }

        Item whatInHand = _CritGetItemHand(player);
        if (GuardItemTest(whatInHand)) // если достал пушку

        {
            // замечаем пукалку  =)
            if (Game.GetDistance(guard, player) < Settings.LookMinimum * 2) {
                if (whatInHand.ProtoId == Content::Item::red_ryder_bb_gun || whatInHand.ProtoId == Content::Item::zip_gun) {
                    // на близком растоянии охранник замечает стремное оружие
                    guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 7));
                    return;
                }
            }

            int index = AddObserving(player);      // то начинаем наблюдать...
            AlertType[index] = ALERT_TYPE_SHOWGUN; // запоминаем тип нарушения
            if (Game.GetDistance(guard, player) < uint(guard.Perception + PerceptionAdd)) {
                AlertCount[index]++;
                GuardWarn(guard, player, AlertCount[index]); // выдаем предупреждение
            }
        }
        else {
            if (item.Type == ItemType::Weapon && fromSlot == CritterItemSlot::Main) {
                if (Game.GetDistance(guard, player) < uint(guard.Perception + PerceptionAdd))
                // если игрок убрал оружие
                {
                    int i = UtilsForArray::FindInArray(Observing, player.Id);
                    if (i != -1) {
                        if ((AlertCount[i] > MaxAlert) && (AlertType[i] == ALERT_TYPE_SHOWGUN)) {
                            // AlertCount[i]=MaxAlert; // перестаем атаковать игрока
                            AlertCount[i]--;
                            guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 4));
                        }
                    }
                }
            }
        }
    }

    // Сообщения от других охранников
    void EventOnMessage(Critter guard, Critter player, int num, int val)
    {
        if (num == GuardLib::MessagePleaseKillMeIAmIdiot) {
            int index = AddObserving(player);
            AlertCount[index] = AlertCount[index] + MaxAlert;
            AlertType[index] = GuardLib::AlertTypeEnterOnDeny;
            // GuardWarn (...)
            NpcPlanes::AddAttackPlane(guard, 0, player, Settings.DeadHitPoints); // Мочим!
        }
    }

    // Вызывается, когда криттер использует итем.
    // используеться для запрета распития алкоголя
    // и принятия наркотиков в общественных местах.
    void EventOnUseItem(Critter guard, Critter player, Item item, Critter onCritter, Item onItem, Item onScenery)
    {
        if ((not player.IsControlledByPlayer) || (player.CurrentHp <= 0)) {
            return;
        }
        if (guard.CurrentHp <= 0) {
            return;
        }

        // игрок чтото использовал
        // и не факт что на себя, но покачто тут старый код

        if (Game.GetDistance(guard, player) < uint(guard.Perception + PerceptionAdd)) {
            uint16 itemType = item.Type;
            switch (itemType) {
            case (ItemType::Drug):
                if (UtilsForArray::Present(item.ProtoId, PidsGroups::Pids_DrugsAlcohol)) {
                    guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 5));
                    // guard.Say(SAY_NORM_ON_HEAD, "Эх счаз бы тоже пивка наебнуть");
                    int index = AddObserving(player);
                    AlertCount[index]++;
                    AlertType[index] = ALERT_TYPE_ALCO;
                    if (AlertCount[index] > MaxAlert) {
                        GuardWarn(guard, player, AlertCount[index]);
                    }
                }
                if (UtilsForArray::Present(item.ProtoId, PidsGroups::Pids_Drugs)) {
                    guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 6));
                    // guard.Say(SAY_NORM_ON_HEAD, "Ну как? Нормально торкнуло?");
                    int index = AddObserving(player);
                    AlertCount[index] = AlertCount[index] + MaxAlert;
                    AlertType[index] = ALERT_TYPE_DRUG;
                    if (AlertCount[index] > MaxAlert) {
                        GuardWarn(guard, player, AlertCount[index]);
                    }
                }
                break;
            }
            if (UtilsForArray::Present(item.ProtoId, PidsGroups::Pids_MiscExplosions) || item.ProtoId == Content::Item::toggle_switch) // r17
            {
                SendMessage::ToAllOnMap(player, GuardLib::MessagePleaseKillMeIAmIdiot, player.Id);
            }
        }
    }

    // при выбрасывании предметов игроком
    void EventOnDropItem(Critter guard, Critter player, Item item) // r17
    {
        if (!player.IsControlledByPlayer || !player.IsAlive()) {
            return;
        }

        if (UtilsForArray::Present(item.ProtoId, PidsGroups::Pids_MiscActiveExplosions)) {
            SendMessage::ToAllOnMap(player, GuardLib::MessagePleaseKillMeIAmIdiot, player.Id);
        }
    }

    // Когда криттер в области видимости подвергается атаке.
    // используеться для контролем за перестрелками между игроками.
    void EventOnSmthAttack(Critter guard, Critter player, Critter target)
    {
        if (not player.IsControlledByPlayer) {
            return;
        }
        if (guard.CurrentHp <= 0) {
            return;
        }
        Item weapon = _CritGetItemHand(player);
        if (not valid(weapon)) {
            return;
        }

        bool isDead = // если убили человека
            (target.CurrentHp < Settings.DeadHitPoints) and
            ((target.BodyType == BodyTypes::Men) || (target.BodyType == BodyTypes::Women) || (target.BodyType == BodyTypes::Children));

        // звук выстрела хорошо слышно - множим дистанцию на 4
        // может исключать из множителя WeaponLaser? - лазер по идее не слышно
        if (Game.GetDistance(guard, player) < uint(guard.Perception + PerceptionAdd) * 4) {
            if ((weapon.ProtoId != Content::Item::red_ryder_bb_gun) // игнорим эту фигню  =)
                and (UtilsForArray::Present(weapon.ProtoId, PidsGroups::Pids_WeaponSmallGuns) or
                     UtilsForArray::Present(weapon.ProtoId, PidsGroups::Pids_WeaponBigGuns) or
                     UtilsForArray::Present(weapon.ProtoId, PidsGroups::Pids_WeaponEnergo))) {
                int index = AddObserving(player);
                AlertType[index] = ALERT_TYPE_SHOT;
                if ((AlertCount[index] == 0) && (not isDead)) // если это превое нарушение и объект не умер
                {
                    guard.SetDir(Game.GetDirection(guard.HexX, guard.HexY, player.HexX, player.HexY));
                    guard.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Dialogs, DLGSTR(DialogId, 8));
                    AlertCount[index]++;
                }
                else {
                    AlertCount[index] = AlertCount[index] + MaxAlert + 1;
                    if (isDead) {                                    // если обьект умер
                        NpcPlanes::AddAttackPlane(guard, 0, player); // тогда наказываем нарушителя
                    }
                    else {
                        GuardWarn(guard, player, AlertCount[index]); // иначе плановое постреливание
                    }
                }
            }
        }
    }

    // Когда криттер в области видимости подвергается краже.
    void EventStealing(Critter guard, Critter fromCrit, Critter thief, bool success, Item item, uint count)
    {
        // воришку надо бить (даже если это не игрок)
        /*
           if success and random thief.luck ...
         */
        NpcPlanes::AddAttackPlane(guard, 0, thief, thief.MaxLife / 2);
        /*
           int index=grd.AddObserving(fromCrit);
           grd.AlertCount[index]=+MaxAlert;
           grd.GuardWarn(guard, fromCrit, grd.AlertCount[index]);
         */
    }

    // наблюдение за подозрительными личностями.
    uint EventObserving(Critter guard)
    {
        if (Observing.length() == 0) {
            return OBSERV_PERIOD * 2;
        }

        if (not valid(guard)) {
            Game.Log("Not valid npc from TimeEventGetCritter");
            return 0;
        }
        if (guard.CurrentHp <= 0) {
            return OBSERV_PERIOD * 2;
        }

        GuardObserving(guard, true);

        return OBSERV_PERIOD;
    }

    // глобальное наблюдение за подозрительными личностями
    // НЕ РЕАЛИЗОВАННО
    void EventTimerObserving()
    {
    }

    // снимает уровни с подозреваемых при хорошем поведении
    // НЕ РЕАЛИЗОВАННО
    void EventTimerAlertLevelDown()
    {
        // ...
    }

    // Когда криттер в области видимости выкидывает итем.
    void EventDropItem(Critter guard, Critter fromCrit, Item item)
    {
        // запрещенные предметы нужно отнимать/собирать
    }

} // CGuardsManager
// //////////////

// обыск
class CGuardSearching
{
} // CGuardsSearching
// //////////////
/*
   // Инициализация нпц. происходит при вводе нпц в игру
   void _GuardInit( Critter npc, bool firstTime )
   {
    // вешаем обработчики событий
    npc.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    npc.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    // npc.OnIdle.Subscribe(_GuardIdle);
    npc.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    npc.OnMessage.Subscribe(_GuardOnMessage);
    npc.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    npc.OnSomeCritterUseItem.Subscribe(_GuardOnUseItem);
    npc.OnSomeCritterStealing.Subscribe(_GuardStealing);
    npc.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    npc.OnSomeCritterDropItem.Subscribe(_GuardOnDropItem); // r17

    // Создаем событие наблюдения
    if( not firstTime && npc.GetTimeEvents( Tla::CteObserving ) == 0 )
        npc.AddTimeEvent( cte_Observing, OBSERV_PERIOD, Tla::CteObserving );
   }

   uint cte_Observing( Critter npc, any identifier, uint& stage )
   {
    return Grd.EventObserving( npc );
   }

   void _GuardOnAddCritter( Critter crit, Critter showCrit )
   {
    //Grd.EventOnAddCritter( crit, showCrit );
   }

   void _GuardOnRemoveCritter( Critter crit, Critter hideCrit )
   {
    Grd.EventOnRemoveCritter( crit, hideCrit );
   }

   bool _GuardEndPlane( Critter npc, int planeId, int reason, Critter someCr, Item someItem )
   {
        NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    Grd.EventEndPlane( npc );
    return true;
   }

   void _GuardOnMoveItem( Critter crit, Critter fromCrit, Item item, uint8 fromSlot )
   {
    Grd.EventOnMoveItem( crit, fromCrit, item, fromSlot );
   }

   void _GuardOnMessage( Critter crit, Critter fromCrit, int message, int value )
   {
    Grd.EventOnMessage( crit, fromCrit, message, value );
   }

   void _GuardOnUseItem( Critter crit, Critter fromCrit, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param  )
   {
    Grd.EventOnUseItem( crit, fromCrit, item, onCritter, onItem, null );
   }

   void _GuardOnDropItem( Critter crit, Critter fromCrit, Item item ) // r17
   {
    Grd.EventOnDropItem( crit, fromCrit, item );
   }

   void _GuardOnSmthAttack( Critter crit, Critter fromCrit, Critter target , Item weapon, uint8 weaponMode, ProtoItem ammo)
   {
    Grd.EventOnSmthAttack( crit, fromCrit, target );
   }

   void _GuardStealing( Critter crit, Critter thief, Critter fromCrit, Item item, uint count )
   {
    Grd.EventStealing( crit, fromCrit, thief, false, item, count );
   }
 */
