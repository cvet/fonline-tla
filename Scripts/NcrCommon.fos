// FOS Server Sort 2
// Author: rifleman17
// Все небольшие скрипты НКР

///@ Property Critter Protected     uint8 NCRFelixFindBrahmin Group = Quests Quest = 4276 Max = 3
///@ Property Critter Protected     uint8 NCRHubBook          Group = Quests Quest = 4284 Max = 2
///@ Property Critter Protected     uint8 NCRFelixSaveBrahmin Group = Quests Quest = 4274 Max = 3
///@ Property Critter PrivateServer uint8 NCRHubBookAccess1 Max = 1
///@ Property Critter PrivateServer uint8 NCRHubBookAccess2 Max = 1
///@ Property Critter PrivateServer uint8 NCRHubBookAccess3 Max = 1
///@ Property Critter PrivateServer uint8 NCRHubBookAccess4 Max = 1
///@ Property Critter PrivateServer uint8 NCRHubBookAccess5 Max = 1
///@ Property Critter PrivateServer uint8 NCRHubBookAccess6 Max = 1
///@ Property Critter PrivateServer uint8 NCRHubBookAccess7 Max = 1
///@ Property Critter PrivateServer uint  NCRHubBookQuestTimeout
///@ Property Critter PrivateServer ident NcrCommonBeggarInvokeId
///@ Property Critter PrivateServer uint8 NcrCommonBeggarPhraseNum
///@ Property Critter PrivateServer ident NcrCommonBeggarHideMoneyInvocation
///@ Property Critter PrivateServer ident NcrCommonBrahminId

///@ Property Game PrivateServer bool NCRRanchBrahminIll

#define DL #(str)
// #define DL #(str) Game.Log(str)
/********************************************Нищенка: Beggar************************************************************************/

#define PHRASE_NUM_FIRST (1)  // первая фраза нищенки
#define PHRASE_NUM_LAST  (13) // последняя фраза нищенки
#define PHRASE_NUM_HIDE  (20) // фраза, которую говорит нищенка когда прячет деньги в тайник

#define MAIN_INTERVAL    (60 * 60 * 12) // промежуток времени между монологами нищенки (когда она начинает говорить о своей судьбе)
#define SINGLE_INTERVAL  (60 * 2)       // промежуток времени между фразами нищенки
#define HIDE_INTERVAL    (60 * 30) // интервал времени до того момента, как, после получения 100 монет нищенка пойдет прятать барахло

#define MONEY_TO_HIDE    (100) // количество денег, после которого нищенка пойдет х

#define X_HIDING_PLACE   (44) // позиция бочки по х, куда прячет деньги
#define Y_HIDING_PLACE   (92) // позиция бочки по y, куда прячет деньги

#define HIDE_PRIORITY    (45) // меньше атаки, но больше остального

void _BeggarInit(Critter npc, bool firstTime)
{
    npc.IsNoBarter = true;
    npc.DialogId = Content::Dialog::ncr_beggar; // temporary
    npc.OnFinish.Subscribe(e_BeggarFinish);
    npc.NcrCommonBeggarPhraseNum = PHRASE_NUM_FIRST;
    if (firstTime) {
        npc.NcrCommonBeggarInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(MAIN_INTERVAL), BeggarTimeEvent, npc.Id);
    }
}

void e_BeggarFinish(Critter npc)
{
    Game.CancelDeferredCall(npc.NcrCommonBeggarInvokeId);

    if (npc.NcrCommonBeggarHideMoneyInvocation != ZERO_IDENT) {
        Game.CancelDeferredCall(npc.NcrCommonBeggarHideMoneyInvocation);
    }
}

void BeggarTimeEvent(any value)
{
    Critter npc = Game.GetCritter(value);
    if (!valid(npc)) {
        return;
    }

    if (!npc.IsAlive()) {
        npc.NcrCommonBeggarInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(60), BeggarTimeEvent, value);
        return;
    }

    npc.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(npc.DialogId, npc.NcrCommonBeggarPhraseNum));

    switch (npc.NcrCommonBeggarPhraseNum) {
    case PHRASE_NUM_LAST:
        npc.NcrCommonBeggarInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(MAIN_INTERVAL), BeggarTimeEvent, npc.Id);
        npc.NcrCommonBeggarPhraseNum = PHRASE_NUM_FIRST;
        break;
    default:
        npc.NcrCommonBeggarInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(SINGLE_INTERVAL), BeggarTimeEvent, npc.Id);
        npc.NcrCommonBeggarPhraseNum += 1;
        break;
    }
}

// обработка отданых 5 монет
void r_CountMoney(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return;
    }

    // В NcrCommonBeggarHideMoneyInvocation сохраняем эвент пойти сложить бабло в тайник
    if (npc.NcrCommonBeggarHideMoneyInvocation != ZERO_IDENT) {
        return; // уже был повешен обработчик
    }

    if (npc.CountItem(Content::Item::bottle_caps) > MONEY_TO_HIDE) {
        npc.NcrCommonBeggarHideMoneyInvocation = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(HIDE_INTERVAL), TimeToHideMoney, npc.Id);
    }
}

// нищенка прячет деньги в тайник
void TimeToHideMoney(any value)
{
    Critter npc = Game.GetCritter(value);
    if (!valid(npc)) {
        return;
    }

    if (!npc.IsAlive()) {
        npc.NcrCommonBeggarHideMoneyInvocation = Game.SavedDeferredCall(GAME_MINUTE_TO_TICK(60), TimeToHideMoney, value);
        return;
    }

    if (!NpcPlanes::AddWalkPlane(npc, HIDE_PRIORITY, X_HIDING_PLACE, Y_HIDING_PLACE, Game.Random(1, 5), false, 1)) {
        npc.NcrCommonBeggarHideMoneyInvocation = Game.SavedDeferredCall(GAME_MINUTE_TO_TICK(60), TimeToHideMoney, value);
        return;
    }

    NpcPlanes::AddMiscPlane(npc, HIDE_PRIORITY - 1, 60, NcrCommon::_MiscHideMoney);
}

// тайник - использование воровства на бочке
// в карте проставлен скрипт бочке
bool s_UseBarrel(Critter player, StaticItem scenery, Item item, int skill)
{
    if (skill != CritterProperty::SkillSteal) {
        return false;
    }

    Map map = player.GetMap();
    if (!valid(map)) {
        return false;
    }

    Item hidingPlace = _GetHidingPlace(map, false);
    if (!valid(hidingPlace)) {
        return false;
    }

    if (hidingPlace.Type == ItemType::Container) {
        Lockers::SwitchLocker(hidingPlace, true);
        Lockers::ShowContainer(player, null, hidingPlace, TransferTypes::HexContUp);
        return true;
    }
    return false;
}

// тайник. thnkz hex
// canCreate - признак, если нет уже контейнера, созать его
Item _GetHidingPlace(Map map, bool canCreate)
{
    Item container = map.GetItem(X_HIDING_PLACE, Y_HIDING_PLACE, Content::Item::floor_safe);
    if (not valid(container)) // Первое обращение - нету тайника
    {
        if (!canCreate) {
            return null;
        }

        container = map.AddItem(X_HIDING_PLACE, Y_HIDING_PLACE, Content::Item::floor_safe, 1);
        if (not valid(container)) {
            return null;
        }

        container.IsHidden = true;
    }

    return container;
}

void _MiscHideMoney(Critter cr)
{
    cr.SetDir(Game.GetDirection(cr.HexX, cr.HexY, X_HIDING_PLACE, Y_HIDING_PLACE));
    // _CritAnimateUse(cr); у этого бодитайпа нет анимации использования
    uint money = cr.CountItem(Content::Item::bottle_caps);

    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    cr.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(cr.DialogId, PHRASE_NUM_HIDE));
    Item container = _GetHidingPlace(map, true);
    if (money > 0) {
        cr.DeleteItem(Content::Item::bottle_caps, money);
        container.AddItem(Content::Item::bottle_caps, money, ContainerItemStack::Root);
    }

    Game.CancelDeferredCall(cr.NcrCommonBeggarHideMoneyInvocation);
    cr.NcrCommonBeggarHideMoneyInvocation = ZERO_IDENT;
}

/********************************************Охрана аванпоста Братства Стали********************************************************/
#define NPCROLE_BOS_GUARD (44) // специальная роль для охранников аванпоста
#define MSG_NUM_TAKE_OUT  (1) // номер сообщения в диалоге охранника, в котором он приказывает игроку отойти от двери аванпоста

void _InitLukGuards(Critter guard, bool firstTime)
{
    guard.NpcRole = NPCROLE_BOS_GUARD;
    guard.DialogId = Content::Dialog::ncr_bos_guards; // temporary
}

/********************************************Дверь в  аванпост БОС******************************************************************/
void s_BosDoor(Item door, bool firstTime)
{
    door.OnCritterUseSkill.Subscribe(e_UseBosDoor);
}

bool e_UseBosDoor(Item item, Critter cr, CritterProperty skill)
{
    if (!cr.IsControlledByPlayer) {
        return false;
    }

    Map map = cr.GetMap();
    if (!valid(map)) {
        return false;
    }

    auto aliveGuards = map.GetCritters(CritterProperty::NpcRole, NPCROLE_BOS_GUARD, CritterFindType::AliveNpc);
    if (!aliveGuards.isEmpty()) {
        Critter guard = aliveGuards[Game.Random(0, aliveGuards.length() - 1)];
        guard.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Dialogs, DLGSTR(guard.DialogId, MSG_NUM_TAKE_OUT));
        return true;
    }
    return false;
}

/********************************************Компутор Люка**************************************************************************/
#define STR_NUM_USE_COMP (1)

bool s_UseLukComp(Critter player, StaticItem scenery, Item item, int skill)
{
    // false - передача евента на дальнейшую обработку
    // true - прекращение обработки
    // диалог вызывается при использовании навыка "наука"
    if (skill != int(CritterProperty::SkillScience)) {
        return false;
    }

    // не допускается использование предметов
    if (valid(item)) {
        return false;
    }

    if (!player.IsControlledByPlayer) {
        return false;
    }

    // запуск диалога с компьютером
    Game.RunDialog(player, Content::Dialog::ncr_luk_comp, scenery.HexX, scenery.HexY, false);
    return true;
}

// сообщение в чат "вы использовали компьютер люка
void r_MessageUseComp(Critter player, Critter npc)
{
    player.SayMsg(SAY_NETMSG, TextPackName::Dialogs, DLGSTR(Content::Dialog::ncr_luk_comp, STR_NUM_USE_COMP));
}

/******************************************Заключенный паладин**************************************************************************/
// один из полицейских говорит случайную фразу в стиле "молчать"
#define POLICE_SEARCH_RADIUS (10) // радиус вокруг паладина, в котором ищем полицейских
#define STR_NUM_SHUTUP       (1)  // номер строки разговора "молчать!"
void dlg_PolismenComment(Critter player, Critter paladin, string& lexems)
{
    if (!valid(paladin)) {
        return;
    }

    Map map = paladin.GetMap();
    if (!valid(map)) {
        return;
    }

    Critter[] critters = map.GetCritters(paladin.HexX, paladin.HexY, POLICE_SEARCH_RADIUS, CritterFindType::AliveNpc);
    if (critters.isEmpty()) {
        return;
    }

    uint i = Game.Random(0, critters.length() - 1);
    if (critters[i].DialogId == Content::Dialog::ncr_policeman) {
        critters[i].SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Dialogs, DLGSTR(paladin.DialogId, STR_NUM_SHUTUP));
    }
}

/****************************************Разведка Реддинга для сержанта Кайла***********************************************************/
void r_BeginReddReconQuest(Critter player, Critter cr)
{
    Location loc = Game.GetLocation(Content::Location::redding);
    _SetSurroundFog(player, loc);
}

// установка тумана войны вокруг локации
void _SetSurroundFog(Critter cr, Location loc)
{
    uint zX = loc.WorldX / Settings.GlobalMapZoneLength;
    uint zY = loc.WorldY / Settings.GlobalMapZoneLength;

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            if (i == 0 && j == 0) {
                continue;
            }

            cr.SetFog(zX + i, zY + j, FOG_FULL);
        }
    }
}

// проверка, открыты ли все сектора вокруг локации, сама локация не проверяется
bool _IsSurroundFog(Critter cr, Location loc)
{
    uint zX = loc.WorldX / Settings.GlobalMapZoneLength;
    uint zY = loc.WorldY / Settings.GlobalMapZoneLength;

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            if (i == 0 && j == 0) {
                continue;
            }

            if (cr.GetFog(zX + i, zY + j) != FOG_NONE) {
                return true;
            }
        }
    }
    return false;
}

// проверка, выполнен ли квест
bool d_CheckReddReconComplete(Critter player, Critter cr)
{
    Location loc = Game.GetLocation(Content::Location::redding);
    if (!valid(loc)) {
        return false;
    }

    return !_IsSurroundFog(player, loc);
}

bool d_NotCheckReddReconComplete(Critter player, Critter cr)
{
    return !d_CheckReddReconComplete(player, cr);
}

/****************************************Доска объявлений в НКР***********************************************************/
#define BUY_FIRST  (3100)
#define BUY_END    (3109)
#define SRCH_FIRST (3110)
#define SRCH_END   (3116)
#define SELL_FIRST (3117)
#define SELL_END   (3130)
#define ADV_FIRST  (3131)
#define ADV_END    (3138)
#define MISC_FIRST (3139)
#define MISC_END   (3175)

void dlg_Buy(Critter player, Critter none, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    lexems = "$text@msg TEXT " + Game.Random(BUY_FIRST, BUY_END) + "@";
} // куплю

void dlg_Find(Critter player, Critter none, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    lexems = "$text@msg TEXT " + Game.Random(SRCH_FIRST, SRCH_END) + "@";
} // ищу

void dlg_Sell(Critter player, Critter none, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    lexems = "$text@msg TEXT " + Game.Random(SELL_FIRST, SELL_END) + "@";
} // продам

void dlg_Adv(Critter player, Critter none, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    lexems = "$text@msg TEXT " + Game.Random(ADV_FIRST, ADV_END) + "@";
} // реклама

void dlg_Misc(Critter player, Critter none, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    lexems = "$text@msg TEXT " + Game.Random(MISC_FIRST, MISC_END) + "@";
} // разное

bool _BlackBoardInit(Critter cr, StaticItem sc, Item item, int skill)
{
    Game.RunDialog(cr, Content::Dialog::ncr_blackboard, sc.HexX, sc.HexY, false);
    return true;
}

/****************************************Больной брамин на Ранчо Вейстина ************************************************/
#define NEX_ILL_EVENT            (60 * 60 * 24 * 5) // следующая "болезнь" брамина через 5 игровых суток
#define NPC_ROLE_ILL_BRAHMIN     (71)               // роль "больной брамин"
#define NPC_ROLE_HEALTHY_BRAHMIN (72)               // роль "здоровый брамин"
#define STR_DISP_QUESTION        (3470)             // текст диалога при вопросе "искать/не искать"
#define STR_DISP_YES             (3471)             // текст согласия
#define STR_DISP_NO              (3472)             // отказ
#define STR_DOIT                 (3473) // сообщение в чат "Ух, дрянь какая! После нескольких унизительных мгновений вы извлекаете наружу причину "отравления" брамина.
#define STR_FOUND_ITEM           (3474) // текст с лексемами - получение итема

void CreateBrahminIllEvent(Map map)
{
    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(NEX_ILL_EVENT), NextIllBrahmin, map.Id);
}

void _NcrRanchMapInit(Map map, bool firstTime)
{
    if (firstTime) {
        CreateBrahminIllEvent(map);
    }
}

void NextIllBrahmin(any value)
{
    Map map = Game.GetMap(ident(value));
    if (!valid(map)) {
        return;
    }

    auto ill = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_ILL_BRAHMIN, CritterFindType::Npc);
    for (uint i = 0; i < ill.length(); i++) {
        Ill2Healthy(ill[i]);
    }

    auto healthy = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_HEALTHY_BRAHMIN, CritterFindType::AliveNpc);
    if (!healthy.isEmpty()) {
        Critter brahmin = healthy[Game.Random(0, healthy.length() - 1)];
        Healthy2Ill(brahmin);
        Game.NCRRanchBrahminIll = true;
    }

    CreateBrahminIllEvent(map);
}

void Healthy2Ill(Critter brahmin)
{
    brahmin.SetupScript(_IllBrahminInit);
    brahmin.DialogId = Content::Dialog::mob_ill_brahmin;
    brahmin.NpcRole = NPC_ROLE_ILL_BRAHMIN;
    CritterState::ToKnockout(brahmin, KNOCKOUT_ACTION_ANIM_DEFAULT(true), 5, brahmin.HexX, brahmin.HexY);
    brahmin.OnSomeCritterUseItem.Subscribe(e_OnSmthUseItem);
}

void Ill2Healthy(Critter brahmin)
{
    brahmin.SetupScript(null);
    brahmin.DialogId = Content::Dialog::mob_brahmin;
    brahmin.NpcRole = NPC_ROLE_HEALTHY_BRAHMIN;
    brahmin.OnSomeCritterUseItem.Unsubscribe(e_OnSmthUseItem);
    CritterState::ToDead(brahmin, CritterActionAnim::DeadFront, null);
    CritterState::ToAlive(brahmin);
}

void e_OnSmthUseItem(Critter cr, Critter fromCr, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (!valid(onCritter) || cr.Id != onCritter.Id || item.ProtoId != Content::Item::first_aid_kit || cr.DialogId != Content::Dialog::mob_ill_brahmin ||
        !fromCr.IsControlledByPlayer || fromCr.NCRFelixSaveBrahmin != 1) {
        return;
    }

    fromCr.NcrCommonBrahminId = cr.Id; // запоминаем брамина
    SayExtended::ShowDialogBox(fromCr, Tla::DialogboxNcrIllBrahmin);
    /*
       //fromCr.ShowScreen( CLIENT_SCREEN_DIALOGBOX, 2, "answer_CureBrahmin" );
       fromCr.Say( Tla::SayDialogboxText, "Вы на самом деле готовы проверить, чем отравился брамин, используя резиновые перчатки и вантус?" );
       fromCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да, с богом!" );
       fromCr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "НИ ЗА ЧТО!!!" );
     */
}

void answer_CureBrahmin(Critter player, uint answerI, string answerS)
{
    if (answerI == 1) {
        player.NcrCommonBrahminId = ZERO_IDENT;
        return;
    }

    Critter brahmin = Game.GetCritter(player.NcrCommonBrahminId);
    player.NcrCommonBrahminId = ZERO_IDENT;

    if (!valid(brahmin)) {
        return;
    }
    if (brahmin.IsDead()) {
        return;
    }

    player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_DOIT);
    player.NCRFelixSaveBrahmin = 2;

    // достаем приз
    hstring[] pids = {Content::Item::frag_grenade,      Content::Item::frag_grenade,         Content::Item::axe,
                      Content::Item::motion_sensor,     Content::Item::v15_computer_part,    Content::Item::tube,
                      Content::Item::explosive_rocket,  Content::Item::wakizashi_blade,      Content::Item::flamer,
                      Content::Item::uranium_ore,       Content::Item::desert_eagle_ext_mag, Content::Item::wrench,
                      Content::Item::boxing_gloves,     Content::Item::small_energy_cell,    Content::Item::gamma_gulp_beer,
                      Content::Item::gamma_gulp_beer,   Content::Item::gamma_gulp_beer,      Content::Item::gamma_gulp_beer,
                      Content::Item::cigarettes,        Content::Item::excavator_chip,       Content::Item::human_brain,
                      Content::Item::deans_electronics, Content::Item::active_dynamite,      Content::Item::active_dynamite,
                      Content::Item::active_dynamite,   Content::Item::active_dynamite,      Content::Item::active_dynamite,
                      Content::Item::active_dynamite,   Content::Item::active_dynamite};

    Item item = player.AddItem(pids[Game.Random(0, pids.length() - 1)], 1);
    if (item.ProtoId == Content::Item::active_dynamite) {
        Game.DeferredCall(GAME_MINUTE_TO_TICK(10), Explode::DeferredExplode, item.Id);
    }

    Ill2Healthy(brahmin);
    Game.NCRRanchBrahminIll = true;
}

void _IllBrahminInit(Critter brahmin, bool firstTime)
{
    brahmin.DialogId = Content::Dialog::mob_ill_brahmin;
    brahmin.NpcRole = NPC_ROLE_ILL_BRAHMIN;
    CritterState::ToKnockout(brahmin, KNOCKOUT_ACTION_ANIM_DEFAULT(true), 1000, brahmin.HexX, brahmin.HexY);
    brahmin.OnSomeCritterUseItem.Subscribe(e_OnSmthUseItem);
}

/**************************************** Привести брамина для феликса    ************************************************/
#define STR_GET_MERC_BRAHMIN (3475) // строка для чата игрока, когда найден брамин

void r_BeginBrahminFindQuest(Critter player, Critter npc)
{
    Item item = player.AddItem(Content::Item::flower, 1);
    if (!valid(item)) {
        return;
    }

    item.SetupScript(_FlowerInit);
    player.NCRFelixFindBrahmin = 1;
}

void _FlowerInit(Item flower, bool firstTime)
{
    flower.OnCritterUseOn.Subscribe(e_ItemUse);
}

bool e_ItemUse(Item flower, Critter player, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (!player.IsControlledByPlayer || !valid(onCritter)) {
        return false;
    }

    if (onCritter.BodyType != BodyTypes::Brahmin) {
        return false;
    }

    if (player.NCRFelixFindBrahmin == 0 || player.NCRFelixFindBrahmin == 3) {
        return false;
    }

    Map map = onCritter.GetMap();
    if (!valid(map)) {
        return false;
    }

    Location loc = map.GetLocation();
    if (!valid(loc)) {
        return false;
    }

    if (LOCATION_IS_CITY(loc.ProtoId)) {
        return false;
    }

    Merc::Merc2Player(player, onCritter, Merc::MercFollowerCanLose);
    player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_GET_MERC_BRAHMIN);
    Game.DestroyItem(flower);
    player.NCRFelixFindBrahmin = 2;
    return true;
}

bool d_HasBrahmins(Critter player, Critter cr)
{
    Critter[] mercs = {};
    if (Merc::GetPlayerMercs(player, mercs) == 0) {
        return false;
    }

    for (uint i = 0; i < mercs.length(); i++) {
        if (mercs[i].BodyType == BodyTypes::Brahmin) {
            return true;
        }
    }
    return false;
}

void r_CompleteBrahminFindQuest(Critter player, Critter npc)
{
    if (player.NCRFelixFindBrahmin != 2) {
        return;
    }

    Critter[] mercs = {};
    if (Merc::GetPlayerMercs(player, mercs) == 0) {
        return;
    }

    uint brahmins = 0;
    for (uint i = 0; i < mercs.length(); i++) {
        if (mercs[i].BodyType == BodyTypes::Brahmin) {
            Game.DestroyCritter(mercs[i]);
            brahmins++;
        }
    }
    if (brahmins == 0) {
        return;
    }

    player.NCRFelixFindBrahmin = 3;
    player.Experience += 2000;
    if (brahmins > 1) {
        player.ReputationNCR += 1;
    }
    player.AddItem(Content::Item::bottle_caps, 300);
}

/************************** Охранники караванов на Базаре играют в покер только по вечерам *******************************/
// время играть в покер
#define NPC_ROLE_START_VALUE (1600)

bool d_IsPlayTime(Critter player, Critter npc)
{
    return GameTime::GetHour() < 10 || GameTime::GetHour() > 18;
}

// охранники не играют в покер
bool d_IsNotPlayTime(Critter player, Critter npc)
{
    return !d_IsPlayTime(player, npc);
}

// установлена ли нужная роль у игрока
bool d_IsNpcRoleSet(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return false;
    }
    return npc.NpcRole == NPC_ROLE_START_VALUE;
}

bool d_IsNotNpcRoleSet(Critter player, Critter npc)
{
    return !d_IsNpcRoleSet(player, npc);
}

void r_SetNpcRole(Critter player, Critter npc)
{
    if (valid(npc)) {
        npc.NpcRole = NPC_ROLE_START_VALUE;
    }
}

/***************************************** Проводник караванов HAL *******************************************************/
void _HalInit(Critter hal, bool firstTime)
{
    hal.CaravanCrvId = 4;
    Caravan::_SetupCaravanLeader(4, hal);
}

/******************************************** Библиография Хаба. *********************************************************/
#define ENTRY_NUM_SPAWN    (112) // номер гекса, на котором будут появляться книги
#define BOOKS_COUNT        (HubBookAccess.length())
#define RESP_MODE_ENTRIES  (ENTRY_NUM_SPAWN)
#define BOOK_RESP_TIME_MIN (60 * 60 * 24 * 6) // раз в 6 дней
#define BOOK_RESP_TIME_MAX (60 * 60 * 24 * 9) // раз в 9 дней
#define BOOK_RESP_TIME     (Game.Random(BOOK_RESP_TIME_MIN, BOOK_RESP_TIME_MAX))
#define BOOK_INFO          #(bookNum)(2 *(1 + bookNum))
#define BOOK_COST          #(bookInfo)((bookInfo / 2) - 4) // условная стоимость книги. Первая = -3; вторая -2 итд
#define VAR_NUM            #(bookNum)(HubBookAccess[bookNum])
#define GET_XP             #(booksCost, baseXP)(baseXP +(baseXP * ABS(booksCost)))
#define XP_BASE            #(lvl)(((lvl> 20) ? 2000 : ((lvl> 10) ? 1000 : 500)))
#define QST_BEGIN          (1)
#define QST_END            (3)
#define ACCEPT_BOOK        (1)

void SpawnHubBooks(Map map)
{
    // Желательно использовать этот скрипт только один раз, при первой загрузке карты
    for (uint8 i = 0; i < BOOKS_COUNT; i++) {
        RespawnItem::RespawnItem(map.Id, Content::Item::hubologist_book, 1, EMPTY_HSTRING, 0, 0, VAR_NUM(i), RESP_MODE_ENTRIES, BOOK_RESP_TIME, BOOK_INFO(i));
    }
}

// debug
void _SpawnBooks(Critter cr, int, int, int)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        SpawnHubBooks(map);
    }
}

CritterProperty[] HubBookAccess = {CritterProperty::NCRHubBookAccess1,
                                   CritterProperty::NCRHubBookAccess2,
                                   CritterProperty::NCRHubBookAccess3,
                                   CritterProperty::NCRHubBookAccess4,
                                   CritterProperty::NCRHubBookAccess5,
                                   CritterProperty::NCRHubBookAccess6,
                                   CritterProperty::NCRHubBookAccess7};

void r_BeginQuest(Critter player, Critter npc)
{
    if (player.NCRHubBook == QST_BEGIN) {
        return;
    }
    player.NCRHubBook = QST_BEGIN;

    for (uint i = 0, j = HubBookAccess.length(); i < j; i++) {
        CritterProperty prop = HubBookAccess[i];
        player.SetAsInt(prop, ACCEPT_BOOK);
    }
}

// noAward = 0 - не отказался от награды, 1 - отказался от награды
void r_EndQuest(Critter player, Critter npc, int noAward)
{
    if (player.NCRHubBook == QST_END || player.NCRHubBook == 0) {
        return;
    }

    uint bookCount = player.CountItem(Content::Item::hubologist_book);
    if (bookCount < 3) {
        return;
    }

    Item[] items = player.GetItems(ItemProperty::Type, ItemType::Misc);
    if (items.isEmpty()) {
        return;
    }

    int sumCost = 0;
    int counter = 0;
    for (uint i = 0; i < items.length() && counter < 7; i++) {
        if (items[i].ProtoId == Content::Item::hubologist_book) {
            sumCost += BOOK_COST(items[i].Info);
            counter++;
        }
    }

    hstring additionalAward;
    switch (sumCost) {
    case 0:
        additionalAward = Content::Item::scout_handbook;
        break; // Доп награда книжка скаута
    case 1:
        additionalAward = Content::Item::first_aid_book;
        break; // Доп награда книжка санитара
    default:
        break;
    }

    player.DeleteItem(Content::Item::hubologist_book, bookCount);
    player.NCRHubBook = QST_END;
    player.Experience += GET_XP(sumCost, XP_BASE(player.Level));
    if (counter > 5 && noAward > 0) {
        player.ReputationNCR += 2;
        return;
    }

    if (counter == 6 && noAward == 0) {
        player.AddItem(Content::Item::bottle_caps, XP_BASE(player.Level) * 2);
    }

    if (additionalAward != EMPTY_HSTRING) {
        player.AddItem(additionalAward, 1);
        // Todo: fix correct say text
        // if (valid(npc))
        //    npc.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(npc.DialogId, additionalAward));
    }
}

void r_SetHubBookReset(Critter player, Critter npc)
{
    NcrRatch::r_RatchTimeOutSet(player, npc, CritterProperty::NCRHubBookQuestTimeout, 30 * 24 * 60 - ((300 - player.SkillSpeech) * 60));
}
