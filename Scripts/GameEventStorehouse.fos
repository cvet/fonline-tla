// FOS Server Sort 3
// Author: rifleman17
// Хранилище отобранных у игроков и других нпц предметов на глобальной карте

///@ Property Location PrivateServer ident StorehouseContId

#define LOC_DELTA           (int(3 * Settings.GlobalMapZoneLength)) // Радиус установки локации
#define LOC_SEARCH          (6 * Settings.GlobalMapZoneLength)      // Радиус поиска локации
#define ENTRY_GUARD         (177)
#define ENTRY_DIR           (178)
#define MAX_CONTAINER_ITEMS (200)

const uint16[][] GlobalCoords = {{668, 1121}, {375, 709}, {274, 367}, {685, 218}, {1224, 632}, {1073, 1181}, {1019, 119}};

// GameEvent
void CreateStoreHouse()
{
    // Выбираем случайные координаты
    uint idx = Game.Random(0, GlobalCoords.length() - 1);

    // Ищем склад
    Location[] locations = Game.GetLocations(GlobalCoords[idx][0], GlobalCoords[idx][1], LOC_SEARCH);
    if (locations.length() > 0) {
        for (uint i = 0, l = locations.length(); i < l; i++) {
            Location loc = locations[i];
            if (valid(loc) && loc.StorehouseContId != ZERO_IDENT) {
                return; // в данном регионе уже есть склад
            }
        }
    }

    uint16 locX = GlobalCoords[idx][0] + Game.Random(-1 * LOC_DELTA, LOC_DELTA);
    uint16 locY = GlobalCoords[idx][1] + Game.Random(-1 * LOC_DELTA, LOC_DELTA);
    if (locX < Settings.GlobalMapZoneLength || locY < Settings.GlobalMapZoneLength || locX >= Settings.GlobalMapZoneLength * (Settings.GlobalMapHeight - 3) ||
        locY >= Settings.GlobalMapZoneLength * (Settings.GlobalMapHeight - 3)) {
        Game.Log("Triing create location: x=" + locX + "; y=" + locY);
        return;
    }

    // Не найдена локация в данной области
    Location loc = Game.CreateLocation(Content::Location::desert_12, locX, locY, null);
    if (valid(loc)) {
        loc.AutoGarbage = false;
        loc.Hidden = true;
        Map map = loc.GetMapByIndex(0);
        if (valid(map)) {
            map.SetupScript(_MapInit);
            Item[] items = map.GetItems(Content::Item::footlocker_clean_left);
            if (items.length() > 0) {
                loc.StorehouseContId = items[0].Id;
                loc.Hidden = true;
                loc.AutoGarbage = false;
                uint16 hexX = 0, hexY = 0;
                Entrance::GetNearEntry(map, ENTRY_DIR, hexX, hexY);
                Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_GUARD);
                for (uint i = 0; i < entries.length(); i++) {
                    uint8 dir = Game.GetDirection(entries[i].HexX, entries[i].HexY, hexX, hexY);
                    hstring pid = Game.Random(0, 1) == 0 ? Content::Critter::JackalSniper : Content::Critter::JackalTerminator;
                    int[] props = {CritterProperty::TeamId,
                                   Teams::Bandit,
                                   CritterProperty::NpcRole,
                                   17,
                                   CritterProperty::BagId,
                                   pid == Content::Critter::JackalSniper ? Bags::Sniper1 : Bags::Term1,
                                   CritterProperty::ReplicationTime,
                                   -1};
                    Critter npc = map.AddNpc(pid, entries[i].HexX, entries[i].HexY, dir, Tla::GetCritPropsDict(props));
                    npc.SetupScript(EncounterNpc::_NpcInit);
                }
            }
        }
    }
}

void _MapInit(Map map, bool firstTime)
{
    map.OnCritterIn.Subscribe(_MapInCritter);
}

void _MapInCritter(Map map, Critter cr)
{
    if (cr.IsControlledByPlayer) {
        Critter[] npc = map.GetCritters(CritterFindType::AliveNpc);
        for (uint i = 0; i < npc.length(); i++) {
            Critter hostile = npc[i];
            if (hostile.NpcRole == 17) {
                EnemyStack::AddEnemyToStack(hostile, cr.Id);
            }
        }
    }
}

void SaveLoot2Storehouse(uint16 WorldX, uint16 WorldY, Item[] items)
{
    // Ищем локацию
    Location[] locations = Game.GetLocations(WorldX, WorldY, LOC_SEARCH);
    Location storeHouse;
    if (locations.length() > 0) {
        for (uint i = 0, l = locations.length(); i < l; i++) {
            Location loc = locations[i];
            if (not valid(loc)) {
                continue;
            }

            if (loc.StorehouseContId != ZERO_IDENT) {
                storeHouse = loc;
                break;
            }
        }
    }

    if (valid(storeHouse) && storeHouse.Hidden && storeHouse.StorehouseContId != ZERO_IDENT) {
        Item container = Game.GetItem(storeHouse.StorehouseContId);
        if (valid(container)) {
            ItemMovement::MoveItems(items, container, ContainerItemStack::Root);
            if (CountContainerItems(container) > MAX_CONTAINER_ITEMS) {
                storeHouse.Hidden = false;
                Game.SavedDeferredCall(DAY_TICKS(4), DeferredDestroyLocation, storeHouse.Id);
            }
            return;
        }
    }
}

uint CountContainerItems(Item container)
{
    uint count = 0;
    Item[] items = container.GetItems(ContainerItemStack::Root);
    for (uint i = 0; i < items.length(); i++) {
        Item item = items[i];
        if (item.Type == ItemType::Weapon || item.Type == ItemType::Armor || item.Type == ItemType::Drug) {
            count += item.Count;
        }
        else {
            count += 1;
        }
    }
    return count;
}

void DeferredDestroyLocation(any value)
{
    Location loc = Game.GetLocation(ident(value));
    if (valid(loc)) {
        Game.DestroyLocation(loc.Id);
    }
}
