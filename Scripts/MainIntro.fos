// FOS Server Sort 2
// Author: rifleman17

///@ Property Critter Protected uint8 MainQuest Group = Quests Quest = 5001 Max = 21

///@ Property Map PrivateServer bool QIntroInitiated
///@ Property Map PrivateServer bool IntroDoorsOpen

#define INTRO_WORLD_X           (5)          // координаты расположения стартовой локации на глобале, ось Х
#define INTRO_WORLD_Y           (5)          // координаты расположения стартовой локации на глобале, ось У
#define ENTRY_ENTRANCE1         (HASHI(0))   // номер Entry-гекса, на котором начинает игрок
#define ENTRY_ENTRANCE2         (HASHI(240)) // номер Entry-гекса, на котором начинает игрок
#define TRIBAL_INT              (3) // максимальный интелект, при котором вместо кожаной куртки у игрока будет скин дикаря
#define MAINQ_ST_START_COMPLETE (1) // Сюжетный квест: игрок вышел со стартовой локации. Используется при проверке, где должен появиться игрок
#define MAINQ_ST_INTRO_COMPLETE (2) // Сюжетный квест: игрок вышел из локации интро.
#define HOLODISK_INFO_INTRO     (43) // номер голодиска, выдаваемого в центре репликации по завершению интерлюдии
#define STR_NOTIFY_HOLODISK     (6000) // В вашем Пипбое записана важная информация.

#define DL                      #(s)(Game.Log("" + s))
// #define DL                         # (s)

// Проверка: Вышел ли игрок со стартовой локации
bool CheckPlayerCompleteStart(Critter player)
{
    return player.MainQuest >= MAINQ_ST_START_COMPLETE;
}

// Проверка: Вышел ли игрок со второй сюжетной карты
bool CheckPlayerCompleteIntro(Critter player)
{
    return player.MainQuest >= MAINQ_ST_INTRO_COMPLETE;
}

// Создание локации начала игры для персонажа, который только что был зарегистрирован
// Возвращает истину если локация нужна, создалась и игрок телепортирован на карту
bool SetPlayerStartLocation(Critter player)
{
    // Стартовые локации не нужно сохранять. Иначе, если регистрировать тучу персонажей, для каждого придется сохранить свою локацию
    Location loc = Game.CreateLocation(Content::Location::intro_martin, INTRO_WORLD_X, INTRO_WORLD_Y, null);
    if (!valid(loc)) {
        return false;
    }

    Map map = loc.GetMapByIndex(0);
    if (!valid(map)) {
        return false;
    }

    if (!Obsolete::CritterTransitToMapEntry(player, map.Id, (Game.Random(0, 1) == 0 ? ENTRY_ENTRANCE1 : ENTRY_ENTRANCE2))) {
        return false;
    }

    // Изменение типа криттера, чтобы не было пижамы с рождения
    hstring crType = (player.Gender == GenderType::Male ? CRTYPE_DW_LEATHER_JACKET_M : CRTYPE_DW_LEATHER_JACKET_F);
    if (player.Intellect <= TRIBAL_INT) {
        crType = (player.Gender == GenderType::Male ? CRTYPE_DW_TRIBAL_M : CRTYPE_DW_TRIBAL_F);
    }

    Assert(crType != EMPTY_HSTRING);
    player.ModelNameBase = crType;
    player.ModelName = crType;

    return true;
}

// Отправляет игрока на вторую локацию
// Возвращает истину если локация нужна, создалась и игрок телепортирован на карту
bool SetPlayerIntroLocation(Critter player)
{
    Location loc = Game.CreateLocation(Content::Location::hubologists_initialization, INTRO_WORLD_X, INTRO_WORLD_Y, null);
    if (!valid(loc)) {
        return false;
    }
    Map map = loc.GetMapByIndex(0);
    if (!valid(map)) {
        return false;
    }
    Obsolete::CritterTransitToMapEntry(player, map.Id, ENTRY_ENTRANCE1);
    return true;
}

// Пытается установить начальную локацию для игрока (либо стартовая карта с виком/кессиди итд, либо вторая карта с убийством
// true - локация была установлена
// false - не получилось установить, или уже не требуется
bool SetPlayerStoryLineLocation(Critter player)
{
    // Игрок уже завершил вступление
    if (CheckPlayerCompleteIntro(player)) {
        return false;
    }
    if (!CheckPlayerCompleteStart(player)) {
        // Игрок только зарегистрировался, или в последний раз вышел в оффлайн из стартовой локации
        return SetPlayerStartLocation(player);
    }
    else {
        // Игрок уже выходил из стартовой локации
        return SetPlayerIntroLocation(player);
    }
}

// Перенос игрока со стартовой локации в результате диалога с ключевым персонажем
void r_TransitToIntro(Critter player, Critter npc)
{
    SetPlayerIntroLocation(player);
    player.MainQuest = MAINQ_ST_START_COMPLETE;
}

// обработка триггеров входа в лифт
void t_KillPlayerOnIntro(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    CritterState::Wait(player, 3000);
    Effects::FlushScreen(player, COLOR_BLACK, COLOR_BLACK, 5000);

    Game.SavedDeferredCall(750, KillPlayer, player.Id);
    Game.SavedDeferredCall(1000, OnPlayerDead, player.Id);
    Game.SavedDeferredCall(5000, ReplicateCritter, player.Id);
    player.MainQuest = MAINQ_ST_INTRO_COMPLETE;
}

// Гром и молния при инициации
#define HEX_LIGHTNING (323)
void t_Initiation(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    Map map = player.GetMap();
    if (valid(map)) {
        if (entered && player.IsControlledByPlayer) {
            if (!map.QIntroInitiated) {
                map.QIntroInitiated = true;
                CritterState::Wait(player, 3000);
                any[] values = {map.Id, player.Id};
                Game.SavedDeferredCall(SECOND_TICKS(1), SmallEffect, values);
                Game.SavedDeferredCall(SECOND_TICKS(5), MainEffect, values);
                return;
            }
        }
        if (!map.IntroDoorsOpen) {
            return;
        }
    }
    Trigger::door_open(player, trigger, entered, dir);
}

void SmallEffect(any[] values)
{
    ident mapId = values[0];
    ident crId = values[1];
    if (mapId != ZERO_IDENT && crId != ZERO_IDENT) {
        Map map = Game.GetMap(mapId);
        Critter cr = Game.GetCritter(crId);
        if (valid(cr)) {
            Map mapCr = cr.GetMap();
            if (valid(map) && valid(mapCr) && (mapCr.Id == map.Id)) {
                if (!map.IntroDoorsOpen) {
                    Entrance::Entry[] entries = Entrance::ParseEntries(map, HEX_LIGHTNING);
                    for (uint i = 0; i < entries.length(); i++) {
                        map.RunEffect(Content::Item::explode_emp, entries[i].HexX, entries[i].HexY, Game.Random(1, 2));
                        Game.Log("molniya");
                    }
                    Game.SavedDeferredCall(1000, SmallEffect, values);
                }
            }
        }
    }
}

void MainEffect(any[] values)
{
    ident mapId = values[0];
    ident crId = values[1];
    if (mapId != ZERO_IDENT && crId != ZERO_IDENT) {
        Map map = Game.GetMap(mapId);
        Critter cr = Game.GetCritter(crId);
        if (valid(cr)) {
            Map mapCr = cr.GetMap();
            if (valid(map) && valid(mapCr) && (mapCr.Id == map.Id)) {
                if (!map.IntroDoorsOpen) {
                    map.RunEffect(Content::Item::explode_emp, cr.HexX, cr.HexY, 3);
                    map.IntroDoorsOpen = true;
                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, 20);
                }
            }
        }
    }
}

void KillPlayer(any value)
{
    Critter player = Game.GetCritter(value);
    if (valid(player)) {
        player.PlaySound("WA@2XXX1.acm", true); // выстрел
    }
}

void OnPlayerDead(any value)
{
    Critter player = Game.GetCritter(value);
    if (!valid(player)) {
        return;
    }

    player.PlaySound((player.Gender == GenderType::Male ? "HFXXXBF.acm" : "HMXXXBF.acm"), true); // стон
    CritterState::ToDead(player, CritterActionAnim::None, null);
}

void ReplicateCritter(any value)
{
    Critter player = Game.GetCritter(value);
    if (!valid(player)) {
        return;
    }

    hstring crType = (player.Gender == GenderType::Male ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F);
    // player.ChangeCrType( crType );
    player.ModelNameBase = crType;

    Holodisk::AddHolodiskInfo(player, HOLODISK_INFO_INTRO);
    Game.SavedDeferredCall(3000, ShowMessage, player.Id);
    Replication::ReplicateCritter(player);
}

void ShowMessage(any value)
{
    Critter player = Game.GetCritter(value);
    player.ReplicationCount = 0;
    player.ReplicationMoney = 0;
    // player.ShowScreen( CLIENT_SCREEN_DIALOGBOX, 0, "answer_None" );
    // player.SayMsg( Tla::SayDialogboxText, TextPackName::Text, STR_NOTIFY_HOLODISK );
    player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_NOTIFY_HOLODISK);
}

void answer_None(Critter player, uint answerI, string answerS)
{
    // ...
}
