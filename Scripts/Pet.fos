// FOS Server

// Author: rifleman17
/*
   Небоевые спутники, хранятся в предмете, например клетке
   при выходе игрока на глобал, удаляются

   если теряет из видимости хозяина, бежит за ним
   если атакован, удаляются

   можно использовать на предметах в инвентаре, или на статических, на картах
   тогда пет будет провожать игрока до глобала, потом удаляться
*/

///@ Property Critter PrivateServer ident PetOwnerId
///@ Property Critter PrivateServer uint PetLifeTime

///@ Property Item PrivateServer ident PetId
///@ Property Item PrivateServer hstring PetProto

#define OwnerLostDist (8) // Расстояние в гексах до хозяина, после превышения которого пет бежит за ним

#define ROLE_PET      (765567) // Внимание, эту роль нужно заблокировать

// #define DL                     # (s) ( Game.Log( "Pet: " + s ) )
#define DL #(s)

/* Pet */

void _PetInit(Critter cr, bool firstTime)
{
    cr.IsInvulnerable = true;
    cr.IsNoSteal = true;
    cr.IsNoEnemyStack = true;
    cr.IsNoLooseLimbs = true;
    cr.IsNoHome = Game.Random(0, 2) != 0;
    cr.IsNoHeal = true;
    cr.IsNoUnarmed = true;
    cr.IsNoTalk = true;
    cr.NpcRole = ROLE_PET;

    cr.OnCritterDisappearedDist1.Subscribe(_PetHideCritter);
    cr.OnNpcPlaneBegin.Subscribe(_PetPlanBegin);
    cr.OnNpcPlaneEnd.Subscribe(_PetPlanEnd);
    cr.OnSomeUseItemOnMe.Subscribe(_PetUseItemOnMe);
    cr.OnAttacked.Subscribe(_PetAttacked);
    cr.OnIdle.Subscribe(_PetIdle);

    cr.ShowCritterDist1 = OwnerLostDist;
}

void _PetIdle(Critter cr)
{
    if (cr.IsAlive() && FollowMaster(cr, cr.PetOwnerId)) {
        if (Game.Random(1, 5) > 4 && NpcPlanes::IsNoPlanes(cr)) {
            MoveRandom::CritterMoveRandom(cr);
        }
        return;
    }
    else {
        if (cr.PetLifeTime + Time::RealSecond(10) < Game.GetFullSecond()) {
            DL("Deleting");
            Game.DestroyCritter(cr);
        }
    }
}

bool _PetAttacked(Critter cr, Critter attacker)
{
    // При атаке пета он удаляется, чтобы всегда можно было освободить любой проход, если его занял пет
    Game.DestroyCritter(cr);
    return true;
}

bool _PetUseItemOnMe(Critter cr, Critter whoUse, Item item, uint param)
{
    return UseItem(cr, whoUse, item);
}

bool _PetPlanBegin(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (plane.Type == AI_PLANE_ATTACK) {
        return false;
    }
    return true;
}

bool _PetPlanEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    return true;
}

void _PetHideCritter(Critter cr, Critter hideCrit)
{
    if (hideCrit.Id == cr.PetOwnerId) {
        if (!FollowMaster(cr, cr.PetOwnerId)) {
            Game.DestroyCritter(cr);
        }
    }
}

#define MAX_DISTANCE (40) // При превышении этого значения пет удаляется

bool FollowMaster(Critter pet, ident idMaster)
{
    Critter cr = Game.GetCritter(idMaster);
    if (valid(cr)) {
        Map mapCr = cr.GetMap();
        Map mapPet = pet.GetMap();
        if (valid(mapCr) && valid(mapPet) && mapCr.Id == mapPet.Id) {
            uint dist = Game.GetDistance(cr, pet);
            if (dist <= OwnerLostDist) {
                return true;
            }
            if (dist > OwnerLostDist && dist < MAX_DISTANCE) {
                uint16 x = cr.HexX;
                uint16 y = cr.HexY;
                if (Caravan::GetFreeHex(mapCr, 2, x, y)) {
                    NpcPlanes::AddWalkPlane(pet, 0, x, y, Game.Random(0, 5), true, 0);
                    return true;
                }
            }
        }
    }

    return false;
}

// Обработку использования предметов нужно добавлять сюда
bool UseItem(Critter cr, Critter whoUse, Item item)
{
    return false; // реакция по умолчанию
}
/* Box */

void _BoxInit(Item item, bool firstTime)
{
    if (item.PetId != ZERO_IDENT) {
        Critter pet = Game.GetCritter(item.PetId);
        if (valid(pet)) {
            Game.DestroyCritter(pet);
        }
    }
    item.OnCritterUse.Subscribe(_BoxUse);
}

bool _BoxUse(Item item, Critter cr, uint param)
{
    if (item.PetId != ZERO_IDENT) {
        Critter pet = Game.GetCritter(item.PetId);
        item.PetId = ZERO_IDENT;
        if (valid(pet)) {
            Game.DestroyCritter(pet);
            return true;
        }
    }

    Map map = cr.GetMap();
    if (valid(map) && item.PetProto != EMPTY_HSTRING) {
        uint16 x = cr.HexX;
        uint16 y = cr.HexY;
        if (Caravan::GetFreeHex(map, 2, x, y)) {
            int[] props = {CritterProperty::NpcRole, ROLE_PET /*, CritterProperty::Var2, cr.Id, CritterProperty::Var1, Game.GetFullSecond() */};
            Critter pet = map.AddNpc(item.PetProto, x, y, Game.GetDirection(x, y, cr.HexX, cr.HexY), Tla::GetCritPropsDict(props));
            pet.SetupScript(_PetInit);
            if (valid(pet)) {
                item.PetId = pet.Id;
                pet.PetOwnerId = cr.Id;
                return true;
            }
        }
    }
    return false;
}

void AddPetBox(Critter cr, hstring boxPid, hstring petPid)
{
    Item box = cr.AddItem(boxPid, 1);
    if (valid(box)) {
        box.PetProto = petPid;
        box.IsCanUse = true;
        box.SetupScript(_BoxInit);
    }
}
