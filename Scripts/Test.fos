// FOS Server Client
// отключить после тестов

///@ RemoteCall Server CreateLocationSelf(hstring pid, int mapIndex, hstring entry)

#ifdef __SERVER

void ModuleInit()
{
    // Game.OnMapCritterIn.Subscribe( OnMapCritterIn );
}

void OnMapCritterIn(Map map, Critter cr)
{
    Game.Log("Critter state: " + cr.Cond);
}

void CreateLocationSelf(Player player, hstring locPid, int mapIndex, hstring entry)
{
    Critter cr = player.GetOwnedCritter();
    Location loc = Game.CreateLocation(locPid, cr.WorldX, cr.WorldY, null);
    Map map = loc.GetMapByIndex(mapIndex);
    uint16 hexX = 0, hexY = 0;
    if (Entrance::MapGetEntryCoords(map, entry, 0, hexX, hexY)) {
        cr.TransitToMap(map, hexX, hexY, Game.Random(0, 5));
    }
}

void HP(Critter cr, int, int, int)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        Critter[] critters = map.GetCritters(CritterFindType::Any);
        for (int i = 0, l = critters.length(); i < l; i++) {
            critters[i].Say(SAY_NORM, "COND: " + critters[i].Cond + "; HP " + critters[i].CurrentHp);
        }
    }
}

#endif

// ~cmd CreateLocation desert_10 0 0
#ifdef __CLIENT

bool ParseMessage(string message)
{
    string[] args = message.split(" ");
    if (args.length() > 2 && args[0] == "cmd") {
        hstring a1;
        hstring a2;
        int p1 = 0;
        string cmd = args[1];
        if (cmd == "CreateLocation") {
            a1 = hstring(args[2]);
            p1 = 0; // args[ 3 ] ;
            a2 = hstring(args[4]);
            CurPlayer.ServerCall.CreateLocationSelf(a1, p1, a2);
            return true;
        }
    }
    return false;
}

#endif
