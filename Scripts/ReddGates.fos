// FOS Server Sort 2
// Author: rifleman17

///@ Property Item PrivateServer any[] ReddGatesGoodList
///@ Property Item PrivateServer any[] ReddGatesBadList

/*
   Охраняемые врата.
   Позволяет сделать дверь, охраняемую нпц-охранниками.

   - Если жив хоть один охранник, дверь невозможно взломать или открыть. При первой попытке открыть дверь, охранники будут предупреждать игрока "отойди". При
   второй - начинают атаку игрока.
   - Если дверь открыта, а игрок не получил разрешения на вход, охрана будет атаковать игрока.
   - Открытие/закрытие двери нужно реализовывать через диалог с охранниками с использованием функции r_OpenGates
   - Разрешение на проход нужно давать через диалог с охранником с использованием функции r_SetPlayerAccess
   - Охранники разделены на три группы: охранники внешней стороны, наружной и помощники. Внешние будут нападать на того, кто пытается открыть дверь снаружи.
   Внутренние - изнутри. Помощники нападут на того, кто попытается проникнуть внутрь охраняемой двери и наступит на гекс с дверью. Указание условной роли
   охранника производится с помощью NPC_ROLE. Можно сделать общий NPC_ROLE для всех охранников. Нельзя назначать NPC_ROLE=0
   - Условный номер ворот - это специальный параметр для поиска врат через диалоги. Обязан быть указан у двери, играющей роль ворот в параметре Val3.
   - Дверь должна быть окружена Entry-гексами по всем 6ти сторонам. С наружней стороны у этих гексов должен быть номер ENTRY_GATES_OUT, внутри
   ENTRY_GATES_IN. Эти гексы используются для определения относительного положения игрока и врат.
   - Номера ролей охранников двери должны быть указаны у врат в полях Val0..Val3.
   - У двери используется Val5 для запоминания события закрытия двери.

   Пример использования:

   В маппере:

   1) Двери присваивается скрипт "_GatesInit"
   2) Заполняются параметры итема:
        Val0 - GatesData::NpcRoleOuters - номер роли нпц, для охранника внешней стороны
        Val1 - GatesData::NpcRoleInners - номер роли нпц, для охранника внутренней стороны
        Val2 - GatesData::NpcRoleHelpers - номер роли нпц для группы поддержки - только вмешиваются в бой
        Val3 - Условный "номер двери", для поиска врат через диалог
   3) Рядом с вратами ставятся НПЦ, роли которых должны совпадать с ролями, указанными в Val0...Val2.
   4) Дверь окружаем EntryHex'ами  c номерами 74 - для внешней стороны, 75 - для внутренней
   5) Это все. Для управления открытием двери и получением разрешения на проход, нужно использовать дилаоги с охраной.
   В них передавать параметр gateNumber - в котором указывать номер врат (поле Val3 для двери)
 */
#define GUARD_ROLE_OUTER       (1) // Условная роль "охранник внешней стороны врат"
#define GUARD_ROLE_INNER       (2) // Условная роль "охранник внутренней стороны врат"
#define GUARD_ROLE_HELPER      (3) // Условная роль "охранник поддержки" - помогает тем охранникам 1 и 2 ролей, которым может помочь.
#define ENTRY_GATES_OUT        (74) // Номер entry гекса перед вратами, который считается "внешним"
#define ENTRY_GATES_IN         (75) // Номер entry гекса перед вратами, который считается "внутренним"
#define PLAYER_NEAR_OUT        (0)  // Игрок рядом с вратами, вплотную с внешней стороны
#define PLAYER_NEAR_IN         (1)  // Игрок рядом с вратами, вплотную с внутренней стороны
#define PLAYER_NEAR_ON         (2)  // Игрок находится прямо на воротах
#define PLAYER_FAR             (3)  // Игрок находится от ворот
#define POS_UNKNOWN            (4)  // Неизвестная позиция
#define PASS_TYPE_OUT          (1)  // Разрешение на выход
#define PASS_TYPE_IN           (2)  // Разрешение на вход
#define PASS_TYPE_BOTH         (3)  // Есть разрешение на вход и на выход
#define TIME_TO_CLOSE          (MINUTE_TICKS(1)) // Время закрытия ворот, через 1 реальную минуту
#define STR_DONTTOUCH_THE_DOOR (5400) // "Не подходи к двери @lex pname@. Второй раз предупреждать не буду."
#define STR_ATTACK_LOCKPIKER   (5401) // "Ты слишком глуп@lex sex@. Эта ошибка будет стоить тебе жизни!"
#define STR_ATTACK_NO_ACCESS   (5402) // "КУДА ТЫ? ТЫ ТРУП"
// #define DL #(s) (Game.Log(s))
#define DL #(s)

// Вспомогательный класс, доступ игрока
class PassAccept
{
    ident PlayerId;  // Id игрока
    uint PassType;   // Тип пропуска
    uint CancelTime; // Время отмены пропуска (игровая минута)
    ident GatesId;   // Id врат, к которым получен доступ
};

class GatesControl // Описание и методы охраняемых ворот
{
    ident GatesId;      // Id врат
    uint NpcRoleOuters; // НПЦ роль охранников снаружи, фактическое значение роли НПЦ, которое будет присваиваться криттерам на карте при расстановке их в
                        // маппере.
    uint NpcRoleInners; // то же, для внутренних
    uint NpcRoleHelpers;        // то же, для помощников
    uint GatesNumber;           // Условный "номер двери", для поиска врат через диалог
    any[] badList = {};         // Cписок Id игроков-нарушителей для тех или иных врат
    bool badListLoaded;         // Признак, badList загружен
    PassAccept[] goodList = {}; // Список игроков, получивших разрешение на проход в ворота
    bool goodListLoaded;        // Признак, goodList загружен

    GatesControl()
    {
        badListLoaded = false;
        goodListLoaded = false;
    }

    Map GatesMap()
    {
        Item gates = Game.GetItem(GatesId);
        ident mapId = gates.MapId;
        if (mapId == ZERO_IDENT) {
            return null;
        }
        return Game.GetMap(mapId);
    }

    Item Gates()
    {
        return Game.GetItem(GatesId);
    }

    Critter[] GetGuards(uint8 role, CritterFindType findType) // Поиск всех охранников по заданной УСЛОВНОЙ роли
    {
        Critter[] guards = {};

        int npcRole = 0;
        switch (role) {
        case GUARD_ROLE_OUTER:
            npcRole = NpcRoleOuters;
            break;
        case GUARD_ROLE_INNER:
            npcRole = NpcRoleInners;
            break;
        case GUARD_ROLE_HELPER:
        default:
            npcRole = NpcRoleHelpers;
        }

        // 0 NPC_ROLE не поддерживается, чтобы не зацеплять чужих нпц
        if (npcRole != 0) {
            Map map = GatesMap();
            if (map != null) {
                guards = map.GetCritters(CritterProperty::NpcRole, npcRole, findType);
            }
        }

        return guards;
    }

    Critter GetClosestGuard(uint8 role, CritterFindType findType, Critter player) // Получение ближайшего охранника к игроку
    {
        Critter closestGuard;
        uint distance = 666; // контрольное значение, будем искать меньшее расстояние
        uint curD = distance;
        Critter[] guards = GetGuards(role, findType);
        for (uint i = 0; i < guards.length(); i++) {
            curD = Game.GetDistance(player, guards[i]);
            if (curD < distance) {
                distance = curD;
                closestGuard = guards[i];
            }
        }
        return closestGuard;
    }

    int GetPlayerGatesDisposition(Critter player) // Получение взаимного расположения игрока и врат
    {
        Item gates = Gates();
        if (!valid(gates)) {
            return POS_UNKNOWN;
        }

        if (player.HexX == gates.HexX && gates.HexY == player.HexY) {
            return PLAYER_NEAR_ON; // если координаты игрока и двери совпадают, игрок стоит в дверном проеме
        }

        Map map = GatesMap();
        if (!valid(map)) {
            return POS_UNKNOWN;
        }

        Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_GATES_IN);
        for (uint i = 0; i < entries.length(); i++) {
            // если игрок стоит ногами на гексе ENTRY_GATES_OUT, он снаружи, вплотную к двери
            if (player.HexX == entries[i].HexX && entries[i].HexY == player.HexY) {
                return PLAYER_NEAR_IN;
            }
        }

        entries = Entrance::ParseEntries(map, ENTRY_GATES_OUT);
        for (uint i = 0; i < entries.length(); i++) {
            // если игрок стоит ногами на гексе ENTRY_GATES_IN, он внутри, вплотную к двери
            if (player.HexX == entries[i].HexX && entries[i].HexY == player.HexY) {
                return PLAYER_NEAR_OUT;
            }
        }

        return PLAYER_FAR; // иначе где-то далеко от врат
    }

    bool CheckPlayerIsBad(Critter player) // Проверка, является ли игрок нарушителем
    {
        if (!badListLoaded) {
            GetBadList();
        }
        for (uint i = 0, l = badList.length(); i < l; i++) {
            if (player.Id == badList[i]) {
                return true;
            }
        }
        return false;
    }

    void SetPlayerIsBad(Critter player) // Заносит игрока в список нарушителей
    {
        if (CheckPlayerIsBad(player)) {
            return; // Занесен в списки ранее
        }
        badList.insertLast(player.Id);
        SaveBadList();
    }

    void SetPlayerIsNotBad(Critter player) // Удаляет код игрока из списка нарушителей
    {
        if (!CheckPlayerIsBad(player)) {
            return;
        }
        for (uint i = 0, l = badList.length(); i < l; i++) {
            if (player.Id == badList[i]) {
                badList.removeAt(i);
                break;
            }
        }
        SaveBadList();
    }

    void SaveBadList() // Сохраняет список нарушителей
    {
        Game.GetItem(GatesId).ReddGatesBadList = badList;
    }

    uint GetBadList() // Загружает список плохишей
    {
        badList.clear();
        if (GatesId == ZERO_IDENT) {
            return 0;
        }
        badList = Game.GetItem(GatesId).ReddGatesBadList.clone();
        badListLoaded = (badList.length() > 0);
        return badList.length();
    }

    void AttackPlayer(Critter player, uint8 role) // Инструкции охранникам
    {
        Critter[] guards = GetGuards(role, CritterFindType::AliveNpc);
        for (uint i = 0; i < guards.length(); i++) {
            NpcPlanes::AddAttackPlane(guards[i], 0, player);
        }
    }

    bool CheckPlayerIsGood(Critter player, uint passType) // Проверка, что у игрока есть разрешение на проход
    {
        if (!goodListLoaded) {
            GetGoodList();
        }
        DL("checking goodlist. length:" + goodList.length());
        for (uint i = 0, l = goodList.length(); i < l; i++) {
            DL("Good list!" + goodList[i].PlayerId + " type:" + goodList[i].PassType);
            if (goodList[i].PlayerId == player.Id && goodList[i].PassType == passType) {
                return true;
            }
        }
        return false;
    }

    void SetPlayerIsGood(Critter player, uint passType,
                         uint minuteExpire) // Добавление игроку разрешения на проход ворот. minuteExpire - время, когда разрешение истечет
    {
        if (CheckPlayerIsGood(player, passType)) {
            return; // Разрешение получено ранее
        }
        PassAccept pass = PassAccept();
        pass.PlayerId = player.Id;
        pass.PassType = passType;
        pass.CancelTime = minuteExpire;
        pass.GatesId = GatesId;
        if (pass.CancelTime * 60 > Game.GetFullSecond()) {
            goodList.insertLast(pass);
            SaveGoodList();
        }
    }

    void GetGoodList() // Получение списка игроков с пропусками
    {
        any[] data = Game.GetItem(GatesId).ReddGatesGoodList.clone();
        if (data.length() == 0) {
            return;
        }

        uint goodPlayers = data[0];
        uint idx = 1;
        for (uint i = 0; i < goodPlayers; i++) {
            if (data.length() <= idx + 3) {
                break;
            }
            PassAccept pass = PassAccept();
            pass.PlayerId = data[idx];
            pass.PassType = data[idx + 1];
            pass.CancelTime = data[idx + 2];
            pass.GatesId = data[idx + 3];
            idx += 4;
            if (pass.CancelTime * 60 > Game.GetFullSecond()) // Время пропуска еще не прошло
            {
                goodList.insertLast(pass);
            }
        }
        goodListLoaded = true;
        SaveGoodList();
    }

    void SaveGoodList() // Сохранение списка игроков с пропусками
    {
        if (!goodListLoaded) {
            GetGoodList();
        }

        uint goodPlayers = goodList.length();
        if (goodPlayers == 0) {
            Game.GetItem(GatesId).ReddGatesGoodList = array<any>();
            return;
        }

        any[] data = {goodPlayers};
        for (uint i = 0; i < goodPlayers; i++) {
            PassAccept pass = goodList[i];
            if (!valid(pass) || pass.CancelTime < Game.GetFullSecond()) {
                if (data.length() > 0) {
                    data.removeLast();
                }
                continue;
            }

            data.insertLast(pass.PlayerId);
            data.insertLast(pass.PassType);
            data.insertLast(pass.CancelTime);
            data.insertLast(pass.GatesId);
        }

        Game.GetItem(GatesId).ReddGatesGoodList = data;
    }
};

/* Получение экземпляра класса GatesControl*/

GatesControl GatesControlFromItem(Item item) // Из самой двери
{
    GatesControl gc = GatesControl();
    gc.GatesId = item.Id;
    gc.NpcRoleOuters = item.Val0;
    gc.NpcRoleInners = item.Val1;
    gc.NpcRoleHelpers = item.Val2;
    gc.GatesNumber = item.Val3;
    return gc;
}

GatesControl FindGatesControl(Map map, int number) // Попытка найти врата по условному номеру
{
    Item[] gates = map.GetItems(ItemProperty::Type, ItemType::Door);
    for (uint i = 0; i < gates.length(); i++) {
        if (gates[i].Val3 == number) {
            return GatesControlFromItem(gates[i]);
        }
    }
    return null;
}

/* События врат */

void _GatesInit(Item gates, bool firstTime)
{
    gates.OnCritterUseSkill.Subscribe(_GatesSkill);
    gates.OnCritterWalk.Subscribe(_GatesWalk);
}

bool _GatesSkill(Item gates, Critter player, CritterProperty skill) // Попытка открыть или взломать дверь. Запрещено открывать дверь, этим занимается охрана
{
    GatesControl gc = GatesControlFromItem(gates);
    if (!valid(gc) || !player.IsControlledByPlayer) {
        if (gates.Val5 == 0) {
            gates.Val5 = Game.SavedDeferredCall(TIME_TO_CLOSE, CloseGates, gates.Id);
        }
        return false;
    }
    uint pos = gc.GetPlayerGatesDisposition(player);
    if (pos == POS_UNKNOWN || pos == PLAYER_FAR) {
        return true;
    }
    uint8 guardRole = GUARD_ROLE_OUTER;
    if (pos == PLAYER_NEAR_IN) {
        guardRole = GUARD_ROLE_INNER;
    }
    // Если будет найден живой охранник, рядом с дверью, он отреагирует на попытку открытия двери.
    Critter guard = gc.GetClosestGuard(guardRole, CritterFindType::AliveNpc, player);
    if (!valid(guard)) {
        if (gates.Val5 == 0) {
            gates.Val5 = Game.SavedDeferredCall(TIME_TO_CLOSE, CloseGates, gates.Id);
        }
        return false; // Не найдено живых охранников с нужной стороны ворот
    }
    string lex =
        "$pname" + Obsolete::GetPlayerName(player.Id) + "$sex" + (player.Gender == GenderType::Male ? "" : "а"); // лексемы. имя игрока и родовое окончание
    if (gc.CheckPlayerIsBad(player)) {
        gc.AttackPlayer(player, guardRole);
        guard.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Text, STR_ATTACK_LOCKPIKER, lex);
        gc.SetPlayerIsNotBad(player);
    }
    else {
        guard.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Text, STR_DONTTOUCH_THE_DOOR, lex);
        gc.SetPlayerIsBad(player);
    }
    return true;
}

void _GatesWalk(Item gates, Critter player, bool entered, uint8 dir) // Проход игрока через ворота
{
    if (!player.IsControlledByPlayer) {
        return;
    }
    GatesControl gc = GatesControlFromItem(gates);
    if (!valid(gc)) {
        return;
    }
    // TODO: Сделать проверки различные для входа и выхода
    if (!gc.CheckPlayerIsGood(player, PASS_TYPE_OUT) && !gc.CheckPlayerIsGood(player, PASS_TYPE_IN)) {
        Critter guard = gc.GetClosestGuard(GUARD_ROLE_HELPER, CritterFindType::AliveNpc, player);
        if (valid(guard)) {
            guard.SayMsg(SAY_SHOUT, TextPackName::Text, STR_ATTACK_NO_ACCESS);
        }
        gc.AttackPlayer(player, GUARD_ROLE_HELPER);
    }
}

/* Функции для диалогов */

bool d_CheckPlayerIsGood(Critter player, Critter npc, int gateNumber, int passType)
{
    Map map = player.GetMap();
    if (!valid(map)) {
        return false;
    }
    GatesControl gc = FindGatesControl(map, gateNumber);
    DL("gc here");
    if (valid(gc)) {
        DL("gc valid");
        return gc.CheckPlayerIsGood(player, passType);
    }
    return false;
}

void r_SetPlayerAccess(Critter player, Critter npc, int gateNumber, int passType,
                       int time) // добавление игроку доступа на проход на time игровых минут типа passType через врата с условным номером gateNumber
{
    Map map = player.GetMap();
    if (!valid(map)) {
        return;
    }
    GatesControl gc = FindGatesControl(map, gateNumber);
    if (valid(gc)) {
        gc.SetPlayerIsGood(player, passType, Game.GetFullSecond() + time * 60);
    }
}

void r_OpenGates(Critter player, Critter npc, int gateNumber, int time) // Открытие врат с условным номером gateNumber на time игровых минут
{
    Map map = player.GetMap();
    if (!valid(map)) {
        return;
    }
    GatesControl gc = FindGatesControl(map, gateNumber);
    if (valid(gc)) {
        Item gates = gc.Gates();
        if (!valid(gates)) {
            return;
        }
        if (gates.Val5 != 0) {
            return; // Врата уже открылись
        }
        gates.Val5 = Game.SavedDeferredCall(GAME_MINUTE_TO_TICK(time), CloseGates, gc.GatesId);
        Lockers::SwitchLocker(gates, true);
    }
}

void CloseGates(any value)
{
    // Если в проеме стоит игрок, он будет смещен на энтайр хекс выхода
    Item gates = Game.GetItem(value);
    if (valid(gates)) {
        gates.Val5 = 0;
        Map map = Game.GetMap(gates.MapId);
        if (!valid(map)) {
            return;
        }
        uint16 hX = gates.HexX;
        uint16 hY = gates.HexY;
        Critter cr = map.GetCritter(hX, hY);
        if (valid(cr)) {
            if (Entrance::GetNearEntry(map, ENTRY_GATES_OUT, hX, hY)) {
                Obsolete::CritterTransitToMapCoords(cr, map.Id, hX, hY, Game.GetDirection(hX, hY, gates.HexX, gates.HexY));
            }
        }
        Lockers::SwitchLocker(gates, false);
    }
}
