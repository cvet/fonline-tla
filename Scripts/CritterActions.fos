// FOS Server

bool ProcessAp(Critter cr, uint ap)
{
    if (cr.CurrentAp / AP_DIVIDER < int(ap)) {
        uint apRegeneration = cr.ApRegenerationTime;
        if (apRegeneration == 0) {
            apRegeneration = Settings.ApRegeneration;
        }
        cr.Wait(apRegeneration / cr.ActionPoints * (ap - cr.CurrentAp / AP_DIVIDER));
        return false;
    }
    cr.CurrentAp = (cr.CurrentAp / AP_DIVIDER - ap) * AP_DIVIDER;
    cr.ApRegenerationTick = Game.GetTick() + Settings.Breaktime;
    cr.Wait(Settings.Breaktime);

    return true;
}

void PickItem(Critter cr, uint16 hx, uint16 hy, hstring pid)
{
    // Spend ap
    if (!ProcessAp(cr, Settings.RtApCostPickItem)) {
        return;
    }

    if (!cr.IsAlive()) {
        ThrowException("Critter is not alive", cr);
    }
    if (Game.GetDistance(cr.HexX, cr.HexY, hx, hy) > 1 + cr.Multihex) {
        ThrowException("Target too far", cr, cr.HexX, cr.HexY, hx, hy);
    }

    Map map = cr.GetMap();
    if (map == null) {
        ThrowException("Critter is on global map", cr);
    }
    if (hx >= map.Width || hy >= map.Height) {
        ThrowException("Invalid hex position", cr, hx, hy);
    }

    ProtoItem proto = Game.GetProtoItem(pid);
    if (proto == null) {
        ThrowException("Invalid pid", cr, pid);
    }

    if (!proto.IsScenery && !proto.IsWall) {
        Item item = map.GetItem(hx, hy, pid);
        if (item == null) {
            ThrowException("Item not found", cr, hx, hy, pid);
        }
        cr.Action(CritterAction::PickItem, 0, item);
        Game.OnCritterUseSkill.Fire(cr, CritterProperty::SpecialSkillPickOnGround, null, item, null);
    }
    else if (proto.IsScenery) {
        StaticItem scenery = map.GetStaticItem(hx, hy, pid);
        if (scenery == null) {
            ThrowException("Scenery not found", cr, hx, hy, pid);
        }

        cr.Action(CritterAction::PickItem, 0, scenery);
        Game.OnCritterUseSkill.Fire(cr, CritterProperty::SpecialSkillPickOnGround, null, null, scenery);
    }
    else if (proto.IsWall) {
        cr.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::Get("StrUseNothing"));
    }
    else {
        cr.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::Get("StrUseNothing"));
    }
}

void DropInvItem(Critter cr, ident itemId, uint count)
{
    // Spend ap
    if (!ProcessAp(cr, Settings.RtApCostDropItem)) {
        return;
    }

    // Critter checks
    if (!cr.IsAlive()) {
        ThrowException("Critter is not alive", cr);
    }

    // Get item
    Item item = cr.GetItem(itemId);
    if (item == null) {
        ThrowException("Item not found", cr, itemId);
    }
    if (count == 0) {
        count = item.Count;
    }
    if (count > item.Count) {
        ThrowException("Invalid count", cr, item, count);
    }

    // Animation
    cr.Action(CritterAction::DropItem, -1, item);

    // Drop
    Map map = cr.GetMap();
    if (map != null) {
        ItemMovement::MoveItem(item, count, map, cr.HexX, cr.HexY);
    }
    else if (count < item.Count) {
        item.Count -= count;
    }
    else {
        Game.DestroyItem(item);
    }
}

void UseSkill(Critter cr, CritterProperty skill, ident targetCrId, ident targetItemId, hstring sceneryPid, uint16 hx, uint16 hy)
{
    if (!cr.IsAlive()) {
        ThrowException("Client is not alive", cr);
    }

    // Spend ap
    uint ap = Settings.RtApCostUseSkill;
    if (!ProcessAp(cr, ap)) {
        return;
    }

    Critter targetCr;
    Item targetItem;
    StaticItem targetScen;
    uint useDist = 3 + cr.Multihex;

    if (targetCrId != ZERO_IDENT) {
        if (cr.Id != targetCrId) {
            if (cr.GetMap() != null) {
                targetCr = Game.GetCritter(targetCrId);
                if (targetCr == null) {
                    ThrowException("Target critter not found", cr, targetCrId);
                }
                if (!cr.IsSee(targetCr)) {
                    ThrowException("Critter doesn't see target critter", cr, targetCr);
                }
                if (Game.GetDistance(cr.HexX, cr.HexY, targetCr.HexX, targetCr.HexY) > useDist + targetCr.Multihex) {
                    ThrowException("Target critter too far", cr, targetCr);
                }
            }
            else {
                // need realization
                ThrowException("Target critter not found in global group", cr, targetCrId);
            }
        }
        else {
            targetCr = cr;
        }
    }
    else if (targetItemId != ZERO_IDENT || sceneryPid != EMPTY_HSTRING) {
        Map map = cr.GetMap();
        if (map == null) {
            ThrowException("Critter on global map", cr);
        }

        if (sceneryPid == EMPTY_HSTRING) {
            targetItem = map.GetItem(targetItemId);
            if (targetItem == null) {
                ThrowException("Target item not found on map", cr, map, targetItemId);
            }
            if (targetItem.IsHidden) {
                ThrowException("Target item is hidden", cr, map, targetItem);
            }
            if (Game.GetDistance(cr.HexX, cr.HexY, targetItem.HexX, targetItem.HexY) > useDist) {
                ThrowException("Target item too far", cr, targetItem);
            }
        }
        else {
            ProtoItem proto = Game.GetProtoItem(sceneryPid);
            if (proto == null) {
                ThrowException("Proto item not found", cr, sceneryPid);
            }

            if (Game.GetDistance(cr.HexX, cr.HexY, hx, hy) > useDist) {
                ThrowException("Target scenery too far", cr, hx, hy, sceneryPid);
            }

            targetScen = map.GetStaticItem(hx, hy, sceneryPid);
            if (targetScen == null) {
                ThrowException("Scenery not found", cr, hx, hy, sceneryPid);
            }
        }
    }
    // Send action
    cr.Action(CritterAction::UseSkill, 0, null);

    Game.OnCritterUseSkill.Fire(cr, skill, targetCr, targetItem, targetScen);
}

void MoveInvItem(Critter cr, ident itemId, CritterItemSlot slot)
{
    // Get item
    Item item = cr.GetItem(itemId);
    if (item == null) {
        ThrowException("Item not found", cr, itemId);
    }

    // Calculate move cost
    uint apCost = Settings.RtApCostMoveItemInventory;
    if ((item.CritterSlot == CritterItemSlot::Main && slot == CritterItemSlot::Secondary) ||
        (item.CritterSlot == CritterItemSlot::Secondary && slot == CritterItemSlot::Main)) {
        apCost = 0;
    }

    // Spend ap
    if (!ProcessAp(cr, apCost)) {
        return;
    }

    // Critter checks
    if (!cr.IsAlive()) {
        ThrowException("Critter is not alive", cr);
    }

    // Move
    cr.ChangeItemSlot(item.Id, slot);
}

void OperateContainer(Critter cr, bool take, bool all, ident itemId, uint itemCount)
{
    if (!cr.IsAlive()) {
        ThrowException("Critter is not alive", cr);
    }

    cr.Wait(Settings.Breaktime);

    TransferTypes transferType = cr.TransferType;
    if (transferType == TransferTypes::Close) {
        ThrowException("Transfer is closed", cr);
    }
    if (cr.GetMap() == null && (transferType != TransferTypes::CritSteal && transferType != TransferTypes::FarCont && transferType != TransferTypes::FarCrit &&
                                transferType != TransferTypes::CritBarter && transferType != TransferTypes::SelfCont)) {
        ThrowException("Invalid transfer type for global map", cr, transferType);
    }
    if (all && transferType == TransferTypes::CritSteal) {
        ThrowException("Can't operate with stealing with all items", cr);
    }

    // Get container
    Item itemCont;
    Critter crCont;
    if (transferType == TransferTypes::HexContUp || transferType == TransferTypes::HexContDown || transferType == TransferTypes::SelfCont ||
        transferType == TransferTypes::FarCont) {
        if (transferType == TransferTypes::HexContUp || transferType == TransferTypes::HexContDown) {
            itemCont = Game.GetItem(cr.TransferContainerId);
            if (itemCont == null) {
                ThrowException("Hex container not found", cr, cr.TransferContainerId);
            }
            if (itemCont.Type != ItemType::Container) {
                ThrowException("Hex container is not container type", cr, itemCont);
            }
            if (itemCont.Ownership != ItemOwnership::MapHex) {
                ThrowException("Hex container not on map", cr, itemCont);
            }
            if (itemCont.MapId != cr.GetMap().Id) {
                ThrowException("Hex container not on cr map", cr, itemCont);
            }
            if (Game.GetDistance(cr.HexX, cr.HexY, itemCont.HexX, itemCont.HexY) > 1 + cr.Multihex) {
                ThrowException("Hex container too far", cr, itemCont);
            }
        }
        else if (transferType == TransferTypes::FarCont) {
            itemCont = Game.GetItem(cr.TransferContainerId);
            if (itemCont == null) {
                ThrowException("Hex container not found", cr, cr.TransferContainerId);
            }
            if (itemCont.Type != ItemType::Container) {
                ThrowException("Hex container is not container type", cr, itemCont);
            }
        }
        else {
            itemCont = cr.GetItem(cr.TransferContainerId);
            if (itemCont == null) {
                ThrowException("Hex container not found", cr, cr.TransferContainerId);
            }
            if (itemCont.Type != ItemType::Container) {
                ThrowException("Hex container is not container type", cr, itemCont);
            }
        }
    }
    else if (transferType == TransferTypes::CritLoot || transferType == TransferTypes::CritSteal || transferType == TransferTypes::CritBarter ||
             transferType == TransferTypes::FarCrit) {
        crCont = Game.GetCritter(cr.TransferContainerId);
        if (crCont == null) {
            ThrowException("Critter container not found", cr, cr.TransferContainerId);
        }
        if (transferType != TransferTypes::FarCrit && !cr.IsSee(crCont)) {
            ThrowException("Critter container is not seen by cr", cr, crCont);
        }
        if (transferType != TransferTypes::FarCrit && Game.GetDistance(cr.HexX, cr.HexY, crCont.HexX, crCont.HexY) > 1 + cr.Multihex + crCont.Multihex) {
            ThrowException("Critter container is too far", cr, crCont);
        }
        if (cr.Id == cr.TransferContainerId) {
            ThrowException("Critter container id is same as cr id", cr, crCont);
        }
        if (transferType == TransferTypes::CritSteal && crCont.IsNoSteal) {
            ThrowException("Critter container marked as NoSteal", cr, crCont);
        }
        //     if( transferType == TransferTypes::CritSteal && !crCont.IsControlledByPlayer && Ai::IsAttacking( crCont ) )
        //         ThrowException( "Critter container is in battle", cr, crCont );
        if (transferType == TransferTypes::CritLoot && !crCont.IsDead()) {
            ThrowException("Critter container loot is not dead", cr, crCont);
        }
    }
    else {
        Assert(false);
    }

    // Get item(s)
    Item[] items;
    if (take) {
        if (itemCont != null) {
            if (!all) {
                Item item = Game.GetItem(itemId);
                if (item == null) {
                    ThrowException("Hex container item not found", cr, itemId);
                }
                if (item.Ownership != ItemOwnership::ItemContainer || item.ContainerId != itemCont.Id) {
                    ThrowException("Item not in hex container", cr, item, itemCont);
                }
                if (item.ContainerStack != 0) {
                    ThrowException("Item hex container stack is not zero", cr, item, itemCont);
                }
                if (itemCount > item.Count) {
                    ThrowException("Hex container item invalid count", cr, item, itemCount);
                }

                items = array<Item> = {item};
            }
            else {
                items = itemCont.GetItems(ContainerItemStack::Root);
            }
        }
        else {
            if (!all) {
                Item item = crCont.GetItem(itemId);
                if (item == null) {
                    ThrowException("Critter container item not found", cr, itemId);
                }
                if (item.Ownership != ItemOwnership::CritterInventory || item.CritterId != crCont.Id) {
                    ThrowException("Item not in critter container", cr, item, crCont);
                }
                if (item.CritterSlot != CritterItemSlot::Inventory) {
                    ThrowException("Item critter container slot is not innventory", cr, item, crCont);
                }
                if (itemCount > item.Count) {
                    ThrowException("Critter container item invalid count", cr, item, itemCount);
                }

                items = array<Item> = {item};
            }
            else {
                items = crCont.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
            }
        }
    }
    else {
        if (!all) {
            Item item = cr.GetItem(itemId);
            if (item == null) {
                ThrowException("Client item not found", cr, itemId);
            }
            if (itemCount > item.Count) {
                ThrowException("Client item invalid count", cr, item, itemCount);
            }

            items = array<Item> = {item};
        }
        else {
            items = cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
        }
    }

    // Filter
    if (take && (transferType == TransferTypes::CritLoot || transferType == TransferTypes::CritSteal)) {
        for (uint i = 0; i < items.length();) {
            if ((transferType == TransferTypes::CritLoot && items[i].IsNoLoot) || (transferType == TransferTypes::CritSteal && items[i].IsNoSteal)) {
                items.removeAt(i);
            }
            else {
                i++;
            }
        }
    }

    if (items.length() == 0) {
        return;
    }

    // Check ability
    int weight = 0;
    for (uint i = 0; i < items.length(); i++) {
        weight += items[i].Weight * (all ? items[i].Count : itemCount);
    }

    if (itemCont == null) {
        Critter target = take ? cr : crCont;
        if (target.CarryWeight < target.ItemsWeight + weight) {
            ThrowException("Critter is overweight", target);
        }
    }

    // Animation
    cr.Action(CritterAction::OperateContainer, transferType, !all ? items[0] : null);

    // Moving
    if (transferType == TransferTypes::CritSteal) {
        if( Game.OnCritterStealing.Fire( crCont, cr, items[ 0 ], itemCount ) )
		{
            ItemMovement::MoveItem( items[ 0 ], itemCount, cr );
		}
        else
        {
			items.clear();
			cr.TransferType = TransferTypes::Close;
			cr.TransferContainerId = ZERO_IDENT;
			cr.SendItems(items);
			return;
        }
    }
    else {
        if (take) {
            if (!all) {
                ItemMovement::MoveItem(items[0], itemCount, cr);
            }
            else {
                ItemMovement::MoveItems(items, cr);
            }
        }
        else {
            if (itemCont != null) {
                if (!all) {
                    ItemMovement::MoveItem(items[0], itemCount, itemCont, ContainerItemStack::Root);
                }
                else {
                    ItemMovement::MoveItems(items, itemCont, ContainerItemStack::Root);
                }
            }
            else {
                if (!all) {
                    ItemMovement::MoveItem(items[0], itemCount, crCont);
                }
                else {
                    ItemMovement::MoveItems(items, crCont);
                }
            }
        }
    }

    // Events
    Entity cont = (itemCont != null ? cast<Entity>(itemCont) : cast<Entity>(crCont));
    for (uint i = 0; i < items.length(); i++) {
        Game.OnClientOperateContainer.Fire(cr, cont, items[i], take);
    }

    // Refresh container info
    Item[] curItems;
    if (itemCont != null) {
        curItems = itemCont.GetItems(ContainerItemStack::Root);
    }
    else {
        curItems = crCont.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
    }

    cr.SendItems(curItems, false, false, 1);
}

void ReloadWeapon(Critter cr, ident weaponId, ident ammoId)
{
    if (!cr.IsAlive()) {
        ThrowException("Client is not alive", cr);
    }

    // Get weapon
    Item weapon = cr.GetItem(weaponId);
    if (weapon == null) {
        ThrowException("Unable to find weapon", cr, weaponId);
    }
    if (weapon.Type != ItemType::Weapon) {
        ThrowException("Invalid type of weapon", cr, weapon);
    }
    if (weapon.Weapon_Caliber == 0) {
        ThrowException("Weapon doesn't have caliber", cr, weapon);
    }
    if (weapon.Weapon_MaxAmmoCount == 0) {
        ThrowException("Weapon doesn't have ammo holder", cr, weapon);
    }

    // Spend ap
    uint ap = Settings.RtApCostReloadWeapon;
    if (!ProcessAp(cr, ap)) {
        return;
    }

    // Get ammo
    Item ammo = (ammoId != ZERO_IDENT ? cr.GetItem(ammoId) : null);
    if (ammoId != ZERO_IDENT && ammo == null) {
        ThrowException("Ammo not found", cr, weapon, ammoId);
    }
    if (ammo != null && weapon.AmmoPid == ammo.ProtoId && weapon.AmmoCount >= weapon.Weapon_MaxAmmoCount) {
        ThrowException("Weapon is full", cr, weapon, ammo);
    }

    // Unload
    if (ammo == null || (weapon.AmmoCount > 0 && weapon.AmmoPid != ammo.ProtoId)) {
        if (weapon.AmmoPid != EMPTY_HSTRING) {
            Item existAmmo = cr.GetItem(weapon.AmmoPid);
            if (existAmmo == null) {
                cr.AddItem(weapon.AmmoPid, weapon.AmmoCount);
            }
            else {
                existAmmo.Count += weapon.AmmoCount;
            }
        }
        weapon.AmmoCount = 0;
    }

    // Load
    if (ammo != null) {
        uint count = Math::Min(ammo.Count, weapon.Weapon_MaxAmmoCount - weapon.AmmoCount);
        weapon.AmmoCount += count;
        weapon.AmmoPid = ammo.ProtoId;

        if (ammo.Count > count) {
            ammo.Count -= count;
        }
        else {
            Game.DestroyItem(ammo);
        }
    }

    cr.Action(CritterAction::ReloadWeapon, 0, weapon);
}

void Attack(Critter cr, ident targetId, uint8 mode)
{
    Critter target = Game.GetCritter(targetId);

    uint8 use = mode & 0xF;
    uint8 aim = mode >> 4;

    AbstractItem weapon = CritterItem::GetActive(cr);
    if (weapon.Type != ItemType::Weapon) {
        ThrowException("Critter item is not weapon", cr, weapon);
    }
    if (weapon.Weapon_IsTwoHanded && (cr.IsDamagedLeftArm || cr.IsDamagedRightArm)) {
        ThrowException("Critter is damaged arm for two handed weapon", cr, weapon);
    }
    if (cast<Item>(weapon) == null && cr.IsDamagedLeftArm && cr.IsDamagedRightArm) {
        ThrowException("Critter is damaged two arms for armed attack", cr, weapon);
    }

    if (weapon.Weapon_ActiveUses <= use) {
        ThrowException("Weapon use is not allowed", cr, weapon, use);
    }

    if (aim != HitLocations::LocationNone) {
        if (cr.IsNoAim) {
            ThrowException("Critter try aim when mode IsNoAim", cr, weapon, aim);
        }
        if (!_WeaponAim(weapon, use)) {
            ThrowException("Critter try aim when weapon no aim for use", cr, weapon, aim, use);
        }
    }

    // Spend ap
    uint ap = Parameters::GetItemUseApCost(cr, weapon, mode);
    if (!ProcessAp(cr, ap)) {
        return;
    }

    if (target != null && cr.Id == target.Id) {
        ThrowException("Critter tried attack himself", cr);
    }

    Map map = cr.GetMap();
    if (map == null) {
        ThrowException("Critter on global map", cr);
    }

    if (target != null) {
        if (!cr.IsSee(target)) {
            ThrowException("Critter don't sees target", cr, target);
        }
        if (target.IsDead()) {
            ThrowException("Target critter is dead", cr, target);
        }
    }
    else {
        // TODO: hex attack
        ThrowException("Target is null for critter", cr);
    }

    uint16 targetHexX = target.HexX;
    uint16 targetHexY = target.HexY;
    uint16 hx = cr.HexX;
    uint16 hy = cr.HexY;

    uint maxDist = Parameters::GetCritterAttackDistance(cr, weapon, mode);
    if (maxDist == 0) {
        ThrowException("Invalid weapon range", cr, weapon, use, targetHexX, targetHexY);
    }

    uint dist = Game.GetDistance(hx, hy, targetHexX, targetHexY);
    if (dist - (target != null ? target.Multihex : 0) > maxDist) {
        ThrowException("Target too far", cr, weapon, use, targetHexX, targetHexY);
    }

    uint16 tracedHexX = targetHexX;
    uint16 tracedHexY = targetHexY;
    map.GetHexInPath(hx, hy, tracedHexX, tracedHexY, 0.0f, dist);
    if (targetHexX != tracedHexX || targetHexY != tracedHexY) {
        ThrowException("Target blocked", cr, weapon, use, targetHexX, targetHexY);
    }

    // Ammo
    ProtoItem ammo = null;

    if (weapon.Weapon_Caliber != 0 && weapon.Weapon_MaxAmmoCount > 0) {
        ammo = Game.GetProtoItem(weapon.AmmoPid);
        if (ammo == null) {
            ammo = Game.GetProtoItem(weapon.Weapon_DefaultAmmoPid);
        }
        if (ammo == null) {
            ThrowException("Weapon ammo not found", cr, weapon);
        }
        if (ammo.Type != ItemType::Ammo) {
            ThrowException("Weapon ammo item isn't have ammo type", cr, weapon, ammo);
        }
        if (!cr.IsUnlimitedAmmo && weapon.AmmoCount == 0) {
            ThrowException("Weapon ammo count is zero", cr, weapon, ammo);
        }
    }

    // Raise attack event
    cr.TimeoutAggressor = Game.GetFullSecond() + Time::RealMinute(1);
    Combat::CombatAttack(cr, target, weapon, mode, ammo);
}
