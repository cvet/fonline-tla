// FOS Server Sort 2
// Author: rifleman17
// Квест "Рискованное дельце"

///@ Property Critter Protected uint8 BHRocketBase Group = Quests Quest = 3610 Max = 5

///@ Property Location PrivateServer uint8 SiloMissileLaunched Max = 2

///@ Property Game PrivateServer uint MissilesCanada
///@ Property Game PrivateServer uint MissilesKishinev
///@ Property Game PrivateServer uint MissilesBaku
///@ Property Game PrivateServer uint MissilesTokio
///@ Property Game PrivateServer uint MissilesEburg
///@ Property Game PrivateServer uint MissilesVladik
///@ Property Game PrivateServer uint MissilesRay
///@ Property Game PrivateServer uint MissilesFukusima

#define ROLE (12)

void r_Attack(Critter player, Critter npc)
{
    Map map = player.GetMap();
    Critter[] aliveNpc = map.GetCritters(CritterProperty::NpcRole, ROLE, CritterFindType::AliveNpc);
    for (uint i = 0; i < aliveNpc.length(); i++) {
        NpcPlanes::AddAttackPlane(aliveNpc[i], 0, player);
    }
}

void _HoloInit(Item item, bool firstTime)
{
    item.HolodiskNum = 109;
    // подписываемся на использование голодиска клешней
    item.OnCritterUse.Subscribe(_HoloUse);
}

bool _HoloUse(Item item, Critter cr, uint param)
{
    if (cr.BHRocketBase > 1 && cr.BHRocketBase < 4) {
        cr.BHRocketBase = 4;
        Game.DestroyItem(item);
        cr.Experience += 5000;
        Location loc = Game.CreateLocation(Content::Location::silo_base,
                                           829 + Game.Random(-1 * int(Settings.GlobalMapZoneLength), int(Settings.GlobalMapZoneLength)),
                                           720 + Game.Random(-1 * int(Settings.GlobalMapZoneLength), int(Settings.GlobalMapZoneLength)),
                                           null);
        if (loc != null) {
            Location::SetKnownLoc(cr, loc);
        }
    }
    return true;
}

void _AmbushInit(Map map, bool firstTime)
{
    map.OnCritterDead.Subscribe(_AmbushDead);
    map.OnCritterIn.Subscribe(_AmbushInCritter);
}

void _AmbushInCritter(Map map, Critter cr)
{
    if (cr.IsControlledByPlayer) {
        map.GetLocation().AutoGarbage = true;
    }
}

void _AmbushDead(Map map, Critter cr, Critter killer)
{
    if (map.GetCritters(CritterProperty::NpcRole, ROLE, CritterFindType::AliveNpc).isEmpty()) {
        map.GetLocation().AutoGarbage = true;
    }
}

void BlockedDoorInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(_DoorSkill);
}

void _BlockedDoorInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(_DoorSkill);
}

bool _DoorSkill(Item item, Critter cr, CritterProperty skilly)
{
    cr.SayMsg(SAY_NETMSG, TextPackName::Text, 7110);
    return true;
}

void t_Transit(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    Location loc = player.GetMap().GetLocation();
    if (!valid(loc)) {
        return;
    }

    int entry = trigger.SceneryParams[0].hash;
    uint idx = (loc.SiloMissileLaunched == 2 ? 3 : 2);
    Map map = loc.GetMapByIndex(idx);
    if (valid(map)) {
        Obsolete::CritterTransitToMapEntry(player, map.Id, HASHI(entry));
    }
}

void r_Launch(Critter player, Critter npc)
{
    Map map = player.GetMap();
    Location loc = map.GetLocation();
    Map mapFrom = loc.GetMapByIndex(2);
    Map mapTo = loc.GetMapByIndex(3);
    map.PlaySound("AIRSIREN.OGG");
    mapFrom.PlaySound("AIRSIREN.OGG");
    Critter[] critters = mapFrom.GetCritters(CritterFindType::Any);
    Effects::QuakeScreen(mapFrom, 50, 1000);
    for (uint i = 0; i < critters.length(); i++) {
        Critter cr = critters[i];
        Effects::FlushScreen(cr, COLOR_BLACK, COLOR_BLACK, 5000);
        Obsolete::CritterTransitToMapCoords(cr, mapTo.Id, cr.HexX, cr.HexY, cr.Dir);
    }
    Effects::QuakeScreen(mapTo, 50, 2000);
    Effects::QuakeScreen(map, 50, 3000);
}

void dlg_Stat(Critter player, Critter npc, string& lexems)
{
    if (IS_DIALOG_END(lexems) or IS_DIALOG_SAY_MODE(lexems)) {
        return;
    }
    lexems = "$when" + Time::DateTimeToString(Game.GetFullSecond());
    lexems += "$canada" + Game.MissilesCanada;
    lexems += "$kishinev" + Game.MissilesKishinev;
    lexems += "$baku" + Game.MissilesBaku;
    lexems += "$tokio" + Game.MissilesTokio;
    lexems += "$eburg" + Game.MissilesEburg;
    lexems += "$vladik" + Game.MissilesVladik;
    lexems += "$ray" + Game.MissilesRay;
    lexems += "$fukusima" + Game.MissilesFukusima;
}

/*
   lex when Последние зафиксированные пуски МБР.
   Канада: lex canada.
   Кишинев: lex kishinev.
   Баку: lex baku.
   Токио: lex tokio.
   Екатеринбург: lex eburg.
   Челябинск: 0.
   Владивосток: lex vladik.
   Райчихинск: lex ray.
   Фукусима: lex fukusima.
 */
