// FOS Server Sort 2
// Author: rifleman17

///@ Property Critter PrivateServer ident=>uint8 GuardedItemSkill

///@ Property Item PrivateServer uint DoorAutoCloseTime
///@ Property Item PrivateServer hstring DoorAutoDialog

// Дверь, которая зпкроется через 2 игровые минуты илии через некоторое число реальных секунд , указанное в DoorAutoCloseTime
void _DoorAutoCloseInit(Item door, bool firstTime)
{
    if (firstTime) {
        door.DoorAutoCloseTime = door.Val3;
    }
    door.OnCritterUseSkill.Subscribe(e_UseAutoCloseDoor);
}

bool e_UseAutoCloseDoor(Item door, Critter cr, CritterProperty skill)
{
    Game.SavedDeferredCall((door.DoorAutoCloseTime == 0 ? 2 : door.DoorAutoCloseTime) * 1000, AutoCloseDoor, door.Id);
    return false;
}

void AutoCloseDoor(any value)
{
    Item door = Game.GetItem(value);
    if (not valid(door)) {
        return;
    }
    if (!door.Opened) {
        return;
    }
    uint16 x = 0;
    uint16 y = 0;
    Map map = door.GetMapPosition(x, y);
    if (not valid(map)) {
        return;
    }

    Critter cr = map.GetCritter(x, y);
    if (valid(cr)) {
        if (cr.IsAlive()) {
            Game.SavedDeferredCall(3000, AutoCloseDoor, value);
            return;
        }
        else {
            // Попытка сдвинуть труп. Если не получится, дверь поверх трупа закроется
            Obsolete::CritterTransitToMapCoords(cr, map.Id, x - 1, y, cr.Dir);
        }
    }

    if (!Lockers::SwitchLocker(door, false)) {
        Game.SavedDeferredCall(3000, AutoCloseDoor, value);
    }
}

// Дверь, которая не открывается стандартными способами
void _ClosedDoorInit(Item door, bool firstTime)
{
    door.OnCritterUseSkill.Subscribe(_UseDoor);
}

bool _UseDoor(Item item, Critter cr, CritterProperty skill)
{
    return false;
}

// Дверь, при использовании которой открывается диалог
void _DialogDoorInit(Item door, bool firstTime)
{
    if (firstTime) {
        door.DoorAutoDialog = hstring_fromHash(door.Val3);
    }
    door.OnCritterUseSkill.Subscribe(_UseDialogDoor);
}

bool _UseDialogDoor(Item door, Critter cr, CritterProperty skill)
{
    Game.RunDialog(cr, door.DoorAutoDialog, door.HexX, door.HexY, false);
    return true;
}

// Голодиск с номером, присвоенном в Val0
void _HoloInit(Item item, bool firstTime)
{
    if (item.ProtoId != Content::Item::holodisk) {
        return;
    }
    item.HolodiskNum = item.Val0;
    item.SetupScript(null);
}

// Настройка автоматического удаления предмета через икс часов
void SetDeleteItem(Item item, uint delHours)
{
    Game.SavedDeferredCall(GAME_HOUR_TO_TICK(delHours), DeferredDeleteItem, item.Id);
}

void DeferredDeleteItem(any value)
{
    Item item = Game.GetItem(value);
    if (valid(item)) {
        Game.DeleteItem(item);
    }
}

// Охраняемая дверь или другой предмет
// в Val0 - пишется время автоматического закрытия двери, в реальных минутах, если больше 0, дверь будет автоматически закрываться
// обратите внимание, игрок может застрять за дверью, если пройдет внутрь, а она захлопнется
// в Val1 прописывается номер роли НПЦ которые будут говорить, должно быть отличным от ноля
// если скрипт только на одно использование - в Val2 - нужно указать любое значение, это может использоваться для охраняемых предметов, например оружия
#define STR_DONTOUCH (540)

void _GuardedItemInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(_GuardedItemSkill);
}

bool _GuardedItemSkill(Item item, Critter cr, CritterProperty skill)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return false;
    }

    int role = item.Val1;
    bool reset = (item.Val2 > 0 ? true : false);
    if (cr.IsOwnedByPlayer()) {
        Critter[] guards = map.GetCritters(CritterProperty::NpcRole, role, CritterFindType::AliveNpc);
        if (guards.isEmpty()) {
            if (reset) {
                item.OnCritterUseSkill.Unsubscribe(_GuardedItemSkill);
                item.SetupScript(null);
            }

            if (item.Type == ItemType::Door || item.Type == ItemType::Container) {
                if (item.Val0 > 0) {
                    Game.SavedDeferredCall((item.Val0 == 0 ? 2 : item.Val0) * 1000, AutoCloseDoor, item.Id);
                }
            }

            return false;
        }

        Critter guard = guards[Game.Random(0, guards.length() - 1)];
        auto guardedItemSkill = guard.GuardedItemSkill.clone();
        guardedItemSkill.setIfNotExist(cr.Id, 0);
        if (guardedItemSkill[cr.Id] < 2) {
            NpcPlanes::NpcPlane[] planes = {};
            if (NpcPlanes::GetPlanes(guard, AI_PLANE_ATTACK, planes) > 0) {
                for (uint i = 0, l = planes.length(); i < l; i++) {
                    if (planes[i].Attack_TargId == cr.Id) {
                        if (reset) {
                            item.OnCritterUseSkill.Unsubscribe(_GuardedItemSkill);
                            item.SetupScript(null);
                        }

                        return false;
                    }
                }
            }

            guardedItemSkill[cr.Id] = guardedItemSkill[cr.Id] + 1;
            guard.GuardedItemSkill = guardedItemSkill;
            guard.SayMsg(SAY_SHOUT, TextPackName::Text, STR_DONTOUCH, "$pname" + Obsolete::GetPlayerName(cr.Id));
        }
        else {
            guardedItemSkill[cr.Id] = 0;
            guard.GuardedItemSkill = guardedItemSkill;
            NpcPlanes::AddAttackPlane(guard, 0, cr);
        }

        return true;
    }
    else {
        // Нпц такие двери открыть тоже не смогут
        return true;
    }
}

Item ChangeProto(Item item, hstring newProto)
{
    // Todo: improve changing proto by deletion old item and create new
    return item;
}
