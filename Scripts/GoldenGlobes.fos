// FOS Server
// Author: cvet

// ************************************************************************/
// *                                                                      */
// ************************************************************************/

#define REC_MAX_TIME          (10 * 60) // In game minutes
#define FORCE_DIALOG_REC_SUCC (3)
#define FORCE_DIALOG_REC_FAIL (4)

ident RecPlayerId;
uint RecBeginTime = 0;
uint FuckCount = 0;

void CheckTime()
{
    if (RecPlayerId != ZERO_IDENT && Game.GetFullSecond() - RecBeginTime > REC_MAX_TIME) {
        EndRec();
    }
}

bool RecInAir()
{
    CheckTime();
    return RecPlayerId != ZERO_IDENT;
}

void BeginRec(Critter cr)
{
    RecPlayerId = cr.Id;
    RecBeginTime = Game.GetFullSecond();
    FuckCount = 0;
}

void EndRec()
{
    RecPlayerId = ZERO_IDENT;
    RecBeginTime = 0;
    FuckCount = 0;
}

// ************************************************************************/
// * Scenery                                                              */
// ************************************************************************/

// bool s_Camera( Critter cr, StaticItem camera, CritterProperty skill, Item item )
bool s_Camera(Critter cr, StaticItem camera, Item item, int skill)
{
    return true;
}

// bool s_Bed( Critter cr, StaticItem bed, CritterProperty skill, Item item )
bool s_Bed(Critter cr, StaticItem bed, Item item, int skill)
{
    CheckTime();
    if (skill != SKILL_PICK_ON_GROUND || valid(item)) {
        return true;
    }
    if (cr.Id != RecPlayerId) {
        return true;
    }
    FuckCount++;
    cr.KarmaPerkPornStar = 1;
    Effects::FlushScreen(cr, false, 3000);
    Effects::FlushScreen(cr, true, 1000);
    return true;
}

// ************************************************************************/
// * Demands                                                              */
// ************************************************************************/

bool d_IsCanRec(Critter player, Critter npc, int val)
{
    CheckTime();
    return not RecInAir();
}

bool d_IsFucked(Critter player, Critter npc, int val)
{
    CheckTime();
    return player.Id == RecPlayerId && FuckCount > 0;
}

bool d_IsRec(Critter player, Critter npc, int val)
{
    CheckTime();
    return player.Id == RecPlayerId;
}

bool d_IsNotRec(Critter player, Critter npc, int val)
{
    CheckTime();
    return player.Id != RecPlayerId;
}

// ************************************************************************/
// * Results                                                              */
// ************************************************************************/

uint r_TryRec(Critter player, Critter npc, int val)
{
    if (not RecInAir()) {
        BeginRec(player);
        return FORCE_DIALOG_REC_SUCC;
    }

    return FORCE_DIALOG_REC_FAIL;
}

void r_BeginRec(Critter player, Critter npc, int val)
{
    BeginRec(player);
}

void r_EndRec(Critter player, Critter npc, int val)
{
    EndRec();
}

// ************************************************************************/
// *                                                                      */
// ************************************************************************/
