// FOS Server Client

///@ RemoteCall Client ShowSayExtended(int msgIdHeader, int p1, int p2)
///@ RemoteCall Client ShowSayExtendedScreenFromScenery(int msgIdHeader,int msgIdInputText, int sceneryPid, uint16 hexX, uint16 hexY);

// Перевести диалог на указанный результат
///@ RemoteCall Client ForceDialogResult(ident talkerId, hstring dialogId, bool isNpc, int result, bool refresh)
// Добавить к тексту диалога строку из FODLG_MSG
///@ RemoteCall Client AddDialogStr(uint msg, string lexems, bool append)

///@ RemoteCall Server Rpc_ProcessSayExtended(string text)

///@ RemoteCall Server Rpc_ProcessSay(string text, bool fromDialog, ident talkerId, bool isNpc)
///@ RemoteCall Server ProcessSayExtendedFromScenery(string text, int sceneryPid, uint16 hexX, uint16 hexY)
///@ Event Common Game OnPlayerSaidText(Critter critter, string text, bool fromDialog, ident talkerId, bool isNpc)
///@ Event Server Critter OnPlayerSaidTextFromScenery(int sceneryPid, uint16 hexX, uint16 hexY, string text)

// Игрок может отправлять текст на сервер. Переменную нужно уставлять вручную в dlg_ - функциях
// введена, чтобы не отправляли любые тексты из любых диалогов
///@ Property Critter Protected bool CanSendSay
#define MAX_SAY_TEXT_LENGTH (100)

// Answer
#define ANSWER_BEGIN  (0xF0)
#define ANSWER_END    (0xF1)
#define ANSWER_BARTER (0xF2)

#ifdef __SERVER

void ShowScreenEx(Critter cr, int msgIdHeader)
{
    cr.PlayerClientCall.ShowSayExtended(msgIdHeader, 0, 0);
}

void Rpc_ProcessSayExtended(Player player, string text)
{
    Critter cr = player.GetControlledCritter();
    CritterState::Wait(cr, 1000);
    Game.OnPlayerSaidText.Fire(cr, text, false, ZERO_IDENT, false);
}

void Rpc_ProcessSay(Player player, string text, bool fromDialog, ident talkerId, bool isNpc)
{
    Critter cr = player.GetControlledCritter();

    CritterState::Wait(cr, 1000);
    if (!cr.CanSendSay) {
        CritterState::Wait(cr, 10000); // Защита от взлома? если оно работает
        Game.Log("Player said restricted text " + cr.Id);
        return;
    }
    if (text.length() > MAX_SAY_TEXT_LENGTH) {
        CritterState::Wait(cr, 10000);
        Game.Log("Too long text from cr " + cr.Id + ": " + text.length());
        return;
    }

    //ReplicationTerminal::OnPlayerSaidText(cr, text, fromDialog, talkerId, isNpc);

    Game.OnPlayerSaidText.Fire(cr, text, fromDialog, talkerId, isNpc);
}

void ProcessSayExtendedFromScenery(Player player, string text, int sceneryPid, uint16 hexX, uint16 hexY)
{
    Critter cr = player.GetControlledCritter();

    CritterState::Wait(cr, 1000);

    if (!cr.CanSendSay) {
        CritterState::Wait(cr, 10000);
        Game.Log("Player said restricted text " + cr.Id);
        return;
    }
    if (text.length() > MAX_SAY_TEXT_LENGTH) {
        CritterState::Wait(cr, 10000);
        Game.Log("Too long text from cr " + cr.Id + ": " + text.length());
        return;
    }

    Map @map = cr.GetMap();

    if (valid(map)) {
        hstring sceneryProto = hstring_fromHash(sceneryPid);
        StaticItem scenery = map.GetStaticItem(hexX, hexY, sceneryProto);

        if (valid(scenery)) {
            cr.OnPlayerSaidTextFromScenery.Fire(sceneryPid, hexX, hexY, text);
        }
    }
}

#endif

#ifdef __CLIENT

void ForceDialogResult(ident talkerId, hstring dialogId, bool isNpc, int result, bool refresh)
{
    // Перегенерация диалога
    if (refresh) {
        Game.CustomCall("DialogAnswer " + isNpc + " " + (isNpc ? talkerId.value : dialogId.uhash) + " " + ANSWER_BEGIN);
    }
    Game.CustomCall("DialogAnswer " + isNpc + " " + (isNpc ? talkerId.value : dialogId.uhash) + " " + result);
    //Game.Log(">>DialogAnswer " + isNpc + " " + (isNpc ? talkerId.value : dialogId.uhash) + " " + result);
}

void AddDialogStr(uint msg, string lexems, bool append)
{
    //Game.Log("MSG NUM recieved " + msg);
    auto screen = Gui::GetActiveScreen();
    if (screen.Index == CLIENT_SCREEN_DIALOG) {
        auto dialog = cast<GuiScreens::Dialog::Dialog>(screen);
        if (dialog != null) {
            string text = Game.GetText(TextPackName::Dialogs, msg);

            auto panel = screen.FindPanel("SpeechPanel");
            auto textbox = panel.FindText("SpeechText");
            text = append ? dialog.Text + "##" + text : text + "##" + dialog.Text;
            text = Game.FormatTags(text, lexems);

            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo(text, textbox.Width, 1000, textbox.TextFont, textbox.TextFlags, tw, th, lines);
            textbox.SetSize(textbox.Parent.Width, Math::Max(th, textbox.Parent.Height));
            textbox.SetText(text);
        }
    }
}

void ShowSayExtended(int msgIdHeader, int p1, int p2)
{
    Game.ShowScreen(CLIENT_SCREEN_SAY_EXTENDED, dict<string, any> = {{"MsgHeaderId", msgIdHeader}});
}

void ShowSayExtendedScreenFromScenery(int msgIdHeader, int msgIdInputText, int sceneryPid, uint16 hexX, uint16 hexY)
{
    Critter chosen = Game.GetChosen();
    if (valid(CurMap) && valid(chosen)) {
        Game.ShowScreen(
            CLIENT_SCREEN_SAY_EXTENDED,
            dict<string, any> = {{"MsgHeaderId", msgIdHeader}, {"InputMessageID", msgIdInputText}, {"ProtoID", sceneryPid}, {"HexX", hexX}, {"HexY", hexY}});
    }
}

#endif
