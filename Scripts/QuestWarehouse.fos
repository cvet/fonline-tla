// FOS Server
// Author: cvet

#define MIN_PLAYERS     (5)
#define MAX_PLAYERS     (7)
#define MIN_EVERY_LEVEL (6)
#define MIN_APROX_LEVEL (10)

// Значения квестов
// Основной
#define MAINQUEST_NOT_GIVED (0)
#define MAINQUEST_GIVED     (1)
#define MAINQUEST_DONE      (2)
#define MAINQUEST_MARK_DONE (3)
#define MAINQUEST_MARK_FAIL (4)
// Субквест 1, Поиск карты
#define SUBQUEST1_NOT_GIVED           (0)
#define SUBQUEST1_FIND_DAUGHTER       (1)
#define SUBQUEST1_DAUGHTER_MADMAX     (2)
#define SUBQUEST1_DELIVER_INFORMATION (3)
#define SUBQUEST1_DONE                (4)
// Субквест 2, Поиск ключа
#define SUBQUEST2_NOT_GIVED     (0)
#define SUBQUEST2_GOLDEN_GLOBES (1)
#define SUBQUEST2_PORN_ACTRES   (2)
#define SUBQUEST2_GAMBLER       (3)
#define SUBQUEST2_DONE          (4)
// Дополнительные флаги для квестов, комбинируются
#define OTHER_PORN_ACTRES_PAY (1)
#define OTHER_REC_PORN        (2)
#define OTHER_MAX             (OTHER_REC_PORN)

// Экспириенс за выполнение квестов
uint[] MainQuestExperience = {0, 0, 5000, 10000, 0};
uint[] SubQuest1Experience = {0, 0, 1000, 3000, 5000};
uint[] SubQuest2Experience = {0, 0, 1000, 3000, 5000};

// Номер ключа от двери склада
#define GENERATE_WAREHOUSE_KEY_ID (Game.Random(1000000, 10000000))

// Entry - Входная дверь в локации
#define ENTRY_LOC_DOOR (100)

// Переходы диалогов
#define FD_GENERIC_ERROR (100)
#define FD_LOW_PLAYERS   (101)
#define FD_MANY_PLAYERS  (102)
#define FD_LOW_LEVEL     (103)

// Разное
#define ADVERTISMAN_WAIT (Game.Random(10000, 15000))

// Texts
#define STR_ADVERTISMAN (1200)

///@ Property Critter Protected     uint8  QWarehouse     Group = Quests Quest = 3040 Max = 4
///@ Property Critter Protected     uint8  QWarehouseSub1 Group = Quests Quest = 3041 Max = 4
///@ Property Critter Protected     uint8  QWarehouseSub2 Group = Quests Quest = 3042 Max = 4
///@ Property Critter PrivateServer ident WarehouseDataId
///@ Property Critter PrivateServer any[] WarehouseQuestData
///@ Property Critter PrivateServer uint   WarehouseOther

bool GetQuestCritters(Critter player, ident[] questCrIds)
{
    if (player.WarehouseDataId == ZERO_IDENT) {
        return false;
    }

    Critter crDataHolder = Game.GetCritter(player.WarehouseDataId);
    auto questData = crDataHolder.WarehouseQuestData;
    if (questData.length() < 3) {
        return false;
    }

    questCrIds.resize(questData.length() - 2);
    for (uint i = 2; i < questData.length(); i++) {
        questCrIds[i - 2] = questData[i];
    }
    return true;
}

ident GetLocId(Critter player)
{
    if (player.WarehouseDataId == ZERO_IDENT) {
        return ZERO_IDENT;
    }

    Critter crDataHolder = Game.GetCritter(player.WarehouseDataId);
    return crDataHolder.WarehouseQuestData[0];
}

void SetLocId(Critter player, ident locId)
{
    if (player.WarehouseDataId == ZERO_IDENT) {
        return;
    }

    Critter crDataHolder = Game.GetCritter(player.WarehouseDataId);
    auto questData = crDataHolder.WarehouseQuestData.clone();
    questData[0] = locId;
    crDataHolder.WarehouseQuestData = questData;
}

void ChangeCrittersQuest(ident[] questCrIds, CritterProperty varId, int newVal, uint exp)
{
    for (uint i = 0, j = questCrIds.length(); i < j; i++) {
        Critter cr = Game.GetCritter(questCrIds[i]);
        cr.SetAsInt(varId, newVal);
        if (exp > 0) {
            cr.Experience += exp;
        }
    }
}

bool CheckQuestValue(Critter player, CritterProperty questVar, int val)
{
    int curVal = player.GetAsInt(questVar);

    if (questVar == CritterProperty::QWarehouse || questVar == CritterProperty::QWarehouseSub1 || questVar == CritterProperty::QWarehouseSub2) {
        return val == curVal;
    }
    else if (questVar == CritterProperty::WarehouseOther) {
        if (val < 0 || val > OTHER_MAX) {
            return false;
        }
        if (((curVal >> val) & 1) == 1) {
            return true;
        }
    }

    return false;
}

bool CheckNewQuestValue(Critter player, CritterProperty questVar, int needVal)
{
    int curVal = player.GetAsInt(questVar);

    if (questVar == CritterProperty::QWarehouse) {
        if (needVal == curVal) {
            return false;
        }
        if (needVal < MAINQUEST_GIVED || needVal > MAINQUEST_MARK_FAIL) {
            return false;
        }
        if (needVal == MAINQUEST_GIVED && curVal != MAINQUEST_NOT_GIVED) {
            return false;
        }
        if (needVal == MAINQUEST_DONE && curVal != MAINQUEST_GIVED) {
            return false;
        }
        if (needVal == MAINQUEST_MARK_DONE && curVal != MAINQUEST_DONE) {
            return false;
        }
        if (needVal == MAINQUEST_MARK_FAIL && curVal != MAINQUEST_GIVED) {
            return false;
        }
    }
    else if (questVar == CritterProperty::QWarehouseSub1) {
        if (needVal == curVal) {
            return false;
        }
        if (needVal < SUBQUEST1_DAUGHTER_MADMAX || needVal > SUBQUEST1_DONE) {
            return false;
        }
        if (needVal == SUBQUEST1_DAUGHTER_MADMAX && curVal != SUBQUEST1_FIND_DAUGHTER) {
            return false;
        }
        if (needVal == SUBQUEST1_DELIVER_INFORMATION && curVal != SUBQUEST1_DAUGHTER_MADMAX) {
            return false;
        }
        if (needVal == SUBQUEST1_DONE && curVal != SUBQUEST1_DELIVER_INFORMATION) {
            return false;
        }
    }
    else if (questVar == CritterProperty::QWarehouseSub2) {
        if (needVal == curVal) {
            return false;
        }
        if (needVal < SUBQUEST2_PORN_ACTRES || needVal > SUBQUEST2_DONE) {
            return false;
        }
        if (needVal == SUBQUEST2_PORN_ACTRES && curVal != SUBQUEST2_GOLDEN_GLOBES) {
            return false;
        }
        if (needVal == SUBQUEST2_GAMBLER && curVal != SUBQUEST2_PORN_ACTRES) {
            return false;
        }
        if (needVal == SUBQUEST2_DONE) {
            if (curVal != SUBQUEST2_GAMBLER) {
                return false;
            }

            if (player.QWarehouseSub1 != SUBQUEST1_DONE) {
                return false;
            }
        }
    }
    else if (questVar == CritterProperty::WarehouseOther) {
        if (needVal < 0 || needVal > OTHER_MAX) {
            return false;
        }
        if (((curVal >> needVal) & 1) == 0) {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

uint ProcessMainQuest(Critter player, int newVal)
{
    if (not CheckNewQuestValue(player, CritterProperty::QWarehouse, newVal)) {
        return FD_GENERIC_ERROR;
    }

    // Выдача квеста
    if (newVal == MAINQUEST_GIVED) {
        Map map = player.GetMap();
        if (not valid(map)) {
            return FD_GENERIC_ERROR;
        }

        Critter[] critters = {};
        critters.insertLast(player);
        GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Alive, critters);
        if (critters.length() < MIN_PLAYERS) {
            return FD_LOW_PLAYERS;
        }

        bool isMalePresent = false;
        uint aproxLevel = 0;
        Critter[] questCr = {};
        any[] questData = array<any>(2);
        questData[0] = 0;
        questData[1] = 0;
        for (uint i = 0; i < critters.length(); i++) {
            Critter cr = critters[i];
            if (cr.IsControlledByPlayer) {
                if (CheckNewQuestValue(cr, CritterProperty::QWarehouse, MAINQUEST_GIVED)) {
                    if (cr.Level < MIN_EVERY_LEVEL) {
                        return FD_LOW_LEVEL;
                    }

                    questCr.insertLast(cr);
                    questData.insertLast(cr.Id);
                    aproxLevel += cr.Level;
                    if (not isMalePresent && cr.Gender == GenderType::Male) {
                        isMalePresent = true;
                    }
                }
            }
        }
        if (not isMalePresent) {
            return FD_LOW_PLAYERS;
        }

        // Проверка численности.
        if (questCr.length() < MIN_PLAYERS) {
            return FD_LOW_PLAYERS;
        }
        if (questCr.length() > MAX_PLAYERS) {
            return FD_MANY_PLAYERS;
        }

        // Level check
        aproxLevel /= questCr.length();
        if (aproxLevel < MIN_APROX_LEVEL) {
            return FD_LOW_LEVEL;
        }

        // Сохроняем данные о команде.
        player.WarehouseQuestData = questData;

        // Отмечаем квест.
        for (uint i = 0; i < questCr.length(); i++) {
            Critter cr = questCr[i];
            cr.QWarehouse = MAINQUEST_GIVED;
            cr.QWarehouseSub1 = SUBQUEST1_FIND_DAUGHTER;
            cr.QWarehouseSub2 = SUBQUEST2_GOLDEN_GLOBES;
            cr.WarehouseOther = 0;
            cr.WarehouseDataId = player.Id;
        }
    }
    // Выполнение
    else {
        ident[] questCrIds = {};
        if (not GetQuestCritters(player, questCrIds)) {
            return FD_GENERIC_ERROR;
        }

        ChangeCrittersQuest(questCrIds, CritterProperty::QWarehouse, newVal, MainQuestExperience[newVal]);

        if (newVal == MAINQUEST_MARK_FAIL || newVal == MAINQUEST_MARK_DONE) {
            // Осторожно удаляем локацию
            ident locId = GetLocId(player);
            Location loc = Game.GetLocation(locId);
            if (valid(loc)) {
                loc.AutoGarbage = true;
            }

            // Стираем данные
            if (player.WarehouseDataId != ZERO_IDENT) {
                Critter crDataHolder = Game.GetCritter(player.WarehouseDataId);
                crDataHolder.WarehouseQuestData = array<any>();
            }
        }
    }

    return 0;
}

uint ProcessSubQuest1(Critter player, int newVal)
{
    if (not CheckNewQuestValue(player, CritterProperty::QWarehouseSub1, newVal)) {
        return FD_GENERIC_ERROR;
    }

    ident[] questCrIds = {};
    if (not GetQuestCritters(player, questCrIds)) {
        return FD_GENERIC_ERROR;
    }
    ChangeCrittersQuest(questCrIds, CritterProperty::QWarehouseSub1, newVal, SubQuest1Experience[newVal]);

    if (newVal == SUBQUEST1_DONE) {
        Critter[] critters = {};
        for (uint i = 0, j = questCrIds.length(); i < j; i++) {
            Critter cr = Game.GetCritter(questCrIds[i]);
            critters.insertLast(cr);
        }
        hstring[] locPids = {Content::Location::warehouse,
                             Content::Location::warehouse1,
                             Content::Location::warehouse2,
                             Content::Location::warehouse3,
                             Content::Location::warehouse4,
                             Content::Location::warehouse5,
                             Content::Location::warehouse6};
        hstring locPid = locPids[Game.Random(0, locPids.length() - 1)];
        Location loc = Game.CreateLocation(locPid, Game.Random(810, 990), Game.Random(510, 690), critters);
        if (!valid(loc)) {
            return FD_GENERIC_ERROR;
        }
        SetLocId(player, loc.Id);
        if (not valid(loc)) {
            return FD_GENERIC_ERROR;
        }
        Map map = loc.GetMapByIndex(0);
        if (not valid(map)) {
            return FD_GENERIC_ERROR;
        }
        uint16 hexX = 0, hexY = 0;
        if (not Entrance::MapGetEntryCoords(map, ENTRY_LOC_DOOR, 0, hexX, hexY)) {
            return FD_GENERIC_ERROR;
        }
        Item door = Obsolete::MapGetDoor(map, hexX, hexY);
        if (valid(door)) {
            door.LockerId = GENERATE_WAREHOUSE_KEY_ID;
        }
    }

    return 0;
}

uint ProcessSubQuest2(Critter player, int newVal)
{
    if (not CheckNewQuestValue(player, CritterProperty::QWarehouseSub2, newVal)) {
        return FD_GENERIC_ERROR;
    }

    ident[] questCrIds = {};
    if (not GetQuestCritters(player, questCrIds)) {
        return FD_GENERIC_ERROR;
    }
    ChangeCrittersQuest(questCrIds, CritterProperty::QWarehouseSub2, newVal, SubQuest2Experience[newVal]);

    if (newVal == SUBQUEST2_DONE) {
        ident locId = GetLocId(player);
        Location loc = Game.GetLocation(locId);
        if (not valid(loc)) {
            return FD_GENERIC_ERROR;
        }
        Map map = loc.GetMapByIndex(0);
        if (not valid(map)) {
            return FD_GENERIC_ERROR;
        }
        uint16 hexX = 0, hexY = 0;
        if (not Entrance::MapGetEntryCoords(map, ENTRY_LOC_DOOR, 0, hexX, hexY)) {
            return FD_GENERIC_ERROR;
        }
        Item door = Obsolete::MapGetDoor(map, hexX, hexY);
        if (not valid(door)) {
            return FD_GENERIC_ERROR;
        }
        Item key = player.AddItem(Content::Item::red_pass_key, 1);
        if (valid(key)) {
            key.LockerId = door.LockerId;
        }
    }

    return 0;
}

uint ProcessOther(Critter player, int offset)
{
    int curVal = player.WarehouseOther;
    curVal |= 1 << offset;
    player.WarehouseOther = curVal;

    return 0;
}

// ///////////////////////////////////////////////////////////////////////////////////////////
bool d_MainQuest_IsNotGived(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_NOT_GIVED) ||
           CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_MARK_DONE) ||
           CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_MARK_FAIL);
}
bool d_MainQuest_IsGived(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_GIVED) || CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_DONE);
}
bool d_MainQuest_IsDone(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_DONE);
}
bool d_SubQuest1_IsFindDaughter(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_FIND_DAUGHTER);
}
bool d_SubQuest1_IsDaughterMadMax(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_DAUGHTER_MADMAX);
}
bool d_IsPlayerAsMadMax(Critter player, Critter npc, int val)
{
    Item armor = _CritGetItemArmor(player);
    return player.Gender == GenderType::Male && valid(armor) && armor.ProtoId == Content::Item::leather_jacket;
}
bool d_SubQuest1_IsDeliverInformation(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_DELIVER_INFORMATION);
}
bool d_SubQuest1_IsNotDeliverInformation(Critter player, Critter npc, int val)
{
    return not CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_DELIVER_INFORMATION);
}
bool d_SubQuest1_IsNotDone(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_FIND_DAUGHTER) ||
           CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_DAUGHTER_MADMAX) ||
           CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_DELIVER_INFORMATION);
}
bool d_SubQuest2_IsGoldenGlobes(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub2, SUBQUEST2_GOLDEN_GLOBES);
}
bool d_SubQuest2_IsPornActres(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub2, SUBQUEST2_PORN_ACTRES);
}
bool d_SubQuest2_IsGambler(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::QWarehouseSub2, SUBQUEST2_GAMBLER);
}
bool d_Other_IsPornActresPay(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::WarehouseOther, OTHER_PORN_ACTRES_PAY);
}
bool d_Other_IsNotPornActresPay(Critter player, Critter npc, int val)
{
    return not CheckQuestValue(player, CritterProperty::WarehouseOther, OTHER_PORN_ACTRES_PAY);
}
bool d_Other_IsRecPorn(Critter player, Critter npc, int val)
{
    return CheckQuestValue(player, CritterProperty::WarehouseOther, OTHER_REC_PORN);
}
bool d_Other_IsNotRecPorn(Critter player, Critter npc, int val)
{
    return not CheckQuestValue(player, CritterProperty::WarehouseOther, OTHER_REC_PORN);
}
// ///////////////////////////////////////////////////////////////////////////////////////////
uint r_MainQuest_Give(Critter player, Critter npc)
{
    return ProcessMainQuest(player, MAINQUEST_GIVED);
}
// uint r_MainQuest_Done(Critter player, Critter npc, int val)                   {return ProcessMainQuest(player,MAINQUEST_DONE);} // See t_DoneHex
uint r_MainQuest_MarkDone(Critter player, Critter npc, int val)
{
    return ProcessMainQuest(player, MAINQUEST_MARK_DONE);
}
uint r_MainQuest_MarkFail(Critter player, Critter npc, int val)
{
    return ProcessMainQuest(player, MAINQUEST_MARK_FAIL);
}
uint r_SubQuest1_DaughterMadMax(Critter player, Critter npc, int val)
{
    return ProcessSubQuest1(player, SUBQUEST1_DAUGHTER_MADMAX);
}
uint r_SubQuest1_DeliverInformation(Critter player, Critter npc, int val)
{
    return ProcessSubQuest1(player, SUBQUEST1_DELIVER_INFORMATION);
}
uint r_SubQuest1_Done(Critter player, Critter npc, int val)
{
    return ProcessSubQuest1(player, SUBQUEST1_DONE);
}
uint r_SubQuest2_PornActres(Critter player, Critter npc, int val)
{
    return ProcessSubQuest2(player, SUBQUEST2_PORN_ACTRES);
}
uint r_SubQuest2_Gambler(Critter player, Critter npc, int val)
{
    return ProcessSubQuest2(player, SUBQUEST2_GAMBLER);
}
uint r_SubQuest2_Done(Critter player, Critter npc, int val)
{
    return ProcessSubQuest2(player, SUBQUEST2_DONE);
}
uint r_Other_PornActresPay(Critter player, Critter npc, int val)
{
    return ProcessOther(player, OTHER_PORN_ACTRES_PAY);
}
uint r_Other_RecPorn(Critter player, Critter npc, int val)
{
    return ProcessOther(player, OTHER_REC_PORN);
}
// ///////////////////////////////////////////////////////////////////////////////////////////

void t_DoneHex(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (entered && CheckQuestValue(player, CritterProperty::QWarehouse, MAINQUEST_GIVED) &&
        CheckQuestValue(player, CritterProperty::QWarehouseSub1, SUBQUEST1_DONE) && CheckQuestValue(player, CritterProperty::QWarehouseSub2, SUBQUEST2_DONE)) {
        ProcessMainQuest(player, MAINQUEST_DONE);
    }
}
