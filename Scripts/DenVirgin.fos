// FOS Server Sort 2
// Author: Tab10id

///@ Property Critter PrivateServer uint8 DenVirginCount
///@ Property Critter PrivateServer bool  DenVirginIsHome

///@ Property Game PrivateServer  bool  DenVirginIsAway

// away position
#define AWAY_X (131)
#define AWAY_Y (225)

// home position (near Mom's Diner)
#define HOME_X (134)
#define HOME_Y (255)

void _VirginInit(Critter virgin, bool firstTime)
{
    virgin.OnIdle.Subscribe(_VirginIdle);
    virgin.OnCritterAppeared.Subscribe(_VirginShowCritter);
    virgin.OnTalk.Subscribe(_VirginTalk);

    Game.DeferredCall(GAME_MINUTE_TO_TICK(Game.Random(1, 60)), Check, virgin.Id);

    virgin.DenVirginCount = 0;
    virgin.DenVirginIsHome = true;
}

void _VirginIdle(Critter virgin)
{
    if (virgin.HexX == 134 && virgin.HexY == 255) {
        SendMessage::ToAllOnMap(virgin, 1220, 1);
    }
    else {
        SendMessage::ToAllOnMap(virgin, 1220, 0);
    }

    CritterState::Wait(virgin, 10000);
}

void _VirginShowCritter(Critter virgin, Critter crit)
{
    // if(crit.Gender)
}

bool _VirginTalk(Critter virgin, Critter cr, bool attach, uint talkCount)
{
    // handle end of dialog
    if (!attach) {
        if (not virgin.DenVirginIsHome) {
            Game.DenVirginIsAway = true;
            // reset
            virgin.DenVirginIsHome = false;
            NpcPlanes::AddWalkPlane(virgin, 0, AWAY_X, AWAY_Y, 2, false, 2);
        }
    }
    return true;
}

void Check(any value)
{
    Critter virgin = Game.GetCritter(value);
    if (not valid(virgin)) {
        return;
    }

    if (virgin.DenVirginCount == 0 && Game.DenVirginIsAway) {
        Game.DenVirginIsAway = false;
        NpcPlanes::AddWalkPlane(virgin, 0, HOME_X, HOME_Y, 2, false, 2);
    }
    else {
        virgin.DenVirginCount -= 1;
    }

    Game.DeferredCall(GAME_MINUTE_TO_TICK(60), Check, value);
}

void r_GoAway(Critter cr, Critter virgin, int val)
{
    virgin.DenVirginCount = 3;
    // delay plan execution to dialog end
    virgin.DenVirginIsHome = false;
}
