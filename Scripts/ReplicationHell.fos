// FOS Server
// Author: cvet

///@ Property Critter PrivateServer uint8 ReplHellTurretHack Max = 100

#define TIME_TO_DEATH (Time::RealMinute(Game.Random(110, 130))) // Время самоубийства турели

ident[] TurretIds = {};

void _TurretInit(Critter turret, bool firstTime)
{
    turret.TeamId = Teams::ReplicationTurret;
    turret.ReplicationTime = 1;
    turret.PerceptionBase = 10;
    turret.ActionPointsBase = 100;
    turret.MaxLifeBase = 1000;
    turret.BonusLook = 300;
    turret.StrengthBase = 10;
    turret.EnduranceBase = 10;
    turret.SkillBigGuns = 300;
    turret.IsNoEnemyStack = true;
    turret.IsUnlimitedAmmo = true;
    turret.PerkTerminator = 1;

    turret.OnSomeCritterUseSkill.Subscribe(_TurretSmthUseSkill);
    turret.OnSomeCritterAttack.Subscribe(_TurretSmthAttack);

    if (turret.GetTimeEvents(Tla::CteAutokill) == 0) {
        turret.AddTimeEvent(cte_KillTurret, TIME_TO_DEATH, Tla::CteAutokill);
    }

    if (turret.CountItem(Content::Item::heavy_dual_minigun_long_range) == 0) {
        turret.AddItem(Content::Item::heavy_dual_minigun_long_range, 1);
    }

    TurretIds.insertLast(turret.Id);
}

uint cte_KillTurret(Critter cr, any identifier, uint& rate)
{
    if (!cr.IsDead()) {
        CritterState::ToDead(cr, CritterActionAnim::DeadFront, null);
    }
    return TIME_TO_DEATH;
}

void t_Electro(Critter cr, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered || not cr.IsControlledByPlayer) {
        return;
    }

    Map map = cr.GetMap();
    if (not valid(map)) {
        return;
    }

    bool attack = false;

    // В отстойник. Убиваем.
    if (dir == 1 || dir == 2 || dir == 3) {
        attack = true;
    }
    // Из отстойника. Проверяем баланс репликации, если отрицательный, то убиваем.
    else if (cr.ReplicationMoney < 0) {
        attack = true;
    }

    if (attack) {
        for (uint i = 0; i < TurretIds.length(); i++) {
            Critter turret = Game.GetCritter(TurretIds[i]);
            if (valid(turret) && not turret.IsDead()) {
                NpcPlanes::AddAttackPlane(turret, 0, cr);
            }
        }
    }
}

void _TurretSmthUseSkill(Critter turret, Critter hacker, CritterProperty skill, Critter onCritter, Item onItem, StaticItem onScenery)
{
    if (skill == CritterProperty::SkillScience && valid(onCritter) && onCritter.Id == turret.Id) {
        int sk = hacker.SkillScience - hacker.ReplHellTurretHack * 10;
        sk = CLAMP(sk, 6, 95);
        if (sk >= Game.Random(1, 100)) {
            NpcPlanes::DropPlanes(turret);
            NpcPlanes::AddMiscPlane(turret, 100, Game.GetFullSecond() + Time::RealSecond(10), null); // Wait 10 seconds
            turret.Say(SAY_NORM_ON_HEAD, "!::#$%^*");
            hacker.ReplHellTurretHack += 1;
            if (hacker.ReplHellTurretHack >= 100) {
                hacker.ReplHellTurretHack = 0;
            }
        }
        else {
            NpcPlanes::AddAttackPlane(turret, 0, hacker);
        }
    }
}

void _TurretSmthAttack(Critter turret, Critter attacker, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    if (attacker.IsControlledByPlayer) {
        NpcPlanes::AddAttackPlane(turret, 0, attacker);
    }
}
