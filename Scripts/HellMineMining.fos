// FOS Server

///@ Property Critter PrivateServer uint HellMineTimeoutEnd

#define BASE_TIMEOUT     (11) // real seconds

#define STR_NEED_REST    (2201)
#define STR_MINE_URANIUM (3035)
#define STR_MINE_STONE   (3036)
#define STR_MINE_GOLD    (3037)

bool s_MineGold(Critter cr, StaticItem sc, Item item, int skill)
{
    return s_MG(cr, sc, item, skill);
}

bool s_MG(Critter cr, StaticItem sc, Item item, int skill) // Mine Gold
{
    if (not IsMiningTool(item)) {
        return false;
    }

    if (not IsTimeoutExpired(cr)) {
        // critter need a rest
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_REST);
        return true;
    }
    else {
        cr.Animate(Anim1::Hammer, Anim2Actions::Swing1h, null, true, true);
    }

    int successChance = (cr.Endurance + cr.Strength * 4);
    successChance = CLAMP(successChance, 10, 95);
    int roll = Game.Random(1, 100);

    if (roll <= successChance) {
        cr.AddItem(Content::Item::gold_nugget, 1);
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_GOLD);
    }
    else {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_STONE);
        cr.AddItem(Content::Item::rock, 1);
    }

    SetTimeout(cr);
    return true;
}

bool s_Mine(Critter cr, StaticItem sc, Item item, int skill)
{
    if (not IsMiningTool(item)) {
        return false;
    }

    if (not IsTimeoutExpired(cr)) {
        // critter need a rest
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_REST);

        // cr.Animate(0xFF, ANIM1_EMPTY, 0, 0xFF, 0, true, true, true);

        return true;
    }
    else {
        cr.Animate(Anim1::Hammer, Anim2Actions::Swing1h, null, true, true);
    }

    int successChance = (cr.Luck) * 10;
    successChance = CLAMP(successChance, 10, 95);
    int roll = Game.Random(1, 100);

    // шанс выбить простой камень
    if (roll <= successChance) {
        cr.AddItem(Content::Item::uranium_ore, 1);
        // cr.Say(SAY_NETMSG, "Success. Roll/Chance = " + roll + "/" + successChance);
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_URANIUM);
    }
    else {
        // cr.Say(SAY_NETMSG, "Fail. Roll/Chance = " + roll + "/" + successChance);
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_STONE);
        // r17 091228>
        // добавление камня всегда, если не досталось урановой руды
        cr.AddItem(Content::Item::rock, 1);
        // <r17
    }

    SetTimeout(cr);
    return true;
}

/*
   Determines whether given item is appropriate for mining
 */
bool IsMiningTool(Item item)
{
    if (not valid(item)) {
        return false;
    }

    hstring pid = item.ProtoId;
    return pid == Content::Item::sledgehammer || pid == Content::Item::super_sledge;
}

/*
   Checks whether mining timeout for given critter is expired
 */
bool IsTimeoutExpired(Critter cr)
{
    if (Game.GetFullSecond() >= cr.HellMineTimeoutEnd) {
        return true;
    }

    cr.Say(SAY_NETMSG, "Remaining time: " + (cr.HellMineTimeoutEnd - Game.GetFullSecond()));
    return false;
}

/*
   Sets mining timeout for given critter
 */
void SetTimeout(Critter cr)
{
    // basic formula for timeout time in real seconds
    int timeoutTime = (BASE_TIMEOUT - cr.Endurance);
    // set timeout end timestamp
    cr.HellMineTimeoutEnd = Game.GetFullSecond() + REAL_SECOND(timeoutTime);
    cr.Say(SAY_NETMSG, "Setting timeout: " + (cr.HellMineTimeoutEnd - Game.GetFullSecond()));
}
