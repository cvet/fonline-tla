// FOS Server
// Author: rifleman17

/* На энкаунтере есть по 5-10 гексов респауна итемов.
   Т.е., если взять шанс выпадения в 70%, то на энкаунтере будет
   по 3-7 предметов в среднем. Гексов специально выставлено больше,
   чтобы предметы каждый раз спавнились в новом месте. */

#define ETYPE_ANY       (0) // Может встретиться везде
#define ETYPE_MOUNTAINS (1) // Горы
#define ETYPE_DESERT    (2) // Пустыня
#define ETYPE_CAVERN    (3) // Пещеры
#define ETYPE_CITY      (4) // Город
#define ETYPE_COAST     (5) // Берег
#define ETYPE_OCEAN     (6) // Океан
#define ETYPE_DEFAULT   (7) // Не используется

#define ENT_NAT         (11) // Природные ресурсы
#define ENT_TRASH       (12) // Хлам
#define ENT_RES         (13) // Ресурсы для крафта
#define ENT_CONT1       (14) // Контейтер уровень 1
#define ENT_CONT2       (15) // Контейнер уровень 2

// Таблица гексов
const uint16[] gex_table = {ENT_NAT, ENT_TRASH, ENT_RES, ENT_CONT1, ENT_CONT2};

// clang-format off

// Таблица появляющихся итемов.
// Ревизия 2 (19.08.2010).
const int[] items_table =
{
//  КодПрототипа,               ТипЭнка,                        КолВоМин,   КолВоМакс,	Шанс,   НомерГекса

    // Пустыни
    Content::Item::rock.hash,               ETYPE_DESERT,                   1,                      2,                      100,    ENT_NAT,
    Content::Item::broc_flower.hash,        ETYPE_DESERT,                   1,                      1,                      90,     ENT_NAT,
    Content::Item::xander_root.hash,        ETYPE_DESERT,                   1,                      1,                      90,     ENT_NAT,
    Content::Item::bottle_caps.hash,        ETYPE_DESERT,                   1,                      50,                     80,     ENT_TRASH,
    Content::Item::real_bottle_caps.hash,   ETYPE_CITY,                     1,                      35,                     90,     ENT_TRASH,
    Content::Item::beer.hash,               ETYPE_DESERT,                   1,                      1,                      90,     ENT_TRASH,
    Content::Item::booze.hash,              ETYPE_DESERT,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::mutated_fruit.hash,      ETYPE_DESERT,                   1,                      1,                      90,     ENT_TRASH,
    Content::Item::healing_powder.hash,     ETYPE_DESERT,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::knife.hash,              ETYPE_DESERT,                   1,                      1,                      70,     ENT_TRASH,
    Content::Item::axe.hash,                ETYPE_DESERT,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::shovel.hash,             ETYPE_DESERT,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::bottle_glass.hash,       ETYPE_DESERT,                   1,                      2,                      90,     ENT_TRASH,
    Content::Item::gecko_pelt.hash,         ETYPE_DESERT,                   1,                      1,                      50,     ENT_TRASH,
    Content::Item::rope.hash,               ETYPE_DESERT,                   1,                      2,                      75,     ENT_TRASH,
    Content::Item::flint.hash,              ETYPE_DESERT,                   1,                      2,                      90,     ENT_TRASH,
    Content::Item::mouse_skin.hash,         ETYPE_DESERT,                   0,                      1,                      60,     ENT_TRASH,
    Content::Item::empty_jet.hash,          ETYPE_DESERT,                   1,                      3,                      40,     ENT_TRASH,
    Content::Item::jet.hash,                ETYPE_DESERT,                   1,                      2,                      30,     ENT_TRASH,
    Content::Item::pocket_lint.hash,        ETYPE_DESERT,                   1,                      5,                      90,     ENT_TRASH,
    Content::Item::rubber_boots.hash,       ETYPE_DESERT,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::pump_parts.hash,         ETYPE_DESERT,                   1,                      2,                      70,     ENT_TRASH,
    Content::Item::metal_trash.hash,        ETYPE_DESERT,                   1,                      1,                      70,     ENT_TRASH,
    Content::Item::pump_parts.hash,         ETYPE_DESERT,                   1,                      1,                      80,     ENT_CONT1,
    Content::Item::pocket_lint.hash,        ETYPE_DESERT,                   1,                      5,                      95,     ENT_CONT1,
    Content::Item::mutated_fruit.hash,      ETYPE_DESERT,                   1,                      2,                      60,     ENT_CONT1,
    Content::Item::empty_jet.hash,          ETYPE_DESERT,                   1,                      1,                      20,     ENT_CONT1,
    Content::Item::jet.hash,                ETYPE_DESERT,                   1,                      1,                      50,     ENT_CONT1,
    Content::Item::healing_powder.hash,     ETYPE_DESERT,                   1,                      1,                      90,     ENT_CONT1,
    Content::Item::knife.hash,              ETYPE_DESERT,                   1,                      1,                      75,     ENT_CONT1,
    // Горы и пещеры снаружи
    Content::Item::rock.hash,               ETYPE_MOUNTAINS,                1,                      1,                      90,     ENT_NAT,
    Content::Item::flint.hash,              ETYPE_MOUNTAINS,                1,                      1,                      70,     ENT_NAT,
    Content::Item::broc_flower.hash,        ETYPE_MOUNTAINS,                1,                      1,                      60,     ENT_NAT,
    Content::Item::xander_root.hash,        ETYPE_MOUNTAINS,                1,                      1,                      60,     ENT_NAT,
    Content::Item::flint.hash,              ETYPE_MOUNTAINS,                1,                      1,                      80,     ENT_TRASH,
    Content::Item::axe.hash,                ETYPE_MOUNTAINS,                1,                      1,                      90,     ENT_TRASH,
    Content::Item::rubber_boots.hash,       ETYPE_MOUNTAINS,                1,                      1,                      90,     ENT_TRASH,
    Content::Item::rope.hash,               ETYPE_MOUNTAINS,                1,                      2,                      80,     ENT_TRASH,
    Content::Item::bottle_glass.hash,       ETYPE_MOUNTAINS,                1,                      5,                      90,     ENT_TRASH,
    Content::Item::scorpion_tail.hash,      ETYPE_MOUNTAINS,                1,                      1,                      90,     ENT_TRASH,
    Content::Item::real_bottle_caps.hash,   ETYPE_CITY,                     1,                      35,                     90,     ENT_TRASH,
    Content::Item::rags.hash,               ETYPE_MOUNTAINS,                1,                      5,                      90,     ENT_TRASH,
    Content::Item::healing_powder.hash,     ETYPE_MOUNTAINS,                1,                      1,                      60,     ENT_CONT1,
    Content::Item::pocket_lint.hash,        ETYPE_MOUNTAINS,                1,                      5,                      80,     ENT_CONT1,
    Content::Item::scorpion_tail.hash,      ETYPE_MOUNTAINS,                1,                      1,                      75,     ENT_CONT1,
    Content::Item::pump_parts.hash,         ETYPE_MOUNTAINS,                0,                      2,                      60,     ENT_CONT1,
    // Пещеры внутри
    Content::Item::rock.hash,               ETYPE_CAVERN,                   1,                      1,                      100,    ENT_NAT,
    Content::Item::flint.hash,              ETYPE_CAVERN,                   1,                      1,                      50,     ENT_NAT,
    Content::Item::pump_parts.hash,         ETYPE_CAVERN,                   1,                      1,                      90,     ENT_TRASH,
    Content::Item::metal_trash.hash,        ETYPE_CAVERN,                   1,                      1,                      90,     ENT_TRASH,
    Content::Item::antidote.hash,           ETYPE_CAVERN,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::green_condom.hash,       ETYPE_CAVERN,                   1,                      1,                      60,     ENT_TRASH,
    Content::Item::part_of_rope.hash,       ETYPE_CAVERN,                   1,                      1,                      80,     ENT_TRASH,
    Content::Item::jet.hash,                ETYPE_CAVERN,                   1,                      1,                      50,     ENT_TRASH,
    Content::Item::_9mm_ammo.hash,          ETYPE_CAVERN,                   15,                     35,                     50,     ENT_TRASH,
    Content::Item::jet.hash,                ETYPE_CAVERN,                   1,                      1,                      40,     ENT_TRASH,
    Content::Item::leather_jacket.hash,     ETYPE_CAVERN,                   1,                      1,                      2,      ENT_TRASH,
    Content::Item::gunpowder.hash,          ETYPE_CAVERN,                   1,                      1,                      50,     ENT_TRASH,
    Content::Item::tube.hash,               ETYPE_CAVERN,                   1,                      1,                      40,     ENT_TRASH,
    Content::Item::nitroglycerin.hash,      ETYPE_CAVERN,                   1,                      1,                      20,     ENT_TRASH,
    Content::Item::bottle_empty.hash,       ETYPE_CAVERN,                   1,                      1,                      60,     ENT_TRASH,
    // Города
    Content::Item::rock.hash,               ETYPE_CITY,                     1,                      1,                      90,     ENT_NAT,
    Content::Item::pump_parts.hash,         ETYPE_CITY,                     1,                      3,                      100,    ENT_RES,
    Content::Item::metal_trash.hash,        ETYPE_CITY,                     1,                      2,                      100,    ENT_RES,
    Content::Item::tube.hash,               ETYPE_CITY,                     1,                      1,                      90,     ENT_TRASH,
    Content::Item::shovel.hash,             ETYPE_CITY,                     1,                      1,                      60,     ENT_TRASH,
    Content::Item::bottle_glass.hash,       ETYPE_CITY,                     1,                      5,                      95,     ENT_TRASH,
    Content::Item::steel.hash,              ETYPE_CITY,                     1,                      1,                      80,     ENT_TRASH,
    Content::Item::hypodermic_needle.hash,  ETYPE_CITY,                     1,                      3,                      95,     ENT_TRASH,
    Content::Item::rags.hash,               ETYPE_CITY,                     1,                      5,                      95,     ENT_TRASH,
    Content::Item::rope.hash,               ETYPE_CITY,                     1,                      1,                      60,     ENT_TRASH,
    Content::Item::real_bottle_caps.hash,   ETYPE_CITY,                     1,                      35,                     90,     ENT_TRASH,
    Content::Item::zip_gun.hash,            ETYPE_CITY,                     1,                      1,                      5,      ENT_TRASH,
    Content::Item::mutated_fruit.hash,      ETYPE_CITY,                     1,                      2,                      80,     ENT_CONT1,
    Content::Item::crowbar.hash,            ETYPE_CITY,                     1,                      1,                      70,     ENT_CONT1,
    Content::Item::cigarettes.hash,         ETYPE_CITY,                     1,                      1,                      60,     ENT_CONT1,
    Content::Item::pocket_lint.hash,        ETYPE_CITY,                     1,                      3,                      95,     ENT_CONT1,
    Content::Item::hypodermic_needle.hash,  ETYPE_CITY,                     1,                      3,                      80,     ENT_CONT1,
    Content::Item::real_bottle_caps.hash,   ETYPE_CITY,                     1,                      35,                     50,     ENT_CONT1,
    Content::Item::jet.hash,                ETYPE_CITY,                     1,                      1,                      25,     ENT_CONT1,
    Content::Item::tube.hash,               ETYPE_CITY,                     1,                      1,                      90,     ENT_CONT1,
    Content::Item::gunpowder.hash,          ETYPE_CITY,                     1,                      1,                      75,     ENT_CONT1,
    Content::Item::knife.hash,              ETYPE_CITY,                     1,                      1,                      95,     ENT_CONT1,
    Content::Item::booze.hash,              ETYPE_CITY,                     1,                      1,                      60,     ENT_CONT1,
    Content::Item::beer.hash,               ETYPE_CITY,                     1,                      1,                      40,     ENT_CONT1,
    Content::Item::cigarettes.hash,         ETYPE_CITY,                     1,                      2,                      95,     ENT_CONT2,
    Content::Item::combat_knife.hash,       ETYPE_CITY,                     1,                      1,                      50,     ENT_CONT2,
    Content::Item::molotov_cocktail.hash,   ETYPE_CITY,                     1,                      1,                      50,     ENT_CONT2,
    Content::Item::zip_gun.hash,            ETYPE_CITY,                     1,                      1,                      15,     ENT_CONT2,
    Content::Item::shotgun_shells.hash,     ETYPE_CITY,                     12,                     30,                     90,     ENT_CONT2,
    Content::Item::_7_62mm_ammo.hash,       ETYPE_CITY,                     10,                     20,                     60,     ENT_CONT2,
    Content::Item::_10mm_jhp.hash,          ETYPE_CITY,                     5,                      30,                     90,     ENT_CONT2,
    Content::Item::_9mm_ammo.hash,          ETYPE_CITY,                     10,                     20,                     80,     ENT_CONT2,
    Content::Item::_44_fmj_magnum.hash,     ETYPE_CITY,                     10,                     20,                     50,     ENT_CONT2,
    Content::Item::_223_fmj.hash,           ETYPE_CITY,                     5,                      10,                     50,     ENT_CONT2,
    Content::Item::gunpowder.hash,          ETYPE_CITY,                     1,                      1,                      80,     ENT_CONT2,
    // Побережже
    Content::Item::rock.hash,               ETYPE_COAST,                    1,                      1,                      95,     ENT_NAT,
    Content::Item::broc_flower.hash,        ETYPE_COAST,                    1,                      1,                      90,     ENT_NAT,
    Content::Item::xander_root.hash,        ETYPE_COAST,                    1,                      1,                      90,     ENT_NAT,
    Content::Item::bottle_caps.hash,        ETYPE_COAST,                    1,                      20,                     70,     ENT_TRASH,
    Content::Item::beer.hash,               ETYPE_COAST,                    1,                      1,                      50,     ENT_TRASH,
    Content::Item::axe.hash,                ETYPE_COAST,                    1,                      1,                      80,     ENT_TRASH,
    Content::Item::shovel.hash,             ETYPE_COAST,                    1,                      1,                      80,     ENT_TRASH,
    Content::Item::rubber_boots.hash,       ETYPE_COAST,                    1,                      1,                      70,     ENT_TRASH,
    Content::Item::healing_powder.hash,     ETYPE_COAST,                    1,                      1,                      80,     ENT_CONT1,
    Content::Item::knife.hash,              ETYPE_COAST,                    1,                      1,                      95,     ENT_CONT1,
    Content::Item::rope.hash,               ETYPE_COAST,                    1,                      2,                      85,     ENT_CONT1,
    Content::Item::flint.hash,              ETYPE_COAST,                    1,                      2,                      70,     ENT_CONT1,
    // Это не попадётся.
    Content::Item::lil_jesus_weapon.hash,   ETYPE_DEFAULT,                  1,                      1,                      0,      ENT_NAT
};

// clang-format on

#define ENTRY_ITEM    (0)                                    // Гекс для расположения итема
#define TABLE_COLUMNS (6)                                    // число колонок в таблице
#define TABLE_ITEMS   (items_table.length() / TABLE_COLUMNS) // всего определений итемов

#define MAX_TRIES     (ETYPE_DEFAULT) // максимальное число попыток найти подходящую по типу энкаунтера строку в таблице итемов
#define MIN_ITEMS     (0)             // минимальное число итемов на энке
#define MAX_ITEMS     (8)             // Максимальное

#define _GetType      #(idx)(items_table[TABLE_COLUMNS *(0 + int(idx)) + 1])
#define _GetPid       #(idx) hstring_fromHash(items_table[TABLE_COLUMNS *(0 + int(idx)) + 0])
#define _GetQty       #(idx)(Game.Random(items_table[TABLE_COLUMNS *(0 + int(idx)) + 2], items_table[TABLE_COLUMNS *(0 + int(idx)) + 3]))
#define _GetChance    #(idx)(items_table[TABLE_COLUMNS *(0 + int(idx)) + 4])
#define _GetGex       #(idx) hstring("" + items_table[TABLE_COLUMNS *(0 + int(idx)) + 5])
#define _IsCave \
#(mapPid)(mapPid == Content::Map::e_cave0_in || mapPid == Content::Map::e_cave1_in || mapPid == Content::Map::e_cave2_in || \
              mapPid == Content::Map::e_cave3_in || mapPid == Content::Map::e_cave4_in || mapPid == Content::Map::e_cave5_in || \
              mapPid == Content::Map::e_coast5_cave)

// Фильтр таблицы по типу энка и гексу
uint16[] GetItemsInfo(int eType, hstring hex)
{
    uint16[] infos = {};
    for (uint i = 0; i < TABLE_ITEMS; i++) {
        if ((_GetType(i) == eType || _GetType(i) == ETYPE_ANY) && _GetGex(i) == hex) {
            // Game.Log("eType:"+eType+"_GetType:"+_GetType(i));
            infos.insertLast(i);
        }
    }

    return infos;
}

uint8 GetEncounterType(Map map)
{
    if (_IsCave(map.ProtoId)) {
        return ETYPE_CAVERN;
    }

    Location loc = map.GetLocation();
    if (!valid(loc)) {
        return ETYPE_DEFAULT;
    }

    if (PidsGroups::Pids_MapDeserts.find(loc.ProtoId) != -1) {
        return ETYPE_DESERT;
    }
    if (PidsGroups::Pids_MapMountains.find(loc.ProtoId) != -1) {
        return ETYPE_MOUNTAINS;
    }
    if (PidsGroups::Pids_MapCaverns.find(loc.ProtoId) != -1) {
        return ETYPE_MOUNTAINS;
    }
    if (PidsGroups::Pids_MapCities.find(loc.ProtoId) != -1) {
        return ETYPE_CITY;
    }
    if (PidsGroups::Pids_MapCoasts.find(loc.ProtoId) != -1) {
        return ETYPE_COAST;
    }
    if (PidsGroups::Pids_MapOceans.find(loc.ProtoId) != -1) {
        return ETYPE_OCEAN;
    }

    return ETYPE_DEFAULT;
}

void GenerateItems(Map map, Critter[] grp)
{
    int minLuck = 8;
    if (valid(grp)) {
        for (uint i = 0, l = grp.length() - 1; i < l; i++) {
            Critter cr = grp[i];
            if (!valid(cr)) {
                continue;
            }
            if (minLuck > cr.Luck) {
                minLuck = cr.Luck;
            }
        }
    }
    uint8 itemz = Game.Random(MIN_ITEMS, CLAMP(minLuck, 3, MAX_ITEMS));
    uint8 mapType = GetEncounterType(map);

    Entrance::Entry[] entries = {};
    for (uint i = 0, l = gex_table.length(); i < l; i++) {
        entries.insertLast(Entrance::ParseEntries(map, gex_table[i]));
    }
    uint len = entries.length();
    if (len == 0) {
        return;
    }

    int8 tries = 30;
    uint[] foundedEntries = {};
    uint cur = 0;
    int idx = 0;
    while (tries > 0) {
        cur = Game.Random(0, len - 1);
        if (!UtilsForArray::Present(cur, foundedEntries)) {
            foundedEntries.insertLast(cur);
        }
        if (foundedEntries.length() > itemz) {
            break;
        }
        tries--;
    }

    bool found = false;
    for (uint i = 0, l = foundedEntries.length(); i < l; i++) {
        Entrance::Entry hex = entries[foundedEntries[i]];
        if (valid(hex)) {
            uint16[] rows = GetItemsInfo(mapType, hex.Name);
            if (rows.length() == 0) {
                continue;
            }

            idx = rows[Game.Random(0, rows.length() - 1)];
            if (idx < 0) {
                continue;
            }

            if (Game.Random(1, 99) < int(_GetChance(idx))) {
                Item item = map.GetItem(hex.HexX, hex.HexY, 2, ItemProperty::Type, ItemType::Container);
                if (item != null) {
                    uint qty = _GetQty(idx);
                    if (qty > 0) {
                        item.AddItem(_GetPid(idx), qty, ContainerItemStack::Root);
                    }
                    found = true;
                    break;
                }
                if (!found) {
                    map.AddItem(hex.HexX, hex.HexY, _GetPid(idx), _GetQty(idx));
                }

                // Game.Log("added items"+_GetPid(idx)+" x="+hex.HexX+" y="+hex.HexY +" eType"+hex.Number);
                // Game.Log("table len^"+items_table.length());
            }
        }
    }
}
