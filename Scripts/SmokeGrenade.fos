// FOS Server Sort 2
// Author: rifleman17

///@ Property Item PrivateServer ident SmokeGrenadeOwnerId

#define MAX_STEP            (5)
#define SMOKE_TOHIT_PENALTY #(attacker)(attacker.IsControlledByPlayer ? 80 : 40)
#define GAS_TOHIT_PENALTY   #(attacker)(attacker.IsControlledByPlayer ? 50 : 25)
#define RND                 #(v1, v2)(Game.Random(v1, v2) == 1)

uint GetSmokePenalty(Map map, Critter attacker, Critter target)
{
    if (map != null) {
        if (valid(attacker) && valid(map.GetItem(attacker.HexX, attacker.HexY, Content::Item::smoke))) {
            return SMOKE_TOHIT_PENALTY(attacker);
        }
        if (valid(target) && valid(map.GetItem(target.HexX, target.HexY, Content::Item::smoke))) {
            return SMOKE_TOHIT_PENALTY(attacker);
        }
        if (valid(attacker) && valid(map.GetItem(attacker.HexX, attacker.HexY, Content::Item::mustard_gas))) {
            return GAS_TOHIT_PENALTY(attacker);
        }
        if (valid(target) && valid(map.GetItem(target.HexX, target.HexY, Content::Item::mustard_gas))) {
            return GAS_TOHIT_PENALTY(attacker);
        }
    }
    return 0;
}

void SmokeBlast(Map map, uint16 hexX, uint16 hexY, hstring smokePid, ident ownerId)
{
    any[] values = {map.Id, hexX, hexY, 0, smokePid.hash, ownerId};
    Game.DeferredCall(0, DoSmokeBlast, values);
}

void DoSmokeBlast(any[] values)
{
    Map map = Game.GetMap(values[0]);
    uint16 hexX = values[1];
    uint16 hexY = values[2];
    uint8 step = values[3];
    hstring pid = hstring_fromHash(values[4]);
    ident ownerId = values[5];
    uint penaltyLowSkill = 0;
    if (ownerId != ZERO_IDENT) {
        Critter cr = Game.GetCritter(ownerId);
        if (valid(cr)) {
            penaltyLowSkill = 4 - uint(CLAMP(cr.SkillThrowing, 0, 100) / 25);
        }
    }
    if (step > (MAX_STEP - penaltyLowSkill)) {
        return;
    }

    ident[] smokeIds = {};
    map.PlaySound("gas.wav", hexX, hexY, 25);
    AddSmoke(map, hexX, hexY, (step == 0 || (step < 2 && RND(1, 2))), pid, ownerId, smokeIds);

    for (uint curStep = 1; curStep < step; curStep++) {
        hexX = values[1];
        hexY = values[2];
        map.MoveHexByDir(hexX, hexY, 4, curStep);
        for (uint i = 0; i < 6; i++) {
            for (uint j = 0; j < curStep; j++) {
                map.MoveHexByDir(hexX, hexY, i, 1);
                AddSmoke(map, hexX, hexY, (curStep + 2 > step) || ((curStep + 3 > step) && RND(1, 2)) || RND(1, 3), pid, ownerId, smokeIds);
            }
        }
    }

    if (smokeIds.length() > 0) {
        any[] smokeIdsToDel = {};
        for (uint i = 0; i < smokeIds.length(); i++) {
            smokeIdsToDel.insertLast(smokeIds[i]);
        }

        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(REAL_SECOND(Game.Random(4, 6)) * (12 - step) * (5 - penaltyLowSkill) / 5), DeleteSmokes, smokeIdsToDel);
    }

    values[3] = int(values[3]) + 1;

    Game.DeferredCall(1000, DoSmokeBlast, values);
}

void DeleteSmokes(any[] values)
{
    for (uint i = 0, l = values.length(); i < l; i++) {
        if (values[i] == 0) {
            continue;
        }
        Item item = Game.GetItem(values[i]);
        if (valid(item)) {
            Game.DeleteItem(item);
        }
    }
}

void _SmokeInit(Item item, bool firstTime)
{
    if (!firstTime) {
        Game.DeleteItem(item);
    }
    else {
        item.IsNoBlock = true;
        item.IsShootThru = true;
        if (item.ProtoId == Content::Item::mustard_gas) {
            item.OnCritterWalk.Subscribe(_MustardGasWalk);
        }
        // item.OnFinish.Subscribe(_SmokeFinish);
    }
}

void _MustardGasWalk(Item mine, Critter cr, bool entered, uint8 dir)
{
    if (entered) {
        if (cr.IsControlledByPlayer && !cr.IsNoPvp) {
            Poison::AffectPoison(cr, Game.Random(3, 5));
        }
        else {
            if (!cr.IsInvulnerable) {
                Combat::InjureCritter(cr, Game.Random(1, 2), DamageTypes::Normal, 0, mine.SmokeGrenadeOwnerId);
            }
        }
    }
}

void AddSmoke(Map map, uint16 hexX, uint16 hexY, bool place, hstring pid, ident ownerId, ident[] ids)
{
    if (valid(map) && place && (map.IsHexMovable(hexX, hexY) || valid(map.GetCritter(hexX, hexY)))) {
        Item item = map.AddItem(hexX, hexY, pid, 1);
        if (valid(item)) {
            item.SmokeGrenadeOwnerId = ownerId;
            ids.insertLast(item.Id);
            item.SetupScript(_SmokeInit);
        }
    }
}

void SmokeBlast(Critter cr, hstring pid)
{
    SmokeBlast(cr.GetMap(), cr.HexX, cr.HexY, pid, cr.Id);
}
