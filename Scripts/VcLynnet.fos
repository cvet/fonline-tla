// FOS Server Sort 2
// Author: rifleman17
// Скрипты для квестовой цепочки на поддержку Линетт. ГУ.

///@ Property Critter Protected     uint8 VCLynettArest   Group = Quests Quest = 8843 Max = 5
///@ Property Critter Protected     uint8 VCLynettForgery Group = Quests Quest = 8845 Max = 6
///@ Property Critter PrivateServer ident VCLynettPrisonerId

// Наемный убийца, преследующий игрока, если тот отказался поддержать Линетт.
#define STR_KILLER_DEAD (7100) // Вот сука черномазая, говорила – легкая мишень…
#define STR_KILLER_KILL (7101) // Ха, как эта черная сука и обещала – раз плюнуть…

void _KillerInit(Critter cr, bool firstTime)
{
    PatternSniper::_SniperInit(cr, firstTime);
    if (firstTime) {
        cr.AddItem(Content::Item::sniper_rifle, 1);
        cr.AddItem(Content::Item::combat_armor, 1);
        cr.AddItem(Content::Item::super_stimpak, Game.Random(1, 2));
        cr.AddItem(Content::Item::_223_fmj, Game.Random(30, 50));
    }
    cr.DialogId = Content::Dialog::vc_killer;
    cr.ReplicationTime = -1;
    cr.TeamId = Teams::Slaver; // Чтобы не было конфликта с наемниками, если они вдруг есть у игрока в команде
    PatternSniper::SetSniperStats(cr, 0);
    cr.OnDead.Subscribe(_KillerDead);
    cr.OnSomeCritterDead.Subscribe(_KillerSmthDead);
}

void _KillerDead(Critter cr, Critter killer)
{
    PatternSniper::_SniperDead(cr, killer);
    Map map = cr.GetMap();
    if (valid(map)) {
        map.SetTextMsg(cr.HexX, cr.HexY, COLOR_BLUE, TextPackName::Text, STR_KILLER_DEAD);
    }
}

void _KillerSmthDead(Critter cr, Critter fromCr, Critter killer)
{
    if (valid(killer) && killer.Id == cr.Id && fromCr.VCLynettRefuse > 0) {
        cr.SayMsg(SAY_NORM, TextPackName::Text, STR_KILLER_KILL);
    }
}

// Арест
// Для нпц, которые могут быть подвергнуты аресту, необходимо установить спец роль в маппере, а также
// внести номер диалога в массив prisonerDialogs. Соответствующие реплики добавить в диалог вручную
#define ROLE_PRISONER               (1701)
#define FORCE_DIALOG_FOUND_PRISONER (23) // Найден заключенный, можно давать квест
#define FORCE_DIALOG_NOT_FOUND      (46) // Не найден заключенный, нельзя давать квест
#define HEX_FIRST                   (164)
#define HEX_LAST                    (167) // Игрок должен находиться внутри многоугольника, ограниченного этими гексами
#define HEX_PRISON                  (hstring("168")) // Место заключения
#define STR_ARESTHIM                (2)              // Пакуйте товарища!
#define STR_PRISONER_SHOUT          (1) // Вы не имеете права!Я буду жаловаться!Это произвол!Ты! Ты поплатишься за это!Я выйду отсюда через полчаса, вы все заплатите!

hstring[] prisonerDialogs = {Content::Dialog::vc_kohl, Content::Dialog::vc_randal, Content::Dialog::vc_ed};

Critter GetPrisoner(Location loc, hstring dialog)
{
    for (uint i = 0; i < loc.GetMapCount(); i++) {
        Map map = loc.GetMapByIndex(i);
        Critter[] critters = map.GetCritters(CritterProperty::NpcRole, ROLE_PRISONER, CritterFindType::AliveNpc);
        for (uint j = 0; j < critters.length(); j++) {
            Critter cr = critters[j];
            if (cr.DialogId == dialog && !Merc::IsMerc(cr)) {
                return cr; // Если нпц является чьим-то мерком уже, его засадить в тюрьму не получится
            }
        }
    }
    return null;
}

uint r_TrySelectPrisoner(Critter player, Critter npc)
{
    Map map = player.GetMap();
    if (!valid(map)) {
        return FORCE_DIALOG_NOT_FOUND;
    }
    Location loc = map.GetLocation();
    if (!valid(loc)) {
        return FORCE_DIALOG_NOT_FOUND;
    }
    player.VCLynettPrisonerId = ZERO_IDENT;
    Critter cr;
    int tries = 10;
    while (tries > 0 and !valid(cr) && prisonerDialogs.length() > 0) {
        cr = GetPrisoner(loc, prisonerDialogs[Game.Random(0, prisonerDialogs.length() - 1)]);
        tries--;
    }
    if (valid(cr)) {
        player.VCLynettPrisonerId = cr.Id;
        return FORCE_DIALOG_FOUND_PRISONER;
    }
    return FORCE_DIALOG_NOT_FOUND;
}

// lex name - имя искомого заключенного
void dlg_PrisonerName(Critter player, Critter npc, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }
    lexems = "$nameИзбранный";
    if (player.VCLynettPrisonerId == ZERO_IDENT) {
        return;
    }
    Critter prisoner = Game.GetCritter(player.VCLynettPrisonerId);
    if (!valid(prisoner)) {
        return;
    }
    lexems = "$name@msg DLG " + STR_NPC_NAME_DLG(prisoner.DialogId) + "@";
    prisoner.OnTalk.Subscribe(_PrisonerTalk);
}

bool _PrisonerTalk(Critter cr, Critter player, bool attach, uint talkCount)
{
    auto npcStory = player.NpcStory.clone();
    bool f = npcStory.get(cr.Id, false);
    // для контроля запуска нужного диалога используется переменная npc_story
    // поскольку нпц в любом случае нужен для скриптов в диалоге, а если не проверять запуск второго диалога, он тоже будет отменен
    if (attach) {
        if (player.VCLynettPrisonerId == cr.Id) {
            if (!f) {
                npcStory[cr.Id] = true;
                player.NpcStory = npcStory;
            }
            else {
                return true; // Второй вызов диалога, уже нужного
            }

            // player.Say(SAY_NETMSG, "DEBUG: подмена диалога...");
            Game.RunDialog(player, cr, Content::Dialog::vc_telman, false);
            cr.MercCancelOnGlobal = true;
            return false;
        }
    }
    else {
        if (f) {
            npcStory[cr.Id] = false;
            player.NpcStory = npcStory;
        }
    }
    return true;
}

// Переключение статуса квеста происходит при наступании НПЦ на спецтриггер, если игрок тоже находится в здании
void t_Arest(Critter cr, StaticItem trigger, bool entered, uint8 dir)
{
    if (cr.IsNpc() && Merc::IsMerc(cr) && !entered) {
        Critter player = Merc::GetMaster(cr);
        if (!valid(player)) {
            return;
        }
        if (cr.Id == player.VCLynettPrisonerId && player.VCLynettArest == 3 && Entrance::IsCritterInDeadZone(player, cr.GetMap(), 0, HEX_FIRST, HEX_LAST)) {
            player.Wait(0);
            NpcPlanes::DropPlanes(cr);
            cr.Wait(0);
            player.SayMsg(SAY_NORM, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_telman, STR_ARESTHIM));
            Effects::FlushScreen(player, false, 2000);
            player.VCLynettArest = 4;
            Merc::CancelMerc(cr);
            Obsolete::CritterTransitToMapEntry(cr, cr.GetMap().Id, HEX_PRISON);
            any[] values = {cr.Id};
            Game.DeferredCall(1000, PrisonerTalk, values);
        }
    }
}

void PrisonerTalk(any[] values)
{
    Critter cr = Game.GetCritter(values[0]);
    if (valid(cr)) {
        cr.SayMsg(SAY_NORM, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_telman, STR_PRISONER_SHOUT));
    }
}

// Подлог
#define ENTRY_SPAWN_GUARD   (hstring("170")) // гекс на котором генерятся гвардейцы
#define ENTRY_MOVETO        (hstring("171")) // Гекс, к которому перемещаются гвардейцы в момент обыска
#define HEX_FORG_FIRST      (172)            // Комната МакКлюра
#define HEX_FORG_LAST       (175)
#define ROLE_MACLUR         (35)   // роль - Макклюр
#define ROLE_WITNESS        (1702) // роль - свидетель
#define MIN_SNEAK           (50)   // минимальный сник, при котором макклюр не заметит игрока
#define STR_CATCH_LOW_SNEAK (5920)
#define CTE_DELETE          (176) // ид события на удаление гвардейца
#define STR_NO_WITNESS      (5921) // Мало просто забрать подложные документы, нужно сделать это при свидетелях...
#define STR_PLAYER          (5922) // Свидетели, подтвердите – найдены документы – письменный договор МакКлюра с Бишопом из Нью-Рено.
#define STR_GUARDS          (5923) // Так точно!Подтверждаем!
#define STR_MCCLURE         (5924) // Бред!

void r_AddDocs(Critter player, Critter npc)
{
    Item item = player.AddItem(Content::Item::fake_letter, 1);
    if (valid(item)) {
        item.SetupScript(_LynDocsInit);
    }
}

// При выкладывании предмета в ящик проверяется, находится ли персонаж в снике, если нет и рядом стоит МакКлюр, подлог не удается
void _LynDocsInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(_LynDocsPutCont);
    if (firstTime) {
        Item::SetDeleteItem(item, 24 * 3); // Предмет существует только трое игровых суток
    }
}

bool _LynDocsPutCont(Item item, Critter cr, CritterProperty skill)
{
    Map map = cr.GetMap();
    Critter npc = map.GetCritter(CritterProperty::NpcRole, ROLE_MACLUR, CritterFindType::AliveNpc);

    if (!valid(map) || map.ProtoId != Content::Map::vcity || cr.IsNpc()) {
        return false;
    }
    if (skill == SKILL_PUT_CONT) {
        if ((cr.VCLynettForgery == 1 || cr.VCLynettForgery == 3) && Entrance::IsCritterInDeadZone(cr, map, 0, HEX_FORG_FIRST, HEX_FORG_LAST)) {
            if (cr.IsHide && cr.SkillSneak > 50) {
                cr.Experience += 2000;
                cr.VCLynettForgery = 2;
                return false; // Навык достаточен, персонаж в снике
            }
            if (valid(npc) && npc.IsAlive() && Entrance::IsCritterInDeadZone(npc, map, 0, HEX_FORG_FIRST, HEX_FORG_LAST)) {
                npc.SayMsg(SAY_SHOUT, TextPackName::Text, STR_CATCH_LOW_SNEAK, "$pname" + Obsolete::GetPlayerName(cr.Id));
                cr.VCLynettForgery = 3;
                return true;
            }
            else {
                cr.Experience += 2000;
                cr.VCLynettForgery = 2;
                return false; // Макклюра нет на месте
            }
        }
    }
    if (skill == SKILL_TAKE_CONT || skill == SKILL_TAKE_ALL_CONT) {
        if (cr.VCLynettForgery == 4) {
            any[] values = {cr.Id};
            Critter[] guards = map.GetCritters(CritterProperty::NpcRole, ROLE_WITNESS, CritterFindType::AliveNpc);
            for (uint i = 0; i < guards.length(); i++) {
                Critter guard = guards[i];
                if (Entrance::IsCritterInDeadZone(guard, map, 0, HEX_FORG_FIRST, HEX_FORG_LAST)) {
                    values.insertLast(guard.Id);
                }
            }
            if (values.length() > 1) {
                if (valid(npc) || npc.IsAlive()) {
                    values.insertFirst(npc.Id);
                }
                Game.SavedDeferredCall(3000, Answer, values);
                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_PLAYER);
            }
            else {
                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_NO_WITNESS);
                return true;
            }
        }
    }
    return false;
}

void Answer(any[] values)
{
    if (values.length() > 2) {
        Critter mcClure = Game.GetCritter(values[0]);
        for (uint i = 2, l = values.length(); i < l; i++) {
            Critter guard = Game.GetCritter(values[i]);
            if (valid(guard)) {
                guard.SayMsg(SAY_NORM, TextPackName::Text, STR_GUARDS);
            }
        }
        if (valid(mcClure)) {
            mcClure.SayMsg(SAY_NORM, TextPackName::Text, STR_MCCLURE);
        }
        Critter player = Game.GetCritter(values[1]);
        if (valid(player) && player.VCLynettForgery == 4) {
            player.VCLynettForgery = 5;
            player.Experience += 2500;
        }
    }
}
// Появление гвардейцев на входе к Макклюру. Гвардейцы будут ждать игрока не более суток, потом будут удалены.
void r_AddGuards(Critter cr, Critter npc)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_SPAWN_GUARD);
    if (entries.isEmpty()) {
        return;
    }

    int[] props = {CritterProperty::DialogId,
                   Content::Dialog::vc_guard_witness.hash,
                   CritterProperty::AiId,
                   Fallout2AIPackets::VaultGuard,
                   CritterProperty::BagId,
                   Bags::VaultCityGuard,
                   CritterProperty::TeamId,
                   Teams::Guard,
                   CritterProperty::NpcRole,
                   ROLE_WITNESS,
                   CritterProperty::Level,
                   20};
    for (uint i = 0; i < entries.length(); i++) {
        Critter guard = map.AddNpc(Content::Critter::VCGuardsman, entries[i].HexX, entries[i].HexY, 3, Tla::GetCritPropsDict(props));
        if (valid(guard)) {
            guard.AddTimeEvent(cte_DeleteGuard, 60 * 60 * 24, CTE_DELETE);
        }
    }
}

uint cte_DeleteGuard(Critter cr, any identifier, uint& stage)
{
    Game.DeleteCritter(cr);
    return 0;
}

// Смена домашней позиции у гвардейцев
void r_MoveInto(Critter cr, Critter npc)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    Critter[] guards = map.GetCritters(CritterProperty::NpcRole, ROLE_WITNESS, CritterFindType::AliveNpc);
    Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_MOVETO);
    for (uint i = 0; i < guards.length() && i < entries.length(); i++) {
        Critter guard = guards[i];
        guard.HomeMapId = map.Id;
        guard.HomeHexX = entries[i].HexX;
        guard.HomeHexY = entries[i].HexY;
        guard.HomeDir = 0;
    }
}
