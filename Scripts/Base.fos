// FOS Server Sort 2

///@ Property Game PrivateServer ident BaseSierraRule
///@ Property Game PrivateServer ident BaseMariposaRule
///@ Property Game PrivateServer ident BaseCathedralRule

///@ Property Game PrivateServer uint8 BaseSierraOrg          Max = 2
///@ Property Game PrivateServer uint8 BaseMariposaOrg        Max = 2
///@ Property Game PrivateServer uint8 BaseCathedralOrg       Max = 2

///@ Property Game PrivateServer ident BaseSierraTimeEventId
///@ Property Game PrivateServer ident BaseMariposaTimeEventId
///@ Property Game PrivateServer ident BaseCathedralTimeEventId

///@ Property Game PrivateServer uint  BaseEnclaveScore
///@ Property Game PrivateServer uint  BaseBosScore

#define SIERRA_BASE       (0)
#define MARIPOSA_BASE     (1)
#define CATHEDRAL_BASE    (2)
#define MAX_BASES         (3)

#define ORG_ENCLAVE       (1)
#define ORG_BOS           (2)

#define BASE_REFRESH_TIME (REAL_MINUTE(Game.Random(25, 35))) // 25-35 real minutes
#define CAR_WAIT_TIME     (60 * 60)                          // 1 game hour

#define ENTRY_SUPPLY_CAR  (50)

const hstring[] CarMaps = {Content::Map::sad_enter, Content::Map::mariposa_enter, Content::Map::cath_enter};
const hstring[] TerminalMaps = {Content::Map::sad_level4, Content::Map::mariposa_level4, Content::Map::cath_level3};
const GameProperty[] GvarRule = {GameProperty::BaseSierraRule, GameProperty::BaseMariposaRule, GameProperty::BaseCathedralRule};
const GameProperty[] GvarOrg = {GameProperty::BaseSierraOrg, GameProperty::BaseMariposaOrg, GameProperty::BaseCathedralOrg};
const GameProperty[] GvarTimeEvent = {GameProperty::BaseSierraTimeEventId, GameProperty::BaseMariposaTimeEventId, GameProperty::BaseCathedralTimeEventId};
const int[] ScoreCur = {EScores::SierraCur, EScores::MariposaCur, EScores::CathedralCur};
const int[] ScoreBest = {EScores::SierraBest, EScores::MariposaBest, EScores::CathedralBest};
const int[] ScoreOrg = {EScores::SierraOrg, EScores::MariposaOrg, EScores::CathedralOrg};

void BaseRefresh(any value)
{
    RefreshBase(value);
}

void RefreshBase(int base)
{
    if (base >= MAX_BASES) {
        return;
    }

    Game.SetAsAny(GvarTimeEvent[base], 0);

    any varRule = Game.GetAsAny(GvarRule[base]);
    if (varRule == 0) {
        return;
    }

    uint varOrg = Game.GetAsInt(GvarOrg[base]);
    if (varOrg == 0) {
        return;
    }

    Map map = Game.GetMapByPid(CarMaps[base], 0);
    if (not valid(map)) {
        return;
    }

    CreateSupplyCar(map, base, varRule, varOrg);

    Critter player = Game.GetCritter(varRule);
    if (valid(player) && player.IsOwnedByPlayer()) {
        Scores::AddScore(player, ScoreBest[base], 1);
    }

    if (varOrg == ORG_ENCLAVE) {
        Game.BaseEnclaveScore += 1;
    }
    else if (varOrg == ORG_BOS) {
        Game.BaseBosScore += 1;
    }

    if (Game.BaseEnclaveScore > Game.BaseBosScore) {
        Scores::SetBestScore(EScores::BaseBestOrg, "Enclave");
    }
    else if (Game.BaseEnclaveScore < Game.BaseBosScore) {
        Scores::SetBestScore(EScores::BaseBestOrg, "Br. of Steel");
    }
    else {
        Scores::SetBestScore(EScores::BaseBestOrg, "<draw>");
    }
}

void CreateSupplyCar(Map map, int base, ident playerId, int org)
{
    Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_SUPPLY_CAR);
    hstring carPid = (org == ORG_BOS ? Content::Item::hummer : Content::Item::scout);

    uint16 hx, hy;
    for (int i = 0, j = entries.length(); i <= j; i++) {
        if (i == j) {
            return;
        }

        Entrance::Entry ent = entries[i];
        if (map.CheckPlaceForItem(ent.HexX, ent.HexY, carPid)) {
            hx = ent.HexX;
            hy = ent.HexY;
            break;
        }
    }

    Item car = map.AddItem(hx, hy, carPid, 1);
    if (not valid(car)) {
        return;
    }
    car.LockerId = 1;
    car.Charge = Game.Random(0, car.Car_TankVolume);
    car.Deterioration = Game.Random(0, car.Car_MaxDeterioration);

    Item bag; // = car.GetChild( 0 );
    if (valid(bag)) {
        bag.LockerId = (org == ORG_ENCLAVE ? _CritFingersDoorId(playerId) : _CritEyesDoorId(playerId));
        bag.LockerComplexity = Game.Random(100, 200);

        if (org == ORG_ENCLAVE) {
            if (Game.Random(1, 200) == 1) {
                bag.AddItem(Content::Item::advanced_power_armor, 1, 0);
            }
            if (Game.Random(1, 250) == 1) {
                bag.AddItem(Content::Item::advanced_power_armor_mk2, 1, 0);
            }
        }
        else {
            if (Game.Random(1, 60) == 1) {
                bag.AddItem(Content::Item::powered_armor, 1, 0);
            }
            if (Game.Random(1, 80) == 1) {
                bag.AddItem(Content::Item::hardened_power_armor, 1, 0);
            }
        }

        bag.AddItem(Content::Item::bottle_caps, Game.Random(100, 1000), 0);
        FillBag(bag, PidsGroups::Pids_Ammo, 40, 80, 80);
        FillBag(bag, PidsGroups::Pids_AmmoOther, 1, 5, 40);

        FillBag(bag, PidsGroups::Pids_WeaponPistols, 1, 2, 40);
        FillBag(bag, PidsGroups::Pids_WeaponRifles, 1, 1, 10);
        FillBag(bag, PidsGroups::Pids_WeaponShotguns, 1, 1, 20);
        FillBag(bag, PidsGroups::Pids_WeaponPistolMachineGun, 1, 1, 20);
        FillBag(bag, PidsGroups::Pids_WeaponBigGuns, 1, 1, 10);
        FillBag(bag, PidsGroups::Pids_WeaponLaser, 1, 1, 5);
        FillBag(bag, PidsGroups::Pids_WeaponPlasma, 1, 1, 5);
        FillBag(bag, PidsGroups::Pids_WeaponPulse, 1, 1, 5);
        FillBag(bag, PidsGroups::Pids_WeaponGrenade, 2, 5, 80);
        FillBag(bag, PidsGroups::Pids_WeaponThrowingOther, 10, 30, 100);
        FillBag(bag, PidsGroups::Pids_WeaponCutting, 1, 2, 80);
        FillBag(bag, PidsGroups::Pids_WeaponShock, 1, 2, 80);
        FillBag(bag, PidsGroups::Pids_WeaponElectric, 1, 2, 80);
        FillBag(bag, PidsGroups::Pids_WeaponUnarmed, 1, 2, 80);

        FillBag(bag, PidsGroups::Pids_ArmorLight, 1, 2, 40);
        FillBag(bag, PidsGroups::Pids_ArmorMedium, 1, 1, 20);

        FillBag(bag, PidsGroups::Pids_DrugsPreparations, 1, 5, 60);
        FillBag(bag, PidsGroups::Pids_DrugsAlcohol, 1, 3, 50);
        FillBag(bag, PidsGroups::Pids_Drugs, 1, 3, 60);
        FillBag(bag, PidsGroups::Pids_DrugsOther, 1, 2, 50);

        FillBag(bag, PidsGroups::Pids_MiscExplosions, 1, 1, 50);

        FillBag(bag, PidsGroups::Pids_MiscPartsBasic, 1, 5, 70);
        FillBag(bag, PidsGroups::Pids_MiscPartsSelfSpecial, 1, 1, 20);
        FillBag(bag, PidsGroups::Pids_MiscPartsSpecial, 1, 1, 10);
        FillBag(bag, PidsGroups::Pids_MiscPartsBody, 1, 1, 5);

        FillBag(bag, PidsGroups::Pids_MiscToolsTech, 1, 1, 30);
        FillBag(bag, PidsGroups::Pids_MiscToolsMediacal, 1, 1, 80);
        FillBag(bag, PidsGroups::Pids_MiscToolsOther, 1, 1, 80);
        FillBag(bag, PidsGroups::Pids_MiscToolsSpecial, 1, 1, 50);
        FillBag(bag, PidsGroups::Pids_MiscOther, 1, 1, 70);

        // Activate militia on Cathedral
        if (base == CATHEDRAL_BASE) {
            Critter[] npcCritters = map.GetCritters(CritterFindType::AlivePlayers);
            Critter[] playerCritters = map.GetCritters(CritterFindType::AliveNpc);
            if (!npcCritters.isEmpty() && !playerCritters.isEmpty()) {
                for (uint i = 0; i < npcCritters.length(); i++) {
                    Critter npc = npcCritters[i];
                    for (uint j = 0; j < playerCritters.length(); j++) {
                        NpcPlanes::AddAttackPlane(npc, 0, playerCritters[j]);
                    }
                }
            }
        }
    }

    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(CAR_WAIT_TIME), DeleteCar, car.Id);
}

void FillBag(Item bag, hstring[] pids, uint min, uint max, int chance)
{
    if (chance >= Game.Random(1, 100)) {
        bag.AddItem(pids[Game.Random(0, pids.length() - 1)], Game.Random(min, max), 0);
    }
}

void DeleteCar(any value)
{
    Item car = Game.GetItem(value);
    if (valid(car)) {
        Game.DeleteItem(car);
    }
}

bool s_Terminal(Critter player, StaticItem terminal, Item item, int skill)
{
    if (player.IsOwnedByPlayer() && skill == SKILL_PICK_ON_GROUND && not valid(item)) {
        Game.RunDialog(player, Content::Dialog::base_terminal, terminal.HexX, terminal.HexY, false);
    }
    return true;
}

void r_BaseToEnclave(Critter player, Critter terminal, int val)
{
    BaseTo(player, ORG_ENCLAVE);
}

void r_BaseToBos(Critter player, Critter terminal, int val)
{
    BaseTo(player, ORG_BOS);
}

void BaseTo(Critter player, int org)
{
    int base = GetBaseByMap(player.GetMap());
    if (base == -1) {
        return;
    }

    Game.SetAsAny(GvarRule[base], player.Id);
    Game.SetAsInt(GvarOrg[base], org);
    Scores::SetBestScore(ScoreCur[base], player.Name);
    Scores::SetBestScore(ScoreOrg[base], org == ORG_ENCLAVE ? "Enclave" : "Br. of Steel");

    // Delete old
    if (Game.GetAsAny(GvarTimeEvent[base]) != 0) {
        Game.CancelDeferredCall(Game.GetAsAny(GvarTimeEvent[base]));
        Game.SetAsAny(GvarTimeEvent[base], 0);
    }

    // Create new
    ident cteId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(BASE_REFRESH_TIME), BaseRefresh, base);
    Game.SetAsAny(GvarTimeEvent[base], cteId);
}

int GetBaseByMap(Map map)
{
    if (not valid(map)) {
        return -1;
    }
    hstring mapPid = map.ProtoId;
    for (int i = 0, j = TerminalMaps.length(); i < j; i++) {
        if (TerminalMaps[i] == mapPid) {
            return i;
        }
    }
    return -1;
}

bool d_CheckTerminalLock(Critter player, Critter terminal, int val)
{
    return true;
}
