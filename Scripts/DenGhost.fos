// FOS Server Sort 2
// Author: marvi

///@ Property Game PrivateServer bool DenGhostIsDead

// dialog string numbers
#define STRNUM_SCREAM       (1)
#define STRNUM_STEAL        (2)
#define STRNUM_STEAL_INJURE (3)

/*
   Critter initialization
 */
void _GhostInit(Critter ghost, bool firstTime)
{
    if (firstTime) {
        // set max possible HP
        ghost.MaxLifeBase = 9999;
        ghost.CurrentHp = 9999;
        // and armor class
        ghost.ArmorClassBase = 90;
    }

    // syncronize ghost actual state with var value
    if (ghost.Cond == CritterCondition::Dead && !Game.DenGhostIsDead) {
        CritterState::ToAlive(ghost);
    }
    else if (ghost.Cond != CritterCondition::Dead && Game.DenGhostIsDead) {
        CritterState::ToDead(ghost, CritterActionAnim::DeadBurnRun, null);
    }

    ghost.OnAttacked.Subscribe(_GhostAttacked);
    ghost.OnDead.Subscribe(_GhostDead);
    ghost.OnRespawn.Subscribe(_GhostRespawn);
    ghost.OnStealing.Subscribe(_GhostStealing);
}

//
// Event Handlers
//

bool _GhostAttacked(Critter ghost, Critter attacker)
{
    // regenerate HP
    ghost.CurrentHp = ghost.MaxLife;

    // scream to scary player
    ghost.SayMsg(SAY_SHOUT_ON_HEAD, TEXTMSG_DLG, DLGSTR(Content::Dialog::den_ghost, STRNUM_SCREAM));

    // do nothing after attack
    return true;
}

void _GhostDead(Critter ghost, Critter killeer)
{
    // ghost killed not through quest dialog
    if (!Game.DenGhostIsDead) {
        // ressurect ghost
        Game.DeferredCall(GAME_SECOND_TO_TICK(60), RessurectGhost, ghost.Id);
    }
}

void _GhostRespawn(Critter ghost)
{
    Game.DenGhostIsDead = false;
}

/*
   Handles stealing from ghost.
   Stealing attempt fails in any case with a chance for player to cripple right hand.
 */
void _GhostStealing(Critter ghost, Critter thief, Item item, uint count)
{
    if (thief.IsOwnedByPlayer()) {
        int injureHandChance = 20;
        int injureHandRoll = Game.Random(1, 100);

        if (injureHandRoll <= injureHandChance) {
            thief.IsDamagedRightArm = true;
            thief.SayMsg(SAY_NETMSG, TEXTMSG_DLG, DLGSTR(Content::Dialog::den_ghost, STRNUM_STEAL_INJURE));
        }
        else {
            thief.SayMsg(SAY_NETMSG, TEXTMSG_DLG, DLGSTR(Content::Dialog::den_ghost, STRNUM_STEAL));
        }
    }
}

//
// Dialog
//

/*
   Instantly kills ghost
 */
void r_KillGhost(Critter player, Critter ghost, int val)
{
    // confirm that ghost killed through quest dialog
    Game.DenGhostIsDead = true;
    // kill ghost
    CritterState::ToDead(ghost, CritterActionAnim::DeadBurnRun, null);
    // run new dialog through time event
    Game.DeferredCall(GAME_SECOND_TO_TICK(60), RunTreasureDialog, player.Id);
}

//
// Time Event Handlers
//

/*
   Ressurects ghost
 */
void RessurectGhost(any value)
{
    Critter ghost = Game.GetCritter(value);
    if (!valid(ghost)) {
        return;
    }

    // try to ressurect ghost
    if (CritterState::ToAlive(ghost)) {
        return;
    }
    else {
        Game.DeferredCall(GAME_SECOND_TO_TICK(2 * 60), RessurectGhost, value);
    }
}

/*
   Runs dialog about cursed treasure
 */
void RunTreasureDialog(any value)
{
    Critter player = Game.GetCritter(value);
    if (!valid(player)) {
        return;
    }

    Game.RunDialog(player, Content::Dialog::den_ghost_treasure, player.HexX, player.HexY, false);
}
