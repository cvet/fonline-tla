// FOS Server Sort 2
// Author: rifleman17
// Скрипт для реализации квестов, целью которых является зачистка некоей локации от мобов
// Особенности:
//   - локация видна одному игроку
//   - если игрок убит, локация не исчезает
//   - если погибли все мобы, локация удаляется, переключается квестовая переменная "выполнено"
//   - на карте может быть несколько нпц-союзников, ведется отсчет погибших, может использоваться в квесте
//   - если игрок погиб, союзники сбрасывают планы атаки "Отступаем! Смена позиции" и уходят на исходную позицию
//   - противники и союзники ставятся на карте маппером, не скриптом, у них указывается соответствующий NPC_ROLE
//   - противникам и союзникам присваевается свой скрипт
//   - все параметры локации и карт прописываются в Maps.cfg, Locations.cfg
//   - все поля и свойства квеста сериализуются
//   - при атаке игроком мобов, защитники присоединяются, если даже игрок с ними не поговорил
//   - удаление локации контролируется таймаутом, при создании карты добавляется таймевент. Через два реальных дня локация будет удалена, статус квестовой
//   переменной будет переключен.
//   - внимание! для всех карт в локации устанавливается специфический скрипт
//   - для каждой карты в локации заняты Map::HostileLQPlayerId - код игрока, выполняющего квест; и Map::HostileLQVarNum - номер квестовой переменной. Чтобы в
//   контексте карты иметь доступ к описанию квеста.
// TODO:
//   - изменить на групповой квест
//   - обработать убийство игроком союзников после того, как задача квеста выполнена
//   - изменть реализацию поведения криттеров, чтобы они допускали использование своих скриптов

///@ Property Critter PrivateServer bool HostileLQIsStoped
///@ Property Critter PrivateServer uint=>uint8[] HostileLQData
///@ Property Map PrivateServer ident HostileLQPlayerId
///@ Property Map PrivateServer uint HostileLQVarNum

#define NPC_ROLE_HOSTILE       (400)
#define NPC_ROLE_ALLY          (401)
#define QUEST_ACTIVE           (1) // Квест получен
#define QUEST_FAIL_LOC_DELETED (2) // Квест провален, удалена локация - истекло время на квест.
#define QUEST_COMPLETE         (3) // Квест выполнен, все враждебные нпц уничтожены, локация удалена.
#define TIME_RESET             (REAL_DAY(2)) // Время автоматического удаления локации и приведения квестовой переменной в состояние QUEST_FAIL_LOC_DELETED
#define MSG_KILL_EM            (144)

#define _GetPlayerId           #(map)(map.HostileLQPlayerId)
#define _GetVarNum             #(map)(map.HostileLQVarNum)
#define _SetPlayerId           #(map, crId)(map.HostileLQPlayerId = crId)
#define _SetVarNum             #(map, varNum)(map.HostileLQVarNum = varNum)
#define _InfoFromMap           #(map)(HostileLocationInfo(_GetPlayerId(map), _GetVarNum(map)))
#define _InfoFromCr            #(cr)(valid(cr.GetMap()) ? HostileLocationInfo(_GetPlayerId(cr.GetMap()), _GetVarNum(cr.GetMap())) : null)

// #define DL #(s) (Game.Log(s))
#define DL #(s)

class HostileLocationInfo
{
    HostileLocationInfo()
    {
        LocCreated = false;
    }

    HostileLocationInfo(ident playerId, int varNum)
    {
        LocCreated = false;
        PlayerId = playerId;
        QVarNum = varNum;
    }

    ident PlayerId; // Id игрока выполняющего квест
    uint QVarNum;   // Номер квестовой переменной, связанной с квестом
    uint CVarNum; // Номер локальной переменной для игрока - счетчика смертей союзников, если равна = 0, подсчет не происходит
    ident LocId;  // Id локации
    hstring LocPid;  // Код прототипа локации
    uint LocX;       // Положение локации на глобальной карте по оси икс
    uint LocY;       // Положение локации на глобальной карте по оси игрек
    uint CoordDelta; // Относительное смещение по координатным осям глобальной карты, на которое может быть смещена точка положения локации
    bool LocCreated; // Признак: Локация уже создана

    bool Serialized()
    {
        return Game.GetCritter(PlayerId).HostileLQData.exists(QVarNum);
    }

    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set(PlayerId);
        save.Set(QVarNum);
        save.Set(CVarNum);
        save.Set(LocId);
        save.Set(LocPid);
        save.Set(LocX);
        save.Set(LocY);
        save.Set(CoordDelta);
        save.Set(LocCreated);
        auto hostileLQData = Game.GetCritter(PlayerId).HostileLQData.clone();
        hostileLQData[QVarNum] = save.GetData();
        Game.GetCritter(PlayerId).HostileLQData = hostileLQData;
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        if (load.SetData(Game.GetCritter(PlayerId).HostileLQData.get(QVarNum, array<uint8>())) == 0) {
            return;
        }
        load.Get(PlayerId);
        load.Get(QVarNum);
        load.Get(CVarNum);
        load.Get(LocId);
        load.Get(LocPid);
        load.Get(LocX);
        load.Get(LocY);
        load.Get(CoordDelta);
        load.Get(LocCreated);
    }

    void Erase()
    {
        auto hostileLQData = Game.GetCritter(PlayerId).HostileLQData.clone();
        hostileLQData.remove(QVarNum);
        Game.GetCritter(PlayerId).HostileLQData = hostileLQData;
    }

    bool CreateHostileLocation()
    {
        if (PlayerId == ZERO_IDENT || LocCreated || LocPid == EMPTY_HSTRING) {
            return false; // Игрок неизвестен или локация создана ранее, или код прототипа неизвестен
        }

        Critter player = Game.GetCritter(PlayerId);
        if (!valid(player)) {
            return false; // Не найден игрок
        }

        Location loc =
            Game.CreateLocation(LocPid, LocX + Game.Random(-1 * int(CoordDelta), CoordDelta), LocY + Game.Random(-1 * int(CoordDelta), CoordDelta), null);
        if (loc == null) {
            return false; // Ошибка при создании локации
        }

        LocId = loc.Id;
        DL("Location created ok. LocId = " + LocId);
        LocCreated = true;

        Save();

        Location::SetKnownLoc(player, LocId);

        // Прописывание скриптов для карт локации, а также сохранение ключевой информации о квесте в Map::Data
        for (uint i = 0; i < loc.GetMapCount(); i++) {
            Map map = loc.GetMapByIndex(i);
            _SetPlayerId(map, PlayerId);
            _SetVarNum(map, QVarNum);
            map.SetupScript(_HostileMapInit);
        }

        // Событие удаления локации через какое-то время, если игрок не успел выполнить квест
        any[] values = {PlayerId, QVarNum};
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_RESET), ResetHostileLoc, values);

        // Сериализация описания квеста и локации
        Save();

        return true;
    }

    uint CollectCritters(Critter[] critters, bool ally, CritterFindType findType)
    {
        uint len = critters.length(); // Первоначальная длина массива

        if (LocId == ZERO_IDENT) {
            return 0;
        }

        DL("Locvald? LocId" + LocId);
        Location loc = Game.GetLocation(LocId);
        if (!valid(loc)) {
            return 0;
        }

        for (uint i = 0; i < loc.GetMapCount(); i++) {
            DL("Map#" + i);
            Map map = loc.GetMapByIndex(i);
            Critter[] crits = map.GetCritters(CritterProperty::NpcRole, ally ? NPC_ROLE_ALLY : NPC_ROLE_HOSTILE, findType);
            for (uint j = 0; j < crits.length(); j++) {
                DL("j =" + j);
                critters.insertLast(crits[j]);
            }
        }

        DL("array length" + (critters.length() - len));
        return critters.length() - len;
    }

    uint DeadPercent(bool ally)
    {
        Critter[] critters = {};
        uint all = CollectCritters(critters, ally, CritterFindType::Npc);
        uint dead = CollectCritters(critters, ally, CritterFindType::DeadNpc);
        DL("perce" + (dead == 0 ? 0 : uint(100 * dead / all)) + "dead:" + dead + "; all:" + all);
        return (dead == 0 ? 0 : uint(100 * dead / all));
    }

    void ResetQuest()
    {
        Critter player = Game.GetCritter(PlayerId);
        if (valid(player)) {
            player.SetAsInt(CritterProperty(QVarNum), QUEST_FAIL_LOC_DELETED);

            if (CVarNum != 0) { // Сброс счетчика, если назначен
                player.SetAsInt(CritterProperty(CVarNum), 0);
            }
        }
        Location loc = Game.GetLocation(LocId);
        if (valid(loc)) {
            loc.AutoGarbage = true;
        }
        Erase();
    }

    void CompleteQuest()
    {
        DL("complete quest called");
        Critter player = Game.GetCritter(PlayerId);
        if (valid(player)) {
            player.SetAsInt(CritterProperty(QVarNum), QUEST_COMPLETE);
            DL("counter quest called");
            if (CVarNum != 0 && player.GetAsInt(CritterProperty(CVarNum)) == 0) // Установка счетчика, если назначен
            {
                Critter[] critters = {};
                uint count = CollectCritters(critters, true, CritterFindType::DeadNpc);
                player.SetAsInt(CritterProperty(CVarNum), count);
            }
        }
        Location loc = Game.GetLocation(LocId);
        if (valid(loc)) {
            loc.AutoGarbage = true;
        }
        Critter[] critters = {};
        CollectCritters(critters, true, CritterFindType::Npc);
        CollectCritters(critters, false, CritterFindType::Npc);
        for (uint i = 0, l = critters.length(); i < l; i++) {
            critters[i].SetupScript(null);
        }
        Erase();
    }
};

void ResetHostileLoc(any[] values) // Очистка
{
    HostileLocationInfo info = HostileLocationInfo(values[0], values[1]);
    if (valid(info) && info.Serialized()) {
        info.Load();
        info.ResetQuest();
    }
}

void _HostileMapInit(Map map, bool firstTime)
{
    DL("map init. Pid:" + map.ProtoId);
    map.OnCritterDead.Subscribe(_HostileMapCritterDead);
    map.OnCritterIn.Subscribe(_HostileMapInCritter);
    HostileLocationInfo info = _InfoFromMap(map);
    if (!valid(info) || !info.Serialized()) {
        return;
    }
    info.Load();
    Critter[] allies = {};
    if (info.CollectCritters(allies, true, CritterFindType::AliveNpc) > 0) {
        for (uint i = 0, l = allies.length(); i < l; i++) {
            DL("Ally script set");
            allies[i].SetupScript(_AllyInit);
        }
    }
    Critter[] hostiles = {};
    if (info.CollectCritters(hostiles, false, CritterFindType::AliveNpc) > 0) {
        for (uint i = 0, l = hostiles.length(); i < l; i++) {
            hostiles[i].SetupScript(_HostileInit);
        }
    }
}

void _HostileMapInCritter(Map map, Critter cr)
{
}

void _HostileMapCritterDead(Map map, Critter cr, Critter killer)
{
    HostileLocationInfo info = _InfoFromMap(map);
    if (!valid(info) || !info.Serialized()) {
        return;
    }
    info.Load();
    Critter[] hostiles = {};
    if (info.CollectCritters(hostiles, false, CritterFindType::AliveNpc) == 0) // Все мобы мертвы
    {
        DL("completed");
        info.CompleteQuest();
        map.SetupScript(null);
        map.OnCritterDead.Unsubscribe(_HostileMapCritterDead);
        map.OnCritterIn.Unsubscribe(_HostileMapInCritter);
        return;
    }
    if (cr.IsOwnedByPlayer() && cr.Id == info.PlayerId) // Убит игрок. Союзники возвращаются на домашнюю позицию.
    {
        for (uint i = 0, l = hostiles.length(); i < l; i++) {
            NpcPlanes::DropPlanes(hostiles[i]);
        }
        Critter[] allies = {};
        if (info.CollectCritters(allies, true, CritterFindType::AliveNpc) > 0) {
            for (uint i = 0, l = allies.length(); i < l; i++) {
                if (valid(allies[i])) {
                    SendAllyHome(allies[i]);
                }
            }
        }
    }
}

// Скрипты союзника
void _AllyInit(Critter cr, bool firstTime)
{
    DL("Ally init");
    cr.HostileLQIsStoped = true;
    cr.IsNoHome = false;
    cr.OnIdle.Subscribe(_AllyIdle);
    cr.OnSomeCritterAttacked.Subscribe(_AllySmthAttacked);
    cr.OnCritterAppeared.Subscribe(_AllyShowCritter);
}

void _AllyIdle(Critter cr)
{
    if (cr.HostileLQIsStoped || !valid(cr.GetMap())) {
        return;
    }
    HostileLocationInfo info = _InfoFromCr(cr);
    if (!valid(info) || !info.Serialized()) {
        return;
    }
    info.Load();
    Critter player = Game.GetCritter(info.PlayerId);
    if (!valid(player)) {
        SendAllyHome(cr);
        return;
    }
    Map map = player.GetMap();
    if (!valid(map)) {
        SendAllyHome(cr);
        return;
    }
    Location loc = map.GetLocation();
    if (!valid(loc) || loc.Id != info.LocId) {
        SendAllyHome(cr);
        return;
    }
    if (map.Id == cr.GetMap().Id) {
        if (Game.GetDistance(cr, player) > 20) {
            NpcPlanes::AddWalkPlane(cr, 0, player.HexX, player.HexY, Game.Random(0, 5), true, 3);
        }
    }
    else {
        uint16 hX = player.HexX;
        uint16 hY = player.HexY;
        if (Caravan::GetFreeHex(map, 4, hX, hY)) {
            Obsolete::CritterTransitToMapCoords(cr, map.Id, hX, hY, Game.Random(0, 5));
        }
    }
}

void SendAllyHome(Critter cr)
{
    NpcPlanes::DropPlanes(cr);
    cr.HostileLQIsStoped = true;
    cr.IsNoHome = false;
    Obsolete::CritterTransitToMapCoords(cr, cr.HomeMapId, cr.HomeHexX, cr.HomeHexY, cr.HomeDir);
}

void _AllySmthAttacked(Critter cr, Critter fromCr, Critter attacker)
{
    if (cr.HostileLQIsStoped) {
        return;
    }
}

void _AllyShowCritter(Critter cr, Critter showCrit)
{
    DL("Show critter");
    HostileLocationInfo info = _InfoFromCr(cr);
    if (!valid(info) && !info.Serialized()) {
        return;
    }
    info.Load();
    DL("Info loaded");
    if (cr.HostileLQIsStoped) {
        if (showCrit.IsOwnedByPlayer() && showCrit.Id == info.PlayerId) {
            DL("Player remembered");
            cr.HostileLQIsStoped = false;
            cr.IsNoHome = true;
        }
        else {
            return;
        }
    }
}

// Диалоги с союзниками
// val = 1, следовать, val = 0, стоять на месте
void r_SetFollow(Critter player, Critter npc, int val)
{
    if (valid(npc)) {
        npc.HostileLQIsStoped = (val == 0);
        npc.IsNoHome = val != 0;
    }
}

// Скрипты противника
void _HostileInit(Critter cr, bool firstTime)
{
    cr.OnIdle.Subscribe(_AllyIdle);
    cr.OnAttacked.Subscribe(_HostileAttacked);
    cr.OnCritterAppearedDist1.Subscribe(_HostileShowCritter);
    cr.OnDead.Subscribe(_HostileDead);
    cr.OnMessage.Subscribe(_HostileMessage);
    cr.ShowCritterDist1 = 10;
}

void _HostileMessage(Critter cr, Critter fromCr, int message, any value)
{
    if (message == MSG_KILL_EM && fromCr.NpcRole == cr.NpcRole) {
        NpcPlanes::AddAttackPlane(cr, 0, value);
    }
}

void _HostileShowCritter(Critter cr, Critter showCrit)
{
    if (showCrit.IsOwnedByPlayer() || showCrit.NpcRole == NPC_ROLE_ALLY) {
        NpcPlanes::AddAttackPlane(cr, 0, showCrit.Id);
    }
}

bool _HostileAttacked(Critter cr, Critter attacker)
{
    if (attacker.IsOwnedByPlayer() || attacker.NpcRole == NPC_ROLE_ALLY) {
        SendMessage::ToWhoSeesMe(cr, MSG_KILL_EM, attacker.Id);
    }
    return false;
}

void _HostileDead(Critter cr, Critter killer)
{
    bool toAll = false;
    HostileLocationInfo info = _InfoFromCr(cr);
    if (valid(info) && info.Serialized()) {
        info.Load();
        if (info.DeadPercent(false) > 20) {
            toAll = true;
        }
    }
    if (valid(killer)) {
        if (toAll) {
            SendMessage::ToAllOnMap(cr, MSG_KILL_EM, killer.Id);
        }
        else {
            SendMessage::ToWhoSeesMe(cr, MSG_KILL_EM, killer.Id);
        }
    }
}

// Диалог
void r_ShowLocation(Critter player, Critter npc, int qVar, int counterVar, int locPidHash, int locX, int locY)
{
    HostileLocationInfo info = HostileLocationInfo(player.Id, qVar);
    if (!valid(info)) {
        return;
    }

    info.CVarNum = counterVar;
    info.LocPid = hstring_fromHash(locPidHash);
    info.LocX = locX;
    info.LocY = locY;
    info.CoordDelta = 0;
    info.Save();
    info.CreateHostileLocation();
}

// То же, но с рандомным смещением в пределах одной координатной зоны
void r_ShowLocation2(Critter player, Critter npc, int qVar, int counterVar, int locPidHash, int locX, int locY)
{
    HostileLocationInfo info = HostileLocationInfo(player.Id, qVar);
    if (!valid(info)) {
        return;
    }

    info.CVarNum = counterVar;
    info.LocPid = hstring_fromHash(locPidHash);
    info.LocX = locX;
    info.LocY = locY;
    info.CoordDelta = Settings.GlobalMapZoneLength;
    info.Save();
    info.CreateHostileLocation();
}
