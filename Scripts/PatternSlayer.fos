// FOS Server Sort 2

/*
   Рукопашник/боец с холоднмы оружием

   PE_BETTER_CRITICALS
   PE_SILENT_DEATH
   PE_SILENT_RUNNING
   PE_SLAYER

   ---------------------------|-------------|-------------|-------------|-------------|
   Уровень         0          |  1          |  2          |  3          |  4          |
   ---------------------------|-------------|-------------|-------------|-------------|
   ХО/РБ           120..150   |  150..180   |  160..200   |  200..250   |  240..300   |
   Скрытность      150..200   |  200..240   |  220..260   |  220..290   |  250..300   |
   MeleeDmg        8          |  12         |  16         |  22         |  25         |
   HP              120        |  150        |  190        |  220        |  260        |
   Resist          30..50     |  40..55     |  40..60     |  50..60     |  50..80     |
   AP              10         |  12         |  16         |  20         |  22         |
   ---------------------------|-------------|-------------|-------------|-------------|
*/

// clang-format off

const int[] slayerStats_ =
{
//  MeleeMin,    MeleeMax,   SnMin,   SnMax,   MDmg,   HP,    ResMin,   ResMax, AP
    160,         190,        190,     220,     12,     220,   30,       40,     10,
    180,         200,        200,     240,     14,     250,   40,       55,     12,
    190,         220,        220,     260,     16,     290,   40,       60,     13,
    200,         250,        220,     290,     22,     320,   45,       60,     15,
    240,         300,        250,     300,     25,     360,   45,       80,     18
};

// clang-format on

#define LvlCount           (5)
#define ColumnsCount(9)    // Индекс первой колонки=0
#define _SlayerCell        #(lvl, column)(slayerStats_[(lvl <LvlCount ? lvl : 0) * ColumnsCount +(column <ColumnsCount ? column : 0)])
#define _SlayerMeleeSkill  #(lvl)(Game.Random(_SlayerCell(lvl, 0), _SlayerCell(lvl, 1)))
#define _SlayerSneakSkill  #(lvl)(Game.Random(_SlayerCell(lvl, 2), _SlayerCell(lvl, 3)))
#define _SlayerMeleeDamage #(lvl)(_SlayerCell(lvl, 4))
#define _SlayerHP          #(lvl)(_SlayerCell(lvl, 5))
#define _SlayerResist      #(lvl)(Game.Random(_SlayerCell(lvl, 6), _SlayerCell(lvl, 7)))
#define _SlayerAP          #(lvl)(_SlayerCell(lvl, 8))
#define ATTACK_DIST        (10)

void _CritterInit(Critter cr, bool firstTime)
{
    pattern.SetEvents(cr);
}

class SlayerPattern : PatternCommon::CommonPattern
{
    // При начале любого плана нпц уходит в бег, если нет таймаута битвы
    // Также включает сник, если позволяет таймаут сника
    bool _PlaneBegin(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
    {
        NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

        _SetRun(plane, cr);
        _SetSneak(cr);

        if (plane.Type == AI_PLANE_ATTACK) {
            Game.DeferredCall(GAME_SECOND_TO_TICK(SNEAK_TIMEOUT(cr) - Game.GetFullSecond()), SneakWhileAttack, cr.Id);
        }

        return true;
    }

    void _SetSneak(Critter cr)
    {
        if (!IS_TIMEOUT(cr.TimeoutSneak) && !cr.IsHide) {
            cr.IsHide = true;
        }
    }

    void _SetRun(NpcPlanes::NpcPlane plane, Critter cr)
    {
        if (!IS_TIMEOUT(cr.TimeoutBattle)) {
            plane.Run = true;
        }
        else {
            plane.Run = Settings.RunOnCombat;
        }
    }

    // Если позволяет таймаут, при выполнении любого плана слеер стремится уйти в сник
    bool _PlaneRun(Critter cr, int planeId, int reason, any& result0, any& result1, any& result2)
    {
        NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

        _SetRun(plane, cr);
        _SetSneak(cr);
        return true;
    }

    void _Idle(Critter cr)
    {
        _SetSneak(cr);

        Map map = cr.GetMap();
        Critter[] critters = map.GetCritters(cr.HexX, cr.HexY, ATTACK_DIST, CritterFindType::AlivePlayers);
        for (uint i = 0; i < critters.length(); i++) {
            Critter player = critters[i];
            if (cr.IsSee(player)) {
                NpcPlanes::AddAttackPlane(cr, 0, player);
                break;
            }
        }
    }

    bool _Attack(Critter cr, Critter target)
    {
        if (target.IsNpc()) {
            return false;
        }

        NpcPlanes::NpcPlane plane = NpcPlanes::GetCurPlane(cr);
        _SetRun(plane, cr);

        if (target.IsKnockout()) {
            return false;
        }

        AbstractItem weapon = CritterItem::GetActive(cr);
        if (!valid(weapon)) {
            return false;
        }
        if (weapon.Type != ItemType::Weapon) {
            return false;
        }
        if (weapon.Weapon_Skill_0 != CritterProperty::SkillMeleeWeapons && weapon.Weapon_Skill_0 != CritterProperty::SkillUnarmed) {
            return false;
        }

        Item weaponInHands = _CritGetItemHand(cr);
        if (!valid(weaponInHands)) {
            return false;
        }

        ProtoItem ammo = Game.GetProtoItem(weaponInHands.AmmoPid);

        // Скопировано из основного обработчика
        cr.TimeoutAggressor = Game.GetFullSecond() + REAL_MINUTE(1);
        Combat::CombatAttack(cr, target, weapon, _WeaponModeMake(0, HitLocations::LocationEyes), ammo);
        return true;
    }

    void SetEvents(Critter cr)
    {
        cr.OnAttack.Subscribe(_SlayerAttack);
        cr.OnNpcPlaneRun.Subscribe(_SlayerPlaneRun);
        cr.OnNpcPlaneBegin.Subscribe(_SlayerPlaneBegin);
        cr.OnAttacked.Subscribe(_SlayerAttacked);
        cr.OnIdle.Subscribe(_SlayerIdle);
        cr.OnDead.Subscribe(_SlayerDead);
    }
}

#ifndef _NoBaseInstance
SlayerPattern pattern; // Для наследников нужно определить _NoBaseInstance
#endif

void _SlayerDead(Critter cr, Critter killer)
{
    pattern._Dead(cr, killer);
}

void _SlayerInit(Critter cr, bool firstTime)
{
    _CritterInit(cr, firstTime);
}

void SetSlayerStats(Critter cr, uint8 lvl)
{
    lvl = CLAMP(lvl, 0, LvlCount - 1);
    if (lvl < 1) {
        return;
    }
    if (lvl > 2) {
        cr.PerkBetterCriticals = 1;
    }
    cr.PerkSilentDeath = 1;
    if (lvl > 2) {
        cr.PerkSlayer = 1;
    }
    cr.PerkSilentRunning = 1;

    cr.MeleeDamageBase = _SlayerMeleeDamage(lvl);
    cr.StrengthBase = 10;
    cr.MaxLifeBase = _SlayerHP(lvl);
    cr.CurrentHp = cr.MaxLife;
    cr.ActionPointsBase = _SlayerAP(lvl);

    for (uint i = 0; i < CritterPropertyGroup::ResistsBase.length(); i++) {
        if (CritterPropertyGroup::ResistsBase[i] != CritterProperty::EmpResistanceBase) {
            cr.SetAsInt(CritterPropertyGroup::ResistsBase[i], _SlayerResist(lvl));
        }
    }

    cr.SkillMeleeWeapons = _SlayerMeleeSkill(lvl);
    cr.SkillUnarmed = _SlayerMeleeSkill(lvl);
    cr.SkillSneak = _SlayerSneakSkill(lvl);
}

// При начале любого плана нпц уходит в бег, если нет таймаута битвы
// Также включает сник, если позволяет таймаут сника
bool _SlayerPlaneBegin(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    return pattern._PlaneBegin(cr, planeId, reason, someCr, someItem);
}

// регулярные попытки уйти в сник
void SneakWhileAttack(any value)
{
    Critter cr = Game.GetCritter(value);
    if (!valid(cr)) {
        return;
    }

    pattern._SetSneak(cr);
    if (NpcPlanes::IsCurPlane(cr, AI_PLANE_ATTACK)) {
        Game.DeferredCall(GAME_SECOND_TO_TICK(SNEAK_TIMEOUT(cr) - Game.GetFullSecond()), SneakWhileAttack, value);
    }
}

// Если позволяет таймаут, при выполнении любого плана слеер стремится уйти в сник
bool _SlayerPlaneRun(Critter cr, int planeId, int reason, any& result0, any& result1, any& result2)
{
    return pattern._PlaneRun(cr, planeId, reason, result0, result1, result2);
}

// Снайпер атакован
bool _SlayerAttacked(Critter sniper, Critter attacker)
{
    return pattern._Attacked(sniper, attacker);
}

void _SlayerIdle(Critter cr)
{
    pattern._Idle(cr);
}

bool _SlayerAttack(Critter cr, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    return pattern._Attack(cr, target);
}

void testSlayer(Critter cr, int lvl, int team, int bag)
{
    // ~run PatternSlayer testSlayer 0 0 0
    // ~run test SetStat 1 72 10000
    int[] props = {CritterProperty::BagId, bag, CritterProperty::TeamId, team};
    Critter npc = cr.GetMap().AddNpc(Content::Critter::VaultCityPatrolMale, cr.HexX - 5, cr.HexY - 5, 0, Tla::GetCritPropsDict(props));
    npc.SetupScript(_CritterInit);
    SetSlayerStats(npc, lvl);
}
