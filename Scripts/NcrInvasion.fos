// FOS Server Sort 2

///@ Property Critter Protected uint8 QNcrElizeInvasion Group = Quests Quest = 4265 Max = 4
///@ Property Game PrivateServer bool NCRInvasion

#define NPC_ROLE_RAIDER     (17) // роль рядового рейдера

#define GANG_SIZE           (6) // размер одной банды

#define ENTRY_HEX_NUM       (111) // номер гекса на котором появляются рейдеры

#define STR_SHOUT_RAIDERS   (2950) // номер cстроки, которое периодически выкрикивают рейдеры
#define STR_ELIZE_RADIO     (2951) // номер строки из fotext которое отправляется по радио в начале нападения

#define MSG_ATTACK          (6) // сообщение "атаковать цель"
#define MSG_RAIDER_KILLED   (7) // сообщение "нашего убили"

#define ENEMY_SEARCH_RAD    (35) // радиуск поиска врагов в гексах

#define NEXT_INVASION       (REAL_DAY(5)) // время следующего нападения (через 5 дней)

#define TIME_TO_DELETE_DEAD (REAL_HOUR(1)) // трупы удаляются через час

// локаций лагерей нападающих
hstring[] LocPids = {Content::Location::ncr_siege_1,
                     Content::Location::ncr_siege_2,
                     Content::Location::ncr_siege_3,
                     Content::Location::ncr_siege_4,
                     Content::Location::ncr_siege_5};

void DefineInvasionEvent()
{
    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(NEXT_INVASION), BeginInvasion);
}

void BeginInvasion()
{
    // откладываем выполнение на следующий день
    if (Game.NCRInvasion) {
        Game.SavedDeferredCall(GAME_DAY_TO_TICK(1), BeginInvasion);
        return;
    }

    if (Game.NCRSiegeCampsNum == 0) {
        return;
    }

    Location ncr = Game.GetLocationByPid(Content::Location::ncr);
    if (!valid(ncr)) {
        return;
    }

    Location[] locations = Game.GetLocations(ncr.WorldX, ncr.WorldY, Settings.GlobalMapZoneLength * 2);
    if (locations.length() == 0) {
        return;
    }

    Map bazaar = ncr.GetMap(Content::Map::ncr_bazaar);
    if (!valid(bazaar)) {
        return;
    }

    for (uint i = 0; i < locations.length(); i++) {
        hstring locPid = locations[i].ProtoId;
        if (!LocPids.exists(locPid)) {
            continue;
        }

        Map map = locations[i].GetMapByIndex(locations[i].GetMapCount() - 1);
        if (!valid(map)) {
            continue;
        }

        auto raiders = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_RAIDER, CritterFindType::AliveNpc);
        if (raiders.isEmpty()) {
            continue;
        }

        DL("Raiders:" + raiders.length());
        FighterPattern::FighterPattern fp = FighterPattern::FighterPattern();
        fp.ForceArmourLvl = 0;

        uint16 hX = 0;
        uint16 hY = 0;

        for (uint j = 0; j < GANG_SIZE; j++) {
            Critter donor = raiders[Game.Random(0, raiders.length() - 1)];
            Entrance::GetNearEntry(bazaar, ENTRY_HEX_NUM, hX, hY);
            if (!Caravan::GetFreeHex(bazaar, 4, hX, hY)) {
                continue;
            }
            // Caravan::GetFreeHex
            int[] props = {CritterProperty::DialogId,
                           donor.DialogId.hash,
                           CritterProperty::AiId,
                           donor.AiId,
                           CritterProperty::BagId,
                           donor.BagId,
                           CritterProperty::NpcRole,
                           NPC_ROLE_RAIDER,
                           CritterProperty::TeamId,
                           Teams::Slaver,
                           CritterProperty::ReplicationTime,
                           -1,
                           CritterProperty::IsNoHome,
                           1,
                           CritterProperty::Level,
                           donor.Level};
            Critter raider = bazaar.AddNpc(donor.ProtoId, hX, hY, Game.Random(0, 5), Tla::GetCritPropsDict(props));
            raider.SetupScript(_InvaderInit);
            fp.ForceCritterArmour(raider);
            Item[] items = donor.GetItems();
            for (uint k = 0; k < items.length(); k++) {
                raider.AddItem(items[k].ProtoId, items[k].Count);
            }
        }
    }
    DL("invasion done");

    Game.RadioMessageMsg(0, TextPackName::Text, STR_ELIZE_RADIO);
    Game.NCRInvasion = true; // нападение началось!
}

bool IsValidToAttack(Critter raider, Critter target)
{
    // DL("Script^ " + target.GetInitScript());

    if (!target.IsAlive()) {
        return false;
    }
    if (target.IsOwnedByPlayer()) {
        return true;
    }
    if (raider.TeamId == target.TeamId) {
        return false;
    }
    if (target.TeamId == 0) {
        return false;
    }

    return true;
}

void _InvaderInit(Critter raider, bool firstTime)
{
    EncounterNpc::_NpcInit(raider, firstTime);
    raider.IsNoSupply = true;
    raider.OnCritterAppeared.Subscribe(_RaiderCritterAppeared);
    raider.OnAttacked.Subscribe(_RaiderAttacked);
    raider.OnIdle.Subscribe(_RaiderIdle);
    raider.OnDead.Subscribe(_RaiderDead);
    raider.OnMessage.Subscribe(_CritterInvasionMessage);
    raider.OnNpcPlaneEnd.Subscribe(_OnInvaderPlaneEnd);
}

void DeleteDeadRaider(any value)
{
    Critter raider = Game.GetCritter(value);
    if (!valid(raider)) {
        DL("Raider not found");
        return;
    }
    Game.DeleteCritter(raider);
    DL("Raider deleted");
}

void _RaiderDead(Critter cr, Critter killer)
{
    // добавляем событие удаления трупа
    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_TO_DELETE_DEAD), DeleteDeadRaider, cr.Id);

    if (!valid(killer)) {
        return;
    }

    SendMessage::ToAllOnMap(cr, MSG_RAIDER_KILLED, killer.Id);
    EncounterNpc::_NpcDead(cr, killer);

    // работа с переменными
    if (killer.IsOwnedByPlayer()) {
        if (killer.QNcrElizeInvasion == 1) {
            killer.QNcrElizeInvasion = 2;
        }
    }

    // проверка, если все рейдеры мертвы, присваиваем всем игрокам статус квеста: выполнено
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    auto invaders = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_RAIDER, CritterFindType::AliveNpc);
    if (!invaders.isEmpty()) {
        return;
    }

    // все рейдеры мертвы
    Game.NCRInvasion = false;

    Critter[] players = map.GetCritters(CritterFindType::AlivePlayers);
    for (uint i = 0; i < players.length(); i++) {
        if (players[i].QNcrElizeInvasion != 2) {
            continue;
        }
        players[i].QNcrElizeInvasion = 3;
    }

    DefineInvasionEvent();
}

void _CritterInvasionMessage(Critter cr, Critter fromCr, int message, any value)
{
    if (message == MSG_RAIDER_KILLED) {
        if (NpcPlanes::IsNoPlanes(cr)) {
            // bool NpcPlanes::AddWalkPlane(Critter npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
            NpcPlanes::AddWalkPlane(cr, AI_PLANE_ATTACK - 1, fromCr.HexX, fromCr.HexY, Game.Random(0, 5), true, Game.Random(1, 2));
        }
        return;
    }
    EncounterNpc::_NpcMessage(cr, fromCr, message, value);
}

void _RaiderIdle(Critter cr)
{
    if (NpcPlanes::IsNoPlanes(cr)) {
        Map map = cr.GetMap();
        if (!valid(map)) {
            return;
        }

        Critter[] critters = map.GetCritters(cr.HexX, cr.HexY, ENEMY_SEARCH_RAD, CritterFindType::Alive);
        for (uint i = 0; i < critters.length(); i++) {
            if (IsValidToAttack(cr, critters[i])) {
                NpcPlanes::AddAttackPlane(cr, AI_PLANE_ATTACK * (critters[i].IsOwnedByPlayer() ? 2 : 1), critters[i]);
            }
        }
    }
}

// CRITTER_EVENT_ATTACKED
bool _RaiderAttacked(Critter cr, Critter attacker)
{
    if (!IsValidToAttack(cr, attacker)) {
        if (EnemyStack::CheckEnemyInStack(cr, attacker.Id)) {
            EnemyStack::EraseEnemyFromStack(cr, attacker.Id);
        }
        if (EnemyStack::CheckEnemyInStack(attacker, cr.Id)) {
            EnemyStack::EraseEnemyFromStack(attacker, cr.Id);
        }
        NpcPlanes::EraseAttackPlane(attacker, cr.Id);
        return true;
    }
    else {
        return false;
    }
}

// CRITTER_EVENT_SHOW_CRITTER
void _RaiderCritterAppeared(Critter cr, Critter showCrit)
{
    if (!IsValidToAttack(cr, showCrit)) {
        return;
    }

    NpcPlanes::AddAttackPlane(cr, AI_PLANE_ATTACK * (showCrit.IsOwnedByPlayer() ? 2 : 1), showCrit);

    if (!showCrit.IsOwnedByPlayer() && Game.Random(1, 10) == 1) {
        cr.SayMsg(CLAMP(Game.Random(0, 5), SAY_NORM_ON_HEAD, SAY_SHOUT_ON_HEAD), TextPackName::Text, STR_SHOUT_RAIDERS);
    }
}

// если путь заблокирован, уменьшаем приоритет плана, если есть хотя бы еще один план
bool _OnInvaderPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (EncounterNpc::_NpcPlaneEnd(cr, planeId, reason, someCr, someItem)) {
        return true;
    }

    if (reason == REASON_HEX_BUSY || reason == REASON_HEX_BUSY_RING || reason == REASON_POSITION_NOT_FOUND || reason == REASON_FIND_PATH_ERROR ||
        reason == REASON_HEX_TOO_FAR) {
        if (NpcPlanes::GetPlanes(cr, null) > 1 && plane.Priority > 1) {
            plane.Priority--;
        }
    }
    else if (reason == REASON_GAG_CRITTER) // к двери не пройти, мешает другой нпц
    {
        if (valid(someCr)) {
            if (!someCr.IsOwnedByPlayer()) {
                if (NpcPlanes::GetPlanes(cr, null) > 1 && plane.Priority > 1) {
                    plane.Priority--;
                }
            }
        }
    }
    return true;
}

// debug
// ~run NcrInvasion BI 0 0 0
void BI(Critter cr, int p0, int p1, int p2)
{
    BeginInvasion();
}
