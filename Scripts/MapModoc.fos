// FOS Server Sort 2

// Authors: cvet, rifleman17

///@ Property Critter Protected uint8 ModJoeGiantWasp Group = Quests Quest = 3307 Max = 3

#define ENTRANCE_SOUTH (0)
#define ENTRANCE_NORTH (1)
#define ENTRY_SPAWN    (17)
#define MESSAGE_KILL   (17)
#define FARM_X         (940)
#define FARM_Y         (213)

void ModuleInit()
{
    Game.OnGlobalMapCheckEntranceAllowed.Subscribe(entrance_Modoc);
}

bool entrance_Modoc(Location modoc, Critter[] critters, uint8 entrance)
{
    if (modoc.ProtoId == Content::Location::modoc) {
        Critter leader = critters[0];
        if (entrance == ENTRANCE_NORTH) {
            return leader.SkillOutdoorsman >= 50;
        }
    }
    return true;
}

// Квест "Вредители на ферме"
// Мэр Модока просит игрока убить одну гигантскую осу, поселившуюся на одной из ферм Модока
void _FarmInit(Map map, bool firstTime)
{
    if (firstTime) {
        uint16 hx = 0;
        uint16 hy = 0;
        if (Entrance::GetEntryFreeHex(map, ENTRY_SPAWN, hx, hy)) {
            Critter npc = map.AddNpc(Content::Critter::Wasp, hx, hy, Game.Random(0, 5));
            npc.SetupScript(_WaspInit);
        }
    }
    map.OnCritterIn.Subscribe(_FarmInCritter);
}

void _FarmInCritter(Map map, Critter cr)
{
    SendMessage::ToAllOnMap(cr, MESSAGE_KILL, cr.Id);
}

void _WaspInit(Critter wasp, bool firstTime)
{
    wasp.OnDead.Subscribe(_WaspDead);
    wasp.OnMessage.Subscribe(_WaspMessage);
    wasp.ReplicationTime = -1;
}

void _WaspDead(Critter cr, Critter killer)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        return;
    }

    Critter[] players = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < players.length(); i++) {
        if (players[i].ModJoeGiantWasp == 1) {
            players[i].ModJoeGiantWasp = 2;
        }
    }

    Location loc = map.GetLocation();
    if (valid(loc)) {
        loc.AutoGarbage = true;
    }
}

void _WaspMessage(Critter cr, Critter fromCr, int message, any value)
{
    if (message == MESSAGE_KILL) {
        EnemyStack::AddEnemyToStack(cr, fromCr.Id);
    }
}

void r_ShowMap(Critter player, Critter npc)
{
    Location loc = Game.CreateLocation(Content::Location::modoc_farm, FARM_X, FARM_Y, null);
    if (valid(loc)) {
        loc.Hidden = true;
        loc.AutoGarbage = false;
    }

    Location::SetKnownLoc(player, loc);

    any[] values = {loc.Id, player.Id};
    Game.SavedDeferredCall(DAY_TICKS(2), ResetWaspLoc, values);
}

void ResetWaspLoc(any[] values)
{
    Location loc = Game.GetLocation(values[0]);
    if (valid(loc)) {
        loc.AutoGarbage = true;
    }

    Critter cr = Game.GetCritter(values[1]);
    if (valid(cr) && cr.ModJoeGiantWasp == 1) {
        cr.ModJoeGiantWasp = 0;
    }
}

// Квест "Морозко"
void dlg_CountBottles(Critter player, Critter npc, string& lexems)
{
    if (IS_DIALOG_END(lexems) or IS_DIALOG_SAY_MODE(lexems)) {
        return;
    }

    lexems = "$count" + player.CountItem(Content::Item::bottle_ammiak);
}

void r_AllBottles(Critter player, Critter npc)
{
    uint bottles = player.CountItem(Content::Item::bottle_ammiak);
    player.DeleteItem(Content::Item::bottle_ammiak, bottles);
    player.Experience += bottles * 400;
    player.AddItem(Content::Item::bottle_caps, bottles * 400);
}
