// FOS Server
// Author: heX
// Групповой квест: Охота на Гекко
// Выдает Смайли в Кламате
// ver 2.2

// отладка
// #define debag

///@ Property Critter Protected     uint8 KlamSmilyGecko Group = Quests Quest = 3210 Max = 6
///@ Property Critter PrivateServer int   KlamSmilyCurrentHp
///@ Property Critter PrivateServer int   KlamSmilyCountKills
///@ Property Critter PrivateServer int   KlamSmilyHealing

///@ Property Game PrivateServer uint KlamSmilyGeckoLocation
///@ Property Game PrivateServer uint KlamSmilyGeckoTimeout

#ifdef debag
#define MIN_PLAYERS (1)
#endif
#ifndef debag
#define MIN_PLAYERS (3)
#endif
#define MAX_PLAYERS (6)

// выше этого уровня уже не возьмут
#define MAX_LEVEL (3)

// опыт за гекко  GetKillExperience
#define GECKO_EX (55)
// жизней у гекко  MaxHp
#define GECKO_HP (25)
// макс гекко
#define MAX_GECKO     (16)

#define KLAMATH_POS_X (375)
#define KLAMATH_POS_Y (125)

// надобы часть этих данных хранить в базе - на случай перезагрузки.
// но в общем это быстрые квесты, пока прокатит и так.
uint[] GlobalGroups = {};
uint GlobalMapId;
int GlobalGeckoMax;
int GlobalGeckoCount;
int GlobalHumanCount;

// //////////////////////////////////////////////

string i2s(int val) // lib
{
    string tmp = val;
    return tmp;
}

void SetQuestState(Critter player, int status)
{
    player.KlamSmilyGecko = status;
}

int GetQuestState(Critter player)
{
    return player.KlamSmilyGecko;
}

// удаляем локацию с выводком гекко
void DeleteGeckoMap()
{
    if (Game.KlamSmilyGeckoLocation != 0) {
        Location loc = Game.GetLocation(Game.KlamSmilyGeckoLocation);
        // if (loc.GeckCount>0) loc.GeckCount--;
        if (not valid(loc)) {
            // Game.Log("GetLocation fail. Error in Game.KlamSmilyGeckoLocation?");
            Game.KlamSmilyGeckoLocation = 0;
            return;
        }

        Game.DeleteLocation(loc.Id); // но всетаки мы ее добьем
        // возможно это плохое решение - тамже могут быть люди...
        Game.KlamSmilyGeckoLocation = 0; // зануляем
    }
}

// ////////////////////////////////////////////////

// тотальная проверка группы
uint r_CheckGroup(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    groups.insertLast(player);
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Any, groups);

    // проверка на способность быть лидером
    if (player.Charisma < MIN_PLAYERS) {
        return 61; // "Ну и рожа у тебя... С твоим обаянием мало кто за тобой пойдет. Найди лучше лидера поприятнее."
    }

#ifndef debag
    // проверка на пустую группу
    if (groups.length() == 1) {
        return 57; // "А я вот вижу только тебя. У тебя нет никакой группы.  Идиот!"
        // нужна еще проверка на близость его лидера - если подошел не лидер, а участник группы
        // return 60; // "Так, где лидер вашей группы?"
    }
#endif

    // мало людей
    if (groups.length() < MIN_PLAYERS) {
        return 58;
    }

    // много людей
    if (groups.length() > MAX_PLAYERS) {
        return 59;
    }

    // тут будет проверка на уровень
    // и еще проверка на наличия крутого снаряжения
    for (uint i = 0; i < groups.length(); i++) {
        if ((groups[i].Level > MAX_LEVEL)) {
            return 56;
        }
    }
    // вы слишком круты

    // проверка на колво и видимость
    for (uint i = 0; i < groups.length(); i++) {
        if (Game.GetDistance(npc.HexX, npc.HexY, groups[i].HexX, groups[i].HexY) > 7) {
            // ктото ходит слишком далеко от НПС
            return 55;
        }
    }
    // цикл прошел - значит все стоят рядом.

    return 53; // все окей. Поехали!
}

// группа очень плоха?
bool d_GroupLevelIsBad(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    groups.insertLast(player);
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Any, groups);
    for (uint i = 0; i < groups.length(); i++) {
        if (groups[i].Cond == CritterCondition::Alive) {
            if ((groups[i].Level > 1) and (valid(_CritGetItemArmor(groups[i])))) {
                return false;
            }
        }
    }
    // ну если есть ктото выше второго уровня значит не пропадут
    return true; // все ньюбы, им конец.
}

// группа нормальная?
bool d_GroupLevelIsOk(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    groups.insertLast(player);
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Any, groups);
    for (uint i = 0; i < groups.length(); i++) {
        if (groups[i].Cond == CritterCondition::Alive) {
            if ((groups[i].Level == MAX_LEVEL) or (groups[i].Strength == 10) or (groups[i].Endurance == 10)) {
                return true;
            }
        }
    }
    // есть ктото сильный

    return false;
}

// подсказка
void r_HintCreationGroup(Critter player, Critter npc, int val)
{
    string text = "Чтобы СОЗДАТЬ ГРУППУ: вы ВСЕ должны ВЫБРАТЬ ОДНОГО лидера. " + "Это делается через меню (правой кнопкой) на игроке который будет лидером, " +
                  "и выборе пункта с изображением стрелочки указывающей на группу людей.";

    player.Say(SAY_NETMSG, "-=[ Подсказка: ]=-");
    player.Say(SAY_NETMSG, text);

    // и если научимся в ПИП добавлять инфу...
    // player.Say(SAY_NETMSG, "См Архивы в [PIP] (в правом нижнем углу)");
}

// эмоции если группа слаба
void r_BadHunterWisper(Critter player, Critter npc, int val)
{
    if (Game.Random(1, 2) == 1) {
        npc.Say(SAY_WHISP_ON_HEAD, "Эх, совсем зеленые еще...");
    }
    else {
        npc.Say(SAY_EMOTE_ON_HEAD, "тяжело вздыхает");
    }
}

// предупреждает всех кто идет с игроком в поход.
void r_WarnToBadHunter(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Any, groups);
    for (uint i = 0; i < groups.length(); i++) {
        if (Game.GetDistance(npc.HexX, npc.HexY, groups[i].HexX, groups[i].HexY) < 5) {
            Game.RunDialog(groups[i], Content::Dialog::klam_smily_warn, npc.HexX, npc.HexY, false);
        }
    }
}

// квест доступен?
bool r_CheckQuestAvailable(Critter player, Critter npc, int val)
{
    return true;
}

// проверка: квест уже выполняют?
bool r_CheckQuestIsRun(Critter player, Critter npc, int val)
{
    // убиваем карту если квест устарел.
    // Цитата из мануала:
    // "Не рекомендуется выполнять какие-либо конкретные действия в функции-условии, она для этого не предназначена."
    // Ну да фиг с ним, ничего плохого не должно произойти... (heX посмотрел взглядом налево, затем направо, и продолжил писать...)
    if (Game.GetFullSecond() >= Game.KlamSmilyGeckoTimeout || Game.KlamSmilyGeckoTimeout == 0 || Game.KlamSmilyGeckoLocation == 0) {
        // Если прошло больше суток но квест невыполнен то
        DeleteGeckoMap(); // удаляем карту
        for (uint i = 0; i < GlobalGroups.length(); i++) {
            QuestCompleteNotify(GlobalGroups[i]);
        }

        Game.KlamSmilyGeckoTimeout = 0;
    }

    if (Game.KlamSmilyGeckoLocation == 0) {
        return val == 0; // true
    }
    else {
        return val != 0; // false
    }
}

// /////////////////////////////////////////

// охотники идут!
void r_GotoHunter(Critter player, Critter npc, int val)
{
    Critter[] groups = {};
    groups.insertLast(player);
    GlobalmapGroupExtended::GetFollowGroup(player, CritterFindType::Any, groups);

    // инициализирует квест!
    for (uint i = 0; i < groups.length(); i++) {
        SetQuestState(groups[i], 1); // квест взят
    }

    // //////////////////////////////////////////

    // лучше конешно анализ крутости и создание гекко делать по приходу на карту
    // иначе читерить будут
    // но с другой стороны это нечестно, да и кто будет читерить на десятке ящеров???

    // анализ крутости группы
    int gecko = 0;
    int groupHp = 0; // сумма жизней группы
    for (uint i = 0; i < groups.length(); i++) {
        // проходимся по всей группе и делаем оценку
        groupHp = groupHp + groups[i].MaxLife;

        gecko += CLAMP(groups[i].Level, 1, MAX_LEVEL) * 2;
        if (not valid(_CritGetItemArmor(groups[i]))) {
            gecko--;
        }
    }

    // !!! нужно делать более подробное исследование и тестирование
    int hp_tmp = 0;
    if (groupHp > gecko * GECKO_HP) {
        Game.Log("hp rebalance detect");                           // DEBAG
        gecko = gecko + ((groupHp - gecko * GECKO_HP) / GECKO_HP); // все честно.
    }

    hstring matherType = Content::Critter::ToughSilverGecko;
    if (gecko > 30) {
        matherType = Content::Critter::FireGecko;
    }
    else if (gecko > 20) {
        matherType = Content::Critter::ToughGoldenGecko;
    }
    else if (gecko > 10) {
        matherType = Content::Critter::GoldenGecko;
    }
    gecko = CLAMP(gecko, 3, MAX_GECKO);
    if (gecko > 8) {
        gecko = gecko + Game.Random(-1, 2); // небольшой рандом
    }

    // //////////////////////////////////

    // создали позицию
    int x, y;
    if (Game.Random(1, 4) != 1) {
        // это клетка где в F2 была радиоактивная пещера
        x = -1;
        y = -1;
    }
    else {
        x = Game.Random(-1, 1);
        y = Game.Random(-1, 1);
        if (x == 0 and y == 0) {
            x = -2;
            y = -2;
        } // неповезло...
    }

    Game.KlamSmilyGeckoTimeout = Game.GetFullSecond() + (60 * 60 * 24);

    // удаляем старую карту если она есть
    DeleteGeckoMap();

    // создали карту
    Location loc = Game.CreateLocation(
        PidsGroups::Pids_MapDeserts[Game.Random(0, PidsGroups::Pids_MapDeserts.length() - 1)], // диапазон локаций
        KLAMATH_POS_X + x * Settings.GlobalMapZoneLength + Game.Random(-(Settings.GlobalMapZoneLength / 2), (Settings.GlobalMapZoneLength / 2)),
        KLAMATH_POS_Y + y * Settings.GlobalMapZoneLength + Game.Random(-(Settings.GlobalMapZoneLength / 2), (Settings.GlobalMapZoneLength / 2)),
        groups);

    if (not valid(loc)) {
        return;
    }

    // записали в глобальную игровую переменную
    Game.KlamSmilyGeckoLocation = loc.Id;

    loc.Hidden = true;
    loc.AutoGarbage = false;
    loc.Radius = 8;

    Map map = loc.GetMapByIndex(0);

    map.OnCritterIn.Subscribe(map_incoming);
    map.OnCritterOut.Subscribe(map_leave);
    map.OnFinish.Subscribe(map_deleting);

    // //////////////////////////////////////////

    uint16 x_ = 0, y_ = 0;
    if (not Entrance::MapGetEntryCoords(map, 0, 0, x_, y_)) {
        x = 110;
        y = 110;
    }
    else {
        x = x_;
        y = y_;
    }

    // создадим каждой тваре по паре  =)
    Critter cr;
    for (int i = 0; i < gecko; i++) {
        if (matherType != hstring()) {
            // добавим маму
            int[] props = {CritterProperty::DialogId,
                           Content::Dialog::mob_silver_gecko.hash,
                           CritterProperty::TeamId,
                           Teams::Mob0,
                           CritterProperty::BagId,
                           Bags::Empty,
                           CritterProperty::ReplicationTime,
                           -1};
            cr = map.AddNpc(matherType, x, y, Game.Random(0, 5), Tla::GetCritPropsDict(props));
            cr.SetupScript(Mob::_MobInit);
            matherType = hstring();
        }
        else {
            // начинаем добавлять мобов
            int[] props = {CritterProperty::DialogId,
                           Content::Dialog::mob_silver_gecko.hash,
                           CritterProperty::TeamId,
                           Teams::Mob0,
                           CritterProperty::BagId,
                           Bags::Empty,
                           CritterProperty::ReplicationTime,
                           -1};
            cr =
                map.AddNpc(Content::Critter::SmallSilverGecko, x + Game.Random(0, 10), y + Game.Random(0, 10), Game.Random(0, 5), Tla::GetCritPropsDict(props));
            cr.SetupScript(Mob::_MobInit);
        }

        if (valid(cr)) {
            cr.KlamSmilyCurrentHp = cr.CurrentHp; // запоминаем текущие жизни
            // прерывания
            cr.OnAttacked.Subscribe(gecko_damage);
            cr.OnDead.Subscribe(gecko_dead);
        }
        else {
            Game.Log("Critter creation error");
        }
    }

    // глобалы
    GlobalGeckoCount = gecko;
    GlobalGeckoMax = gecko;
    GlobalHumanCount = 0;

    // записываем id игроков
    GlobalGroups.resize(groups.length());
    for (uint i = 0; i < groups.length(); i++) {
        GlobalGroups[i] = groups[i].Id;
    }
}

// /////////////////////////////////////////////////////

// выдача опыта в зависимости от счетчиков
int GetExpa(Critter player)
{
    if (player.Level > MAX_LEVEL * 2) {
        return 0;
    }
    int dmg = player.KlamSmilyCurrentHp;  // бил гекков
    int kls = player.KlamSmilyCountKills; // килсы
    int aid = player.KlamSmilyHealing;    // хиляние
    if (dmg == 0 and kls == 0 and aid == 0) {
        return 0; // фиг вам халявщики, а не опыт!
    }
    int expa = 200;
    if (dmg > GECKO_HP * 2 or aid > 0 or kls > 0) {
        expa += CLAMP(player.Level, 1, MAX_LEVEL) * 100;
    }

    return expa;
}

// квест выполнен! поздравляем игрока!
void QuestCompleteNotify(uint playerId)
{
    Critter player = Game.GetCritter(playerId);

    // игрок вышел
    if (not valid(player)) {
        return;
    }

    if (GetQuestState(player) == 2) // пришол и
    {
        SetQuestState(player, 3); // победил!
#ifdef debag
        player.Say(SAY_NETMSG, "Квест выполнен!");
        player.Say(SAY_NETMSG, "Убщий урон: " + i2s(player.KlamSmilyCurrentHp));
        player.Say(SAY_NETMSG, "Убито Гекко: " + i2s(player.KlamSmilyCountKills));
        player.Say(SAY_NETMSG, "Лечений: " + i2s(player.KlamSmilyHealing));
#endif
        player.Experience += GetExpa(player); // УРА!!!
    }
    else if (GetQuestState(player) == 1) { // не заходил на локацию
        SetQuestState(player, 5);
    }
    else {                        // не пришол
        SetQuestState(player, 0); // сбрасываем нафиг
    }
}

// ///////////////////////////////////////////////
// обработчики прерываний

// игрок уходит с карты
void map_leave(Map map, Critter crit)
{
    if (crit.IsOwnedByPlayer()) {
        GlobalHumanCount--;
        if (GlobalHumanCount == 0) { // если больше нет никого
            DeleteGeckoMap();
        }

        remove_events(crit);

        if (not crit.IsDead()) // если еще жив
        {
            if (GlobalGeckoCount > 0) // если гекко еще остались
            {
                if (GetQuestState(crit) == 2) {
                    SetQuestState(crit, 6); // сбежал
                }
            }
        }
        crit.KlamSmilyCurrentHp = 0;
        crit.KlamSmilyCountKills = 0;
        crit.KlamSmilyHealing = 0;
    }
}

// игрок пришол на карту
void map_incoming(Map map, Critter player)
{
    if (player.IsOwnedByPlayer()) {
        if (GlobalHumanCount > 0) // есть ктото уже есть то
        {
            Location loc = Game.GetLocation(map.Id);
            // if (loc.GeckCount>0) loc.GeckCount--;
        }

        SetQuestState(player, 2); // пришли
        GlobalHumanCount++;
        player.KlamSmilyCurrentHp = 0;  // дамаг
        player.KlamSmilyCountKills = 0; // килсы
        player.KlamSmilyHealing = 0;    // хиляние
        player.OnUseSkillOn.Subscribe(player_doctor);
        player.OnDead.Subscribe(player_dead);
    }
}

// удаляем прерывания у игрока
void remove_events(Critter player)
{
    player.OnUseSkillOn.Unsubscribe(player_doctor);
    player.OnDead.Unsubscribe(player_dead);
}

// игрок умер во время квеста
void player_dead(Critter player, Critter killer)
{
    remove_events(player);
    SetQuestState(player, 4);                            // умер
    if (player.KlamSmilyCountKills > GlobalGeckoMax / 2) // убил больше половины
    {
        SetQuestState(player, 4);
        player.Experience += 500;
    }
    else {
        SetQuestState(player, 4);
        player.Experience += 100;
    }
}

// AHTUNG - карта сворачиваеться нафиг
void map_deleting(Map map)
{
    Location loc = map.GetLocation();
    for (uint i = 0; i < GlobalGroups.length(); i++) {
        Critter player = Game.GetCritter(GlobalGroups[i]);
        if (player !is null) {
            Location::UnsetKnownLoc(player, loc);
        }
    }

    Game.KlamSmilyGeckoLocation = 0;
}

bool player_doctor(Critter crit, CritterProperty skill, Critter onCritter, Item onItem, StaticItem onScenery)
{
    // цепочка if
    if (skill == CritterProperty::SkillFirstAid) {
        if (valid(onCritter)) {
            if (onCritter.IsOwnedByPlayer()) {                 // игрока
                if (crit.Id != onCritter.Id) {                 // не сам себя
                    if (!IS_TIMEOUT(crit.TimeoutSkFirstAid)) { // уже можно
                        crit.KlamSmilyHealing += 1;
                    }
                }
            }
        }
    }
    // и всетаки он вылечил его (ну или пытался, что тоже важно)
    return false; // вызываем глобальный обработчик
}

bool gecko_damage(Critter crit, Critter attacker)
{
    // а тут мы считаем damage игрока
    int hp = (crit.CurrentHp < 0 ? 0 : crit.KlamSmilyCurrentHp); // с ограничением при минусах
    if (crit.CurrentHp > crit.KlamSmilyCurrentHp) {
        hp = crit.KlamSmilyCurrentHp; // значит регенерация
    }
    int dmg = crit.KlamSmilyCurrentHp - hp;
    if (dmg > GECKO_HP) {
        dmg = GECKO_HP; // ограничение от читеров (а то будут еще динамитом рвать...)
    }
    crit.KlamSmilyCurrentHp = hp;
    attacker.KlamSmilyCurrentHp = attacker.KlamSmilyCurrentHp + dmg;

    return false; // по умолчанию
}

void gecko_dead(Critter crit, Critter killer)
{
    if (killer.IsOwnedByPlayer()) {
        killer.KlamSmilyCountKills += 1;
    }
    GlobalGeckoCount--;
    // если гекко кончились
    if (GlobalGeckoCount == 0) {
        // квест выполнен!
        // нужно уведомить участников
        for (uint i = 0; i < GlobalGroups.length(); i++) {
            QuestCompleteNotify(GlobalGroups[i]);
        }
        if (Game.KlamSmilyGeckoLocation != 0) {
            Location loc = Game.GetLocation(Game.KlamSmilyGeckoLocation);
            loc.AutoGarbage = true;          // разрешаем сбор карты мусорщиком (на всякий случай)
            Game.KlamSmilyGeckoLocation = 0; // снимаем метку
        }
    }
}
