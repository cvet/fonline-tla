// FOS Server Sort 2
// Author: rifleman17
// Квест-специальный энкаунтер. Две последовательные локации
// На первой игрок находит труп нпц с рацией, если он возьмет рацию, может услышать сообщение о том, что где-то в Пустоши найден военный склад. На самом деле
// это - ловушка, в которой его поджидает сумасшедший ученый. При заходе на вторую локацию персонаж попадает на хирургический стол, где его оперируют и персонаж
// превращается в андроида.

///@ Property Critter PrivateServer bool SEAndroidMonologEnd

///@ Property Item PrivateServer bool SeAndroidRadioListened
///@ Property Item PrivateServer LocationProperty SeAndroidVarNum

///@ Property Location PrivateServer bool SeAndroidPlayerIn
///@ Property Location PrivateServer ident SeAndroidPlayerId
///@ Property Location PrivateServer bool SeAndroidMinesTriggered
///@ Property Location PrivateServer uint SeAndroidTFounded
///@ Property Location PrivateServer uint SeAndroidLFounded
///@ Property Location PrivateServer uint SeAndroidDFounded
///@ Property Location PrivateServer uint SeAndroidRFounded
///@ Property Location PrivateServer uint SeAndroidPFounded
///@ Property Location PrivateServer uint SeAndroidCFounded

const LocationProperty[] SeAndroidFoundeds = {LocationProperty::SeAndroidTFounded,
                                              LocationProperty::SeAndroidLFounded,
                                              LocationProperty::SeAndroidDFounded,
                                              LocationProperty::SeAndroidRFounded,
                                              LocationProperty::SeAndroidPFounded,
                                              LocationProperty::SeAndroidCFounded};

const hstring[] Pids = {Content::Item::human_brain, Content::Item::gold_tooth, Content::Item::players_ear, Content::Item::dixon_eye, Content::Item::meat};

// Группа "Браво", ответьте. Группа "Браво", ответьте. Докладываю. Склад высокотехнологичного вооружения расконсервирован. Нам потребуются еще люди,
// чтобы забрать все. Также нам потребуется еще один грузовик. Повторяю наши координаты: Долина Смерти, зона.. *помехи* ...
#define STR_RADIO_MESSAGE (70070)

// debug log
// #define DL #(s) (Game.Log("android: " + s))
#define DL #(s)

void _DeadInit(Critter cr, bool firstTime)
{
    if (cr.IsAlive()) {
        CritterState::ToDead(cr, CritterActionAnim::DeadBack, null);
    }
    cr.ReplicationTime = -1;
    if (cr.CountItem(Content::Item::radio) == 0) {
        Item item = cr.AddItem(Content::Item::radio, 1);
        if (valid(item)) {
            item.SetupScript(_RadioInit);
        }
        item = cr.AddItem(Content::Item::independent, 1);
        if (valid(item)) {
            item.AmmoCount = 0;
        }
    }
}

void _RadioInit(Item item, bool firstTime)
{
    DL("RadioInit");
    if (firstTime) {
        item.RadioChannel = Game.Random(1000, 9999);
        DL("Channel: " + item.RadioChannel);
    }
    item.OnCritterUseSkill.Subscribe(_RadioSkill);
}

bool _RadioSkill(Item item, Critter cr, CritterProperty skill)
{
    DL("Radio skill " + skill);
    if (skill == SKILL_PICK_ON_GROUND) {
        if (!item.SeAndroidRadioListened) {
            any[] values = {item.Id, 0, cr.Id, item.RadioChannel};
            Game.DeferredCall(0, AndroidRadio, values);
            item.SeAndroidRadioListened = true;
        }
    }
    return false;
}

void AndroidRadio(any[] values)
{
    DL("AndroidRadio. ItemId:" + values[0] + "; MsgCount:" + values[1] + "; " + "radioChannel: " + values[2]);
    Item item = Game.GetItem(values[0]);
    if (valid(item)) {
        if (item.SeAndroidRadioListened) {
            Game.RadioMessageMsg(values[3], TEXTMSG_TEXT, STR_RADIO_MESSAGE);
            values[1] = values[1] + 1;
            DL("count radio messages:" + values[1]);
            Critter cr = Game.GetCritter(item.CritterId);
            if (cr.SpecialAndroid < 2 && item.RadioChannel == values[3]) { // Про локацию пока не известно, радио на нужной волне
                cr.SpecialAndroid = 2;
            }
            DL("seAndroidValue: " + cr.SpecialAndroid);
            if (values[1] < 5) { // Максимум 5 повторов раз в 20 секунд на нужной радиоволне
                Game.DeferredCall(20000, AndroidRadio, values);
            }
        }
    }
}

// Локация с лабораторией
#define ENTRY_DOOR_GROUND  (17) // Номер гекса, на котором стоит дверь
#define ENTRY_CONTAINER    (25) // Номер гекса, на котором стоит ящик для вещей игрока
#define ENTRY_KNOCKOUT     (26) // Гекс, на котором будет лежать игрок после того, как попадет в лабораторию
#define CTE_CHECK_KNOCKOUT (128)   // Номер события проверки, вышел ли игрок из нокаута.
#define STR_LIFT_BROKEN    (70072) // Лифт не функционирует. Видимо, заблокирован откуда-то снизу.
#define KEY_DOOR_ID        (16643) // Код ключа к двери

// Скрипт двери. Пока не вошел ни один игрок она и открывается и закрывается.
void _GroundDoorInit(Item item, bool firstTime)
{
    item.OnCritterUseSkill.Subscribe(_UseGroundDoor);
    item.IsAlwaysView = true;
}

void _OuterDoorInit(Item item, bool firstTime)
{
    item.IsAlwaysView = true;
}

bool _UseGroundDoor(Item door, Critter cr, CritterProperty skill)
{
    Map map = cr.GetMap();
    if (not valid(map)) {
        return false;
    }
    Location loc = map.GetLocation();
    if (not valid(loc)) {
        return false;
    }
    return loc.SeAndroidPlayerIn;
}

void t_TransitPlayer(Critter player, StaticItem trigger, bool entered, uint8)
{
    Map map = player.GetMap();
    Location loc = map.GetLocation();
    if (not loc.SeAndroidPlayerIn) {
        // Переносим игрока в подвал, кладем в нокаут
        Map basement = loc.GetMapByIndex(1);
        uint16 x = 0;
        uint16 y = 0;
        uint8 dir = 0;
        if (valid(basement)) {
            Entrance::MapGetEntryCoords(basement, ENTRY_KNOCKOUT, 0, x, y);
            Effects::FlushScreen(player, COLOR_BLACK, COLOR_BLACK, 5000);
            Obsolete::CritterTransitToMapCoords(player, basement.Id, x, y, 3);
            Effects::FlushScreen(player, COLOR_BLACK, COLOR_BLACK, 1000);
            loc.SeAndroidPlayerId = player.Id;
            player.AddTimeEvent(cte_CheckPlayerKnockOut, Settings.TimeMultiplier * 60 * 30, 0); // Подстраховка
            CritterState::ToKnockout(player, KNOCKOUT_ACTION_ANIM_DEFAULT(true), 100000, player.HexX, player.HexY);
            // Все вещи игрока перекладываем в разные ящики
            Item[] items = player.GetItems();
            if (!items.isEmpty()) {
                if (Entrance::MapGetEntryCoords(basement, ENTRY_CONTAINER, 0, x, y)) {
                    Item cont = basement.GetItem(x, y, Content::Item::locker_rusty_right);
                    if (valid(cont)) {
                        Game.MoveItems(items, cont, 0);
                        items = cont.GetItems(0);
                        for (uint i = 0; i < items.length(); i++) {
                            auto pid = items[i].ProtoId;
                            if (Pids.exists(pid) || pid == Content::Item::pot) {
                                Game.DeleteItem(items[i]);
                            }
                        }
                        Item item = cont.AddItem(Content::Item::pot, 1, 0);
                        item.Lexems = "$text" + Obsolete::GetPlayerName(player.Id);
                    }
                }
            }
            RunDoctorMonologue(basement);
        }
        // Игрок внутри, больше никто туда не попадет
        loc.SeAndroidPlayerIn = true;
        // Закрываем дверь
        Entrance::MapGetEntryCoords(map, ENTRY_DOOR_GROUND, 0, x, y);
        Item door = map.GetItem(x, y, Content::Item::door_2421);
        if (valid(door) && door.Opened) {
            Lockers::SwitchLocker(door, false);
        }
        return;
    }
    else if (loc.SeAndroidPlayerIn) {
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_LIFT_BROKEN);
    }
}

uint cte_CheckPlayerKnockOut(Critter cr, any identifier, uint& rate)
{
    DL("CheckKnockout");

    if (cr.IsKnockout()) {
        Map map = cr.GetMap();
        if (valid(map)) {
            Location loc = map.GetLocation();
            if (loc.ProtoId == Content::Location::android) {
                Game.Log("Warning: player character can't stand up knockout.");
                CritterState::ToAlive(cr);
            }
        }
    }
    return 0;
}

// Внешний уровень
#define STR_MAP_IN \
    (70071) // Похоже, вы наткнулись на тот самый "военный склад", о котором услышали по рации. Однако, этот небольшой бункер выглядит необычно для склада. \
            // Очень необычно.

void _GroundInit(Map map, bool firstTime)
{
    DL("Groun map Init");
    map.OnCritterIn.Subscribe(_GroundInCritter);
}

void _GroundInCritter(Map map, Critter cr)
{
    cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN);
}

// Монолог хирурга
#define ROLE_DOCTOR (17)

void _DoctorInit(Critter cr, bool firstTime)
{
    DL("Doctor init");
    cr.OnIdle.Subscribe(_DoctorIdle);
    if (firstTime) {
        Item key = cr.AddItem(Content::Item::nuke_key, 1);
        if (valid(key)) {
            key.LockerId = KEY_DOOR_ID;
        }
    }
}

void _DoctorIdle(Critter cr)
{
    if (not cr.SEAndroidMonologEnd) {
        if (!Monologue::MonologueRunning(cr)) {
            DL("Second stage begin");
            cr.SEAndroidMonologEnd = true;
            Map map = cr.GetMap();
            Location loc = map.GetLocation();
            if (loc.SeAndroidPlayerId != ZERO_IDENT) {
                Critter player = Game.GetCritter(loc.SeAndroidPlayerId);
                if (valid(player)) {
                    TransformPlayer(map, player, cr);
                }
            }
        }
    }
}

void RunDoctorMonologue(Map map)
{
    Critter cr = map.GetCritter(CritterProperty::NpcRole, ROLE_DOCTOR, CritterFindType::AliveNpc);
    if (!valid(cr)) {
        return;
    }
    Monologue::SetMonologue(cr, 70073, 70090, Settings.TimeMultiplier * 10, 0, SAY_NORM); // 70090
    cr.SEAndroidMonologEnd = false;
}

// Перенос в камеру
#define ENTRY_DOC_POS    (27) // dir = 0 Положение доктора после того, как игрок уже превращен в андроида
#define ENTRY_PLAYER_POS (28) // dir = 3 Положение персонажа после превращения (в камере)
#define ENTRY_DOC_HOME   (29) // dir = 3 Домашняя позиция доктора после диалога
#define STR_AWAKE        (70091) // Реплика при пробуждении

void TransformPlayer(Map map, Critter player, Critter doctor)
{
    DL("TRANSFORM");
    Effects::FlushScreen(player, COLOR_BLACK, COLOR_BLACK, 5000);
    if (player.NextCrType == EMPTY_HSTRING) {
        player.NextCrType = player.ModelName;
    }
    // player.ChangeCrType( CRTYPE_TACTICS_RHUMANOID );
    player.ModelNameBase = CRTYPE_TACTICS_RHUMANOID;
    uint16 hX = 0, hY = 0;
    uint8 dir = 0;
    if (!Entrance::MapGetEntryCoords(map, ENTRY_DOC_POS, 0, hX, hY)) {
        return;
    }
    Obsolete::CritterTransitToMapCoords(doctor, map.Id, hX, hY, 0);
    doctor.HomeMapId = map.Id;
    doctor.HomeHexX = hX;
    doctor.HomeHexY = hY;
    doctor.HomeDir = 0;
    if (Entrance::MapGetEntryCoords(map, ENTRY_PLAYER_POS, 0, hX, hY)) {
        Obsolete::CritterTransitToMapCoords(player, map.Id, hX, hY, 3);
    }
    any[] values = {player.Id, doctor.Id, map.Id};
    Game.SavedDeferredCall(6000, AwakePlayer, values);
}

void AwakePlayer(any[] values)
{
    Critter player = Game.GetCritter(values[0]);
    Critter doctor = Game.GetCritter(values[1]);
    if (valid(player) && valid(doctor)) {
        player.Experience += 4000;
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_AWAKE);
        CritterState::ToDead(player, CritterActionAnim::DeadBack, null); // TODO: убрать
        player.CurrentAp = 0;
        CritterState::ToAlive(player);
        Game.RunDialog(player, doctor, true);
    }
}

void r_SendDoctorHome(Critter player, Critter npc)
{
    DL("Sending home");
    if (!valid(npc)) {
        return;
    }
    uint16 hX = 0, hY = 0;
    Map map = npc.GetMap();
    if (valid(map) && Entrance::MapGetEntryCoords(map, ENTRY_DOC_HOME, 0, hX, hY)) {
        DL("New home");
        npc.HomeMapId = map.Id;
        npc.HomeHexX = hX;
        npc.HomeHexY = hY;
        npc.HomeDir = 3;
    }
}

// Взрывы на выходе из лаборатории
#define ENTRY_EXPLODE (30) // Номера гексов, на которых будут взрывы
#define STR_OUT       (70095) // Вам чудом удалось пройти мимо ловушек безумца. Но сейчас нужно делать ноги.

void t_Warn(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    Map map = player.GetMap();
    Location loc = map.GetLocation();
    if (not loc.SeAndroidMinesTriggered) {
        player.Wait(0);
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_OUT);
        loc.SeAndroidMinesTriggered = true;
        Game.SavedDeferredCall(1000, DeferredExplode, map.Id);
        Game.SavedDeferredCall(20000, DeferredDeleteMap, map.Id);
    }
}

void DeferredExplode(any value)
{
    Map map = Game.GetMap(value);
    if (!valid(map)) {
        return;
    }

    DL("DeferredExplode called");
    Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_EXPLODE);
    if (entries.length() > 0) {
        for (uint i = 0; i < 3; i++) {
            Entrance::Entry entry = entries[Game.Random(0, entries.length() - 1)];
            if (valid(entry)) {
                Explode::ExplodeEx(map, entry.HexX, entry.HexY, Content::Item::explode_rocket, 3, 666, DamageTypes::Explode, 3, ZERO_IDENT);
            }
        }
    }

    Game.SavedDeferredCall(1000, DeferredExplode, value);
}

void DeferredDeleteMap(any value)
{
    Map map = Game.GetMap(value);
    if (valid(map)) {
        Game.DeleteLocation(map.GetLocation().Id);
    }
}

// Части тела в банках с биогелем
#define STR_EMPTY    (70092) // Больше в этих коробках ничего нет.Эти ящики пусты.
#define STR_OPEN_POT (70096) // Строка при открытии банки
#define STR_FOUND    (70093) // В одном из ящиков вы обнаружили странную стеклянную банку с формалином.
#define STR_UNLUCK   (70094) // Вы не нашли ничего интересного в этих старых коробках.Удача вам не улыбнулось. Вы ничего не нашли в ящиках.

void _PotInit(Item item, bool firstTime)
{
    string lexems = "$text";
    LocationProperty varNum = item.SeAndroidVarNum;

    if (varNum == LocationProperty::SeAndroidTFounded) {
        lexems += "Tab10id";
    }
    else if (varNum == LocationProperty::SeAndroidCFounded) {
        lexems += "cvet";
    }
    else if (varNum == LocationProperty::SeAndroidPFounded) {
        lexems += "Ponchik";
    }
    else if (varNum == LocationProperty::SeAndroidRFounded) {
        lexems += "rifleman17";
    }
    else if (varNum == LocationProperty::SeAndroidDFounded) {
        lexems += "Dagnir";
    }
    else if (varNum == LocationProperty::SeAndroidLFounded) {
        lexems += "LoadRunner";
    }
    else {
        lexems += " ";
    }

    item.Lexems = lexems;
    item.IsCanUse = true;
    Game.SavedDeferredCall(HOUR_TICKS(2), DefferedDeleteItem, item.Id);
    item.OnCritterUse.Subscribe(_PotUse);
}

void DefferedDeleteItem(any value)
{
    Item item = Game.GetItem(value);
    if (valid(item)) {
        Game.DeleteItem(item);
    }
}

bool _PotUse(Item item, Critter cr, uint param)
{
    Game.DeleteItem(item);
    Item newItem = cr.AddItem(Pids[Game.Random(0, Pids.length() - 1)], 1);
    if (valid(newItem)) {
        newItem.Info = 2;
    }
    cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_OPEN_POT);
    return true;
}

bool s_Boxes(Critter player, StaticItem scenery, Item itemUse, int skill)
{
    if (skill != SKILL_PICK_ON_GROUND) {
        return false;
    }

    int chance = scenery.SceneryParams[0];
    Map map = player.GetMap();
    Location loc = map.GetLocation();
    // Проверяем, что в этом контейнере еще не нашли ничего.
    // Заодно запоминаем последнюю незаполненную переменную
    int id = scenery.HexX * scenery.HexY;
    LocationProperty varNum = LocationProperty::Invalid;
    for (uint i = 0, j = SeAndroidFoundeds.length(); i <= j; i++) {
        if (loc.GetAsInt(SeAndroidFoundeds[i]) == 0 && varNum == LocationProperty::Invalid) {
            varNum = SeAndroidFoundeds[i];
        }
        if (loc.GetAsInt(SeAndroidFoundeds[i]) == id || varNum == SeAndroidFoundeds.last()) // Эти ящики уже обыскивали, либо найдены все предметы
        {
            player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_EMPTY);
            return true;
        }
    }
    player.Wait(1000);
    chance = chance - SeAndroidFoundeds.find(varNum) * 10; // Каждый последующий предмет найти сложнее
    if (Game.Random(5, 95) > chance || Game.Random(1, 2) == 1) {
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_UNLUCK);
        return true;
    }
    DL("VarNum =" + varNum);
    loc.SetAsInt(varNum, id);
    Item item = player.AddItem(Content::Item::pot, 1);
    if (valid(item)) {
        item.SeAndroidVarNum = varNum;
        item.SetupScript(_PotInit);
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_FOUND);
    }
    return true;
}
