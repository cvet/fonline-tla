// FOS Server

// Author: rifleman17
// Доска объявлений с возможностью оставлять сообщения

///@ Property Critter PrivateServer int BBMsgPage
///@ Property Critter PrivateServer int BBSelectedMsg
///@ Property Critter PrivateServer int KlamAldoBusy
///@ Property Critter PrivateServer ident KlamAldoListenId
///@ Property Critter PrivateServer ident KlamAldoReaderId
///@ Property Critter PrivateServer ident=>uint BBMsgCount

///@ Property Map PrivateServer ident KlamAldoId

///@ Property Game PrivateServer uint8[] BulletinBoard

#define GAME_WEEK #(week)(week * 7 * 24 * 60 * 60)
#define _Expired  #(msg)(msg.ReaderId == ZERO_IDENT ? msg.WriteTime + GAME_WEEK(20) <Game.GetFullSecond() : msg.WriteTime + GAME_WEEK(80) <Game.GetFullSecond())

// #define DL#(s) (Game.Log(s))
#define DL #(s)

class BBMessage
{
    uint Idx;
    ident MapId;
    ident WriterId;
    ident ReaderId;
    uint WriteTime;
    string Message;
}

class BBMessenger
{
    uint MsgCount;
    BBMessage[] Messages = {};

    BBMessenger()
    {
        MsgCount = 0;
    }

    void ClearExpiredMessages()
    {
        for (uint i = 0; i < MsgCount; i++) {
            if (_Expired(Messages[i])) {
                Messages.removeAt(i);
                MsgCount = Messages.length();
                i--;
            }
        }
    }

    void AddMessage(ident mapId, ident writer, ident reader, uint when, string message)
    {
        BBMessage msg;
        msg.Idx = Messages.length();
        msg.MapId = mapId;
        msg.WriterId = writer;
        msg.ReaderId = reader;
        msg.WriteTime = (when == 0 ? Game.GetFullSecond() : when);
        msg.Message = message;
        Messages.insertLast(msg);
        MsgCount = Messages.length();
    }

    void ContinueMessage(ident mapId, ident writer, ident reader, string message)
    {
        BBMessage msg;
        for (uint i = 0; i < MsgCount; i++) {
            if (Messages[i].MapId == mapId && Messages[i].WriterId == writer && Messages[i].ReaderId == reader) {
                Messages[i].Message += message;
                return;
            }
        }
    }

    void Save()
    {
        ClearExpiredMessages();
        ident[] maps = {};
        ident[] writers = {};
        ident[] readers = {};
        uint[] writeTimes = {};
        string[] messages = {};

        MsgCount = Messages.length();
        DL("saving messages num " + MsgCount);

        for (uint i = 0; i < MsgCount; i++) {
            maps.insertLast(Messages[i].MapId);
            writers.insertLast(Messages[i].WriterId);
            readers.insertLast(Messages[i].ReaderId);
            writeTimes.insertLast(Messages[i].WriteTime);
            messages.insertLast(Messages[i].Message);
        }

        auto save = Serializator::Serializator();
        save.Set(MsgCount);
        save.Set(maps);
        save.Set(writers);
        save.Set(readers);
        save.Set(writeTimes);
        save.Set(messages);
        Game.BulletinBoard = save.GetData();
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        if (load.SetData(Game.BulletinBoard) == 0) {
            return;
        }

        ident[] maps = {};
        ident[] writers = {};
        ident[] readers = {};
        uint[] writeTimes = {};
        string[] messages = {};

        load.Get(MsgCount);
        load.Get(maps);
        load.Get(writers);
        load.Get(readers);
        load.Get(writeTimes);
        load.Get(messages);
        DL("loading messages num " + MsgCount + " maps " + maps.length());

        Messages.clear();
        for (uint i = 0; i < maps.length(); i++) {
            AddMessage(maps[i], writers[i], readers[i], writeTimes[i], messages[i]);
        }
        MsgCount = Messages.length();
        ClearExpiredMessages();
    }

    BBMessage GetMessage(uint idx)
    {
        if (idx < MsgCount) {
            return Messages[idx];
        }
        return null;
    }

    BBMessage[] GetPrivateMessages(ident mapId, ident readerId)
    {
        BBMessage[] messages = {};
        for (uint i = 0; i < MsgCount; i++) {
            if (Messages[i].MapId == mapId && Messages[i].ReaderId == readerId) {
                messages.insertLast(Messages[i]);
            }
        }
        return messages;
    }

    BBMessage GetSelfMessage(ident mapId, ident writerId)
    {
        for (uint i = 0; i < MsgCount; i++) {
            if (Messages[i].MapId == mapId && Messages[i].WriterId == writerId) {
                return Messages[i];
            }
        }
        return null;
    }

    void RemoveSelfMessages(ident mapId, ident writerId)
    {
        BBMessage msg = GetSelfMessage(mapId, writerId);
        if (valid(msg)) {
            Messages.removeAt(msg.Idx);
        }
        MsgCount = Messages.length();
        Reindex();
    }

    void Reindex()
    {
        for (uint i = 0; i < MsgCount; i++) {
            Messages[i].Idx = i;
        }
    }

    BBMessage GetRandomMessage(ident mapId)
    {
        BBMessage msg;
        uint counter = 0;
        while (counter < 20 && Messages.length() > 0) {
            counter++;
            msg = Messages[Game.Random(0, Messages.length() - 1)];
            if (msg.ReaderId == ZERO_IDENT) {
                return msg;
            }
        }
        return null;
    }

    // readFrom - порядковый номер в уже отобранных публичных объявлениях
    BBMessage[] GetPublicMessages(ident mapId, uint readFrom, uint count)
    {
        uint[] msgIds = {};
        BBMessage[] messages = {};
        for (uint i = 0; i < MsgCount; i++) {
            if (Messages[i].ReaderId == ZERO_IDENT) {
                msgIds.insertLast(Messages[i].Idx);
            }
        }
        for (uint i = readFrom; i < readFrom + count && i < msgIds.length(); i++) {
            messages.insertLast(Messages[msgIds[i]]);
        }
        return messages;
    }

    uint CountPublicMessages(ident mapId)
    {
        uint count = 0;
        for (uint i = 0; i < MsgCount; i++) {
            if (Messages[i].MapId == mapId && Messages[i].ReaderId == ZERO_IDENT) {
                count++;
            }
        }
        return count;
    }
}

BBMessenger Messenger;

void StartMessenger()
{
    Messenger.Load();
}

void SaveMessengerData()
{
    Messenger.Save();
}

// Функционал для досок
bool d_IsSelfMsg(Critter cr, Critter npc)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        return valid(Messenger.GetSelfMessage(map.Id, cr.Id));
    }
    return false;
}

bool d_NotSelfMsg(Critter cr, Critter npc)
{
    return !d_IsSelfMsg(cr, npc);
}

bool d_IsPrivateMsg(Critter cr, Critter npc)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        return (Messenger.GetPrivateMessages(map.Id, cr.Id).length() > 0);
    }
    return false;
}

bool d_NotPrivateMsg(Critter cr, Critter npc)
{
    return !d_IsPrivateMsg(cr, npc);
}

bool d_IsPrivateMsg(Critter cr, Critter npc, int numMsg, int msgPerPage)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        return Messenger.GetPrivateMessages(map.Id, cr.Id).length() > uint(cr.BBMsgPage * msgPerPage + numMsg);
    }
    return false;
}

// lex msg1
void dlg_PrivateMsg5(Critter cr, Critter npc, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }

    uint msgPerPage = 5;
    lexems = "";
    Map map = cr.GetMap();
    BBMessage[] messages = Messenger.GetPrivateMessages(map.Id, cr.Id);
    uint msg = 1;
    for (uint i = msgPerPage * cr.BBMsgPage; i < messages.length(); i++) {
        lexems += "$msg" + msg + "" + Obsolete::GetPlayerName(messages[i].WriterId);
        msg++;
    }
}

void r_SetPrivateMsg(Critter cr, Critter npc, int numMsg, int msgPerPage)
{
    cr.BBSelectedMsg = Messenger.GetPrivateMessages(cr.GetMap().Id, cr.Id)[msgPerPage * cr.BBMsgPage + numMsg].Idx;
}

void dlg_GetMsg(Critter cr, Critter npc, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }

    BBMessage m = Messenger.GetMessage(cr.BBSelectedMsg);
    lexems = "$fromWho" + Obsolete::GetPlayerName(m.WriterId) + "$msg" + m.Message;
}

bool d_IsPublicMsg(Critter cr, Critter npc)
{
    return Messenger.CountPublicMessages(cr.GetMap().Id) > 0;
}

bool d_NotPublicMsg(Critter cr, Critter npc)
{
    return !d_IsPublicMsg(cr, npc);
}

bool d_IsPublicMsg(Critter cr, Critter npc, int numMsg, int msgPerPage)
{
    return (Messenger.GetPublicMessages(cr.GetMap().Id, cr.BBMsgPage * msgPerPage, msgPerPage + numMsg).length() > uint(numMsg));
}

void r_SetPublicMsg(Critter cr, Critter npc, int numMsg, int msgPerPage)
{
    BBMessage[] messages = Messenger.GetPublicMessages(cr.GetMap().Id, cr.BBMsgPage * msgPerPage, msgPerPage + numMsg);
    if (messages.length() > uint(numMsg)) {
        cr.BBSelectedMsg = messages[numMsg].Idx;
    }
}

uint r_SetRandomMsg(Critter cr, Critter npc)
{
    BBMessage msg = Messenger.GetRandomMessage(cr.GetMap().Id);
    if (valid(msg)) {
        cr.BBSelectedMsg = msg.Idx;
        return 5;
    }
    return 8;
}
// lex msg1
void dlg_PublicMsg5(Critter cr, Critter npc, string& lexems)
{
    if (!IS_DIALOG_GENERATED(lexems)) {
        return;
    }

    uint msgPerPage = 5;
    lexems = "";
    Map map = cr.GetMap();
    BBMessage[] messages = Messenger.GetPublicMessages(map.Id, cr.BBMsgPage * 5, 5);
    uint msg = 1;
    for (uint i = 0; i < messages.length(); i++) {
        lexems += "$msg" + msg + "" + Obsolete::GetPlayerName(messages[i].WriterId);
        msg++;
    }
}

// Альдо и запись текста игрока на доску объявлений
#define ENTRY_ALDO       (31) // Гекс, к которому подходит Альдо перед началом записи
#define STR_CANT_REACH   (1)  // Не могу к доске подобраться. Обожди, пока разойдутся все.
#define STR_IN_PLACE     (2) // Давай, говори, чего писать будем... Буду записывать все, что скажешь, после слова "Начали"
#define STR_FINISHED     (3) // Все готово, проверяй...
#define STR_NEXT         (4) // Если чего еще нужно написать, говори. Все после слова "Далее" я занесу сюда. Когда закончишь, скажи "Хватит".
#define DLG_NOTFOUND     (34) // Номер ветки диалога "нет таких..."
#define DLG_FOUND        (35) // Хорошо, напишем персональное объявление... Пойдем со мной, продиктуешь.
#define CTE_CLEAR_VARS   (26) // Событие очистки переменных.
#define CTE_CONFIRM_SAVE (27)
#define _RightKeyWord    #(text)(text.length() <KEYWORD.length() ? false : text.substr(0, KEYWORD.length()) == KEYWORD)
#define _RightKeyWord2   #(text)(text.length() <KEYWORD2.length() ? false : text.substr(0, KEYWORD2.length()) == KEYWORD2)
#define _RightKeyWord3   #(text)(text.length() <KEYWORD3.length() ? false : text.substr(0, KEYWORD3.length()) == KEYWORD3)
#define KEYWORD          ("Начали")
#define KEYWORD2         ("Далее")
#define KEYWORD3         ("Хватит")
#define _MsgFromText     #(text)(text.substr(6, text.length() - 1))
#define _MsgFromText2    #(text)(text.substr(5, text.length() - 1))

uint dlg_GetReaderId(Critter cr, Critter npc, string& lexems)
{
    if (!IS_DIALOG_SAY_MODE(lexems)) {
        return 0;
    }

    Player player = Game.GetPlayer(lexems);
    if (!valid(player)) {
        return DLG_NOTFOUND;
    }

    npc.KlamAldoReaderId = player.GetControlledCritter().Id;
    return DLG_FOUND;
}

void r_MoveAldo(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return;
    }

    Map map = npc.GetMap();
    if (not valid(map)) {
        return;
    }

    npc.KlamAldoBusy = 1;
    if (!NpcPlanes::AddWalkPlane(npc, ENTRY_ALDO, 0, false)) {
        npc.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(npc.DialogId, STR_CANT_REACH));
        npc.KlamAldoBusy = 0;
        return;
    }

    map.KlamAldoId = npc.Id;
    npc.KlamAldoListenId = player.Id;
    npc.KlamAldoBusy = 1;
    npc.OnNpcPlaneEnd.Subscribe(_AldoPlaneEnd);
    if (npc.GetTimeEvents(CTE_CLEAR_VARS) == 0) {
        npc.AddTimeEvent(cte_ClearVars, Time::RealMinute(10), CTE_CLEAR_VARS);
    }
}

bool _AldoPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (cr.KlamAldoBusy == 1 && plane.Type == AI_PLANE_WALK && reason == REASON_SUCCESS) {
        cr.KlamAldoBusy = 2;
        cr.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(cr.DialogId, STR_IN_PLACE));
        Game.AddTextListener(SAY_NORM, KEYWORD, cr.GetMap().ProtoId.hash, listen_FirstMessage);
        NpcPlanes::AddMiscPlane(cr, 0, Game.GetFullSecond() + Time::RealMinute(2), BulletinBoard::plane_AldoFinished);
        if (cr.GetTimeEvents(CTE_CLEAR_VARS) == 0) {
            cr.AddTimeEvent(cte_ClearVars, Time::RealMinute(10), CTE_CLEAR_VARS);
        }
        // cr.SetEvent( CRITTER_EVENT_PLANE_END, "" );
        cr.OnNpcPlaneEnd.Unsubscribe(_AldoPlaneEnd);
        // return PLANE_DISCARD;
        return false;
    }
    // return PLANE_RUN_GLOBAL;
    return true;
}

void listen_Next(Critter player, string text)
{
    Map map = player.GetMap();
    if (not valid(map)) {
        return;
    }

    Critter cr = Game.GetCritter(map.KlamAldoId);
    if (valid(cr) && _RightKeyWord2(text)) {
        dict<ident, uint> bbMsgCount = player.BBMsgCount.clone();
        if (bbMsgCount.get(cr.Id, 0) >= 3) {
            ClearTempVariables(cr);
            cr.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(cr.DialogId, 6));
            NpcPlanes::AddWalkPlane(cr, 0, cr.HomeHexX, cr.HomeHexY, cr.HomeDir, false, 0);
            return;
        }
        else {
            bbMsgCount[cr.Id] = bbMsgCount.get(cr.Id, 0) + 1;
            player.BBMsgCount = bbMsgCount;
        }

        if (cr.KlamAldoListenId == player.Id) {
            Messenger.ContinueMessage(map.Id, cr.KlamAldoListenId, cr.KlamAldoReaderId, "\n" + _MsgFromText2(text));
            // ClearTempVariables(cr);
            // cr.AddTimeEvent(cte_SayMsgSaved, Settings.TimeMultiplier*2, CTE_CONFIRM_SAVE);
            cr.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(cr.DialogId, 5));
        }
    }
}

void listen_End(Critter player, string text)
{
    Map map = player.GetMap();
    if (not valid(map)) {
        return;
    }

    Critter cr = Game.GetCritter(map.KlamAldoId);
    if (valid(cr) && _RightKeyWord3(text)) {
        ClearTempVariables(cr);
        cr.AddTimeEvent(cte_SayMsgSaved, Settings.TimeMultiplier * 2, CTE_CONFIRM_SAVE);
    }
}

void listen_FirstMessage(Critter player, string text)
{
    Map map = player.GetMap();
    if (not valid(map)) {
        return;
    }

    Critter cr = Game.GetCritter(map.KlamAldoId);
    if (valid(cr) && _RightKeyWord(text)) {
        if (cr.KlamAldoListenId == player.Id) {
            Messenger.RemoveSelfMessages(map.Id, player.Id);
            Messenger.AddMessage(map.Id, cr.KlamAldoListenId, cr.KlamAldoReaderId, 0, _MsgFromText(text));
            // ClearTempVariables(cr);
            cr.AddTimeEvent(cte_SayMsgFirstSaved, Settings.TimeMultiplier * 2, CTE_CONFIRM_SAVE);
        }
    }
}

void plane_AldoFinished(Critter cr)
{
    ClearTempVariables(cr);
    NpcPlanes::DropPlanes(cr);
}

uint cte_SayMsgFirstSaved(Critter cr, any identifier, uint& rate)
{
    cr.SayMsg(SAY_NORM, TextPackName::Dialogs, DLGSTR(cr.DialogId, STR_NEXT));
    hstring proto = cr.GetMap().ProtoId;
    Game.AddTextListener(SAY_NORM, KEYWORD2, proto.hash, listen_Next);
    Game.AddTextListener(SAY_NORM, KEYWORD3, proto.hash, listen_End);
    Game.EraseTextListener(SAY_NORM, KEYWORD, proto.hash);
    return 0;
}

uint cte_SayMsgSaved(Critter cr, any identifier, uint& rate)
{
    hstring proto = cr.GetMap().ProtoId;
    Game.EraseTextListener(SAY_NORM, KEYWORD2, proto.hash);
    Game.EraseTextListener(SAY_NORM, KEYWORD3, proto.hash);
    cr.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(cr.DialogId, STR_FINISHED));
    NpcPlanes::AddWalkPlane(cr, 0, cr.HomeHexX, cr.HomeHexY, cr.HomeDir, false, 0);
    return 0;
}

uint cte_ClearVars(Critter cr, any identifier, uint& rate)
{
    ClearTempVariables(cr);
    return 0;
}

void ClearTempVariables(Critter cr)
{
    if (cr.KlamAldoBusy > 0) {
        cr.KlamAldoBusy = 0;
    }

    cr.KlamAldoListenId = ZERO_IDENT;
    cr.KlamAldoReaderId = ZERO_IDENT;

    Game.EraseTextListener(SAY_NORM, KEYWORD, cr.GetMap().ProtoId.hash);
    Game.EraseTextListener(SAY_NORM, KEYWORD2, cr.GetMap().ProtoId.hash);
    Game.EraseTextListener(SAY_NORM, KEYWORD3, cr.GetMap().ProtoId.hash);

    if (cr.GetTimeEvents(CTE_CLEAR_VARS) != 0) {
        cr.RemoveTimeEvents(CTE_CLEAR_VARS);
    }

    NpcPlanes::DropPlanes(cr);
}

// debug
void drop_planes(Critter cr, any crId)
{
    Critter npc = Game.GetCritter(crId);
    if (valid(npc)) {
        NpcPlanes::DropPlanes(npc);
        return;
    }
    cr.Say(SAY_NETMSG, "cr invalid");
}

void add_public_msg(Critter cr, int numMsg, any readerId, any writerId)
{
    if (!valid(cr.GetMap())) {
        return;
    }

    ident mapId = cr.GetMap().Id;
    for (int i = 0; i < numMsg; i++) {
        Messenger.AddMessage(mapId, (ident(writerId) == ZERO_IDENT ? cr.Id : ident(writerId)), readerId, 0, "message #" + i);
    }
}

void save(Critter cr)
{
    Messenger.Save();
}

void load(Critter cr)
{
    Messenger.Load();
}

void GetMsg(Critter cr, int id)
{
    cr.Say(SAY_NETMSG, "Idx" + Messenger.Messages[id].Idx + " " + Messenger.Messages[id].Message);
}

void ResetBBMsgCount(Critter cr, Critter npc)
{
    auto values = cr.BBMsgCount.clone();
    values[npc.Id] = 0;
    cr.BBMsgCount = values;
}
