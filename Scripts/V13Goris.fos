// FOS Server Sort 2
// Author: Sufir

///@ Property Game PrivateServer uint EndingV13DclawSaved

// Defines
#define QUEST_TIMEOUT (1) // Переодичность, в игровых сутках, с которой квест "Яйцо" дается игрокам.
uint QuestAllowTime = 0;

/* =================== Диалоги =================== */

bool d_QuestCheck(Critter player, Critter npc)
{
    // Проверяем как давно квест брался другими игроками
    if (QuestAllowTime < Game.GetFullSecond()) {
        return true;
    }
    return false;
}

bool d_QuestNotCheck(Critter player, Critter npc)
{
    // Проверяем как давно квест брался другими игроками
    if (!d_QuestCheck(player, npc)) {
        return true;
    }
    return false;
}

// Проверяем в броне ли игрок.
bool d_ArmorCheck(Critter player, Critter npc)
{
    Item armor = player.GetItem(ItemProperty::CritterSlot, SLOT_ARMOR);
    if (armor != null) {
        return armor.ProtoId == Content::Item::advanced_power_armor || armor.ProtoId == Content::Item::advanced_power_armor_mk2;
    }
    return false;
}

// Проверяем в броне ли игрок.
bool d_ArmorNotCheck(Critter player, Critter npc)
{
    if (!d_ArmorCheck(player, npc)) {
        return true;
    }
    return false;
}

//
void r_AddEgg(Critter player, Critter npc)
{
    Item Egg = player.AddItem(Content::Item::easter_egg, 1);
    if (!valid(Egg)) {
        return;
    }
    Egg.SetupScript(ItemV13Egg::_EggInit);
    Egg.V13GorisEggPlayerId = player.Id;

    /*int[] ChangeStages = { 0, 3, 5 };
       V13DClawLib::SetGroupQuestStage( player, ChangeStages, 1 );*/

    // Устанавливаем таймаут для квеста. Квест не может быть взят другими игроками ранее чем через QUEST_TIMEOUT суток.
    QuestAllowTime = Game.GetFullSecond() + (60 * 60 * 24 * QUEST_TIMEOUT);
}

void r_StartDclawRebirth(Critter player, Critter prof)
{
    if (!valid(prof)) {
        return;
    }

    Map map = prof.GetMap();
    uint[] args = {map.Id, 0};

    switch (Game.EndingV13DclawSaved) {
    case 0:
        Game.EndingV13DclawSaved = 1;
        args[1] = 251;
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(60 * 60 * 24 * Game.Random(7, 9)), DclawKidBorn, args);
        break;
    case 1:
        Game.EndingV13DclawSaved = 2;
        args[1] = 252;
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(60 * 60 * 24 * Game.Random(7, 9)), DclawKidBorn, args);
        break;
    case 2:
        Game.EndingV13DclawSaved = 3;
        args[1] = 253;
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(60 * 60 * 24 * Game.Random(7, 9)), DclawKidBorn, args);
        break;
    default:
        break;
    }
}

void DclawKidBorn(uint[] values)
{
    // Game.Log( " MapID = " + values[0] + " Entry " + values[1] );
    Map map = Game.GetMap(values[0]);
    if (!valid(map)) {
        return;
    }
    DclawKid(map, values[1]);
}

Critter DclawKid(Map map, uint EntSpawn)
{
    uint16 x = 0, y = 0;
    if (!Entrance::MapGetEntryCoords(map, EntSpawn, 0, x, y)) {
        return null;
    }

    int[] props = {CritterProperty::DialogId,
                   Content::Dialog::mob_int_deathclaw.hash,
                   CritterProperty::BagId,
                   Bags::Empty,
                   CritterProperty::ReplicationTime,
                   60 * 24 * 7 /*репликация раз в неделю*/,
                   CritterProperty::MaxLife,
                   180,
                   CritterProperty::ActionPointsBase,
                   8,
                   CritterProperty::Intellect,
                   8,
                   CritterProperty::KillExperience,
                   100};
    return map.AddNpc(Content::Critter::SmToughDeathclaw, x, y, Game.Random(1, 4), Tla::GetCritPropsDict(props));
}
