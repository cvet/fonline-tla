// FOS Server
// Author: Dagnir, rifleman17

#define MSG_IM_HAVE_ILLEGAL_ITEMS (129) // Номер сообщения, отсылаемого игроком, если у него в инвентаре есть запрещенные предметы
#define MSG_CANCEL_PICKUP         (500)
#define STR_NO_ILLEGAL_ITEMS      (5200) // Номер строки "ты зачем принес сюда это!"
#define PLANE_LOOT                (30)

void _MapInit(Map map, bool firstTime)
{
    map.OnCritterIn.Subscribe(_MapInCritter);

    auto critters = map.GetCritters(CritterFindType::AliveNpc);
    for (uint i = 0; i < critters.length(); i++) {
        auto cr = critters[i];
        cr.ReplicationTime = 1;
        cr.MeleeDamageBase = 9999;
        cr.ActionPointsBase = 300;
        cr.ArmorClassBase = 90;
        cr.CriticalChanceBase = 95;
        cr.BonusLook = 300;
        cr.SkillUnarmed = 300;
        cr.SkillEnergyWeapons = 300;
        cr.SkillBigGuns = 300;
        cr.SkillSmallGuns = 300;
        cr.IsNoEnemyStack = true;
        cr.IsInvulnerable = true;
        cr.IsUnlimitedAmmo = true;
        cr.IsNoPush = true;
        cr.IsNoSteal = true;
        cr.IsNoDrop = true;
        cr.IsNoLoot = true;
    }
}

void _MapInCritter(Map map, Critter cr)
{
    if (HasIllegalItems(cr)) {
        SendMessage::ToAllOnMap(cr, MSG_IM_HAVE_ILLEGAL_ITEMS, cr.Id);
    }
}

void _GuardInit(Critter cr, bool firstTime)
{
    cr.ReplicationTime = 1;
    cr.MeleeDamageBase = 9999;
    cr.ActionPointsBase = 300;
    cr.ArmorClassBase = 90;
    cr.CriticalChanceBase = 95;
    cr.BonusLook = 300;
    cr.SkillSmallGuns = 300;
    cr.SkillBigGuns = 300;
    cr.SkillUnarmed = 300;
    cr.SkillEnergyWeapons = 300;
    cr.IsUnlimitedAmmo = true;
    cr.IsNoLoot = true;
    cr.IsNoDrop = true;
    cr.IsNoSteal = true;
    cr.IsNoPush = true;
    cr.IsInvulnerable = true;
    cr.IsNoEnemyStack = true;
    cr.OnSomeCritterStealing.Subscribe(_GuardSmthStealing);
    cr.OnSomeCritterAttack.Subscribe(_GuardSmthAttack);
    cr.OnSomeCritterUseItem.Subscribe(_GuardSmthUseItem);
    cr.OnSomeCritterDropItem.Subscribe(_GuardSmthDropItem);
    cr.OnMessage.Subscribe(_GuardMessage);
    cr.OnSomeCritterDead.Subscribe(_NpcSmthDead);
    cr.OnNpcPlaneEnd.Subscribe(_NpcPlaneEnd);
}

void _AlienInit(Critter cr, bool firstTime)
{
    cr.OnSomeCritterStealing.Subscribe(_GuardSmthStealing);
    cr.OnSomeCritterAttack.Subscribe(_GuardSmthAttack);
}

void _GuardMessage(Critter cr, Critter fromCr, int message, any value)
{
    NpcPlanes::NpcPlane[] planes = {};
    if (message == MSG_IM_HAVE_ILLEGAL_ITEMS) {
        NpcPlanes::AddAttackPlane(cr, 0, value, true);
        Critter target = Game.GetCritter(value);
        if (!valid(target)) {
            return;
        }
        if (!target.IsControlledByPlayer) {
            return;
        }
        if (Game.Random(0, 4) == 1) {
            cr.SayMsg(SAY_SHOUT, TextPackName::Text, STR_NO_ILLEGAL_ITEMS, Obsolete::GetPlayerName(value));
        }
    }
    else {
        if (message == MSG_CANCEL_PICKUP) {
            uint count = NpcPlanes::GetPlanes(cr, planes);
            if (count == 0) {
                return;
            }
            uint erased = 0;
            for (uint i = 0; i < count; i++) {
                if (planes[i].Identifier == PLANE_LOOT && planes[i].IdentifierExt == uint(value) && NpcPlanes::ErasePlane(cr, i - erased)) {
                    erased++;
                }
            }
            if (NpcPlanes::GetPlanes(cr, PLANE_LOOT, value, planes) != 0) {
                for (uint i = 0; i < planes.length(); i++) {
                    if (valid(planes[i])) {
                        NpcPlanes::ErasePlane(cr, i);
                    }
                }
            }
        }
    }
}

void _GuardSmthStealing(Critter guard, Critter thief, Critter fromCr, Item, uint)
{
    if (thief.IsControlledByPlayer && guard.IsAlive()) {
        NpcPlanes::AddAttackPlane(guard, 0, thief, 1, true);
    }
}

void _GuardSmthAttack(Critter guard, Critter attacker, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    if (attacker.IsControlledByPlayer) {
        NpcPlanes::AddAttackPlane(guard, 0, attacker, true);
    }
}

void _GuardSmthDropItem(Critter npc, Critter fromCr, Item item)
{
    if (fromCr.IsControlledByPlayer && npc.IsAlive()) {
        hstring pid = item.ProtoId;
        if (pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine || pid == Content::Item::active_dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr, true);
        }
    }
    if (!npc.IsAlive()) {
        return;
    }
    if (!CheckItemIsIllegal(item)) {
        return;
    }
    NpcPlanes::AddPickPlane(npc, AI_PLANE_ATTACK_PRIORITY, item, ZERO_IDENT, true);
}

void _GuardSmthUseItem(Critter npc, Critter fromCr, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (fromCr.IsControlledByPlayer && npc.IsAlive()) {
        hstring pid = item.ProtoId;
        if (pid == Content::Item::plastic_explosives || pid == Content::Item::mine || pid == Content::Item::toggle_switch || pid == Content::Item::dynamite ||
            pid == Content::Item::active_dynamite || pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr, true);
        }
    }
}

void _NpcSmthDead(Critter npc, Critter fromCrit, Critter killer)
{
    if (_CritCanDropItemsOnDead(fromCrit)) {
        NpcPlanes::AddWalkPlane(npc, 0, PLANE_LOOT, fromCrit.Id, fromCrit.HexX, fromCrit.HexY, 6, true, 1);
    }
}

// Illegal items list and checks

const hstring[] Pids_IllegalItems = {Content::Item::active_dynamite,
                                     Content::Item::active_plastic_explosive,
                                     Content::Item::active_mine,
                                     Content::Item::toggle_switch};

bool HasIllegalItems(Critter cr)
{
    Item[] items = cr.GetItems();
    for (uint i = 0; i < items.length(); i++) {
        if (CheckItemIsIllegal(items[i])) {
            return true;
        }
    }
    return false;
}

bool CheckItemIsIllegal(Item item)
{
    if (!valid(item)) {
        return false;
    }
    return Pids_IllegalItems.exists(item.ProtoId);
}

bool _NpcPlaneEnd(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    if (plane.Identifier == PLANE_LOOT && reason == REASON_SUCCESS) {
        Critter cr = Game.GetCritter(plane.IdentifierExt);
        if (valid(cr) && cr.IsDead()) {
            Item[] items = {};
            items.insertLast(cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory));
            items.insertLast(cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Main));
            items.insertLast(cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Secondary));
            items.insertLast(npc.GetMap().GetItems(cr.HexX, cr.HexY));

            for (uint i = 0; i < items.length(); i++) {
                auto type = items[i].Type;
                if (type < ItemType::Armor || type > ItemType::Key) {
                    items[i] = null;
                }
            }

            ItemMovement::MoveItems(items, npc);

            SendMessage::ToAllOnMap(npc, MSG_CANCEL_PICKUP, plane.IdentifierExt);
            _CritAnimatePickUp(npc);
            CritterState::Wait(npc, Settings.Breaktime);
        }
        return false; // Skip global and end plane
    }
    return true; // Run global
}
