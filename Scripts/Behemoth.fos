// FOS Server Sort 2
// Author: rifleman17
// Радиоуправляемые НПЦ

///@ Property Critter PrivateServer ident BehemothOwner      // Переменная в которой хранится Id владельца
///@ Property Critter PrivateServer int  BehemothRadio      // Переменная в которой хранится номер радиоканала
///@ Property Critter PrivateServer int  BehemothLastComand // Переменная в которой хранится время последней команды.
///@ Property Critter PrivateServer int  BehemothOrderType  // Тип приказа выполняемого нпц
///@ Property Critter PrivateServer int  BehemothLastOrder  // Переменная в которой хранится время принятия последнего приказа
///@ Property Critter PrivateServer any  BehemothParam_1
///@ Property Critter PrivateServer any  BehemothParam_2
///@ Property Critter PrivateServer int  BehemothLastReport

#define _GetRadioChannel    #(crId)(Game.GetCritter(crId).BehemothRadio)
#define _GetLastCommandTime #(crId)(Game.GetCritter(crId).BehemothLastComand)

#define TYPE_ORDER_ROUTE    (1) // Тип приказа "маршрут"
#define TYPE_ORDER_CAMERA   (2) // Тип приказа "камера", просмотр местности, на которой находится бегемот
#define TYPE_ORDER_MESSAGE  (3) // Робот произносит реплику игрока
#define TYPE_ORDER_MOVE     (4) // Робот двигается вперед на икс гексов
#define TYPE_ORDER_PATROL   (5) // Робот сообщает о тех, кого видит
#define TYPE_ORDER_ATTACK   (6) // Робот атакует других бегемотов

#define STR_EXECUTE         (606) // Выполняю...
#define STR_CANNOT_EXECUTE  (605) // Не могу выполнить...
#define STR_PLANES_EXECUTED (607) // Все приказы выполнены

#define _IsCmdRoute         #(cmdText)(cmdText == commands[0] || cmdText == commands[1])
#define _IsCmdCamera        #(cmdText)(cmdText == commands[2] || cmdText == commands[3])
#define _IsCmdMSG           #(cmdText)(cmdText == commands[4] || cmdText == commands[5])
#define _IsCmdMove          #(cmdText)(cmdText == commands[6] || cmdText == commands[7])
#define _IsCmdPatrol        #(cmdText)(cmdText == commands[8] || cmdText == commands[9])
#define _IsCmdChannel       #(cmdText)(cmdText == commands[10] || cmdText == commands[11])
#define _IsCmdAttack        #(cmdText)(cmdText == commands[12] || cmdText == commands[13])

#define ENTER_ENTRY         (hstring("0"))
#define EXIT_ENTRY          (hstring("0"))

#define PLANE_EXIT_MAP      (17)
#define PLANE_MOVE          (18)

#define DL                  #(s)(Game.Log(s))
// #define DL#(s)
// todo: сделать периодическую очистку планов если они не выполнены длительное время

hstring[] restrictedLocations = {Content::Location::replication_1,
                                 Content::Location::replication_2,
                                 Content::Location::replication_3,
                                 Content::Location::replication_4,
                                 Content::Location::replication_hell};

string[] commands =
    {"МАРШРУТ", "ROUTE", "КАМЕРА", "CAMERA", "СООБЩЕНИЕ", "MESSAGE", "ХОД", "MOVE", "ПАТРУЛЬ", "PATROL", "СМЕНАКАНАЛА", "CHANGECHANNEL", "АТАКА", "ATTACK"};

ident[] behemoths = {};
int[] listenedChannels = {};

Location GetLocationTo(Critter cr)
{
    return cr.BehemothOrderType == TYPE_ORDER_ROUTE ? Game.GetLocation(ident(cr.BehemothParam_1)) : null;
}

void RememberBehemoth(Critter cr)
{
    if (behemoths.find(cr.Id) < 0) {
        behemoths.insertLast(cr.Id);
    }

    int channel = cr.BehemothRadio;
    if (listenedChannels.find(channel) < 0) {
        DL("adding channel " + channel);
        listenedChannels.insertLast(channel);
        Game.AddTextListener(SAY_RADIO, "КОМАНДА", channel, listen_Behemoth);
        // Game.AddTextListener(SAY_RADIO, "COMMAND", channel, listen_Behemoth);
    }
}

void ChangeChannel(Critter cr, uint newChannel)
{
    DL("change channel");
    cr.BehemothRadio = newChannel;
    RememberBehemoth(cr);
    bool usedChannel = true;
    for (int i = 0, l = listenedChannels.length(); i < l; i++) {
        DL("channel " + i);
        usedChannel = false;
        for (int j = 0, k = behemoths.length(); j < k; j++) {
            Critter behemoth = Game.GetCritter(behemoths[j]);
            if (behemoth !is null && behemoth.BehemothRadio == int(listenedChannels[i])) {
                usedChannel = true;
            }
        }
        if (!usedChannel) {
            DL("erasing channel");
            Game.RemoveTextListener(SAY_RADIO, "КОМАНДА", listenedChannels[i]);
            // Game.RemoveTextListener(SAY_RADIO, "COMMAND", listenedChannels[i]);
            listenedChannels.removeAt(i);
            l--;
            i--;
        }
    }
}

void listen_Behemoth(Critter player, string text)
{
    for (uint i = 0; i < behemoths.length(); i++) {
        Critter cr = Game.GetCritter(behemoths[i]);
        if (cr !is null && cr.BehemothOwner == player.Id) {
            Item[] items = player.GetItems();
            for (uint j = 0; j < items.length(); j++) {
                Item item = items[j];
                if (item.ProtoId == Content::Item::radio && int(item.RadioChannel) == _GetRadioChannel(behemoths[i]) &&
                    (int(Game.GetFullSecond()) > _GetLastCommandTime(behemoths[i]) + Time::RealSecond(5))) {
                    BehemothCommand(behemoths[i], text);
                }
            }
        }
    }
}

void BehemothCommand(ident behemothId, string cmd)
{
    if (!valid(Game.GetCritter(behemothId))) {
        Game.Log("invalid Behemoth");
        return;
    }

    int16 globalX = 0;
    int16 globalY = 0;
    string[] valuesStr = cmd.split(" ");
    if (valuesStr.length() > 1) {
        string firstKeyWord = valuesStr[1].upper();
        if (_IsCmdRoute(firstKeyWord)) {
            globalX = GetIntValue(valuesStr, 2, -1);
            globalY = GetIntValue(valuesStr, 3, -1);
            Location[] locations = Game.GetLocations(globalX, globalY, Settings.GlobalMapZoneLength);
            // Переданы координаты, куда нужно двигаться.
            if (globalX > 0 && globalY > 0 && locations.length() > 0) {
                for (uint i = 0, l = locations.length(); i < l; i++) {
                    Location loc = locations[i];
                    if (valid(loc) && !loc.Hidden && restrictedLocations.find(loc.ProtoId) == -1) {
                        Map map = loc.GetMapByIndex(0);
                        if (valid(map) && Entrance::MapCountEntry(map, ENTER_ENTRY) > 0) {
                            SetOrder(behemothId, TYPE_ORDER_ROUTE, loc.Id, 0);
                            Game.RadioMessageMsg(_GetRadioChannel(behemothId),
                                                 TextPackName::Text,
                                                 600,
                                                 "$where@text Locations " + STR_LOC_NAME(loc.ProtoId) + "@");
                            RunOrder(behemothId, TYPE_ORDER_ROUTE);
                            return;
                        }
                    }
                }
            }
            Game.RadioMessageMsg(_GetRadioChannel(behemothId), TextPackName::Text, 601);
        }
        else if (_IsCmdCamera(firstKeyWord)) {
            RunOrder(behemothId, TYPE_ORDER_CAMERA);
        }
        else if (_IsCmdMSG(firstKeyWord)) {
            string message = "";
            for (uint i = 2, l = valuesStr.length(); i < l; i++) {
                message += valuesStr[i] + " ";
            }
            RunOrder(behemothId, TYPE_ORDER_MESSAGE, message);
        }
        else if (_IsCmdMove(firstKeyWord)) {
            // второе слово число гексов, на которое надо перейти, третье - направление в котором надо двигаться
            // если число гексов = 0, просто будет изменено направление
            // если второго слова нет, движение будет производиться в существующем  направлении
            int steps = GetIntValue(valuesStr, 2, 0);
            int dir = GetIntValue(valuesStr, 3, 6);
            SetOrder(behemothId, TYPE_ORDER_MOVE, steps, dir);
            RunOrder(behemothId, TYPE_ORDER_MOVE);
            return;
        }
        else if (_IsCmdPatrol(firstKeyWord)) {
            // указывается радиус, но не больше 10 гексов, в пределах которого робот передает по радио ники всех игроков, кого встречает
            int radius = CLAMP(GetIntValue(valuesStr, 2, 0), 0, 30);
            SetOrder(behemothId, TYPE_ORDER_PATROL, radius, 0);
            RunOrder(behemothId, TYPE_ORDER_PATROL);
        }
        else if (_IsCmdChannel(firstKeyWord)) {
            int channel = GetIntValue(valuesStr, 2, _GetRadioChannel(behemothId));
            ChangeChannel(Game.GetCritter(behemothId), channel);
            Game.RadioMessageMsg(_GetRadioChannel(behemothId), TextPackName::Text, 612);
        }
        else if (_IsCmdAttack(firstKeyWord)) {
            RunOrder(behemothId, TYPE_ORDER_ATTACK);
        }
    }
}

// Orders

void SetOrder(ident crId, uint orderType, any orderParam, any orderParam2)
{
    Critter cr = Game.GetCritter(crId);
    cr.BehemothLastOrder = Game.GetFullSecond();
    cr.BehemothOrderType = orderType;
    cr.BehemothParam_1 = orderParam;
    cr.BehemothParam_2 = orderParam2;
}

void CancelOrder(ident crId, bool noMessage)
{
    Critter cr = Game.GetCritter(crId);
    cr.BehemothLastOrder = 0;
    cr.BehemothOrderType = 0;
    cr.BehemothParam_1 = 0;
    cr.BehemothParam_2 = 0;

    if (!noMessage) {
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 602);
    }
}

void RunOrder(ident crId, uint orderType, string param)
{
    Critter cr = Game.GetCritter(crId);
    if (!valid(cr)) {
        return;
    }
    switch (orderType) {
    case TYPE_ORDER_MESSAGE:
        RunOrderMessage(cr, param);
        break;
    }
}

void RunOrder(ident crId, uint orderType)
{
    DL("RunOrder " + orderType + "; beh " + crId);
    Critter cr = Game.GetCritter(crId);
    if (!valid(cr)) {
        return;
    }
    switch (orderType) {
    case TYPE_ORDER_ROUTE:
        RunOrderRoute(cr);
        break;
    case TYPE_ORDER_CAMERA:
        RunOrderCamera(cr);
        break;
    case TYPE_ORDER_MOVE:
        RunOrderMove(cr);
        break;
    case TYPE_ORDER_PATROL:
        RunOrderPatrol(cr);
        break;
    case TYPE_ORDER_ATTACK:
        RunOrderAttack(cr);
    default:
        return;
    }
}

// Скрипт бегемота
void _BehemothInit(Critter cr, bool firstTime)
{
    RememberBehemoth(cr);

    cr.OnGlobalMapProcess.Subscribe(_BehemothOnGlobal);
    cr.OnIdle.Subscribe(_BehemothIdle);
    cr.OnNpcPlaneEnd.Subscribe(_BehemothPlaneEnd);
    cr.OnKill.Subscribe(_BehemothKill);
    cr.OnAttacked.Subscribe(_BehemothAttacked);
    cr.OnCritterAppearedDist1.Subscribe(_BehemothShowCritter1);
    cr.OnSomeUseItemOnMe.Subscribe(_BehemothUseItemOnMe);
    cr.OnSomeUseSkillOnMe.Subscribe(_BehemothUseSkillOnMe);
}

bool _BehemothOnGlobal(Critter cr, int type, Item car, float x, float y, float toX, float toY, float speed, uint encounterDescriptor, bool waitForAnswer)
{
    if (encounterDescriptor != 0) {
        return false; // Энкаунтер
    }
    if (cr.BehemothOrderType == TYPE_ORDER_ROUTE) {
        Location locTo = GetLocationTo(cr);
        if (valid(locTo)) {
            if (uint(x) == locTo.WorldX && uint(y) == locTo.WorldY) {
                ident mapId = locTo.GetMapByIndex(0).Id;
                if (Obsolete::CritterTransitToMapEntry(cr, mapId, ENTER_ENTRY)) {
                    cr.HomeMapId = mapId;
                    cr.HomeHexX = cr.HexX;
                    cr.HomeHexY = cr.HexY;
                    cr.HomeDir = cr.Dir;
                    Game.RadioMessageMsg(cr.BehemothRadio,
                                         TextPackName::Text,
                                         603,
                                         "$where@text Locations " + STR_LOC_NAME(locTo.ProtoId) + "@$x" + cr.HexX + "$y" + cr.HexY);
                }
                CancelOrder(cr.Id, true);
                return true;
            }
            speed = GLOBAL_MAP_BASE_SPEED;
            if (uint(toX) != locTo.WorldX || uint(toY) != locTo.WorldY) {
                toX = locTo.WorldX;
                toY = locTo.WorldY;
                return true;
            }
        }
        else {
            CancelOrder(cr.Id, false);
            return true;
        }
    }
    else {
        if (toX != x || toY != y) {
            toX = x;
            toY = y;
            return true;
        }
    }
    return false;
}

void _BehemothIdle(Critter cr)
{
    int orderCurrent = cr.BehemothOrderType;
    Map map = cr.GetMap();
    Location loc;
    Location locTo;

    switch (orderCurrent) {
    case TYPE_ORDER_ROUTE:
        if (valid(map)) {
            loc = map.GetLocation();
        }
        locTo = GetLocationTo(cr);
        if (valid(locTo) && valid(loc) && locTo.Id != loc.Id) {
            Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 604);
            RunOrderRoute(cr);
        }
        else {
            CancelOrder(cr.Id, false);
        }
        break;
    default:
        break;
    }
}

bool _BehemothPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (plane.Identifier == PLANE_MOVE && valid(cr.GetMap()) && cr.IsAlive()) {
        cr.HomeHexX = cr.HexX;
        cr.HomeHexY = cr.HexY;
        cr.HomeDir = cr.Dir;
        CancelOrder(cr.Id, false);
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, STR_PLANES_EXECUTED);
    }
    return true;
}

void _BehemothShowCritter1(Critter cr, Critter showCrit)
{
    if (cr.BehemothOrderType == TYPE_ORDER_PATROL) {
        if (showCrit.IsControlledByPlayer && showCrit.IsAlive()) {
            cr.SayMsg(SAY_NORM, TextPackName::Text, 608, "$pname" + Obsolete::GetPlayerName(showCrit.Id));
            Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 608, "$pname" + Obsolete::GetPlayerName(showCrit.Id));
        }
    }
}

void _BehemothKill(Critter cr, Critter victim)
{
    if (victim.IsControlledByPlayer) {
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 609, "$pname" + Obsolete::GetPlayerName(victim.Id));
    }
}

bool _BehemothAttacked(Critter cr, Critter attacker)
{
    string attackerName = "некто";
    if (cr.BehemothLastReport < int(Game.GetFullSecond() - Time::RealMinute(1))) {
        if (attacker.IsControlledByPlayer) {
            attackerName = Obsolete::GetPlayerName(attacker.Id);
        }
        else {
            attackerName = "@text Dialogs " + STR_NPC_NAME(attacker.DialogId, attacker.ProtoId) + "@";
        }
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 610, "$pname" + attackerName);
    }
    return false;
}

bool _BehemothUseItemOnMe(Critter cr, Critter whoUse, Item item, uint param)
{
    if (item.ProtoId == Content::Item::super_tool_kit) {
        if (cr.CurrentHp >= cr.MaxLife) {
            whoUse.SayMsg(SAY_NETMSG, TextPackName::Text, 613);
        }
        else {
            int hp = int(500 * whoUse.SkillRepair / 300) + Game.Random(300, 500);
            hp = CLAMP(hp, 0, cr.MaxLife - cr.CurrentHp);
            whoUse.Experience += hp * (CLAMP(whoUse.Level, 0, 10) / 10);
            cr.CurrentHp += hp;
            Game.DestroyItem(item, 1);
            whoUse.SayMsg(SAY_NETMSG, TextPackName::Text, 614);
        }
    }
    else {
        whoUse.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrUseNothing);
    }
    return true;
}

bool _BehemothUseSkillOnMe(Critter cr, Critter whoUse, CritterProperty skill)
{
    cr.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrUseNothing);
    return true;
}

// Маршрут/Route
void RunOrderRoute(Critter cr)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        uint16 hx = cr.HexX;
        uint16 hy = cr.HexY;
        Entrance::GetNearEntry(map, EXIT_ENTRY, hx, hy);
        if (Entrance::GetNearEntry(map, EXIT_ENTRY, hx, hy)) {
            NpcPlanes::AddWalkPlane(cr, AI_PLANE_WALK_PRIORITY, PLANE_EXIT_MAP, Game.GetFullSecond(), hx, hy, 0, false, 3);
        }
        NpcPlanes::AddMiscPlane(cr, AI_PLANE_MISC_PRIORITY, Game.GetFullSecond() + Time::RealSecond(5), Behemoth::plane_ToGlobal);
    }
}

void plane_ToGlobal(Critter cr)
{
    cr.TransitToGlobal();
}

// Камера
void RunOrderCamera(Critter cr)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, STR_CANNOT_EXECUTE);
        return;
    }
    else {
        any[] values = {cr.BehemothOwner, map.Id, cr.HexX, cr.HexY, cr.Dir};
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, STR_EXECUTE);
        Game.DeferredCall(SECOND_TICKS(2), ShowCamera, values);
    }
}

void ShowCamera(any[] values)
{
    Critter player = Game.GetCritter(values[0]);
    if (valid(player) && player.IsControlledByPlayer) {
        Map map = Game.GetMap(ident(values[1]));
        if (valid(map)) {
            player.ViewMap(map, 50, values[2], values[3], values[4]);
        }
    }
}

// Сообщение
void RunOrderMessage(Critter cr, string message)
{
    cr.Say(SAY_NORM, message);
}

// Движение
void RunOrderMove(Critter cr)
{
    Map map = cr.GetMap();
    if (!valid(map)) {
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, STR_CANNOT_EXECUTE);
        return;
    }
    uint16 hx = cr.HexX;
    uint16 hy = cr.HexY;
    uint8 dir = cr.BehemothParam_2;
    if (dir > 5) {
        dir = cr.Dir;
    }
    uint steps = CLAMP(cr.BehemothParam_1, 0, 30);
    map.MoveHexByDir(hx, hy, dir, steps);
    cr.SetDir(dir);
    NpcPlanes::AddWalkPlane(cr, AI_PLANE_WALK_PRIORITY, PLANE_MOVE, Game.GetFullSecond(), hx, hy, dir, false, 0);
}

// Атака
void RunOrderAttack(Critter cr)
{
    Map map = cr.GetMap();
    if (map == null) {
        return;
    }

    Critter[] critters = map.GetCritters(CritterFindType::AliveNpc);
    if (!critters.isEmpty()) {
        for (uint i = 0; i < critters.length(); i++) {
            NpcPlanes::AddAttackPlane(cr, 0, critters[i]);
        }
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 616, "$targets" + critters.length());
    }
    else {
        Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 615);
    }
}

// Патруль
void RunOrderPatrol(Critter cr)
{
    DL("patrol, radius =" + cr.ShowCritterDist1);
    cr.ShowCritterDist1 = cr.BehemothParam_1;
    Game.RadioMessageMsg(cr.BehemothRadio, TextPackName::Text, 611);
}

// Utils

int GetIntValue(string[] values, uint idx, int defaultValue)
{
    int value = defaultValue;
    if (valid(values) && values.length() > idx) {
        values[idx].tryToInt(value);
    }
    return value;
}

void RadioMessageMsgTmp(uint16 channel, TextPackName textMsg, uint strNum, string& lexems)
{
    switch (textMsg) {
    case TextPackName::Text:
        Game.RadioMessage(channel, "@text Text " + strNum + "@" + lexems);
        break;
    default:
        Game.RadioMessageMsg(channel, textMsg, strNum);
    }
}

// debug 528 ~run Behemoth::AddBehemoth 1 0 0
void AddBehemoth(Critter cr)
{
    Critter npc = cr.GetMap().AddNpc(Content::Critter::Behemoth, cr.HexX + 3, cr.HexY + 3, 6);
    npc.SetupScript(_BehemothInit);
    npc.BehemothOwner = cr.Id;
    npc.AddItem(Content::Item::heavy_dual_minigun_long_range, 1);
    Item item = cr.AddItem(Content::Item::holodisk, 1);
    item.HolodiskNum = 110;
}

void WhereNpc(Critter cr, any id)
{
    Critter npc = Game.GetCritter(id);
    if (valid(npc)) {
        cr.Say(SAY_NETMSG, "Global X = " + npc.WorldX + "; Y = " + npc.WorldY);
    }
}
