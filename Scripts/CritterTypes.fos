// FOS Common Sort 15

void ModuleInit()
{
#ifdef __SERVER
    Game.OnInit.Subscribe(init);
#endif

#ifdef __CLIENT
    Game.OnStart.Subscribe(start);
#endif
}

void init()
{
    Assert(Game.IsResourcePresent("CritterTypes.json"));
    Json::JSON @info = Json::JSONParse(Game.ReadResource("CritterTypes.json"));
    info.forEach(@ReadCritterTypeInfo);
}

void start()
{
    Assert(Game.IsResourcePresent("CritterTypes.json"));
    Json::JSON @info = Json::JSONParse(Game.ReadResource("CritterTypes.json"));
    info.forEach(@ReadCritterTypeInfo);
}

void ReadCritterTypeInfo(Json::JSON @crInfo, uint index)
{
    CritterType ct = CritterType();
    string value;
    AllCritterTypes.insertLast(ct);
    crInfo["CritterTypeId"] >> ct.CritterTypeId;
    crInfo["CritterTypeId"] >> ct.CritterTypeId;
    crInfo["AnimationType"] >> ct.AnimType;
    crInfo["AliasTypeId"] >> ct.Alias;
    crInfo["CritterTypeName"] >> ct.Name;
    crInfo["CritterTypeName"] >> value;
    ct.Proto = hstring(value);

    // Ручная инициализация хешей, которые не видит клиент
    hstring hashA = hstring("art/critters/" + value + "aa.frm");

    crInfo["CanWalk"] >> ct.CanWalk;
    crInfo["CanRun"] >> ct.CanRun;
    crInfo["CanAim"] >> ct.CanAim;
    crInfo["CanChangeArmor"] >> ct.CanChangeArmor;
    crInfo["CanRotate"] >> ct.CanRotate;
    crInfo["WalkTime"] >> ct.WalkTime;
    crInfo["RunTime"] >> ct.RunTime;
    crInfo["MoveWalkFrames"] >> ct.MoveWalkFrames;
    crInfo["MoveRunFrames"] >> ct.MoveRunFrames;
    crInfo["Animations"] >> ct.Animations;
    ct.WalkSteps = array<int>(4);
    crInfo["WalkSteps"].forEach(@ReadWalkStepInfo);
}

void ReadWalkStepInfo(Json::JSON @wsInfo, uint index)
{
    CritterType ct = AllCritterTypes.last();
    wsInfo >> ct.WalkSteps[index];
}

// Начинается с #, поскольку перечисление CritterStateAnim начинается с 1, не с 0.
const string AnimationsAll = "#ABCDEFGHIJKLMNOPQRSTUVWXYZ";

enum AnimationType
{
    Fallout = 0,
    VanBuren3d = 1,
    Tactics = 2,
    Arcanum = 3,
};

CritterType GetCritterType(int typeId)
{
    for (uint i = 0; i < AllCritterTypes.length(); i++) {
        if (typeId == AllCritterTypes[i].CritterTypeId) {
            return AllCritterTypes[i];
        }
    }

    return null;
}

CritterType GetCritterType(string name)
{
    for (uint i = 0; i < AllCritterTypes.length(); i++) {
        if (name == AllCritterTypes[i].Name) {
            return AllCritterTypes[i];
        }
    }

    return null;
}

CritterType GetCritterType(Critter cr)
{
    string name = cr.ModelName;

    if (name.substr(0, 13) == "art/critters/") {
        name = name.substr(13, 6);
    }

    for (uint i = 0; i < AllCritterTypes.length(); i++) {
        if (name == AllCritterTypes[i].Name) {
            return AllCritterTypes[i];
        }
    }

    return null;
}

class CritterType
{
    int CritterTypeId;
    int AnimType;
    string Name;
    hstring Proto;
    int Alias;
    uint Multihex;
    bool CanWalk;
    bool CanRun;
    bool CanAim;
    bool CanChangeArmor;
    bool CanRotate;
    // / Walk time in milliseconds.
    int WalkTime;
    // / Run time in milliseconds.
    int RunTime;
    // / Walk steps (Fallout specific) - frames per hex for walking, for running used 1-2, 3-4, 5-7, 8-end;
    // / пример: 4  9 11  0
    // / 4 - № кадра анимации, который завершает переход из первого гекса во второй
    // / 9 - № кадра анимации, который завершает переход из второго гекса в третий
    // / 11 - № кадра анимации, который завершает переход из третьего гекса во четвертый
    // / 0 - № кадра анимации, который завершает переход из четвертого гекса в пятый
    int[] WalkSteps;
    // /  Move (User types specific) - first value - frames per hex walk, second - frames per hex run, if zero than taked default values 5 (walk) and 2 (run).
    int MoveWalkFrames;
    int MoveRunFrames;
    // / Доступные для типа криттера анимации. Склеены в строку
    /*
     # Primary animations
     # 1  A Unarmed
     # 4  D Knife
     # 5  E Club
     # 6  F Hammer
     # 7  G Spear
     # 8  H Pistol
     # 9  I SMG
     # 10 J Shootgun
     # 11 K Heavy Rifle
     # 12 L Minigun
     # 13 M Rocket Launcher
     # 14 N Flamer
     # 15 O Rifle
     # 16 P Sword
     # 17 Q Long Sword
     # 18 R Axe
     # 19 S Bow
       //enum CritterStateAnim Unarmed = 1 совпадает с индексом анимаций
     */
    string Animations;

    bool HasAnim(uint weaponAnim)
    {
        for (uint i = 0, l = Animations.length(); i < l; i++) {
            if (Animations[i] == AnimationsAll[weaponAnim]) {
                return true;
            }
        }
        return false;
    }

    CritterType AliasType()
    {
        return GetCritterType(Alias);
    }
}

CritterType[] AllCritterTypes = {};

#ifndef __MAPPER

uint CritterGetCrTypeAlias(Critter cr)
{
    if (cr.IsControlledByPlayer) {
        auto crType = GetCritterType(cr);
        if (valid(crType) && crType.Alias > 0) {
            return crType.Alias;
        }
    }
    return cr.CrTypeAliasBase;
}

#endif
