// FOS Server Sort 2
//
// Author: cvet, rifleman17
// Replication Bank
//

///@ Property Critter PrivateServer bool ReplBankIsCanEnter
///@ Property Critter PrivateServer bool ReplBankeIsAttackGagPlayer

#define ENTER_MONEY_NEED              (100)
#define MAX_TIME_FOR_ENTER            (REAL_MINUTE(2)) // Время отпущенное игроку на манипуляции с контейнером.

#define MESSAGE_TRY_PASS_PLAYER       (0) // Спросить у охраны можно ли запустить нового игрока
#define MESSAGE_BEGIN_PASS_PLAYER     (1) // Уведомить охрану что бы пропустили игрока.
#define MESSAGE_END_PASS_PLAYER       (2) // Сообщить охране выкинуть зазевавшегося игрока.
#define MESSAGE_THROW_OUT_PLAYER      (3) // Сообщить охране выкинуть зазевавшегося игрока.
#define MESSAGE_PLAYER_ON_WARNING_HEX (4) // Игрок наступил на предупредительный хекс.
#define MESSAGE_PLAYER_ON_ATTACK_HEX  (5) // Игрок наступил на атакующий хекс.

#define ROLE_BANKER                   (1) // Банкир.
#define ROLE_GUARD                    (2) // Охранник.
#define ROLE_KEEPER                   (3) // Кладовщик.

#define ENT_HIDE_CONT                 (100) // Хекс со скрытым контейнером.
#define ENT_SHOW_CONT                 (101) // Хекс с видимым контейнером.
#define ENT_DOOR_GUARD                (110) // Хекс охранника около двери.
#define ENT_DOOR_HEX                  (120) // Хекс где расположена дверь.

// Пиды контейнеров.
#define HIDE_CONTAINER_PID            (Content::Item::footlocker_clean_left)
#define SHOW_CONTAINER_PID            (Content::Item::footlocker_clean_left)

#define FORCE_DIALOG_MOVE_ITEMS_ERROR (4)
#define FORCE_DIALOG_ROOM_BUSY        (5)
#define FORCE_DIALOG_NO_MONEY         (6)

#define STR_NEXT                      (1000)
#define STR_STOP                      (1001)
#define STR_TIME_LEFT                 (1002)
#define STR_TIME_END                  (1003)
#define STR_THIEF                     (1004)

// Борьба с затыканием проходов в банках.
#define FORCE_DIALOG_PLAYER_NOTFOUND (5)
#define FORCE_DIALOG_PLAYER_FOUND    (4)
#define WARN_TIME                    (REAL_SECOND(60))
#define ATTACK_TIME                  (WARN_TIME + REAL_SECOND(10))
#define STR_WARN_PLAYER              (1)
#define STR_ATTACK_PLAYER            (2)

//
// Bank
//
class CBank
{
    Entrance::Entry[] HideContPos = {};  // Координаты скрытого контейнера.
    Entrance::Entry[] ShowContPos = {};  // Координаты видимых контейнеров.
    Entrance::Entry[] DoorHexPos = {};   // Координаты хекса двери.
    Entrance::Entry[] DoorGuardPos = {}; // Координаты хекса, где стоят охранники у двери.
    uint PassedTime;                     // Время пропуска.
    bool PlayerNotify;                   // Предупрежден ли игрок о том, что задерживается.
    bool PlayerEntered;                  // Вошел ли игрок в помещение.
    uint PassedPlayerId;                 // Id пропущенного к контейнерам игрока.
    uint ThrowOutPlayerId;               // Id игрока, которого банкир просил выкинуть.
    bool DoorGuardSayWarning;            // Указывает предупредил ли кто-нибудь из охранников игрока.
    bool PlayerPassed;                   // Id пропущенного к контейнерам игрока.
    hstring DoorPid;

    void Init(Map map)
    {
        PassedTime = 0;
        PlayerNotify = false;
        PlayerEntered = false;
        PassedPlayerId = 0;
        ThrowOutPlayerId = 0;
        DoorGuardSayWarning = false;
        HideContPos = Entrance::ParseEntries(map, ENT_HIDE_CONT);
        ShowContPos = Entrance::ParseEntries(map, ENT_SHOW_CONT);
        DoorGuardPos = Entrance::ParseEntries(map, ENT_DOOR_GUARD);
        DoorHexPos = Entrance::ParseEntries(map, ENT_DOOR_HEX);
    }
}

uint[] BanksMapId = {};
CBank[] Banks = {};

CBank GetBank(Critter cr)
{
    uint id = cr.MapId;
    if (id == 0)
        return null;
    for (uint i = 0, j = BanksMapId.length(); i < j; i++)
        if (id == BanksMapId[i])
            return Banks[i];
    return null;
}

void ParseBank(Critter cr)
{
    Map map = cr.GetMap();
    if (valid(map) && not valid(GetBank(cr))) {
        BanksMapId.insertLast(map.Id);
        Banks.grow(1);
        Banks.last() = CBank();
        Banks.last().Init(map);
    }
}

//
// Banker
//
void _BankerInit(Critter banker, bool firstTime)
{
    banker.OnFinish.Subscribe(_BankerFinish);
    banker.OnIdle.Subscribe(_BankerIdle);
    banker.OnMessage.Subscribe(_BankerOnMessage);
    ParseBank(banker);
    banker.NpcRole = ROLE_BANKER;
    banker.IsNoEnemyStack = true;
}

void _BankerFinish(Critter banker)
{
    CBank bank = GetBank(banker);
    if (valid(bank) && bank.PassedPlayerId != 0)
        TransferItems(banker, bank.PassedPlayerId, true);
}

void _BankerIdle(Critter banker)
{
    CBank bank = GetBank(banker);
    if (not valid(bank))
        return;

    // Никого нет.
    if (bank.PassedPlayerId == 0)
        return;

    // Проверим вошел ли игрок.
    if (not bank.PlayerEntered && Game.GetFullSecond() > bank.PassedTime + REAL_SECOND(15)) {
        banker.SayMsg(SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_NEXT);
        EndEnter(banker, bank.PassedPlayerId);
    }
    // Время игрока подходит к концу.
    else if (bank.PlayerEntered && not bank.PlayerNotify && Game.GetFullSecond() > bank.PassedTime + MAX_TIME_FOR_ENTER - REAL_SECOND(20)) {
        banker.SayMsg(SAY_NORM, TEXTMSG_TEXT, STR_TIME_LEFT);
        bank.PlayerNotify = true;
        banker.Wait(5000);
    }
    // Игрок задержался больше положенного.
    else if (Game.GetFullSecond() > bank.PassedTime + MAX_TIME_FOR_ENTER) {
        SendMessage::ToAllOnMap(banker, MESSAGE_THROW_OUT_PLAYER, bank.PassedPlayerId);
        banker.SayMsg(SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, STR_TIME_END);
        EndEnter(banker, bank.PassedPlayerId);
    }
    // Ждем дальше
    else {
        banker.Wait(5000);
    }
}

void _BankerOnMessage(Critter banker, Critter player, int num, int val)
{
    // Обработка сообщений игрока.
    // Убедимся пропущенный игрок ли это послал сообщение и банкир ли принял.
    if (banker.NpcRole != ROLE_BANKER)
        return;

    CBank bank = GetBank(banker);
    if (not valid(bank))
        return;

    if (player.Id != bank.PassedPlayerId)
        return;

    // С помощью этих сообщений вычисляем зашел ли игрок или вышел.
    if (num == MESSAGE_PLAYER_ON_WARNING_HEX) {
        if (not bank.PlayerEntered)
            return;
        banker.SayMsg(SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_NEXT);
        EndEnter(banker, bank.PassedPlayerId);
    }
    else if (num == MESSAGE_PLAYER_ON_ATTACK_HEX) {
        bank.PlayerEntered = true;
    }
}

// Начало работы с контейнерами.
bool IsCanEnter(Critter player, Critter banker)
{
    CBank bank = GetBank(banker);
    if (not valid(bank))
        return false;
    // Зашел ли другой игрок.
    if (bank.PassedPlayerId != 0)
        return false;
    // Если нет, то спросим охрану, все ли в порядке.
    banker.ReplBankIsCanEnter = true;
    SendMessage::ToAllOnMap(banker, MESSAGE_TRY_PASS_PLAYER, int(player.Id));
    // Охрана одобрила.
    return banker.ReplBankIsCanEnter;
}

uint r_TryEnter(Critter player, Critter banker)
{
    // Прверим можно ли войти в комнату.
    if (IsCanEnter(banker, player) == false) {
        return FORCE_DIALOG_ROOM_BUSY;
    }

    // Достаточно ли у игрока денег.
    if (player.CountItem(Content::Item::bottle_caps) < ENTER_MONEY_NEED) {
        return FORCE_DIALOG_NO_MONEY;
    }

    // Перемещаем итемы игрока в видимый контейнер.
    if (TransferItems(banker, player.Id, false) == false) {
        return FORCE_DIALOG_MOVE_ITEMS_ERROR;
    }

    CBank bank = GetBank(banker);
    if (not valid(bank)) {
        return FORCE_DIALOG_MOVE_ITEMS_ERROR;
    }

    // Пропускаем игрока.
    player.DeleteItem(Content::Item::bottle_caps, ENTER_MONEY_NEED);
    bank.PassedPlayerId = player.Id;
    bank.PassedTime = Game.GetFullSecond();
    bank.PlayerNotify = false;
    bank.PlayerEntered = false;
    SendMessage::ToAllOnMap(banker, MESSAGE_BEGIN_PASS_PLAYER, int(player.Id));

    return 0;
}

// Условие и результат на завершение работы с контейнерами.
bool d_IsNotEntered(Critter player, Critter banker)
{
    CBank bank = GetBank(banker);
    if (not valid(bank))
        return true;
    return bank.PassedPlayerId != player.Id;
}

bool d_IsEntered(Critter player, Critter banker)
{
    CBank bank = GetBank(banker);
    if (not valid(bank))
        return false;
    // Проверяем тот ли игрок работал с контейнером.
    return bank.PassedPlayerId == player.Id;
}

void r_EndEnter(Critter player, Critter banker)
{
    EndEnter(banker, player.Id);
}

// Завершаем сеанс.
void EndEnter(Critter banker, uint playerId)
{
    CBank bank = GetBank(banker);
    if (not valid(bank))
        return;
    // Завершаем работу с игроком.
    bank.PassedPlayerId = 0;
    // Перемещаем итемы игрока в невидимый контейнер.
    TransferItems(banker, playerId, true);
    SendMessage::ToAllOnMap(banker, MESSAGE_END_PASS_PLAYER, playerId);
}

// Перемещение итемов между видимым и невидимым контейнером.
bool TransferItems(Critter banker, uint playerId, bool hide)
{
    CBank bank = GetBank(banker);
    if (not valid(bank))
        return false;
    // Находим контейнеры.
    uint num = playerId % 10;
    if (num >= bank.ShowContPos.length())
        num = 0;
    if (bank.HideContPos.length() == 0 || bank.ShowContPos.length() == 0)
        return false;
    Map map = banker.GetMap();
    if (not valid(map))
        return false;
    Item contHide = map.GetItem(bank.HideContPos[0].HexX, bank.HideContPos[0].HexY, HIDE_CONTAINER_PID);
    if (not valid(contHide))
        return false;
    Item contShow = map.GetItem(bank.ShowContPos[num].HexX, bank.ShowContPos[num].HexY, SHOW_CONTAINER_PID);
    if (not valid(contShow))
        return false;

    // +heX
    // Fix: запираем ящики - чтобы игроки не тупили.
    for (int i = 0; i < 10; i++) {
        Item contTmp = map.GetItem(bank.ShowContPos[i].HexX, bank.ShowContPos[i].HexY, SHOW_CONTAINER_PID);
        if (valid(contTmp))
            contTmp.LockerId = 1;
    }
    // Cнимаем запор на ящике игрока
    contShow.LockerId = 0;

    // Перемещаем итемы.
    if (hide) {
        Item[] items = contShow.GetItems(0);
        Game.MoveItems(items, contHide, playerId);
    }
    else {
        Item[] items = contHide.GetItems(playerId);
        Game.MoveItems(items, contShow, 0);
    }
    return true;
}

//
// Guard
//
void _GuardInit(Critter guard, bool firstTime)
{
    guard.OnIdle.Subscribe(_GuardIdle);
    guard.OnMessage.Subscribe(_GuardOnMessage);
    guard.OnSomeCritterAttack.Subscribe(_GuardSmthAttack);     // Добавил Дагнир, 11.02.2010.
    guard.OnSomeCritterStealing.Subscribe(_GuardSmthStealing); // Добавил rifleman17, 22.02.2010.
    guard.OnSomeCritterUseItem.Subscribe(_GuardSmthUseItem);   // r17 23.03.10
    guard.OnSomeCritterDropItem.Subscribe(_GuardSmthDropItem); // r17 23.03.10
    ParseBank(guard);
    guard.NpcRole = ROLE_GUARD;
    guard.ExplodeThresholdBase = 30;
    guard.ExplodeThresholdBase = 60; // Дагнир, 22.02.2010 - полумера от подрывов с глобала.
    guard.IsNoEnemyStack = true;
    guard.IsUnlimitedAmmo = true; // в противном случае у них воруют оружие
    guard.ActionPointsBase = 12;
    guard.BonusLook = 300; // Чтобы реагировали на атаки других игроков сникерами.
}

void _GuardIdle(Critter guard)
{
    CBank bank = GetBank(guard);
    if (not valid(bank))
        return;
    bank.ThrowOutPlayerId = 0;
}

// Сообщения от банкира или игрока.
void _GuardOnMessage(Critter guard, Critter crit, int num, int val)
{
    // Проверяем, охрана ли приняла.
    if (guard.NpcRole != ROLE_GUARD)
        return;
    // if(guard.Cond==Dead) return;

    CBank bank = GetBank(guard);
    if (not valid(bank))
        return;

    // Обработка сообщений игрока.
    // Убедимся игрок ли это послал сообщение.
    if (crit.IsOwnedByPlayer()) {
        if (num == MESSAGE_PLAYER_ON_WARNING_HEX) {
            // Предупреждаем игрока, если прошел без предупреждения.
            if (bank.PassedPlayerId == crit.Id || bank.ThrowOutPlayerId == crit.Id)
                return;
            if (bank.DoorGuardSayWarning)
                return;
            // Ищем охранника около двери.
            for (uint i = 0; i < bank.DoorGuardPos.length(); i++) {
                if (guard.HexX != bank.DoorGuardPos[i].HexX || guard.HexY != bank.DoorGuardPos[i].HexY)
                    continue;
                guard.SayMsg(SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, STR_STOP);
                bank.DoorGuardSayWarning = true;
                break;
            }
        }
        else if (num == MESSAGE_PLAYER_ON_ATTACK_HEX) {
            // Атакуем наглеца, если он прошел без рзрешения.
            if (bank.PassedPlayerId == crit.Id || bank.ThrowOutPlayerId == crit.Id)
                return;
            NpcPlanes::AddAttackPlane(guard, 0, crit);
        }
        return;
    }

    // Обработка сообщений банкира.
    // Убедимся банкир ли это послал сообщение.
    if (crit.NpcRole != ROLE_BANKER)
        return;

    // Спрашивает возможно ли пустить игрока.
    if (num == MESSAGE_TRY_PASS_PLAYER) {
        if (!NpcPlanes::IsNoPlanes(guard))
            crit.ReplBankIsCanEnter = false; // См. den_sh_banker IsCanEnter
        else if (guard.Cond != CritterCondition::Alive)
            crit.ReplBankIsCanEnter = false; // См. den_sh_banker IsCanEnter
    }
    // Сообщает что игрок начал манипуляции с контейнерами.
    else if (num == MESSAGE_BEGIN_PASS_PLAYER) {
    }
    // Сообщает что игрок звершил манипуляции с контейнерами.
    else if (num == MESSAGE_END_PASS_PLAYER) {
    }
    // Просит выкинуть зеваку.
    else if (num == MESSAGE_THROW_OUT_PLAYER) {
        Map map = guard.GetMap();
        if (not valid(map))
            return;
        Critter player = map.GetCritter(uint(val));
        if (valid(player)) {
            NpcPlanes::AddAttackPlane(guard, 0, player);
            bank.ThrowOutPlayerId = uint(val);
        }
    }
}

void _GuardSmthAttack(Critter guard, Critter attacker, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    if (attacker.IsOwnedByPlayer())
        NpcPlanes::AddAttackPlane(guard, 0, attacker);
}

void _GuardSmthStealing(Critter guard, Critter thief, Critter fromCr, Item, uint)
{
    bool success = true;
    if (thief.IsOwnedByPlayer() && guard.IsAlive()) {
        guard.SayMsg(SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, STR_THIEF);
        NpcPlanes::AddAttackPlane(guard, 0, thief, 1);
    }
}

void _GuardSmthDropItem(Critter npc, Critter fromCr, Item item)
{
    if (fromCr.IsOwnedByPlayer() && npc.IsAlive()) {
        hstring pid = item.ProtoId;
        if (pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine || pid == Content::Item::active_dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr);
        }
    }
}

void _GuardSmthUseItem(Critter npc, Critter fromCr, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (fromCr.IsOwnedByPlayer() && npc.IsAlive()) {
        hstring pid = item.ProtoId;
        if (pid == Content::Item::plastic_explosives || pid == Content::Item::mine || pid == Content::Item::toggle_switch || pid == Content::Item::dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr);
        }
    }
}
// Триггеры около двери.
void t_DangerHex(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered)
        return;
    // Проверяем игрок ли это и тот кторого пустил банкир.
    if (!player.IsOwnedByPlayer())
        return;

    CBank bank = GetBank(player);
    if (not valid(bank))
        return;

    // Посылаем сообщение о том, что наступили на этот хекс.
    bank.DoorGuardSayWarning = false;
    SendMessage::ToAllOnMap(player, MESSAGE_PLAYER_ON_WARNING_HEX, 0);
}

void t_AttackHex(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered)
        return;
    // Проверяем игрок ли это и тот которого пустил банкир.
    if (!player.IsOwnedByPlayer())
        return;
    // Посылаем сообщение о том, что наступили на этот хекс.
    SendMessage::ToAllOnMap(player, MESSAGE_PLAYER_ON_ATTACK_HEX, 0);
}

//
// Keeper
//
uint16[] ShowContPos = {}; // Координаты видимых контейнеров.
uint16[] DoorHexPos = {};  // Координаты хекса двери.
bool PlayerPassed = false; // Id пропущенного к контейнерам игрока.
hstring DoorPid;

void _KeeperInit(Critter keeper, bool firstTime)
{
    keeper.OnIdle.Subscribe(_KeeperIdle);
    keeper.OnMessage.Subscribe(_KeeperOnMessage);
    ParseBank(keeper);
    keeper.NpcRole = ROLE_KEEPER;
    keeper.IsNoEnemyStack = true;
}

void _KeeperIdle(Critter keeper)
{
    CBank bank = GetBank(keeper);
    if (not valid(bank))
        return;
    if (bank.PlayerPassed)
        keeper.Wait(10000);
}

void _KeeperOnMessage(Critter keeper, Critter banker, int num, int val)
{
    // Проверяем, что передал банкир кладовщику.
    if (keeper.NpcRole != ROLE_KEEPER || banker.NpcRole != ROLE_BANKER)
        return;

    CBank bank = GetBank(keeper);
    if (not valid(bank))
        return;

    // Сообщает что игрок начал манипуляции с контейнерами.
    if (num == MESSAGE_BEGIN_PASS_PLAYER) {
        uint contNum = uint(val) % 10;
        if (contNum >= bank.ShowContPos.length())
            contNum = 0;
        if (bank.ShowContPos.length() == 0)
            return;
        bank.PlayerPassed = true;
        NpcPlanes::AddWalkPlane(keeper, 0, bank.ShowContPos[contNum].HexX, bank.ShowContPos[contNum].HexY, 0xFF, false, 1);
        // NpcPlanes::AddPickPlane(keeper,0,ShowContPos[contNum*2],ShowContPos[contNum*2+1],SHOW_CONTAINER_PID);
    }
    // Сообщает что игрок завершил манипуляции с контейнерами или просит выкинуть зеваку.
    else if (num == MESSAGE_END_PASS_PLAYER || num == MESSAGE_THROW_OUT_PLAYER) {
        bank.PlayerPassed = false;
        keeper.Wait(0);
        Map map = keeper.GetMap();
        if (not valid(map))
            return;

        // Закрываем дверь.
        if (bank.DoorHexPos.length() > 0) {
            Item door = Obsolete::MapGetDoor(map, bank.DoorHexPos[0].HexX, bank.DoorHexPos[0].HexY);
            if (valid(door) && door.Opened)
                NpcPlanes::AddPickPlane(keeper, 0, door, 0, false);
        }

        // Закрываем открытые контейнеры.
        for (uint i = 0; i < bank.ShowContPos.length(); i++) {
            Item cont = map.GetItem(bank.ShowContPos[i].HexX, bank.ShowContPos[i].HexY, SHOW_CONTAINER_PID);
            if (not valid(cont) || cont.Opened)
                continue;
            NpcPlanes::AddPickPlane(keeper, 0, cont, 0, false);
        }
    }
}

uint dlg_TalkAboutGagPlayer(Critter player, Critter npc, string& playerName)
{
    if (!IS_DIALOG_SAY_MODE(playerName))
        return 0;

    if (!valid(npc))
        return 0;
    if (npc.IsDead())
        return 0;

    Critter cr = Game.GetCritter(Game.GetPlayer(playerName).Id);
    if (valid(cr) && !cr.IsDead() && npc.IsSee(cr) && !npc.ReplBankeIsAttackGagPlayer && cr.Id != player.Id && AddCheckPlayerPosition(npc, cr)) {
        return FORCE_DIALOG_PLAYER_FOUND;
    }

    return FORCE_DIALOG_PLAYER_NOTFOUND;
}

bool AddCheckPlayerPosition(Critter guard, Critter player)
{
    Map guardMap = guard.GetMap();
    Map playerMap = player.GetMap();
    if (!valid(guardMap) || !valid(playerMap))
        return false;
    if (guardMap.Id != playerMap.Id)
        return false;

    uint[] values = {guard.Id, player.Id, player.HexX, player.HexY};
    Game.DeferredCall(GAME_SECOND_TO_TICK(WARN_TIME), WarnGagPlayer, values);
    Game.DeferredCall(GAME_SECOND_TO_TICK(ATTACK_TIME), AttackGagPlayer, values);
    guard.ReplBankeIsAttackGagPlayer = true;
    return true;
}

void WarnGagPlayer(uint[] values)
{
    Critter guard = Game.GetCritter(values[0]);
    if (!valid(guard))
        return;

    Critter player = Game.GetCritter(values[1]);
    if (!valid(player))
        return;

    if (!guard.IsSee(player))
        return;

    guard.SayMsg(SAY_SHOUT, TEXTMSG_DLG, DLGSTR(guard.DialogId, STR_WARN_PLAYER), "$pname " + Obsolete::GetPlayerName(player.Id));
}

void AttackGagPlayer(uint[] values)
{
    Critter guard = Game.GetCritter(values[0]);
    if (valid(guard)) {
        guard.ReplBankeIsAttackGagPlayer = false;
        Critter player = Game.GetCritter(values[1]);
        if (valid(player)) {
            if (player.IsOwnedByPlayer()) {
                Map guardMap = guard.GetMap();
                Map playerMap = player.GetMap();
                if (!valid(guardMap) || !valid(playerMap))
                    return;
                if (guardMap.Id != playerMap.Id)
                    return;

                uint oldX = values[2];
                uint oldY = values[3];
                uint newX = player.HexX;
                uint newY = player.HexY;

                if (oldX == newX && oldY == newY) {
                    guard.SayMsg(SAY_SHOUT, TEXTMSG_DLG, DLGSTR(guard.DialogId, STR_ATTACK_PLAYER));
                    NpcPlanes::AddAttackPlane(guard, 0, player);
                    SendMessage::ToAllOnMap(player, MESSAGE_PLAYER_ON_ATTACK_HEX, 0);
                }
            }
        }
    }
}
