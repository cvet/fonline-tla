// FOS Server
// Generic encounter npc script
// Author: cvet, rifleman17, Dagnir

#define MESSAGE_COLLECT_NPC (30)
#define MESSAGE_ATTACK_HIM  (31)
#define MESSAGE_ATTACK_ME   (32)
#define PLANE_LOOT          (30)

ident LastDeadId;
ident[] CollectedNpcIds = {};

void _NpcInit(Critter npc, bool firstTime)
{
    uint bt = npc.BodyType;
    if (bt >= BodyTypes::Men && bt <= BodyTypes::Ghoul) {
        npc.OnMessage.Subscribe(_NpcMessage);
        npc.OnDead.Subscribe(_NpcDead);
        npc.OnSomeCritterDead.Subscribe(_NpcSmthDead);
        npc.OnSomeCritterUseSkill.Subscribe(_NpcSmthUseSkill);
        npc.OnNpcPlaneEnd.Subscribe(_NpcPlaneEnd);
        npc.OnStealing.Subscribe(_NpcStealing);
        npc.OnSomeCritterUseItem.Subscribe(_NpcSmthUseItem);
        npc.OnSomeCritterDropItem.Subscribe(_NpcSmthDropItem);

        bool favrtAmmoSet = false;
        bool favrtWpnSet = false;
        Item[] items = npc.GetItems();
        for (uint i = 0; i < items.length(); i++) {
            Repair::SetDeterioration(items[i], Game.Random(80, 95));
            if (items[i].Type == ItemType::Weapon && !favrtWpnSet) {
                FavoriteItem::SetFavoriteItemPid(npc, CritterItemSlot::Main, items[i].ProtoId);
                favrtWpnSet = true;
            }
            /*	if(items[i].Type == ItemType::Ammo && !favrtAmmoSet)
                    {
                            npc.SetFavoriteItem(CritterItemSlot::Secondary, items[i].ProtoId);
                            favrtAmmoSet = true;
                            continue;
                    } */
        }
    }
}

Critter GetCritterForLooting(Critter lootCr)
{
    // Collect npc
    Critter result = null;
    SendMessage::ToWhoSeesMe(lootCr, MESSAGE_COLLECT_NPC, 0);
    if (CollectedNpcIds.length() > 0) {
        // Find better looter
        for (uint i = 0, j = CollectedNpcIds.length(); i < j; i++) {
            Critter cr = Game.GetCritter(CollectedNpcIds[i]);
            if (NpcPlanes::GetPlanes(cr, PLANE_LOOT, null) == 0) {
                result = cr;
                break;
            }
        }

        // Get random npc
        if (not valid(result)) {
            result = Game.GetCritter(CollectedNpcIds[Game.Random(0, CollectedNpcIds.length() - 1)]);
        }

        // Free handles
        CollectedNpcIds.clear();
    }
    return result;
}

void _NpcSmthUseItem(Critter npc, Critter fromCr, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (fromCr.IsControlledByPlayer && npc.IsAlive()) {
        hstring pid = item.ProtoId;
        if (pid == Content::Item::plastic_explosives || pid == Content::Item::mine || pid == Content::Item::toggle_switch || pid == Content::Item::dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr, Settings.RunOnCombat);
            SendMessage::ToAllOnMap(npc, MESSAGE_ATTACK_HIM, fromCr.Id);
        }
    }
}

void _NpcSmthDropItem(Critter npc, Critter fromCr, Item item)
{
    if (fromCr.IsControlledByPlayer && npc.IsAlive()) {
        hstring pid = item.ProtoId;
        if (pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine || pid == Content::Item::active_dynamite) {
            NpcPlanes::AddAttackPlane(npc, 0, fromCr, Settings.RunOnCombat);
            SendMessage::ToAllOnMap(npc, MESSAGE_ATTACK_HIM, fromCr.Id);
        }
    }
}

void _NpcMessage(Critter npc, Critter fromCr, int message, any value)
{
    if (message == MESSAGE_COLLECT_NPC) {
        if (!npc.IsDead()) {
            CollectedNpcIds.insertLast(npc.Id);
        }
    }
    else if (message == MESSAGE_ATTACK_HIM) {
        if (fromCr.TeamId == npc.TeamId && npc.IsAlive()) {
            Critter target = Game.GetCritter(value);
            if (valid(target)) {
                NpcPlanes::AddAttackPlane(npc, 0, target, Settings.RunOnCombat);
            }
        }
    }
    else if (message == MESSAGE_ATTACK_ME) {
        Critter target = Game.GetCritter(value);
        if (valid(target)) {
            NpcPlanes::AddAttackPlane(npc, 0, target, Settings.RunOnCombat);
        }
    }
}

void _NpcDead(Critter npc, Critter killer)
{
    // Loot
    NpcPlanes::NpcPlane[] planes = {};
    if (NpcPlanes::GetPlanes(npc, PLANE_LOOT, planes) > 0) {
        Critter cr = GetCritterForLooting(npc);
        if (valid(cr)) {
            // Copy planes
            for (uint i = 0, j = planes.length(); i < j; i++) {
                NpcPlanes::AddPlane(cr, planes[i]);
            }
        }
    }

    // Encounters loyality
    if (valid(killer) && killer.IsControlledByPlayer) {
        CritterProperty prop = CritterProperty::Invalid;
        switch (npc.TeamId) {
        case Teams::EncounterHubologist:
            prop = CritterProperty::EncLoyalityHubologists;
            break;
        case Teams::EncounterNCR:
            prop = CritterProperty::EncLoyalityNcr;
            break;
        case Teams::EncounterVC:
            prop = CritterProperty::EncLoyalityVCity;
            break;
        case Teams::EncounterRedding:
            prop = CritterProperty::EncLoyalityRedding;
            break;
        case Teams::EncounterBroken:
            prop = CritterProperty::EncLoyalityBroken;
            break;
        case Teams::EncounterGecko:
            prop = CritterProperty::EncLoyalityGecko;
            break;
        case Teams::EncounterArroyo:
            prop = CritterProperty::EncLoyalityArroyo;
            break;
        case Teams::EncounterKlamath:
            prop = CritterProperty::EncLoyalityKlamath;
            break;
        case Teams::EncounterModoc:
            prop = CritterProperty::EncLoyalityModoc;
            break;
        case Teams::EncounterDen:
            prop = CritterProperty::EncLoyalityDen;
            break;
        case Teams::EncounterReno:
            prop = CritterProperty::EncLoyalityReno;
            break;
        case Teams::EncounterEnclave:
            prop = CritterProperty::EncLoyalityEnclave;
            break;
        case Teams::EncounterSF:
            prop = CritterProperty::EncLoyalitySf;
            break;
        default:
            break;
        }

        if (prop != CritterProperty::Invalid) {
            killer.SetAsInt(prop, killer.GetAsInt(prop) + 1);
        }
    }
}

int GetCritterItemsCount(Critter npc)
{
    return npc.GetItems().length();
}

void _NpcSmthDead(Critter npc, Critter fromCrit, Critter killer)
{
    if (fromCrit.Id != LastDeadId) {
        if (GetCritterItemsCount(fromCrit) > 0 && _CritCanDropItemsOnDead(fromCrit)) {
            Critter cr = GetCritterForLooting(fromCrit);
            if (valid(cr)) {
                NpcPlanes::AddWalkPlane(cr, 0, PLANE_LOOT, fromCrit.Id, fromCrit.HexX, fromCrit.HexY, 6, false, 1);
            }
        }
        LastDeadId = fromCrit.Id;
    }
}

void _NpcSmthUseSkill(Critter npc, Critter fromCr, CritterProperty skill, Critter onCritter, Item onItem, StaticItem onScenery)
{
    if ((skill == SKILL_LOOT_CRITTER || skill == CritterProperty::SkillSteal) && valid(onCritter) &&
        NpcPlanes::GetPlanes(npc, PLANE_LOOT, onCritter.Id, null) > 0) {
        NpcPlanes::AddAttackPlane(npc, AI_PLANE_ATTACK_PRIORITY + 1, fromCr, Settings.RunOnCombat);
    }
}

bool _NpcPlaneEnd(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    if (plane.Identifier == PLANE_LOOT && reason == REASON_SUCCESS) {
        Critter cr = Game.GetCritter(plane.IdentifierExt);
        if (valid(cr) && cr.IsDead()) {
            Item[] items = {};
            items.insertLast(cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory));
            items.insertLast(cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Main));
            items.insertLast(cr.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Secondary));
            items.insertLast(npc.GetMap().GetItems(cr.HexX, cr.HexY));

            for (uint i = 0; i < items.length(); i++) {
                int type = items[i].Type;
                if (type < ItemType::Armor || type > ItemType::Key) {
                    items[i] = null; // Skip
                }
            }

            Game.MoveItems(items, npc);
            GameEventStorehouse::SaveLoot2Storehouse(npc.WorldX, npc.WorldY, items);
            _CritAnimatePickup(npc);
            npc.Wait(Settings.Breaktime);
        }
        return false; // Skip global and end plane
    }
    return true; // Run global
}

void _NpcStealing(Critter npc, Critter thief, Item item, uint count)
{
    bool success = false;
    if (!success) {
        NpcPlanes::AddAttackPlane(npc, 0, thief, Settings.RunOnCombat);
        SendMessage::ToAllOnMap(npc, MESSAGE_ATTACK_HIM, thief.Id);
    }
}
