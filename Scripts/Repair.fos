// FOS Server
// Author: cvet

bool TryRepairItem(Critter cr, Item item)
{
    if (not item.Deteriorable)
        return true;

    if (IS_TIMEOUT(cr.TimeoutBattle)) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrTimeoutBattleWait);
        return true;
    }

    if (IS_TIMEOUT(cr.TimeoutSkRepair)) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrSkillWeariness);
        return true;
    }

    if (item.BrokenEternal || item.BrokenNotresc) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrDeteriorationNoResc);
        return true;
    }

    // Repair
    int repair = cr.SkillRepair;
    hstring activePid = CritterItem::GetActive(cr).ProtoId;
    if (activePid == Content::Item::multi_tool) {
        repair += 25;
        if (Game.Random(0, 30) == 0)
            cr.DeleteItem(Content::Item::multi_tool, 1);
    }
    else if (activePid == Content::Item::super_tool_kit) {
        repair += 50;
        if (Game.Random(0, 30) == 0)
            cr.DeleteItem(Content::Item::super_tool_kit, 1);
    }

    // Repair
    if (item.IsBroken) {
        if (item.BrokenHighBroken)
            repair -= 100; // было 150
        else if (item.BrokenNormBroken)
            repair -= 75; // было 100
        else if (item.BrokenLowBroken)
            repair -= 25; // было 50

        repair -= item.BrokenCount * 50 / Tla::MaxBrokens; // было 100
        repair = CLAMP(repair, 6, 95);

        if (repair >= Game.Random(1, 100)) {
            item.Deterioration = 0;
            item.IsBroken = false;
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrDeteriorationRepairSucc);
            cr.Experience += 40;
        }
        else {
            item.BrokenCount += 1;
            if (item.BrokenCount >= Tla::MaxBrokens)
                item.BrokenNotresc = true;
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrDeteriorationRepairFail);
        }
    }
    // Service
    else {
        if (item.BrokenService)
            repair -= 25;
        repair -= item.BrokenCount * 50 / Tla::MaxBrokens;
        repair = CLAMP(repair, 6, 95);

        if (repair >= Game.Random(1, 100)) {
            item.BrokenService = true;
            if (activePid == Content::Item::oil_can) {
                item.Deterioration = 0;
                cr.DeleteItem(Content::Item::oil_can, 1);
            }
            else {
                int cnt = repair * Tla::MaxDeterioration / 100;
                if (cnt > int(item.Deterioration))
                    item.Deterioration = 0;
                else
                    item.Deterioration -= cnt;
            }
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrDeteriorationServiceSucc);
            cr.Experience += 20;
        }
        else {
            DeteriorateItem(cr, item, Tla::MaxDeterioration / 5);
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrDeteriorationServiceFail);
        }
    }
    SetItemCost(item);
    cr.TimeoutSkRepair = REPAIR_TIMEOUT(cr);
    return true;
}

void DeteriorateItem(Critter cr, Item item, int deteriorationCount)
{
    if (deteriorationCount <= 0 || not item.Deteriorable || item.BrokenEternal || item.IsBroken)
        return;

    item.Deterioration += deteriorationCount;
    if (item.Deterioration >= Tla::MaxDeterioration) {
        item.Deterioration = Tla::MaxDeterioration;
        item.BrokenCount += 1;
        SetItemCost(item);
        int brokenLvl = Game.Random(0, item.BrokenCount / (Tla::MaxBrokens / 4));

        if (item.BrokenCount >= Tla::MaxBrokens || brokenLvl >= 3)
            item.BrokenNotresc = true;
        else if (brokenLvl == 2)
            item.BrokenHighBroken = true;
        else if (brokenLvl == 1)
            item.BrokenNormBroken = true;
        else
            item.BrokenLowBroken = true;
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrDeteriorationWeaponBroken);
    }
}

void SetDeterioration(Item item, int deteriorationProcent)
{
    if (not item.Deteriorable)
        return;
    item.IsBroken = false;
    deteriorationProcent = CLAMP(deteriorationProcent, 0, 100);
    item.Deterioration = Tla::MaxDeterioration * deteriorationProcent / 100;
    item.BrokenCount = Tla::MaxBrokens * deteriorationProcent / 100;
    if (deteriorationProcent == 100)
        item.IsBroken = true;
}

int GetDeteriorationProcent(Item item)
{
    if (not item.Deteriorable)
        return 0;
    if (item.IsBroken)
        return 100;
    int value = item.Deterioration * 100 / Tla::MaxDeterioration;
    return CLAMP(value, 0, 100);
}

void SetItemCost(Item item)
{
    // item.Cost = item.Cost * CLAMP(100 - GetDeteriorationProcent(item), 5, 100)/ 100;
    int wearPercent = GetDeteriorationProcent(item);
    if (wearPercent == 100) {
        item.Cost = uint(item.Cost / 3);
    }
    else if (wearPercent > 75) {
        item.Cost = uint(2 * item.Cost / 3);
    }
    else {
        item.Cost = 0;
    }
}
