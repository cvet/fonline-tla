// FOS Client

void ModuleInit()
{
    Input::AddKeyDownCallback(OnKeyDown);
    Input::AddKeyUpCallback(OnKeyUp);
}

bool OnKeyDown(KeyCode key, string text)
{
    HandlePressedKeys();
    if (key != KeyCode::Text) {
        return HandleHotkeys(key);
    }
    return false;
}

void OnKeyUp(KeyCode key)
{
    HandlePressedKeys();
}

// Hotkeys handler
bool HandleHotkeys(KeyCode key)
{
    // Effect example, temporary
    if (Input::IsAltDown() && key == KeyCode::Q) {
        Game.SetEffect(EffectType::FlushMap, 0, "");
    }
    if (Input::IsAltDown() && key == KeyCode::W) {
        Game.SetEffect(EffectType::FlushMap, 0, "Effects/Flush_Map_BlackWhite.fofx");
    }

    // Hotkeys
    bool isHotkey = true;
    bool inputFocused = (cast<Gui::TextInput>(Gui::GetFocusedObject()) !is null || Gui::IsConsoleActive());
    if (!Input::IsCtrlDown() && !Input::IsAltDown() && !Input::IsShiftDown()) {
        switch (key) {
        case KeyCode::F1:
            Settings.HelpInfo = !Settings.HelpInfo;
            break;

        case KeyCode::F2:
            // if( Game.SaveText( filePath, text ) )
            //    Game.Message( MSG_GAME( MsgStr::StrLogSaved ) );
            // else
            //    Game.Message( MSG_GAME( MsgStr::StrLogNotSaved ) );
            break;
        case KeyCode::F3:
            // if( Game.SaveScreenshot( filePath ) )
            //    Game.Message( MSG_GAME( MsgStr::StrScreenshotSaved ) );
            // else
            //    Game.Message( MSG_GAME( MsgStr::StrScreenshotNotSaved ) );
            break;

        case KeyCode::F6:
            Settings.ShowPlayerName = !Settings.ShowPlayerName;
            break;
        case KeyCode::F7:
            if (Settings.DebugInfo) {
                Settings.ShowNpcName = !Settings.ShowNpcName;
            }
            break;

        case KeyCode::F8:
            if (Settings.Fullscreen) {
                Settings.FullscreenMouseScroll = !Settings.FullscreenMouseScroll;
            }
            else {
                Settings.WindowedMouseScroll = !Settings.WindowedMouseScroll;
            }

            Settings.ScrollMouseRight = false;
            Settings.ScrollMouseLeft = false;
            Settings.ScrollMouseDown = false;
            Settings.ScrollMouseUp = false;
            break;

        case KeyCode::F9:
            if (Settings.DebugInfo) {
                Game.CustomCall("SwitchShowTrack");
            }
            break;
        case KeyCode::F10:
            if (Settings.DebugInfo) {
                Game.CustomCall("SwitchShowHex");
            }
            break;

        // Fullscreen
        case KeyCode::F11:
            Game.CustomCall("SwitchFullscreen");
            break;
        // Minimize
        case KeyCode::F12:
            Game.CustomCall("MinimizeWindow");
            break;

        // Mouse wheel emulate
        case KeyCode::Prior:
            Game.SimulateMouseClick(Settings.MouseX, Settings.MouseY, MouseButton::WheelUp);
            break;
        case KeyCode::Next:
            Game.SimulateMouseClick(Settings.MouseX, Settings.MouseY, MouseButton::WheelDown);
            break;

        // Text input switching
        case KeyCode::Tab:
            Gui::NextTextInput();
            break;

        // Exit
        case KeyCode::Escape:
            GuiScreensExt::TryExit();
            break;

        default:
            break;
        }

        if (!inputFocused) {
            Gui::Screen screen = Gui::GetActiveScreen();

            // Open screen
            if (key == KeyCode::C && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                Game.ShowScreen(CLIENT_SCREEN_CHARACTER);
            }
            else if (key == KeyCode::I && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                Game.ShowScreen(CLIENT_SCREEN_INVENTORY);
            }
            else if (key == KeyCode::P && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                Game.ShowScreen(CLIENT_SCREEN_PIP_BOY);
            }
            else if (key == KeyCode::F && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                Game.ShowScreen(CLIENT_SCREEN_FIX_BOY);
            }
            else if (key == KeyCode::O && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                Game.ShowScreen(CLIENT_SCREEN_MENU);
            }
            else if (key == KeyCode::S && screen.Index == CLIENT_MAIN_SCREEN_GAME) {
                Game.ShowScreen(CLIENT_SCREEN_SKILLBOX);
            }
            else if (key == KeyCode::Tab && screen.Index == CLIENT_MAIN_SCREEN_GAME) {
                Game.ShowScreen(CLIENT_SCREEN_MINIMAP);
            }
            // Close opened screen
            else if ((key == KeyCode::C && screen.Index == CLIENT_SCREEN_CHARACTER) || (key == KeyCode::I && screen.Index == CLIENT_SCREEN_INVENTORY) ||
                     (key == KeyCode::P && screen.Index == CLIENT_SCREEN_PIP_BOY) || (key == KeyCode::F && screen.Index == CLIENT_SCREEN_FIX_BOY) ||
                     (key == KeyCode::O && screen.Index == CLIENT_SCREEN_MENU) || (key == KeyCode::S && screen.Index == CLIENT_SCREEN_SKILLBOX) ||
                     (key == KeyCode::Tab && screen.Index == CLIENT_SCREEN_MINIMAP)) {
                GuiScreensExt::TryExit();
            }
            // Current game time
            else if (key == KeyCode::Slash && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                string str = "Time: ";
                str += (Game.Day < 10 ? "0" : "") + Game.Day + ".";
                str += (GameTime::GetMonth() < 10 ? "0" : "") + GameTime::GetMonth() + ".";
                str += GameTime::GetYear() + " ";
                str += (GameTime::GetHour() < 10 ? "0" : "") + GameTime::GetHour() + ":";
                str += (GameTime::GetMinute() < 10 ? "0" : "") + GameTime::GetMinute() + ":";
                str += (Game.Second < 10 ? "0" : "") + Game.Second;
                str += " x" + Settings.TimeMultiplier;
                Game.Message(FOMB_GAME, str);
            }
            // Global map centring
            else if (key == KeyCode::Home && screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP) {
                Game.CustomCall("GmapHome");
            }
            // Other
            else if (key == KeyCode::Space && Settings.Singleplayer) {
                Game.CustomCall("SwitchSingleplayerPause");
            }
            // Main game screen hotkeys
            else if (screen.Index == CLIENT_MAIN_SCREEN_GAME) {
                isHotkey = true;

                switch (key) {
                case KeyCode::Q:
                    Game.CustomCall("SwitchLookBorders");
                    break;
                case KeyCode::W:
                    Game.CustomCall("SwitchShootBorders");
                    break;

                case KeyCode::A: {
                    Critter chosen = Game.GetChosen();
                    AbstractItem item = (chosen !is null ? chosen.GetItem(ItemProperty::CritterSlot, CritterItemSlot::Main) : null);
                    if (item !is null && item.Type == ItemType::Weapon && (item.Mode & 0xF) < MAX_USES) {
                        Settings.Cursor = CursorType::UseWeapon;
                    }
                    else {
                        isHotkey = false;
                    }
                } break;

                case KeyCode::G:
                    Game.CustomCall("TryPickItemOnGround");
                    break;

                case KeyCode::T:
                    Settings.ShowGroups = !Settings.ShowGroups;
                    break;

                case KeyCode::B:
                    Game.CustomCall("ChangeSlot");
                    break;
                case KeyCode::M:
                    GuiScreensExt::NextCursor();
                    break;
                case KeyCode::N:
                    Parameters::SwitchMainItemMode(true);
                    break;

                case KeyCode::Comma:
                    ChosenActions::SetChosenActions(array<any> = {Tla::ChosenDir, 1 /* CW */, 0, 0, 0, 0, 0});
                    break;
                case KeyCode::Period:
                    ChosenActions::SetChosenActions(array<any> = {Tla::ChosenDir, 0 /* CCW */, 0, 0, 0, 0, 0});
                    break;

                case KeyCode::Home: {
                    if (CurMap != null) {
                        Critter chosen = Game.GetChosen();
                        if (chosen !is null) {
                            CurMap.MoveScreenToHex(chosen.HexX, chosen.HexY, 100, true);
                        }
                    }
                } break;
                case KeyCode::Scroll: {
                    if (CurMap != null) {
                        Critter chosen = Game.GetChosen();
                        if (chosen !is null) {
                            CurMap.LockScreenScroll(chosen, true, true);
                        }
                    }
                } break;

                case KeyCode::H:
                    ChosenActions::SetChosenActions(array<any> = {Tla::ChosenUseSklOnCritter, uint(CritterProperty::SkillSneak), 0, 0, 0, 0, 0});
                    break;

                // Skills
                case KeyCode::C1:
                    ChosenActions::SetChosenActions(array<any> = {Tla::ChosenUseSklOnCritter, uint(CritterProperty::SkillSneak), 0, 0, 0, 0, 0});
                    break;
                case KeyCode::C2: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillLockpick);
                } break;
                case KeyCode::C3: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillSteal);
                } break;
                case KeyCode::C4: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillTraps);
                } break;
                case KeyCode::C5: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillFirstAid);
                } break;
                case KeyCode::C6: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillDoctor);
                } break;
                case KeyCode::C7: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillScience);
                } break;
                case KeyCode::C8: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillRepair);
                } break;

                // Not an hotkey
                default:
                    isHotkey = false;
                    break;
                }
            }
            else {
                isHotkey = false;
            }
        }
        else {
            isHotkey = false;
        }
    }
    else {
        switch (key) {
        case KeyCode::F10:
            if (Input::IsShiftDown()) {
                Game.CustomCall("DumpAtlases");
            }
            break;

        // Num Pad
        case KeyCode::Equals:
        case KeyCode::Add:
            if (!inputFocused) {
                if (Input::IsCtrlDown()) {
                    Settings.SoundVolume = CLAMP(Settings.SoundVolume + 2, 0, 100);
                }
                else if (Input::IsShiftDown()) {
                    Settings.MusicVolume = CLAMP(Settings.MusicVolume + 2, 0, 100);
                }
            }
            break;
        case KeyCode::Minus:
        case KeyCode::Subtract:
            if (!inputFocused) {
                if (Input::IsCtrlDown()) {
                    Settings.SoundVolume = CLAMP(Settings.SoundVolume - 2, 0, 100);
                }
                else if (Input::IsShiftDown()) {
                    Settings.MusicVolume = CLAMP(Settings.MusicVolume - 2, 0, 100);
                }
            }
            break;

        // Exit
        case KeyCode::Escape:
            if (Input::IsShiftDown()) {
                Game.RequestQuit();
            }
            break;

        default:
            isHotkey = false;
            break;
        }
    }
    return isHotkey;
}

// Pressed keys handler
void HandlePressedKeys()
{
    bool isGameWithoutConsole = (Gui::GetActiveScreen().Index == CLIENT_MAIN_SCREEN_GAME && !Gui::IsConsoleActive());
    Settings.MapZooming = (isGameWithoutConsole && Input::IsKeyPressed(KeyCode::Z));
    Settings.ScrollKeybLeft = (isGameWithoutConsole && Input::IsKeyPressed(KeyCode::Left));
    Settings.ScrollKeybRight = (isGameWithoutConsole && Input::IsKeyPressed(KeyCode::Right));
    Settings.ScrollKeybUp = (isGameWithoutConsole && Input::IsKeyPressed(KeyCode::Up));
    Settings.ScrollKeybDown = (isGameWithoutConsole && Input::IsKeyPressed(KeyCode::Down));
}
