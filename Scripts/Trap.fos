// FOS Server Sort 2
// Author: rifleman17
// Ловушки, установленные на дверь или контейнер.
// В качестве сложности ловушки используется свойство LockerComplexity.

// #define DL #(str) Game.Log(str)
#define DL #(str)

// Признак, можно ли установить ловушку на контейнер/дверь
// onItem - дверь/контейнер, на который нужно поставить ловушку
bool _ValidForTrap(Item onItem)
{
    bool isValid = false;
    uint8 iType = onItem.Type;
    isValid = (iType == ItemType::Door || iType == ItemType::Container);

    return isValid;
}

// Признак: предмет=ловушка
bool _IsItemTrap(Item trap)
{
    // предмет должен быть скрытым
    if (!trap.IsHidden) {
        return false;
    }
    if (!trap.IsTrap) {
        return false;
    }
    return (_CanItemTrap(trap));
}

// Признак: предмет может выступать в роли ловушки. Пока только для гранат
bool _CanItemTrap(Item trap)
{
    return _CanItemTrap(trap.ProtoId);
}

bool _CanItemTrap(hstring pid)
{
    hstring[] trapPids = {Content::Item::molotov_cocktail, Content::Item::frag_grenade, Content::Item::plasma_grenade, Content::Item::pulse_grenade};

    for (uint i = 0; i < trapPids.length(); i++) {
        if (pid == trapPids[i]) {
            return true;
        }
    }

    return false;
}

// Признак, дверь заминирована
bool _IsItemTrapped(Item trappedItem)
{
    return (valid(GetTrap(trappedItem)));
}

// Ловушка на данной двери
Item GetTrap(Item door)
{
    DL("getting trap");
    if (!_ValidForTrap(door)) {
        return null;
    }

    DL("door valid for trap");
    Map map = Game.GetMap(door.MapId);
    if (!valid(map)) {
        return null;
    }

    DL("map valid");
    uint x = door.HexX;
    uint y = door.HexY;

    Item[] traps = map.GetItems(x, y);
    for (uint i = 0; i < traps.length(); i++) {
        DL("cycle");
        if (_IsItemTrap(traps[i])) {
            return traps[i];
        }
    }
    return null;
}

// Установка ловушки
// TODO: прописывать сложность ловушки в гранату. Пока установки сложности съема гранаты нет
bool _TrySetupTrap(Item door, Item trap, Critter player)
{
    if (!valid(trap)) {
        return false;
    }
    if (!_ValidForTrap(door)) {
        return false;
    }
    if (!_CanItemTrap(trap)) {
        return false;
    }
    Map map = Game.GetMap(door.MapId);
    if (!valid(map)) {
        return false;
    }
    if (IS_TIMEOUT(player.TimeoutSkLockpick)) {
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillWeariness);
        return false;
    }

    int base = player.SkillTraps;
    base = CLAMP(base, 0, 95);
    int chance = Game.Random(1, 100);
    if (base >= chance) {
        // ловушка установлена
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillTrapsSetSucc);

        hstring pid = trap.ProtoId;
        Game.DeleteItem(trap);

        if (_SetDoorTrap(door, pid)) {
            player.Experience += 50;
        }
    }
    else {
        // не установлена
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillTrapsSetFail);
        if (chance <= 5 || base < 5) {
            TrapDamagePlayer(trap, player); // Есть некий шанс, что ловушка сработает при установке(граната взорвется)
        }
    }

    player.TimeoutSkLockpick = TRAPS_TIMEOUT(player) * 2; // удвоенный таймаут на установку
    return true;
}

bool _SetDoorTrap(Item door, hstring trapPid)
{
    uint16 x = 0, y = 0;
    Map map = door.GetMapPosition(x, y);
    if (!valid(map)) {
        return false;
    }

    Item trap = map.AddItem(x, y, trapPid, 1);
    if (valid(trap)) {
        trap.IsTrap = true;
        trap.IsHidden = true;
        return true;
    }
    return false;
}

// Снятие ловушки
bool _TryRemoveTrap(Item door, Critter player)
{
    if (!_ValidForTrap(door)) {
        return false;
    }
    if (!_IsItemTrapped(door)) {
        return false;
    }

    if (IS_TIMEOUT(player.TimeoutSkLockpick)) {
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillWeariness);
        return false;
    }

    Item trap = GetTrap(door);
    if (!valid(trap)) {
        return false;
    }

    int base = player.SkillTraps - door.LockerComplexity;
    base = CLAMP(base, 0, 95);
    int chance = Game.Random(1, 100);
    if (base >= chance) {
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillTrapsSucc); // Вы смогли разминировать ловушку.
        player.AddItem(trap.ProtoId, 1);
        Game.DeleteItem(trap);
        player.Experience += 50;
    }
    else {
        player.SayMsg(SAY_NETMSG, TextPackName::Game, MsgStr::StrSkillTrapsFail); // Вы не смогли снять ловушку.
        if (chance <= 5 || base < 5) {
            TrapDamagePlayer(trap, player); // Есть некий шанс, что ловушка сработает при разминировании
        }
    }
    player.TimeoutSkLockpick = TRAPS_TIMEOUT(player);
    return true;
}

// Нанесение дамага игроку от ловушки
void TrapDamagePlayer(Item trap, Critter player)
{
    if (!_IsItemTrap(trap)) {
        return;
    }

    // пока все только для гранат реализовано
    if (trap.Type == ItemType::Weapon) {
        // c оружием просто - нужно выполнить нанесение дамага
        hstring weapPid = trap.ProtoId;
        ProtoItem weap = Game.GetProtoItem(weapPid);
        if (!valid(weap)) {
            return;
        }

        uint damage = Game.Random(weap.Weapon_DmgMin_0, weap.Weapon_DmgMax_0);
        uint damageType = weap.Weapon_DmgType_0;
        Map map = player.GetMap();
        if (valid(map)) {
            uint tx = player.HexX;
            uint ty = player.HexY;
            if (weapPid == Content::Item::molotov_cocktail) {
                map.RunEffect(Content::Item::explode_fire_big, tx, ty, 2);
                Effects::QuakeScreen(map);
            }
            else if (weapPid == Content::Item::frag_grenade || weapPid == Content::Item::holy_hand_grenade) {
                map.RunEffect(Content::Item::explode_fire_small, tx, ty, 2);
                Effects::QuakeScreen(map);
            }
            else if (weapPid == Content::Item::pulse_grenade) {
                map.RunEffect(Content::Item::explode_emp, tx, ty, 2);
            }
            else if (weapPid == Content::Item::plasma_grenade) {
                map.RunEffect(Content::Item::explode_plasma, tx, ty, 2);
                Effects::QuakeScreen(map);
            }
        }

        Combat::InjureCritter(player, damage, damageType, Game.GetDirection(trap.HexX, trap.HexY, player.HexX, player.HexY), ZERO_IDENT);
        Game.DeleteItem(trap);
        return;
    }
}

bool UseSkillOnTrappedItem(Critter cr, Item trappedItem, CritterProperty skill)
{
    DL("using skill");
    if (!_IsItemTrapped(trappedItem)) {
        DL("no trap");
        return false;
    }
    DL("item trapped");
    if (skill == CritterProperty::SkillTraps) {
        _TryRemoveTrap(trappedItem, cr);
        return true;
    }
    if (skill == SKILL_PICK_ON_GROUND) {
        DL("try get trap");
        Item trap = GetTrap(trappedItem);
        if (!valid(trap)) {
            return false;
        }

        TrapDamagePlayer(trap, cr);

        return true;
    }
    return false;
}

bool SetTrapOnItem(Critter cr, Item trap, Item onItem)
{
    if (_ValidForTrap(onItem)) {
        if (_CanItemTrap(trap)) {
            _TrySetupTrap(onItem, trap, cr);
            return true;
        }
    }
    return false;
}

// Скрипт для двери с самовоcпроизводящейся ловушкой
// Val5 - время респауна ловушки в игровых минутах
// Val4 - прототип ловушки
void _TrappedDoorInit(Item door, bool firstTime)
{
    hstring trapPid; // Todo: fix = door.Val4;
    if (!_CanItemTrap(trapPid)) {
        return;
    }

    door.OnCritterUseSkill.Subscribe(_TrappedDoorSkill);
    if (_IsItemTrapped(door)) {
        return;
    }

    _SetDoorTrap(door, trapPid);
}

bool _TrappedDoorSkill(Item door, Critter cr, CritterProperty skill)
{
    if (cr.IsNpc()) {
        return false;
    }

    if (UseSkillOnTrappedItem(cr, door, skill)) {
        if (!_IsItemTrapped(door)) // Ловушка разминирована или взорвалась
        {
            uint time = door.Val5;
            if (time > 0) {
                Game.SavedDeferredCall(GAME_MINUTE_TO_TICK(time), RespawnTrap, door.Id);
            }
        }
        return true;
    }
    return false;
}

// Восстановление ловушки через время указанное в Val5
void RespawnTrap(any value)
{
    Item door = Game.GetItem(value);
    if (!valid(door)) {
        return;
    }

    hstring trapPid; // Todo: fix = door.Val4;
    if (!_CanItemTrap(trapPid)) {
        return;
    }

    _SetDoorTrap(door, trapPid);

    Map map = Game.GetMap(door.MapId);
    if (valid(map)) { // Попытка закрыть дверь
        Lockers::SwitchLocker(door, false);
    }
}
