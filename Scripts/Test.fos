// FOS Server Client
// отключить после тестов

///@ RemoteCall Server CreateLocationSelf(hstring pid, int mapIndex, hstring entry)
///@ RemoteCall Server GetPropValue(int prop, any crId)

#ifdef __SERVER

void ModuleInit()
{
    // Game.OnMapCritterIn.Subscribe( OnMapCritterIn );
}

void OnMapCritterIn(Map map, Critter cr)
{
    Game.Log("Critter state: " + cr.Condition);
}

void CreateLocationSelf(Player player, hstring locPid, int mapIndex, hstring entry)
{
    Critter cr = player.GetControlledCritter();
    Location loc = Game.CreateLocation(locPid, cr.WorldX, cr.WorldY, null);
    Map map = loc.GetMapByIndex(mapIndex);
    uint16 hexX = 0, hexY = 0;
    if (Entrance::MapGetEntryCoords(map, entry, 0, hexX, hexY)) {
        cr.TransitToMap(map, hexX, hexY, Game.Random(0, 5));
    }
}

void GetPropValue(Player player, int prop, any crId)
{
    Critter cr = player.GetControlledCritter();
    Critter someCr = Game.GetCritter(ident(crId));
    int value = someCr.GetAsInt(CritterProperty(prop));
    cr.Say(SAY_NORM, "Prop value: " + value + "; name: " + Enum::ToString(CritterProperty(prop)));
}

//~run Test::ToMap klamath, 92, 102
void ToMap(Critter cr, int mapPid, int hexX, int hexY)
{
    Map map = Game.GetLocation(Content::Location::klamath).GetMapByIndex(0);
    cr.TransitToMap(map, 92, 102, Game.Random(0, 5));
}

void HP2(Critter cr, int, int, int)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        Critter[] critters = map.GetCritters(CritterFindType::Any);
        for (int i = 0, l = critters.length(); i < l; i++) {
            critters[i].Say(SAY_NORM, critters[i].Name + "\r\nHP: " + critters[i].CurrentHp + " of " + critters[i].MaxLife);
        }
    }
}

void _TraceInit(Critter cr, bool firstTime)
{
    TraceNpcPlane(cr);
}

void TraceNpcPlane(Critter npc)
{
    npc.OnNpcPlaneRun.Subscribe(TraceOnNpcPlaneRun);
    npc.OnNpcPlaneBegin.Subscribe(TraceOnNpcPlaneBegin);
    npc.OnNpcPlaneEnd.Subscribe(TraceOnNpcPlaneEnd);
}

void TraceOnNpcPlaneBegin(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    auto plan = NpcPlanes::GetCritterPlane(npc, planeId);
    NpcPlanes::NL(npc, "begin " + plan.ToString() + "reason: " + reason);
}

void TraceOnNpcPlaneEnd(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    auto plan = NpcPlanes::GetCritterPlane(npc, planeId);
    NpcPlanes::NL(npc, "end " + plan.ToString() + "reason: " + reason);
}

void TraceOnNpcPlaneRun(Critter npc, int planeId, int reason, any& result0, any& result1, any& result2)
{
    auto plan = NpcPlanes::GetCritterPlane(npc, planeId);
    NpcPlanes::NL(npc, "run " + plan.ToString() + "reason: " + reason);
}

#endif
// ~cmd CreateLocation desert_10 0 0
// ~cmd GetPropValue HomeHexX 580
#ifdef __CLIENT

bool ParseMessage(string message)
{
    string[] args = message.split(" ");
    if (args.length() > 2 && args[0] == "cmd") {
        hstring a1;
        hstring a2;
        int p1 = 0;
        string cmd = args[1];
        if (cmd == "CreateLocation") {
            a1 = hstring(args[2]);
            p1 = 0; // args[ 3 ] ;
            a2 = hstring(args[4]);
            CurPlayer.ServerCall.CreateLocationSelf(a1, p1, a2);
            return true;
        }
        if (cmd == "GetPropValue") {
            p1 = Enum::Parse_CritterProperty(args[2]);
            CurPlayer.ServerCall.GetPropValue(p1, args[3].toInt());
            return true;
        }
    }
    return false;
}

#endif
