// FOS Server Client

///@ RemoteCall Client DoQuakeScreen(int noise, int timeMs)
///@ RemoteCall Client DoFlushScreen(int fromColor, int toColor, int timeMs)

#ifdef __SERVER

// Default values
#define QUAKE_NOISE (8)
#define QUAKE_TIME  (800)

void FlushScreen(Critter cr, bool fadeOut, uint timeMs)
{
    if (cr.IsOwnedByPlayer()) {
        cr.GetOwner().ClientCall.DoFlushScreen(fadeOut ? 0xFF000000 : 0, fadeOut ? 0 : 0xFF000000, int(timeMs));
    }
}

void FlushScreen(Critter cr, uint fromColor, uint toColor, uint timeMs)
{
    if (cr.IsOwnedByPlayer()) {
        cr.GetOwner().ClientCall.DoFlushScreen(int(fromColor), int(toColor), int(timeMs));
    }
}

void FlushScreen(Map map, bool fadeOut, uint timeMs)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].GetOwner().ClientCall.DoFlushScreen(fadeOut ? 0xFF000000 : 0, fadeOut ? 0 : 0xFF000000, int(timeMs));
    }
}

void FlushScreen(Map map, uint fromColor, uint toColor, uint timeMs)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].GetOwner().ClientCall.DoFlushScreen(int(fromColor), int(toColor), int(timeMs));
    }
}

void QuakeScreen(Critter cr)
{
    if (cr.IsOwnedByPlayer()) {
        cr.GetOwner().ClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

void QuakeScreen(Critter cr, uint noise, uint timeMs)
{
    if (cr.IsOwnedByPlayer()) {
        cr.GetOwner().ClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

void QuakeScreen(Map map)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].GetOwner().ClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

void QuakeScreen(Map map, uint noise, uint timeMs)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].GetOwner().ClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

#endif

#ifdef __CLIENT

void DoFlushScreen(int fromColor, int toColor, int timeMs)
{
    Game.FlushScreen(fromColor, toColor, timeMs);
}

void DoQuakeScreen(int noise, int timeMs)
{
    Game.QuakeScreen(noise, timeMs);
}

#endif
