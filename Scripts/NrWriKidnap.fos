// FOS Server Sort 2
// Author: rifleman17
// Квест "Проблемы мистера Райта: Заложник."

///@ Property Critter Protected     uint8 NRWriKidnap     Group = Quests Quest = 3707 Max = 12
///@ Property Critter Protected     uint8 NRSalvatoreKill Group = Quests Quest = 3710 Max = 3
///@ Property Critter PrivateServer int   NRWriKidnapNotifyTime
///@ Property Critter PrivateServer int   NRKidnapKillsCounter
///@ Property Critter PrivateServer ident QNrWriKidnapInvokeId
///@ Property Location PrivateServer bool LocDefendersHostile
///@ Property Location PrivateServer ident NRWriGuardDead
///@ Property Location PrivateServer bool NRKidnapAllMarodeursDead

#define NEXT_KIDNAP_TIME (60 * 60 * 24 * 30 * Game.Random(1, 3))
#define KIDNAP_LOC_PROTO (Content::Location::kidnappers_hideout)
#define KINDAP_GLOBAL_X  (Game.Random(1229, 1359))
#define KINDAP_GLOBAL_Y  (Game.Random(847, 942))

// Статусы квеста
#define Q_QUEST_TAKEN          (1) // Взят квест
#define Q_PAY_RAMIREZ          (2) // Игрок заплатил за освобождение Райта

#define ENT_DEADZONE_1         (100) // Начало мертвой зоны
#define ENT_DEADZONE_2         (112) // конец мертвой зоны

#define NPC_ROLE_MARODEUR      (1) // Роль НПЦ - рядовой бандит
#define NPC_ROLE_GUARD         (2) // Охранник пленного Райта
#define NPC_ROLE_WRIGHT        (3)

#define CTE_ATTACK             (17)

#define RADIUS_SEARCH_MARODEUR (15) // Радиус в гексах, в котором нужно искать мародера, который начнет диалог с игроком

// Вы на месте. Бандиты настороже и с оружием в руках. Мирным путем договориться не получится.
#define STR_MAP_IN_HOSTILE (3350)
// Вы на месте. Бандиты выглядят достаточно беспечно. Палатку с сыном Райта охраняет один часовой. Если убрать часового без лишнего шума, вы получите шанс решить все проблемы по-тихому.
#define STR_MAP_IN_SNEAK_OK (3351)
// Вы на месте. Бандиты выглядят достаточно беспечно. Главарь банды - в центре лагеря. Возможно, у вас получится заплатить выкуп и обойтись без кровопролития.
#define STR_MAP_IN_LOWSNEAK (3352)

#define STR_MARODEUR_ATTACK (1) // Строка из диалога мародера, которую он произносит при атаке в специальных случаях.
#define STR_GUARD_SHOUT     (3353) // На помощь!Все сюда, Райт может сбежать!Подкрепление! Подкрепление!

// #define DL #(s) (Game.Log("kidnap: " + s))
#define DL #(s)

// ************************ Выдача квеста. *****************************************************************

ident KidnapLocationId;

void _OliverInit(Critter cr, bool firstTime)
{
    if (cr.QNrWriKidnapInvokeId == ZERO_IDENT) {
        cr.QNrWriKidnapInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(NEXT_KIDNAP_TIME), Kidnap, cr.Id);
    }
    // cr.OnFinish.Subscribe(_OliverFinish);
}

void Kidnap(any value)
{
    Critter cr = Game.GetCritter(value);
    if (cr is null) {
        return;
    }

    if (!KidnapLocationExist()) {
        ident locId = Game.CreateLocation(KIDNAP_LOC_PROTO, KINDAP_GLOBAL_X, KINDAP_GLOBAL_Y, null).Id;
        if (locId != ZERO_IDENT) {
            KidnapLocationId = locId;
            DL("Location:" + locId);
        }
    }

    cr.QNrWriKidnapInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(NEXT_KIDNAP_TIME), Kidnap, value);
}

bool KidnapLocationExist()
{
    if (KidnapLocationId == ZERO_IDENT) {
        return false;
    }
    Location loc = Game.GetLocation(KidnapLocationId);
    return valid(loc);
}

bool d_QuestActive(Critter player, Critter npc)
{
    return KidnapLocationExist();
}

bool d_NotQuestActive(Critter player, Critter npc)
{
    return !KidnapLocationExist();
}

void r_ShowLocation(Critter player, Critter npc)
{
    Location::SetKnownLoc(player, Game.GetLocation(KidnapLocationId));
}

// ************************ Скрипт карты. ******************************************************************
void _MapInit(Map map, bool firstTime)
{
    DL("Map init");
    Location loc = map.GetLocation();
    KidnapLocationId = loc.Id;
    map.OnLoop.Subscribe(_MapLoop);
    map.OnCritterIn.Subscribe(_MapInCritter);
    map.OnCritterDead.Subscribe(_MapCritterDead);

    map.OnCritterOut.Subscribe(_MapOutCritter);
    map.LoopTime1 = 6000;
}

void _MapInCritter(Map map, Critter cr)
{
    DL("Map in critter");
    Location loc = map.GetLocation();
    if (!valid(loc)) {
        return;
    }

    if (cr.NRWriKidnap == Q_QUEST_TAKEN) {
        if (loc.LocDefendersHostile) {
            cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_MAP_IN_HOSTILE);
            return;
        }

        if (cr.SkillSneak > 50) {
            cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_MAP_IN_SNEAK_OK);
        }
        else {
            cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_MAP_IN_LOWSNEAK);
        }
    }
}

void _MapOutCritter(Map map, Critter cr)
{
    UpdateQuestStatus(map, cr);
    Location loc = map.GetLocation();
    if (valid(loc)) {
        ResetHostileIfNoPlayers(loc);
    }
}

void ResetHostileIfNoPlayers(Location loc)
{
    if (not loc.LocDefendersHostile) {
        return;
    }

    Critter[] players = {};
    for (uint i = 0; i < loc.GetMapCount(); i++) {
        Map map = loc.GetMapByIndex(i);
        if (valid(map)) {
            players.insertLast(map.GetCritters(CritterFindType::Players));
        }
    }

    if (players.length() == 0) {
        loc.LocDefendersHostile = false;

        // Если убит охранник, возрождаем его
        if (loc.NRWriGuardDead != ZERO_IDENT) {
            Critter cr = Game.GetCritter(loc.NRWriGuardDead);
            if (valid(cr) && !cr.IsControlledByPlayer && cr.IsDead()) {
                loc.NRWriGuardDead = ZERO_IDENT;
                CritterState::ToAlive(cr);
            }
        }
    }
}

// ************************ На карте кто-то убит. **********************************************************
void _MapCritterDead(Map map, Critter cr, Critter killer)
{
    Location loc = map.GetLocation();
    if (valid(loc)) {
        ResetHostileIfNoPlayers(loc);
    }
    UpdateQuestStatus(map, null);
}

// ************************ Атака рейдеров. ****************************************************************
// Признак: нпц на карте враждебны
bool IsHostile(Map map)
{
    Location loc = map.GetLocation();
    if (not valid(loc)) {
        return false;
    }

    return loc.LocDefendersHostile;
}

void SetHostile(Location loc, bool hostileOn)
{
    if (valid(loc)) {
        loc.LocDefendersHostile = hostileOn;
    }
}

void AcceptAttack(Map map)
{
    DL("accept attack");

    if (!IsHostile(map)) {
        SetHostile(map.GetLocation(), true);
    }

    Critter[] marodeurs = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_MARODEUR, CritterFindType::AliveNpc);
    Critter[] players = map.GetCritters(CritterFindType::AlivePlayers);
    for (uint i = 0; i < marodeurs.length(); i++) {
        Critter marodeur = marodeurs[i];
        for (uint j = 0; j < players.length(); j++) {
            Critter player = players[j];
            DL("target found");
            EnemyStack::AddEnemyToStack(marodeur, player.Id);
            if (Game.GetDistance(marodeur, player) < 15) {
                NpcPlanes::AddAttackPlane(marodeur, 0, player);
            }
        }
    }
}

void r_Attack(Critter cr, Critter npc)
{
    AcceptAttack(cr.GetMap());
}

void dlg_Attack(Critter cr, Critter npc, string& lexems)
{
    AcceptAttack(cr.GetMap());
}

// ************************ Игрок в мертвой зоне. **********************************************************
// Мертвая зона. Если игрок в мертвой зоне, рейдеры будут обращаться к нему с вопросами "кто такой", с возможностью атаки
void _MapLoop(Map map)
{
    if (IsHostile(map)) {
        return;
    }

    Critter[] players = map.GetCritters(CritterFindType::AlivePlayers);
    for (uint i = 0; i < players.length(); i++) {
        Critter player = players[i];
        Critter[] marodeurs = map.GetCritters(player.HexX, player.HexY, RADIUS_SEARCH_MARODEUR, CritterFindType::AliveNpc);
        if (!marodeurs.isEmpty()) {
            Critter npc = marodeurs[0];
            if (npc.NpcRole == NPC_ROLE_MARODEUR) {
                TryMarodeurDialog(player, npc, map);
            }
        }
    }
}

void TryMarodeurDialog(Critter player, Critter marodeur, Map map)
{
    if (marodeur.GetTalkingCritters().length() > 0) {
        return; // НПЦ уже говорит с кем-то
    }
    if (player.NRWriKidnapNotifyTime + Settings.TimeMultiplier * 20 > int(Game.GetFullSecond())) { // запросы к игрокам не реже раз в 20 сек
        return;
    }

    CritterState::Wait(player, 0);

    Critter[] players = {};

    // проверка, что с игроком еще никто не разговаривает
    Critter[] npc = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_MARODEUR, CritterFindType::AliveNpc);
    for (uint i = 0; i < npc.length(); i++) {
        players.insertLast(npc[i].GetTalkingCritters()); // собираем всех говорящих игроков с нпц
    }

    for (uint i = 0; i < players.length(); i++) {
        if (players[i].Id == player.Id) { // С этим игроком кто-то уже заговорил
            return;
        }
    }

    // Все проверки пройдены, с игроком никто не говорит, время разрешения находиться на локации прошло. Запускаем еще один диалог
    player.NRWriKidnapNotifyTime = Game.GetFullSecond();
    Game.RunDialog(player, marodeur, true);
}

// ************************ Мародеры. **********************************************************************
void _HostileInit(Critter cr, bool firstTime)
{
    cr.OnAttack.Subscribe(_HostileAttack);
    cr.OnDead.Subscribe(_HostileDead);
    cr.SkillSmallGuns = 250;
    cr.MaxLifeBase = Game.Random(400, 600);
    cr.ActionPointsBase = Game.Random(8, 12);
    cr.CurrentHp = cr.MaxLife;
    cr.PerkBetterCriticals = 1;
    cr.PerkSniper = 1;
}

bool _HostileAttack(Critter cr, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    if (target.IsControlledByPlayer && !target.IsDead() && !IsHostile(cr.GetMap())) {
        if (Game.Random(1, 2) == 1) {
            AcceptAttack(cr.GetMap());
            cr.SayMsg(SAY_SHOUT, TextPackName::Text, STR_GUARD_SHOUT);
        }
    }
    return false;
}

void _HostileDead(Critter cr, Critter killer)
{
    if (valid(killer) && killer.IsControlledByPlayer) {
        killer.NRKidnapKillsCounter += 1;
    }
}

// ************************ Охранник пленного Райта. *******************************************************
void _GuardInit(Critter cr, bool firstTime)
{
    cr.OnDead.Subscribe(_GuardDead);
    cr.OnAttacked.Subscribe(_GuardAttacked);
    cr.OnRespawn.Subscribe(_GuardRespawn);
}

void _GuardDead(Critter cr, Critter killer)
{
    Map map = cr.GetMap();
    if (not valid(map)) {
        return;
    }

    Location loc = map.GetLocation();
    if (not valid(loc)) {
        return;
    }

    loc.NRWriGuardDead = cr.Id;
    if (valid(killer) && !IsHostile(map)) {
        if (killer.NRWriKidnap == 1 || killer.NRWriKidnap == 2) {
            killer.NRWriKidnap = 3;
        }
    }
}

void _GuardRespawn(Critter cr)
{
    Map map = cr.GetMap();
    if (not valid(map)) {
        return;
    }

    Location loc = map.GetLocation();
    if (not valid(loc)) {
        return;
    }

    if (loc.NRWriGuardDead == cr.Id) {
        loc.NRWriGuardDead = ZERO_IDENT;
    }
}

bool _GuardAttacked(Critter cr, Critter attacker)
{
    Item wpn = _CritGetItemHand(attacker);
    if (valid(wpn) && wpn.Type == ItemType::Weapon && wpn.Weapon_Skill_1 != CritterProperty::SkillUnarmed &&
        wpn.Weapon_Skill_1 != CritterProperty::SkillMeleeWeapons) {
        // Атака не холодным оружием, остальные должны прибежать
        if (!IsHostile(cr.GetMap())) {
            SetHostile(cr.GetMap().GetLocation(), true);
            cr.SayMsg(SAY_SHOUT, TextPackName::Text, STR_GUARD_SHOUT);
        }
    }
    return false;
}

void t_Alarm(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    Map map = player.GetMap();
    Critter guard = map.GetCritter(CritterProperty::NpcRole, NPC_ROLE_GUARD, CritterFindType::Npc);
    if (!valid(guard) || guard.IsDead() || !entered || IsHostile(player.GetMap())) {
        return;
    }
    if (player.IsControlledByPlayer) {
        if (player.NRWriKidnap != 2 && player.NRWriKidnap != 4) {
            NpcPlanes::AddAttackPlane(guard, 0, player);
            guard.SayMsg(SAY_SHOUT, TextPackName::Text, STR_GUARD_SHOUT);
            SetHostile(guard.GetMap().GetLocation(), true);
            Critter npc = map.GetCritter(CritterProperty::NpcRole, NPC_ROLE_MARODEUR, CritterFindType::AliveNpc);
            if (valid(npc)) {
                NpcPlanes::AddAttackPlane(npc, 0, player);
            }
        }
    }
}
// Триггер, наступая на который игрок должен быть в снике и подходить ровно со спины
void t_CheckSneak(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    Map map = player.GetMap();
    Critter guard = map.GetCritter(CritterProperty::NpcRole, NPC_ROLE_GUARD, CritterFindType::Npc);
    if (!player.IsControlledByPlayer || !valid(guard) || guard.IsDead() || !entered || IsHostile(player.GetMap())) {
        return;
    }

    uint8 questVar = player.NRWriKidnap;
    if (questVar == 2) {
        CritterState::Wait(player, 0);
        Game.RunDialog(player, guard, true);
        return;
    }
    if (questVar == 1) {
        if (player.InSneakMode && (player.Dir == 2 || player.Dir == 3)) {
            guard.SayMsg(SAY_NORM, TextPackName::Text, 3354);
            return;
        }
    }
    if (questVar == 4) {
        return;
    }

    NpcPlanes::AddAttackPlane(guard, 0, player);
    guard.SayMsg(SAY_SHOUT, TextPackName::Text, STR_GUARD_SHOUT);
    SetHostile(guard.GetMap().GetLocation(), true);
    Critter npc = map.GetCritter(CritterProperty::NpcRole, NPC_ROLE_MARODEUR, CritterFindType::AliveNpc);
    if (valid(npc)) {
        NpcPlanes::AddAttackPlane(npc, 0, player);
    }
}

// Сын райта
void _WrightInit(Critter cr, bool firstTime)
{
    cr.OnDead.Subscribe(_WrightDead);
    cr.ReplicationTime = -1;
}

void _WrightDead(Critter cr, Critter killer)
{
    // Удаляем локацию, переключаем доступность переменной
    UpdateQuestStatus(cr.GetMap(), null);
    if (valid(killer) && killer.NRSalvatoreKill == 1) {
        killer.NRSalvatoreKill = 2;
    }
}

// Диалог с сыном райта
bool d_WeaponHand(Critter player, Critter npc)
{
    Item item = _CritGetItemHand(player);
    if (valid(item) && item.Type == ItemType::Weapon) {
        return true;
    }
    return false;
}

void dlg_WeaponHand(Critter player, Critter npc, string& lexems)
{
    Item item = _CritGetItemHand(player);
    if (valid(item) && item.Type == ItemType::Weapon) {
        lexems = "$weaponName@text Item" + STR_ITEM_NAME(item) + "@";
    }
}

void r_GiveWeaponHand(Critter player, Critter npc)
{
    Item item = _CritGetItemHand(player);
    if (valid(item) && item.Type == ItemType::Weapon) {
        npc.AddItem(item.ProtoId, 1);
        FavoriteItem::SetFavoriteItemPid(npc, CritterItemSlot::Main, item.ProtoId);
        Game.DestroyItem(item);
    }
}

// Озверевший Райт
void r_Fight(Critter player, Critter npc)
{
    if (valid(npc)) {
        npc.AddTimeEvent(cte_WrightAttack, Time::RealSecond(3), CTE_ATTACK);
        npc.IsUnlimitedAmmo = true;
    }
}

void r_WrightMerc(Critter player, Critter npc)
{
    if (!valid(npc)) {
        return;
    }
    Merc::Merc2Player(player, npc);
    npc.MercAlwaysRun = true;
    npc.MercLoseDist = 0;
    npc.MercMasterDist = 2;
}

void _WrightInitMerc(Critter cr, bool firstTime)
{
    Merc::_MercInit(cr, firstTime);

    cr.OnGlobalMapProcess.Subscribe(_WrightGlobalProcess);
}

bool _WrightGlobalProcess(Critter cr, int, Item, float, float, float, float, float, uint, bool)
{
    cr.SayMsg(SAY_NORM, TextPackName::Dialogs, DLGSTR(cr.DialogId, 1));
    Game.DestroyCritter(cr);
    return false;
}

void UpdateQuestStatus(Map map, Critter cr)
{
    if (!valid(map)) {
        return;
    }

    bool wrightAlive = !map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_WRIGHT, CritterFindType::AliveNpc).isEmpty();
    bool wrightDead = !map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_WRIGHT, CritterFindType::DeadNpc).isEmpty();
    bool marodeursAlive = !map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_MARODEUR, CritterFindType::AliveNpc).isEmpty();

    int status = 0;
    if (!wrightAlive && !wrightDead && marodeursAlive) {
        status = 5;
    }
    if (wrightAlive && !marodeursAlive) {
        status = 6;
    }
    if (!wrightAlive && !wrightDead && !marodeursAlive) {
        status = 6;
    }
    if (wrightDead && marodeursAlive) {
        status = 7;
    }
    if (wrightDead && !marodeursAlive) {
        status = 8;
    }

    Critter[] players = map.GetCritters(CritterFindType::Players);
    if (valid(cr)) {
        players.insertLast(cr);
    }

    for (uint i = 0; i < players.length(); i++) {
        Critter player = players[i];
        if (player.NRWriKidnap != 0 && player.NRWriKidnap != 11) {
            player.NRWriKidnap = status;
        }
    }

    if (wrightDead || !marodeursAlive || (!wrightDead && !wrightAlive)) {
        Game.SavedDeferredCall(HOUR_TICKS(1), DeleteQuestLocation, map.Id);
    }

    if (!marodeursAlive) {
        Location loc = map.GetLocation();
        loc.NRKidnapAllMarodeursDead;
    }
}

void DeleteQuestLocation(any value)
{
    Map map = Game.GetMap(ident(value));
    if (valid(map)) {
        Location loc = map.GetLocation();
        if (valid(loc)) {
            loc.AutoGarbage = true;
        }
    }
}

uint cte_WrightAttack(Critter cr, any identifier, uint& stage)
{
    Map map = cr.GetMap();
    AcceptAttack(map);

    Critter[] marodeurs = map.GetCritters(CritterProperty::NpcRole, NPC_ROLE_MARODEUR, CritterFindType::AliveNpc);
    for (uint i = 0; i < marodeurs.length(); i++) {
        Critter marodeur = marodeurs[i];
        if (valid(marodeur)) {
            EnemyStack::AddEnemyToStack(marodeur, cr.Id);
            EnemyStack::AddEnemyToStack(cr, marodeur.Id);
            NpcPlanes::AddAttackPlane(cr, 0, marodeur);
        }
    }
    return 0;
}
