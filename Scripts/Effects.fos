// FOS Server Client

///@ RemoteCall Client DoQuakeScreen(uint noise, uint timeMs)
///@ RemoteCall Client DoFlushScreen(ucolor fromColor, ucolor toColor, uint timeMs)

#ifdef __SERVER

// Default values
#define QUAKE_NOISE (8)
#define QUAKE_TIME  (800)

void FlushScreen(Critter cr, bool fadeOut, uint timeMs)
{
    if (cr.IsControlledByPlayer) {
        cr.PlayerClientCall.DoFlushScreen(fadeOut ? ucolor(0xFF000000) : ucolor(), fadeOut ? ucolor() : ucolor(0xFF000000), timeMs);
    }
}

void FlushScreen(Critter cr, ucolor fromColor, ucolor toColor, uint timeMs)
{
    if (cr.IsControlledByPlayer) {
        cr.PlayerClientCall.DoFlushScreen(fromColor, toColor, timeMs);
    }
}

void FlushScreen(Map map, bool fadeOut, uint timeMs)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].PlayerClientCall.DoFlushScreen(fadeOut ? ucolor(0xFF000000) : ucolor(), fadeOut ? ucolor() : ucolor(0xFF000000), timeMs);
    }
}

void FlushScreen(Map map, ucolor fromColor, ucolor toColor, uint timeMs)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].PlayerClientCall.DoFlushScreen(fromColor, toColor, timeMs);
    }
}

void QuakeScreen(Critter cr)
{
    if (cr.IsControlledByPlayer) {
        cr.PlayerClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

void QuakeScreen(Critter cr, uint noise, uint timeMs)
{
    if (cr.IsControlledByPlayer) {
        cr.PlayerClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

void QuakeScreen(Map map)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].PlayerClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

void QuakeScreen(Map map, uint noise, uint timeMs)
{
    Critter[] critters = map.GetCritters(CritterFindType::Players);
    for (uint i = 0; i < critters.length(); i++) {
        critters[i].PlayerClientCall.DoQuakeScreen(QUAKE_NOISE, QUAKE_TIME);
    }
}

#endif

#ifdef __CLIENT

void DoFlushScreen(ucolor fromColor, ucolor toColor, uint timeMs)
{
    Game.FlushScreen(fromColor, toColor, timeMs);
}

void DoQuakeScreen(uint noise, uint timeMs)
{
    Game.QuakeScreen(noise, timeMs);
}

#endif
