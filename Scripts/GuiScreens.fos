// FOS Client

// GUI scheme name: Default

void InitializeScreens()
{
    Gui::RegisterScreen(CLIENT_MAIN_SCREEN_LOGIN, GuiScreens::Login::CreateScreen);
    Gui::RegisterScreen(CLIENT_MAIN_SCREEN_REGISTRATION, GuiScreens::Registration::CreateScreen);
    Gui::RegisterScreen(CLIENT_MAIN_SCREEN_GAME, GuiScreens::Game::CreateScreen);
    Gui::RegisterScreen(CLIENT_MAIN_SCREEN_GLOBAL_MAP, GuiScreens::GlobalMap::CreateScreen);
    Gui::RegisterScreen(CLIENT_MAIN_SCREEN_WAIT, GuiScreens::Wait::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_CREDITS, GuiScreens::Credits::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_OPTIONS, GuiScreens::Options::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_INVENTORY, GuiScreens::Inventory::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_PICKUP, GuiScreens::PickUp::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_CHARACTER, GuiScreens::Character::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_DIALOG, GuiScreens::Dialog::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_BARTER, GuiScreens::Barter::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_PIP_BOY, GuiScreens::PipBoy::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_FIX_BOY, GuiScreens::FixBoy::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_MENU, GuiScreens::Menu::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_AIM, GuiScreens::Aim::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_SPLIT, GuiScreens::Split::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_TIMER, GuiScreens::Timer::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_DIALOGBOX, GuiScreens::DialogBox::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_ELEVATOR, GuiScreens::Elevator::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_SAY, GuiScreens::Say::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_GM_TOWN, GuiScreens::GMTown::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_INPUT_BOX, GuiScreens::InputBox::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_SKILLBOX, GuiScreens::SkillBox::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_USE, GuiScreens::Use::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_PERK, GuiScreens::Perk::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_TOWN_VIEW, GuiScreens::TownView::CreateScreen);
    Gui::RegisterScreen(CLIENT_SCREEN_CURSOR, GuiScreens::Cursor::CreateScreen);
    // Custom hierarchy: GuiScreens::ItemsContainer::CreateHierarchy
    // Custom hierarchy: GuiScreens::Preview::CreateHierarchy
    Gui::RegisterScreen(CLIENT_SCREEN_SAY_EXTENDED, GuiScreens::SayExtended::CreateScreen);
}

namespace Login
{
    class Login : Gui::Screen
    {
        void OnConstruct() override
        {
            SetPosition(50, 50);
            SetSize(800, 600);
            SetDock(DockStyle::Fill);
        }

        void OnGlobalInput(KeyCode key, string text) override
        {
            if(Active && Gui::GetActiveScreen().Index == Index)
            {
                if( key == KeyCode::Return || key == KeyCode::Numpadenter )
                {
                    string login = Screen.FindText("InputLogin").Text;
                    string pass  = Screen.FindText("InputPassword").Text;
                    if(pass!="" && login != "")
                    {
                        string cmd   = "Login\n" + login + "\n" + pass ;
                        Game.Log(cmd);
                        Game.CustomCall(cmd , "\n");
                    }
                }
                
                if(!Find( "MessageBox" ).Active)
                    Find( "MessageBox" ).SetActive( true );
            }
            else
            {
                if(Find( "MessageBox" ).Active)
                    Find( "MessageBox" ).SetActive( false );   
            }
        }
    };

    class Menu : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(80, 60);
            SetSize(640, 480);
            SetBackgroundImage("art/intrface/login.png");
        }
    };

    class Play : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(87, 207);
            SetSize(19, 19);
            SetPressedImage("art/intrface/login_button_down.png");
        }

        void OnLMouseClick() override
        {
            if( !Settings.Singleplayer )
                Game.CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
            else
                Game.ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
        }
    };

    class Text1 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, 1);
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_BLACK);
        }

        string get_Text() override
        {
            return MSG_GAME( MsgStr::StrLoginPlay );
        }
    };

    class Registration : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(87, 237);
            SetSize(19, 19);
            SetPressedImage("art/intrface/login_button_down.png");
        }

        void OnLMouseClick() override
        {
            if( !Settings.Singleplayer )
            {
                Game.ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
            }
            else
                Game.ShowScreen( CLIENT_SCREEN_SAVE_LOAD );
        }
    };

    class Text2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, 1);
            SetText(MSG_GAME( MsgStr::StrLoginRegistration ));
            SetTextFont(Fonts::Fat);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrLoginRegistration ));
        }
    };

    class Options : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(87, 267);
            SetSize(19, 19);
            SetPressedImage("art/intrface/login_button_down.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_OPTIONS );
        }
    };

    class Text3 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, 1);
            SetText(MSG_GAME( MsgStr::StrLoginOptions ));
            SetTextFont(Fonts::Fat);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrLoginOptions ));
        }
    };

    class About : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(87, 297);
            SetSize(19, 19);
            SetPressedImage("art/intrface/login_button_down.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_CREDITS );
        }
    };

    class Text4 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, 1);
            SetText(MSG_GAME( MsgStr::StrLoginCredits ));
            SetTextFont(Fonts::Fat);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrLoginCredits ));
        }
    };

    class Exit : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(87, 327);
            SetSize(19, 19);
            SetPressedImage("art/intrface/login_button_down.png");
        }

        void OnLMouseClick() override
        {
            GuiScreensExt::TryExit();
        }
    };

    class Text5 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, 1);
            SetText(MSG_GAME( MsgStr::StrLoginExit ));
            SetTextFont(Fonts::Fat);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrLoginExit ));
        }
    };

    class InputLogin : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(80, 141);
            SetSize(145, 18);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetInputLength(Settings.MaxNameLength);
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( Game.GetCacheText("RegName__"));
        }
    };

    class InputPassword : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(80, 168);
            SetSize(145, 18);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetInputLength(Settings.MaxNameLength);
            SetInputPassword("#");
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( Game.GetCacheText("RegPassword__"));
        }
    };

    class Version : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(10, 5);
            SetAnchor(AnchorStyle(AnchorStyle::Left| AnchorStyle::Top));
            SetText(MSG_GAME( MsgStr::StrVersionInfo ));
            SetTextColor(COLOR_WHITE);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrVersionInfo ));
        }
    };

    class MessageBox : Gui::MessageBox
    {
        void OnConstruct() override
        {
            SetPosition(30, 50);
            SetSize(370, 50);
            SetAnchor(AnchorStyle(AnchorStyle::Left| AnchorStyle::Top));
            SetText("test");
            SetTextColor(COLOR_WHITE);
            SetDisplayedMessages(array<int> = { FOMB_ALL });
        }
    
        void OnRefreshText() override
        {
            SetText("test");
        }
    };

    Login CreateLoginHierarchy(Gui::Object parent)
    {
        Login obj = Login();
        CreateMenuHierarchy(obj);
        CreateVersionHierarchy(obj);
        CreateMessageBoxHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Menu CreateMenuHierarchy(Gui::Object parent)
    {
        Menu obj = Menu();
        CreatePlayHierarchy(obj);
        CreateRegistrationHierarchy(obj);
        CreateOptionsHierarchy(obj);
        CreateAboutHierarchy(obj);
        CreateExitHierarchy(obj);
        CreateInputLoginHierarchy(obj);
        CreateInputPasswordHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Play CreatePlayHierarchy(Gui::Object parent)
    {
        Play obj = Play();
        CreateText1Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text1 CreateText1Hierarchy(Gui::Object parent)
    {
        Text1 obj = Text1();
        obj.Init(parent);
        return obj;
    }

    Registration CreateRegistrationHierarchy(Gui::Object parent)
    {
        Registration obj = Registration();
        CreateText2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text2 CreateText2Hierarchy(Gui::Object parent)
    {
        Text2 obj = Text2();
        obj.Init(parent);
        return obj;
    }

    Options CreateOptionsHierarchy(Gui::Object parent)
    {
        Options obj = Options();
        CreateText3Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text3 CreateText3Hierarchy(Gui::Object parent)
    {
        Text3 obj = Text3();
        obj.Init(parent);
        return obj;
    }

    About CreateAboutHierarchy(Gui::Object parent)
    {
        About obj = About();
        CreateText4Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text4 CreateText4Hierarchy(Gui::Object parent)
    {
        Text4 obj = Text4();
        obj.Init(parent);
        return obj;
    }

    Exit CreateExitHierarchy(Gui::Object parent)
    {
        Exit obj = Exit();
        CreateText5Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text5 CreateText5Hierarchy(Gui::Object parent)
    {
        Text5 obj = Text5();
        obj.Init(parent);
        return obj;
    }

    InputLogin CreateInputLoginHierarchy(Gui::Object parent)
    {
        InputLogin obj = InputLogin();
        obj.Init(parent);
        return obj;
    }

    InputPassword CreateInputPasswordHierarchy(Gui::Object parent)
    {
        InputPassword obj = InputPassword();
        obj.Init(parent);
        return obj;
    }

    Version CreateVersionHierarchy(Gui::Object parent)
    {
        Version obj = Version();
        obj.Init(parent);
        return obj;
    }

    MessageBox CreateMessageBoxHierarchy(Gui::Object parent)
    {
        MessageBox obj = MessageBox();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateLoginHierarchy(null);
    }
}

namespace Registration
{
    #ifdef PLAYERS_3D
    ////import void Set3DRegistrationGender0( int gender ) from "Client3dChaReg";
    #endif
    
    CritterProperty[] ShowBaseStats = { CritterProperty::StrengthBase, CritterProperty::PerceptionBase, CritterProperty::EnduranceBase, CritterProperty::CharismaBase, CritterProperty::IntellectBase, CritterProperty::AgilityBase, CritterProperty::LuckBase };
    CritterProperty[] ShowHealthStats = { CritterProperty::MaxLifeBase, CritterProperty::IsPoisoned, CritterProperty::IsRadiated, CritterProperty::IsDamagedEye, CritterProperty::IsDamagedRightArm, CritterProperty::IsDamagedLeftArm, CritterProperty::IsDamagedRightLeg, CritterProperty::IsDamagedLeftLeg };
    CritterProperty[] ShowExtendedStats = { CritterProperty::ArmorClassBase, CritterProperty::ActionPointsBase, CritterProperty::CarryWeightBase, CritterProperty::MeleeDamageBase, CritterProperty::NormalResistanceBase, CritterProperty::PoisonResistanceBase, CritterProperty::RadiationResistanceBase, CritterProperty::SequenceBase, CritterProperty::HealingRateBase, CritterProperty::CriticalChanceBase };
    CritterProperty[] ShowTraitsLeft = { CritterProperty::IsTraitFastMetabolism, CritterProperty::IsTraitBruiser, CritterProperty::IsTraitSmallFrame, CritterProperty::IsTraitOneHander, CritterProperty::IsTraitFinesse, CritterProperty::IsTraitKamikaze, CritterProperty::IsTraitHeavyHanded, CritterProperty::IsTraitFastShot };
    CritterProperty[] ShowTraitsRight = { CritterProperty::IsTraitBloodyMess, CritterProperty::IsTraitJinxed, CritterProperty::IsTraitGoodNatured, CritterProperty::IsTraitChemReliant, CritterProperty::IsTraitChemResistant, CritterProperty::IsTraitSexAppeal, CritterProperty::IsTraitSkilled, CritterProperty::IsTraitNightPerson };
    CritterProperty[] ShowSkills = { CritterProperty::SkillSmallGuns, CritterProperty::SkillBigGuns, CritterProperty::SkillEnergyWeapons, CritterProperty::SkillUnarmed, CritterProperty::SkillMeleeWeapons, CritterProperty::SkillThrowing, CritterProperty::SkillFirstAid, CritterProperty::SkillDoctor, CritterProperty::SkillSneak,
        CritterProperty::SkillLockpick, CritterProperty::SkillSteal, CritterProperty::SkillTraps, CritterProperty::SkillScience, CritterProperty::SkillRepair, CritterProperty::SkillSpeech, CritterProperty::SkillBarter, CritterProperty::SkillGambling, CritterProperty::SkillOutdoorsman };
    
    dict< CritterProperty, int > RegProps = {};
    dict< CritterProperty, int > Props = {};
    CritterProperty CurTip = CritterProperty::Invalid;
    
    int GetPropValue( CritterProperty prop )
    {
        return Props.get( prop, 0 );
    }
    
    void GenProps()
    {
        Props = RegProps.clone();
        Parameters::CritterGenerate( Props );
        #ifdef PLAYERS_3D
        Client3dChaReg::Set3DRegistrationGender( Props[ CritterProperty::Gender ] );
        #endif
    }
    
    int GetUnspentStatPoints()
    {
        int unspent = Settings.StartSpecialPoints;
        for( uint i = 0; i < ShowBaseStats.length(); i++ )
            unspent -= RegProps.get( ShowBaseStats[ i ], 0 );
        return unspent;
    }
    
    bool IsTagSkill( CritterProperty prop )
    {
        return GetPropValue( CritterProperty::TagSkill1 ) == prop ||
            GetPropValue( CritterProperty::TagSkill2 ) == prop ||
            GetPropValue( CritterProperty::TagSkill3 ) == prop;
    }
    
    string FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Registration : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetPosition(-1, 0);
            SetSize(800, 600);
            SetDock(DockStyle::Fill);
        }

        void OnInit() override
        {
            RegProps = Parameters::GenerateRegProps();
            GenProps();
        }

        void OnShow(dict<string, any> params) override
        {
            SetSize( Settings.ScreenWidth, Settings.ScreenHeight );
        }
    };

    class Main : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(80, 60);
            SetSize(640, 480);
            SetBackgroundImage("art/intrface/registr.png");
        }
    };

    class BaseStats : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(15, 35);
            SetCellPrototype("BaseStat");
            SetGridSize(ShowBaseStats.length());
        }
    };

    class BaseStat : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(155, 33);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowBaseStats[ cellIndex ];
        }
    };

    class StatName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(4, 4);
            SetSize(40, 20);
            SetText("TXT");
            SetTextFont(Fonts::Big);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnShow(dict<string, any> params) override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Prop ) );
        }
    };

    class StatValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(44, 2);
            SetSize(30, 24);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( GetPropValue( cast< BaseStat >( Parent ).Prop ) );
        }
    };

    class StatValueDesc : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(87, 4);
            SetSize(45, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL_ABB( GetPropValue( cast< BaseStat >( Parent ).Prop ) ) );
        }
    };

    class StatInc : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(134, 4);
            SetSize(16, 12);
            SetPressedImage("art/intrface/plus_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< BaseStat >( Parent ).Prop;
            if( Props[ prop ] < 10 && GetUnspentStatPoints() > 0 )
            {
                RegProps[ prop ] = RegProps[ prop ] + 1;
                GenProps();
            }
        }
    };

    class StatDec : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(134, 15);
            SetSize(16, 12);
            SetPressedImage("art/intrface/minus_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< BaseStat >( Parent ).Prop;
            if( Props[ prop ] > 1 )
            {
                RegProps[ prop ] = RegProps[ prop ] - 1;
                GenProps();
            }
        }
    };

    class BaseStatPoints : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(25, 276);
        }
    };

    class Title1 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-4, 4);
            SetSize(100, 30);
            SetText(MSG_GAME( MsgStr::StrRegSpecialSum ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrRegSpecialSum ));
        }
    };

    class StatPointsValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(97, 2);
            SetSize(34, 30);
            SetTextFont(Fonts::BigNum);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( GetUnspentStatPoints() );
        }
    };

    class HealthStats : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(192, 42);
            SetCellPrototype("HealthStat");
            SetGridSize(ShowHealthStats.length());
        }
    };

    class HealthStat : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(122, 14);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowHealthStats[ cellIndex ];
        }
    };

    class StatDesc : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(122, 13);
            SetTextFlags(FT_CENTERY);
        }

        void OnDraw() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            ucolor color;
            if( prop == CritterProperty::IsRadiated )
                color = ( GetPropValue( CritterProperty::RadiationLevel ) != 0 ? ucolor(0) : COLOR_DARK );
            else if( prop == CritterProperty::IsPoisoned )
                color = ( GetPropValue( CritterProperty::PoisoningLevel ) != 0 ? ucolor(0) : COLOR_DARK );
            else
                color = ( GetPropValue( prop ) != 0 ? ucolor(0) : COLOR_DARK );
            SetTextColor( color );
        }

        string get_Text() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            if( prop == CritterProperty::MaxLife )
                return MSG_GAME( MsgStr::StrInvHp ) + "  " + GetPropValue( CritterProperty::CurrentHp ) + " / " + GetPropValue( CritterProperty::MaxLife );
            return MSG_GAME( STR_PARAM_NAME( prop ) );
        }
    };

    class ExtendedStats : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(192, 179);
            SetCellPrototype("ExtendedStat");
            SetGridSize(ShowExtendedStats.length());
        }
    };

    class ExtendedStat : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(122, 13);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowExtendedStats[ cellIndex ];
        }
    };

    class StatName2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(100, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnShow(dict<string, any> params) override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            Text                 = MSG_GAME( STR_PARAM_NAME_SHORT( prop ) );
        }
    };

    class StatValue2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(98, 0);
            SetSize(25, 13);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            string text;
            if( prop == CritterProperty::CarryWeight )
                text = "" + ( GetPropValue( prop ) / 1000 );
            else if( prop == CritterProperty::NormalResistance || prop == CritterProperty::PoisonResistance || prop == CritterProperty::RadiationResistance )
                text = "" + GetPropValue( prop ) + "%";
            else
                text = "" + GetPropValue( prop );
            return text;
        }
    };

    class Traits : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(19, 347);
        }
    };

    class TraitsLeft : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(4, 6);
            SetCellPrototype("TraitLeft");
            SetGridSize(ShowTraitsLeft.length());
        }
    };

    class TraitLeft : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(150, 13);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowTraitsLeft[ cellIndex ];
        }
    };

    class Switcher1 : Gui::Button
    {
        void OnConstruct() override
        {
            SetSize(17, 11);
            SetPressedImage("art/intrface/tag_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< TraitLeft >( Parent ).Prop;
            if( RegProps[ prop ] == 0 )
            {
                int count = 0;
                for( uint i = 0; i < CritterPropertyGroup::Traits.length(); i++ )
                    if( RegProps[ CritterPropertyGroup::Traits[ i ] ] != 0 )
                        count++;
                 if( count < 2 )
                     RegProps[ prop ] = 1;
            }
            else
            {
                RegProps[ prop ] = 0;
            }
            
            Parent.FindText( "TraitName1" ).SetTextColor( RegProps[ prop ] != 0 ? COLOR_LGRAY : 0 );
            
            GenProps();
        }
    };

    class TraitName1 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, -1);
            SetSize(140, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnShow(dict<string, any> params) override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitLeft >( Parent ).Prop ) );
        }
    };

    class TraitsRight : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(154, 6);
            SetCellPrototype("TraitRight");
            SetGridSize(ShowTraitsRight.length());
        }
    };

    class TraitRight : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(148, 13);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowTraitsRight[ cellIndex ];
        }
    };

    class Switcher2 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(125, 0);
            SetSize(17, 11);
            SetPressedImage("art/intrface/tag_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< TraitRight >( Parent ).Prop;
            if( RegProps[ prop ] == 0 )
            {
                int count = 0;
                for( uint i = 0; i < CritterPropertyGroup::Traits.length(); i++ )
                    if( RegProps[ CritterPropertyGroup::Traits[ i ] ] != 0 )
                        count++;
                 if( count < 2 )
                     RegProps[ prop ] = 1;
            }
            else
            {
                RegProps[ prop ] = 0;
            }
            
            Parent.FindText( "TraitName2" ).SetTextColor( RegProps[ prop ] != 0 ? COLOR_LGRAY : 0 );
            
            GenProps();
        }
    };

    class TraitName2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(10, -1);
            SetSize(110, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnShow(dict<string, any> params) override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitRight >( Parent ).Prop ) );
        }
    };

    class Skills : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(348, 26);
            SetCellPrototype("Skill");
            SetGridSize(ShowSkills.length());
        }
    };

    class Skill : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(280, 11);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowSkills[ cellIndex ];
        }
    };

    class TagSkill : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-2, 0);
            SetSize(17, 11);
            SetPressedImage("art/intrface/tag_button_dn.png");
        }

        void OnLMouseClick() override
        {
                            
                        CritterProperty prop = cast<Skill>(Parent).Prop;
                        int freeTagSkills = Settings.StartTagSkillPoints - (RegProps[CritterProperty::TagSkill1] != CritterProperty::Invalid ? 1 : 0) -
                                            (RegProps[CritterProperty::TagSkill2] != CritterProperty::Invalid ? 1 : 0) - (RegProps[CritterProperty::TagSkill3] != CritterProperty::Invalid ? 1 : 0);
            
                        if (RegProps[CritterProperty::TagSkill1] == prop) {
                            RegProps[CritterProperty::TagSkill1] = CritterProperty::Invalid;
                        }
                        else if (RegProps[CritterProperty::TagSkill2] == prop) {
                            RegProps[CritterProperty::TagSkill2] = CritterProperty::Invalid;
                        }
                        else if (RegProps[CritterProperty::TagSkill3] == prop) {
                            RegProps[CritterProperty::TagSkill3] = CritterProperty::Invalid;
                        }
                        else if (RegProps[CritterProperty::TagSkill1] == CritterProperty::Invalid && freeTagSkills > 0) {
                            RegProps[CritterProperty::TagSkill1] = prop;
                        }
                        else if (RegProps[CritterProperty::TagSkill2] == CritterProperty::Invalid && freeTagSkills > 0) {
                            RegProps[CritterProperty::TagSkill2] = prop;
                        }
                        else if (RegProps[CritterProperty::TagSkill3] == CritterProperty::Invalid && freeTagSkills > 0) {
                            RegProps[CritterProperty::TagSkill3] = prop;
                        }
            
                        bool tagged =
                            (RegProps[CritterProperty::TagSkill1] == prop || RegProps[CritterProperty::TagSkill2] == prop || RegProps[CritterProperty::TagSkill3] == prop);
                        Parent.FindText("SkillName").SetTextColor(tagged ? COLOR_LGRAY : 0);
                        Parent.FindText("SkillValue").SetTextColor(tagged ? COLOR_LGRAY : 0);
            
                        GenProps();
        }
    };

    class SkillName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, -1);
            SetSize(200, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnShow(dict<string, any> params) override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Prop ) );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? ucolor(0xFFAAAAAA) : COLOR_TEXT );
        }
    };

    class SkillValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(225, -1);
            SetSize(40, 13);
            SetTextFlags(FT_CENTERY);
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? ucolor(0xFFAAAAAA) : COLOR_TEXT );
        }

        string get_Text() override
        {
            return GetPropValue( cast< Skill >( Parent ).Prop ) + "%";
        }
    };

    class Title3 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(19, -25);
            SetSize(150, 24);
            SetText(MSG_GAME( MsgStr::StrChaSkills ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaSkills ));
        }
    };

    class UnspentSkillPoints : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(352, 227);
        }
    };

    class Title2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(1, 1);
            SetSize(150, 26);
            SetText(MSG_GAME( MsgStr::StrRegUnspentTags ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrRegUnspentTags ));
        }
    };

    class UnspentValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(171, 1);
            SetSize(30, 25);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            int freeTagSkills = Settings.StartTagSkillPoints - (RegProps[CritterProperty::TagSkill1] != CritterProperty::Invalid ? 1 : 0) -
                                   (RegProps[CritterProperty::TagSkill2] != CritterProperty::Invalid ? 1 : 0) - (RegProps[CritterProperty::TagSkill3] != CritterProperty::Invalid ? 1 : 0);
            return FormatXX( freeTagSkills );
        }
    };

    class Tip : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(342, 264);
        }

        void OnDraw() override
        {
            Gui::Object@ obj = Gui::GetFocusedObject();
            if( obj is null )
                return;
            
            CritterProperty prop = CritterProperty::Invalid;
            
            #define CHECK_PROP_PARENT #( className ) if( prop == CritterProperty::Invalid && cast< className >( obj.Parent ) !is null ) prop = cast< className >( obj.Parent ).Prop
            
            CHECK_PROP_PARENT( BaseStat );
            CHECK_PROP_PARENT( HealthStat );
            CHECK_PROP_PARENT( ExtendedStat );
            CHECK_PROP_PARENT( TraitLeft );
            CHECK_PROP_PARENT( TraitRight );
            CHECK_PROP_PARENT( Skill );
            
            if( prop != CritterProperty::Invalid && CurTip != prop )
            {
                CurTip = prop;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( prop ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( prop ) );
                FindPanel( "Image" ).SetBackgroundImage( MSG_GAME( STR_PARAM_PIC( prop ) ) );
            }
        }
    };

    class Image : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(141, 44);
        }
    };

    class Name : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(8, 7);
            SetSize(270, 31);
            SetTextFont(Fonts::Thin);
            SetTextColor(COLOR_BLACK);
        }
    };

    class Desc : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(8, 44);
            SetSize(150, 124);
            SetTextColor(COLOR_BLACK);
        }
    };

    class Buttons : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(334, 448);
        }
    };

    class Print : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(31, 0);
        }
    };

    class Button1 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-21, 6);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }
    };

    class Text7 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-2, 5);
            SetText(MSG_GAME( MsgStr::StrChaPrint ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaPrint ));
        }
    };

    class Done : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(141, 0);
        }
    };

    class Button2 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-19, 6);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            if( Parameters::CritterGenerateCheck( RegProps ) )
                PlayerRegistration::CallRegisterPlayer( Game.GetCacheText( "RegName__" ), Game.GetCacheText( "RegPassword__" ), RegProps.clone() );
        }
    };

    class Text8 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-2, 5);
            SetText(MSG_GAME( MsgStr::StrChaOk ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaOk ));
        }
    };

    class Back : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(237, 0);
        }
    };

    class Button3 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-18, 6);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            GuiScreensExt::TryExit();
        }
    };

    class Text9 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-1, 5);
            SetText(MSG_GAME( MsgStr::StrChaCancel ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaCancel ));
        }
    };

    class CharacterName : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(21, 1);
        }
    };

    class Button4 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-10, -1);
            SetSize(145, 35);
            SetPressedImage("art/intrface/name_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( true );
        }
    };

    class CharacterText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(67, 13);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        string get_Text() override
        {
            return Game.GetCacheText("RegName__");
        }
    };

    class CharacterAge : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(160, 1);
        }
    };

    class Button5 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-6, -1);
            SetSize(81, 32);
            SetPressedImage("art/intrface/age_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterAgePopUp" ).SetActive( true );
        }
    };

    class AgeText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(39, 13);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        string get_Text() override
        {
            return "" + GetPropValue( CritterProperty::Age );
        }
    };

    class CharacterGender : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(240, 1);
        }
    };

    class Button6 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-6, -1);
            SetSize(80, 32);
            SetPressedImage("art/intrface/gender_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterGenderPopUp" ).SetActive( true );
        }
    };

    class GenderText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(32, 13);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        string get_Text() override
        {
            return GetPropValue( CritterProperty::Gender ) == GenderType::Male ? MSG_GAME( MsgStr::StrMaleName ) : MSG_GAME( MsgStr::StrFemaleName );
        }
    };

    class CharacterNamePopUp : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(21, 5);
            SetSize(168, 108);
            SetBackgroundImage("art/intrface/cha_name.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown(MouseButton button) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                Gui::SetFocusedObject( FindTextInput( "ChaName" ) );
        }
    };

    class ChaName : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(22, 32);
            SetSize(120, 14);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetInputLength(Settings.MaxNameLength);
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( Game.GetCacheText("RegName__") );
        }

        void OnInput(KeyCode key, string text) override
        {
            Game.SetCacheText("RegName__", Text);
            
            if( key == KeyCode::Return || key == KeyCode::Numpadenter )
                Parent.SetActive( false );
        }
    };

    class ChaPassword : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(22, 73);
            SetSize(120, 14);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetInputLength(Settings.MaxNameLength);
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( Game.GetCacheText("RegPassword__") );
        }

        void OnInput(KeyCode key, string text) override
        {
            Game.SetCacheText("RegPassword__", Text);
            
            if( key == KeyCode::Return || key == KeyCode::Numpadenter )
                Parent.SetActive( false );
        }
    };

    class CharacterAgePopUp : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(126, 5);
            SetSize(139, 43);
            SetBackgroundImage("art/intrface/cha_age.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown(MouseButton button) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    };

    class IncAge : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(101, 11);
            SetSize(20, 18);
            SetPressedImage("art/intrface/age_inc_button_dn.png");
        }

        void OnLMousePressed() override
        {
            RegProps[ CritterProperty::Age ] = RegProps[ CritterProperty::Age ] + 1;
            if( RegProps[ CritterProperty::Age ] > Tla::AgeMax )
                RegProps[ CritterProperty::Age ] = Tla::AgeMin;
            GenProps();
        }
    };

    class DecAge : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(17, 11);
            SetSize(20, 18);
            SetPressedImage("art/intrface/age_dec_button_dn.png");
        }

        void OnLMousePressed() override
        {
            RegProps[ CritterProperty::Age ] = RegProps[ CritterProperty::Age ] - 1;
            if( RegProps[ CritterProperty::Age ] < Tla::AgeMin )
                RegProps[ CritterProperty::Age ] = Tla::AgeMax;
            GenProps();
        }
    };

    class AgeValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(54, 8);
            SetSize(30, 24);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( GetPropValue( CritterProperty::Age ) );
        }
    };

    class CharacterGenderPopUp : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(208, 5);
            SetSize(139, 72);
            SetBackgroundImage("art/intrface/cha_sex.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown(MouseButton button) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    };

    class Male : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(17, 16);
            SetSize(45, 43);
            SetPressedImage("art/intrface/male_button_dn.png");
        }

        void OnLMouseClick() override
        {
            RegProps[ CritterProperty::Gender ] = GenderType::Male;
            GenProps();
            SetSwitch( true );
            Parent.FindButton( "Female" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( RegProps[ CritterProperty::Gender ] == GenderType::Male );
        }
    };

    class Female : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(76, 16);
            SetSize(45, 42);
            SetPressedImage("art/intrface/female_button_dn.png");
        }

        void OnLMouseClick() override
        {
            RegProps[ CritterProperty::Gender ] = GenderType::Female;
            GenProps();
            SetSwitch( true );
            Parent.FindButton( "Male" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( RegProps[ CritterProperty::Gender ] == GenderType::Female );
        }
    };

    class MessageBox : Gui::MessageBox
    {
        void OnConstruct() override
        {
            SetPosition(30, 0);
            SetSize(700, 50);
            SetAnchor(AnchorStyle(AnchorStyle::Left| AnchorStyle::Top));
        }
    };

    Registration CreateRegistrationHierarchy(Gui::Object parent)
    {
        Registration obj = Registration();
        CreateMainHierarchy(obj);
        CreateMessageBoxHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Main CreateMainHierarchy(Gui::Object parent)
    {
        Main obj = Main();
        CreateBaseStatsHierarchy(obj);
        CreateBaseStatPointsHierarchy(obj);
        CreateHealthStatsHierarchy(obj);
        CreateExtendedStatsHierarchy(obj);
        CreateTraitsHierarchy(obj);
        CreateSkillsHierarchy(obj);
        CreateUnspentSkillPointsHierarchy(obj);
        CreateTipHierarchy(obj);
        CreateButtonsHierarchy(obj);
        CreateCharacterNameHierarchy(obj);
        CreateCharacterAgeHierarchy(obj);
        CreateCharacterGenderHierarchy(obj);
        CreateCharacterNamePopUpHierarchy(obj);
        CreateCharacterAgePopUpHierarchy(obj);
        CreateCharacterGenderPopUpHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BaseStats CreateBaseStatsHierarchy(Gui::Object parent)
    {
        BaseStats obj = BaseStats();
        CreateBaseStatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BaseStat CreateBaseStatHierarchy(Gui::Object parent)
    {
        BaseStat obj = BaseStat();
        CreateStatNameHierarchy(obj);
        CreateStatValueHierarchy(obj);
        CreateStatValueDescHierarchy(obj);
        CreateStatIncHierarchy(obj);
        CreateStatDecHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatName CreateStatNameHierarchy(Gui::Object parent)
    {
        StatName obj = StatName();
        obj.Init(parent);
        return obj;
    }

    StatValue CreateStatValueHierarchy(Gui::Object parent)
    {
        StatValue obj = StatValue();
        obj.Init(parent);
        return obj;
    }

    StatValueDesc CreateStatValueDescHierarchy(Gui::Object parent)
    {
        StatValueDesc obj = StatValueDesc();
        obj.Init(parent);
        return obj;
    }

    StatInc CreateStatIncHierarchy(Gui::Object parent)
    {
        StatInc obj = StatInc();
        obj.Init(parent);
        return obj;
    }

    StatDec CreateStatDecHierarchy(Gui::Object parent)
    {
        StatDec obj = StatDec();
        obj.Init(parent);
        return obj;
    }

    BaseStatPoints CreateBaseStatPointsHierarchy(Gui::Object parent)
    {
        BaseStatPoints obj = BaseStatPoints();
        CreateTitle1Hierarchy(obj);
        CreateStatPointsValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Title1 CreateTitle1Hierarchy(Gui::Object parent)
    {
        Title1 obj = Title1();
        obj.Init(parent);
        return obj;
    }

    StatPointsValue CreateStatPointsValueHierarchy(Gui::Object parent)
    {
        StatPointsValue obj = StatPointsValue();
        obj.Init(parent);
        return obj;
    }

    HealthStats CreateHealthStatsHierarchy(Gui::Object parent)
    {
        HealthStats obj = HealthStats();
        CreateHealthStatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    HealthStat CreateHealthStatHierarchy(Gui::Object parent)
    {
        HealthStat obj = HealthStat();
        CreateStatDescHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatDesc CreateStatDescHierarchy(Gui::Object parent)
    {
        StatDesc obj = StatDesc();
        obj.Init(parent);
        return obj;
    }

    ExtendedStats CreateExtendedStatsHierarchy(Gui::Object parent)
    {
        ExtendedStats obj = ExtendedStats();
        CreateExtendedStatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ExtendedStat CreateExtendedStatHierarchy(Gui::Object parent)
    {
        ExtendedStat obj = ExtendedStat();
        CreateStatName2Hierarchy(obj);
        CreateStatValue2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatName2 CreateStatName2Hierarchy(Gui::Object parent)
    {
        StatName2 obj = StatName2();
        obj.Init(parent);
        return obj;
    }

    StatValue2 CreateStatValue2Hierarchy(Gui::Object parent)
    {
        StatValue2 obj = StatValue2();
        obj.Init(parent);
        return obj;
    }

    Traits CreateTraitsHierarchy(Gui::Object parent)
    {
        Traits obj = Traits();
        CreateTraitsLeftHierarchy(obj);
        CreateTraitsRightHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TraitsLeft CreateTraitsLeftHierarchy(Gui::Object parent)
    {
        TraitsLeft obj = TraitsLeft();
        CreateTraitLeftHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TraitLeft CreateTraitLeftHierarchy(Gui::Object parent)
    {
        TraitLeft obj = TraitLeft();
        CreateSwitcher1Hierarchy(obj);
        CreateTraitName1Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Switcher1 CreateSwitcher1Hierarchy(Gui::Object parent)
    {
        Switcher1 obj = Switcher1();
        obj.Init(parent);
        return obj;
    }

    TraitName1 CreateTraitName1Hierarchy(Gui::Object parent)
    {
        TraitName1 obj = TraitName1();
        obj.Init(parent);
        return obj;
    }

    TraitsRight CreateTraitsRightHierarchy(Gui::Object parent)
    {
        TraitsRight obj = TraitsRight();
        CreateTraitRightHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TraitRight CreateTraitRightHierarchy(Gui::Object parent)
    {
        TraitRight obj = TraitRight();
        CreateSwitcher2Hierarchy(obj);
        CreateTraitName2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Switcher2 CreateSwitcher2Hierarchy(Gui::Object parent)
    {
        Switcher2 obj = Switcher2();
        obj.Init(parent);
        return obj;
    }

    TraitName2 CreateTraitName2Hierarchy(Gui::Object parent)
    {
        TraitName2 obj = TraitName2();
        obj.Init(parent);
        return obj;
    }

    Skills CreateSkillsHierarchy(Gui::Object parent)
    {
        Skills obj = Skills();
        CreateSkillHierarchy(obj);
        CreateTitle3Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Skill CreateSkillHierarchy(Gui::Object parent)
    {
        Skill obj = Skill();
        CreateTagSkillHierarchy(obj);
        CreateSkillNameHierarchy(obj);
        CreateSkillValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TagSkill CreateTagSkillHierarchy(Gui::Object parent)
    {
        TagSkill obj = TagSkill();
        obj.Init(parent);
        return obj;
    }

    SkillName CreateSkillNameHierarchy(Gui::Object parent)
    {
        SkillName obj = SkillName();
        obj.Init(parent);
        return obj;
    }

    SkillValue CreateSkillValueHierarchy(Gui::Object parent)
    {
        SkillValue obj = SkillValue();
        obj.Init(parent);
        return obj;
    }

    Title3 CreateTitle3Hierarchy(Gui::Object parent)
    {
        Title3 obj = Title3();
        obj.Init(parent);
        return obj;
    }

    UnspentSkillPoints CreateUnspentSkillPointsHierarchy(Gui::Object parent)
    {
        UnspentSkillPoints obj = UnspentSkillPoints();
        CreateTitle2Hierarchy(obj);
        CreateUnspentValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Title2 CreateTitle2Hierarchy(Gui::Object parent)
    {
        Title2 obj = Title2();
        obj.Init(parent);
        return obj;
    }

    UnspentValue CreateUnspentValueHierarchy(Gui::Object parent)
    {
        UnspentValue obj = UnspentValue();
        obj.Init(parent);
        return obj;
    }

    Tip CreateTipHierarchy(Gui::Object parent)
    {
        Tip obj = Tip();
        CreateImageHierarchy(obj);
        CreateNameHierarchy(obj);
        CreateDescHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Image CreateImageHierarchy(Gui::Object parent)
    {
        Image obj = Image();
        obj.Init(parent);
        return obj;
    }

    Name CreateNameHierarchy(Gui::Object parent)
    {
        Name obj = Name();
        obj.Init(parent);
        return obj;
    }

    Desc CreateDescHierarchy(Gui::Object parent)
    {
        Desc obj = Desc();
        obj.Init(parent);
        return obj;
    }

    Buttons CreateButtonsHierarchy(Gui::Object parent)
    {
        Buttons obj = Buttons();
        CreatePrintHierarchy(obj);
        CreateDoneHierarchy(obj);
        CreateBackHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Print CreatePrintHierarchy(Gui::Object parent)
    {
        Print obj = Print();
        CreateButton1Hierarchy(obj);
        CreateText7Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button1 CreateButton1Hierarchy(Gui::Object parent)
    {
        Button1 obj = Button1();
        obj.Init(parent);
        return obj;
    }

    Text7 CreateText7Hierarchy(Gui::Object parent)
    {
        Text7 obj = Text7();
        obj.Init(parent);
        return obj;
    }

    Done CreateDoneHierarchy(Gui::Object parent)
    {
        Done obj = Done();
        CreateButton2Hierarchy(obj);
        CreateText8Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button2 CreateButton2Hierarchy(Gui::Object parent)
    {
        Button2 obj = Button2();
        obj.Init(parent);
        return obj;
    }

    Text8 CreateText8Hierarchy(Gui::Object parent)
    {
        Text8 obj = Text8();
        obj.Init(parent);
        return obj;
    }

    Back CreateBackHierarchy(Gui::Object parent)
    {
        Back obj = Back();
        CreateButton3Hierarchy(obj);
        CreateText9Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button3 CreateButton3Hierarchy(Gui::Object parent)
    {
        Button3 obj = Button3();
        obj.Init(parent);
        return obj;
    }

    Text9 CreateText9Hierarchy(Gui::Object parent)
    {
        Text9 obj = Text9();
        obj.Init(parent);
        return obj;
    }

    CharacterName CreateCharacterNameHierarchy(Gui::Object parent)
    {
        CharacterName obj = CharacterName();
        CreateButton4Hierarchy(obj);
        CreateCharacterTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button4 CreateButton4Hierarchy(Gui::Object parent)
    {
        Button4 obj = Button4();
        obj.Init(parent);
        return obj;
    }

    CharacterText CreateCharacterTextHierarchy(Gui::Object parent)
    {
        CharacterText obj = CharacterText();
        obj.Init(parent);
        return obj;
    }

    CharacterAge CreateCharacterAgeHierarchy(Gui::Object parent)
    {
        CharacterAge obj = CharacterAge();
        CreateButton5Hierarchy(obj);
        CreateAgeTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button5 CreateButton5Hierarchy(Gui::Object parent)
    {
        Button5 obj = Button5();
        obj.Init(parent);
        return obj;
    }

    AgeText CreateAgeTextHierarchy(Gui::Object parent)
    {
        AgeText obj = AgeText();
        obj.Init(parent);
        return obj;
    }

    CharacterGender CreateCharacterGenderHierarchy(Gui::Object parent)
    {
        CharacterGender obj = CharacterGender();
        CreateButton6Hierarchy(obj);
        CreateGenderTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button6 CreateButton6Hierarchy(Gui::Object parent)
    {
        Button6 obj = Button6();
        obj.Init(parent);
        return obj;
    }

    GenderText CreateGenderTextHierarchy(Gui::Object parent)
    {
        GenderText obj = GenderText();
        obj.Init(parent);
        return obj;
    }

    CharacterNamePopUp CreateCharacterNamePopUpHierarchy(Gui::Object parent)
    {
        CharacterNamePopUp obj = CharacterNamePopUp();
        CreateChaNameHierarchy(obj);
        CreateChaPasswordHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChaName CreateChaNameHierarchy(Gui::Object parent)
    {
        ChaName obj = ChaName();
        obj.Init(parent);
        return obj;
    }

    ChaPassword CreateChaPasswordHierarchy(Gui::Object parent)
    {
        ChaPassword obj = ChaPassword();
        obj.Init(parent);
        return obj;
    }

    CharacterAgePopUp CreateCharacterAgePopUpHierarchy(Gui::Object parent)
    {
        CharacterAgePopUp obj = CharacterAgePopUp();
        CreateIncAgeHierarchy(obj);
        CreateDecAgeHierarchy(obj);
        CreateAgeValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    IncAge CreateIncAgeHierarchy(Gui::Object parent)
    {
        IncAge obj = IncAge();
        obj.Init(parent);
        return obj;
    }

    DecAge CreateDecAgeHierarchy(Gui::Object parent)
    {
        DecAge obj = DecAge();
        obj.Init(parent);
        return obj;
    }

    AgeValue CreateAgeValueHierarchy(Gui::Object parent)
    {
        AgeValue obj = AgeValue();
        obj.Init(parent);
        return obj;
    }

    CharacterGenderPopUp CreateCharacterGenderPopUpHierarchy(Gui::Object parent)
    {
        CharacterGenderPopUp obj = CharacterGenderPopUp();
        CreateMaleHierarchy(obj);
        CreateFemaleHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Male CreateMaleHierarchy(Gui::Object parent)
    {
        Male obj = Male();
        obj.Init(parent);
        return obj;
    }

    Female CreateFemaleHierarchy(Gui::Object parent)
    {
        Female obj = Female();
        obj.Init(parent);
        return obj;
    }

    MessageBox CreateMessageBoxHierarchy(Gui::Object parent)
    {
        MessageBox obj = MessageBox();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateRegistrationHierarchy(null);
    }
}

namespace Game
{
    string FormatXXX( int value )
    {
        string result = "";
        int offs = 0;
        if( value >= 0 )
        {
            result += Game.EncodeUtf8( '9' + 4 );
        }
        else
        {
            offs = 0x20;
            result += Game.EncodeUtf8( '9' + offs + 3 );
            value = -value;
        }
    
        value = CLAMP( value, 0, 999 );
    
        result += Game.EncodeUtf8( '0' + offs + value / 100 );
        result += Game.EncodeUtf8( '0' + offs + value / 10 % 10 );
        result += Game.EncodeUtf8( '0' + offs + value % 10 );
    
        return result;
    }
    
    
     void GameLMouseDown()
    {
        Critter@ chosen = Game.GetChosen();
        if( chosen is null )
            return;
    
        int cursor = Settings.Cursor;
        if( cursor == CursorType::Move )
        {
            any[] actions = {};
            ChosenActions::GetChosenActions( actions );
            bool isMoveAction = ( actions.length() > 0 && actions[ 0 ] == Tla::ChosenMove );
            if( isMoveAction && Game.GetTick() - uint(actions[ 6 ]) < Settings.DoubleClickTime )
            {
                actions[ 3 ] = ( Settings.AlwaysRun ? 0 : 1 );
                actions[ 5 ] = 0;
                ChosenActions::SetChosenActions( actions );
            }
            else
            {
                uint16 hx = 0, hy = 0;
                if( CurMap.GetHexAtScreenPos( Settings.MouseX, Settings.MouseY, hx, hy ) )
                {
                    uint dist = Game.GetDistance( chosen.HexX, chosen.HexY, hx, hy );
                    bool isRun = ( Input::IsShiftDown() ? !Settings.AlwaysRun : Settings.AlwaysRun && dist >= Settings.AlwaysRunMoveDist );
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenMove, hx, hy, isRun ? 1 : 0, 0, isMoveAction ? 0 : 1, Game.GetTick() } );
                }
            }
        }
        else if( cursor == CursorType::UseSkill && Settings.CursorData != 0)
        {
            Critter@ cr = CurMap.GetCritterAtScreenPos( Settings.MouseX, Settings.MouseY );
            Entity@  entity = CurMap.GetEntityAtScreenPos( Settings.MouseX, Settings.MouseY );
            Item@    item = cast< Item >( entity );
            CritterProperty skill = CritterProperty( int(Settings.CursorData) );
            if( cr != null )
            {
                ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnCritter, uint( skill ), cr.Id, 0, 0, 0, 0 } );   
                GuiScreensExt::NextCursor();
                Settings.CursorData = 0;
            }
            else
            {
                if( item !is null )
                {
                    if( item.Type != ItemType::Generic && item.Type != ItemType::Grid )
                    {
                        ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnItem, uint( skill ), item.Id, 0,0, 0, 0 } );
                    }
                    else 
                    {
                        ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnScen, uint( skill ), item.ProtoId.hash, item.HexX, item.HexY, 0, 0 } );
                    }
                    GuiScreensExt::NextCursor();
                    Settings.CursorData = 0;
                }
            }
        }
        else if( cursor == CursorType::UseItem || cursor == CursorType::UseWeapon )
        {
            bool        isAttack = ( cursor == CursorType::UseWeapon );
            Item@ useItem = ( !isAttack && Settings.CursorData != 0 ? chosen.GetItem( ident(Settings.CursorData) ) : chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main ) );
            ProtoItem proto = CritterItem::GetSlotItemProto(chosen);
            if( useItem !is null || (isAttack && proto != null))
            {
                Entity@ entity = null;
                if( isAttack )
                    @entity = CurMap.GetEntityAtScreenPos( Settings.MouseX, Settings.MouseY );
                else
                    @entity = CurMap.GetEntityAtScreenPos( Settings.MouseX, Settings.MouseY );
    
                Critter@ cr = cast< Critter >( entity );
                Item@    item = cast< Item >( entity );
                Item realWeapon = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
                uint8 mode      = ( valid( realWeapon ) ? useItem.Mode : chosen.HandsItemMode);
                if( cr !is null )
                {
                    if( isAttack && _WeaponModeAim( mode  ) != 0 )
                    {
                        //IsCritterCanAim( chosen.ModelName ) && 
                        if( !chosen.IsNoAim )
                        {
                            dict<string, any> dict = {};
                            dict[ "TargetCritterId" ] = "" + cr.Id;
                            Game.ShowScreen( CLIENT_SCREEN_AIM, dict );
                        }
                    }
                    else
                    {
                        ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseItem, valid(useItem) ? useItem.Id : ZERO_IDENT, 0, TARGET_CRITTER, cr.Id, isAttack ? mode : USE_USE, 0 } );
                    }
                }
                else if( item !is null && useItem !is null)
                {
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseItem, useItem.Id, 0, TARGET_ITEM, item.Id, USE_USE, 0 } );
                }
            }
        }
    }
     
     
     void GameLMouseUp()
     {
            
     }

    class Screen : Gui::Screen
    {
        bool isHitIfaceOnMouseDown;

        void OnConstruct() override
        {
            SetCanMove(true, false);
            SetPosition(82, 41);
            SetSize(800, 600);
            SetDock(DockStyle::Fill);
            SetNotHittable(true);
        }

        void OnGlobalMouseDown(MouseButton button) override
        {
            if( Settings.MapZooming && Settings.SpritesZoomMin != Settings.SpritesZoomMax )
            {
                if( button == MouseButton::WheelUp )
                    CurMap.ChangeZoom( CurMap.SpritesZoom - 0.01 );
                else if( button == MouseButton::WheelDown )
                    CurMap.ChangeZoom( CurMap.SpritesZoom + 0.01 );
                else if( button == MouseButton::Middle )
                    CurMap.ChangeZoom( 1.0 );
            }
            
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MouseButton::Left )
                    GameLMouseDown();
                else if( button == MouseButton::Right )
                    isHitIfaceOnMouseDown = ( FindMouseHit() !is null );
            }
        }

        void OnGlobalMouseUp(MouseButton button) override
        {
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MouseButton::Left )
                    GameLMouseUp();
                else if( button == MouseButton::Right && !isHitIfaceOnMouseDown )
                    GuiScreensExt::NextCursor();
            }
        }

        void OnGlobalMouseMove() override
        {
            //Game.CustomCall( "ProcessMouseScroll" );
             if((Settings.Fullscreen && Settings.FullscreenMouseScroll) || (!Settings.Fullscreen && Settings.WindowedMouseScroll))
                        {
                            Settings.ScrollMouseRight = ( Settings.MouseX >= Settings.ScreenWidth - 1 );
                            Settings.ScrollMouseLeft  = ( Settings.MouseX <= 0 );
                            Settings.ScrollMouseDown  = ( Settings.MouseY >= Settings.ScreenHeight - 1 );
                            Settings.ScrollMouseUp    = ( Settings.MouseY <= 0 );
                        }
        }
    };

    class Main : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 475);
            SetSize(800, 125);
            SetAnchor(AnchorStyle(AnchorStyle::Left| AnchorStyle::Right| AnchorStyle::Bottom));
            SetCheckTransparentOnHit(true);
            SetBackgroundImage("art/intrface/iface.png");
        }
    };

    class Console : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, -37);
        }
    };

    class ConsoleImage : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(800, 35);
            SetBackgroundImage("art/intrface/panel.png");
        }
    };

    class ConsoleText : Gui::Console
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(13, 14);
            SetNotHittable(true);
        }

        void OnActiveChanged() override
        {
            Parent.Find( "ConsoleImage" ).SetActive( ActiveSelf ); 
        }
    };

    class MessageBoxExtended : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(0, -55);
            SetSize(372, 112);
            SetBackgroundImage("art/intrface/iface_add_mess.png");
        }
    };

    class MessageBoxText : Gui::MessageBox
    {
        void FiltersChanged()
        {
            int[] messageTypes = {};
            if( cast< Gui::CheckBox >( Parent.Find( "Filter1" ) ).IsChecked )
                messageTypes.insertLast( FOMB_TALK );
            if( cast< Gui::CheckBox >( Parent.Find( "Filter2" ) ).IsChecked )
                messageTypes.insertLast( FOMB_COMBAT_RESULT );
        
            if( messageTypes.length() == 0 )
                messageTypes.insertLast( FOMB_ALL );
        
            SetDisplayedMessages( messageTypes );
        }

        void OnConstruct() override
        {
            SetPosition(34, 28);
            SetSize(306, 76);
            SetAnchor(AnchorStyle(AnchorStyle::Top));
        }
    };

    class ExtendMessageBox : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(355, 60);
            SetSize(11, 6);
            SetPressedImage("art/intrface/iface_small_btn.png");
        }

        void OnCheckedChanged() override
        {
            Gui::Object@ messageBoxText = Parent.Find( "MessageBoxText" );
            Gui::Object@ messageBoxExtended = Parent.Find( "MessageBoxExtended" );
            Gui::Object@ console = Parent.Find( "Console" );
            
            messageBoxText.SetSize( messageBoxText.Width, IsChecked ? 131 : 76 );
            messageBoxText.SetPosition( messageBoxText.PosX, IsChecked ? -27 : 28 );
            messageBoxExtended.SetActive( IsChecked );
            console.SetPosition( 0, IsChecked ? -92 : -37 );
        }
    };

    class Filter1 : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(355, 68);
            SetSize(11, 6);
            SetPressedImage("art/intrface/iface_small_btn.png");
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    };

    class Filter2 : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(355, 75);
            SetSize(11, 6);
            SetPressedImage("art/intrface/iface_small_btn.png");
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    };

    class GameMenu : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(370, 87);
            SetSize(34, 34);
            SetPressedImage("art/intrface/game_menu_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_MENU );
        }
    };

    class Inventory : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(371, 65);
            SetSize(32, 21);
            SetPressedImage("art/intrface/inv_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    };

    class SwitchItems : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(378, 32);
            SetSize(22, 21);
            SetPressedImage("art/intrface/big_red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            //Game.CustomCall( "ChangeSlot" );
            
                Critter  chosen = Game.GetChosen();
                if( chosen is null )
                    return;
                /*  
                Item item1 = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
                Item item2 = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Secondary );
                if( item1 != null)
                    ChosenActions::SetAction( array< any > = { Tla::ChosenMoveItem, item1.Id, item1.Count, CritterItemSlot::Secondary, 0, 0, 0 }, false, true );
                if( item2 != null)
                    ChosenActions::SetAction( array< any > = { Tla::ChosenMoveItem, item2.Id, item2.Count, CritterItemSlot::Main, 0, 0, 0 }, false, true );
                   */
                   
                    //   Critter chosen = Game.GetChosen();
                Item    item2 = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Secondary );
                if( item2 != null )
                {
                    ChosenActions::SetAction( array< any > = { Tla::ChosenMoveItem, item2.Id, item2.Count, CritterItemSlot::Main, 0, 0, 0 }, false, true );
                    return;
                }
            
                Item item1 = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
                if( item1 != null )
                    ChosenActions::SetAction( array< any > = { Tla::ChosenMoveItem, item1.Id, item1.Count, CritterItemSlot::Secondary, 0, 0, 0 }, false, true );
                
        }
    };

    class Skills : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(636, 32);
            SetSize(22, 21);
            SetPressedImage("art/intrface/big_red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_SKILLBOX );
        }
    };

    class Map : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(686, 46);
            SetSize(41, 19);
            SetPressedImage("art/intrface/map_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_MINIMAP );
        }
    };

    class Character : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(686, 65);
            SetSize(41, 19);
            SetPressedImage("art/intrface/cha_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_CHARACTER );
        }
    };

    class PipBoy : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(686, 84);
            SetSize(41, 19);
            SetPressedImage("art/intrface/pip_boy_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    };

    class FixBoy : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(686, 103);
            SetSize(41, 19);
            SetPressedImage("art/intrface/iface_fix.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    };

    class Combat : Gui::Panel
    {
        bool CombatActive;

        void OnConstruct() override
        {
            SetPosition(740, 64);
            SetBackgroundImage("art/intrface/combat.fofrm");
        }

        void OnInit() override
        {
            BackgroundImage.SetFirstFrame();
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            bool combatActive = ( chosen !is null && IS_TIMEOUT( chosen.TimeoutBattle ) );
            if( combatActive != CombatActive )
            {
                CombatActive = combatActive;
                BackgroundImage.Play( false, !combatActive );
                Game.PlaySound( "ICIBOXX1" );
            }
            /*
            GetChild( 0 ).SetActive( CombatActive && Game.CustomCall( "IsTurnBasedMyTurn" ) == "true" );
            GetChild( 1 ).SetActive( CombatActive && IsTurnBased() );
            */
        }
    };

    class EndTurn : Gui::Button
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(10, 5);
            SetSize(38, 22);
            SetPressedImage("art/intrface/end_turn_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "EndTurn" );
        }
    };

    class EndCombat : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(10, 27);
            SetSize(38, 22);
            SetPressedImage("art/intrface/end_combat_button_dn.png");
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            //SetChecked( IsTurnBased() && chosen !is null && chosen.IsEndCombat );
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "EndCombat" );
        }
    };

    class ActionPoints : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(475, 40);
            SetCellPrototype("Led");
            SetGridSize(10);
            SetColumns(10);
            SetPadding(9, 0);
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            int ap      = ( chosen !is null ? chosen.CurrentAp / AP_DIVIDER : 0 );
            uint moveAp = 0;//( IsTurnBased() && chosen !is null ? chosen.MoveAp : 0 );
            for( uint i = 0; i < Cells.length(); i++ )
            {
                uint absAp = uint( ABS( ap ) );
                bool active = ( i < absAp + moveAp );
                Cells[ i ].SetActive( active );
                if( active )
                {
                    Cells[ i ].GetChild( 0 ).SetActive( ap >= 0 && i < absAp ); // Green
                    Cells[ i ].GetChild( 1 ).SetActive( ap < 0 && i < absAp ); // Red
                    Cells[ i ].GetChild( 2 ).SetActive( i >= absAp ); // Yellow
                }
            }
        }
    };

    class Led : Gui::Panel
    {
        void OnConstruct() override
        {
        }
    };

    class LedGreen : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(5, 5);
            SetBackgroundImage("art/intrface/led_green.png");
        }
    };

    class LedRed : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(5, 5);
            SetBackgroundImage("art/intrface/led_red.png");
        }
    };

    class LedYellow : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(5, 5);
            SetBackgroundImage("art/intrface/led_yellow.png");
        }
    };

    class BreakTime : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(571, 40);
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            GetChild( 0 ).SetActive( chosen !is null && ChosenActions::IsBusy(chosen) );
        }
    };

    class BreakTimeLed : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(5, 5);
            SetBackgroundImage("art/intrface/led_red.png");
        }
    };

    class HitPoints : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(633, 71);
            SetTextFont(Fonts::Num);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            int result = 0;
            Critter@ chosen = Game.GetChosen();
            if( chosen !is null )
                result = chosen.CurrentHp;
            return FormatXXX( result );
        }
    };

    class ArmorClass : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(633, 102);
            SetTextFont(Fonts::Num);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            int result = 0;
            Critter@ chosen = Game.GetChosen();
            if( chosen !is null )
                result = chosen.ArmorClass;
            return FormatXXX( result );
        }
    };

    class MainItemPlate : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(426, 52);
            SetSize(188, 67);
            SetPressedImage("art/intrface/iface_item.png");
        }

        void OnMouseDown(MouseButton button) override
        {
            if( button == MouseButton::Left || button == MouseButton::Right )
                GetChild( 0 ).SetPosition( 0, -2 );
        }

        void OnMouseUp(MouseButton button, bool lost) override
        {
            GetChild( 0 ).SetPosition( 0, 0 );
        }

        void OnMouseClick(MouseButton button) override
        {
            if( button == MouseButton::Left )
                Parameters::UseMainItem();
            else if( button == MouseButton::Right )
                Parameters::SwitchMainItemMode( true );
            else if( button == MouseButton::WheelUp )
                Parameters::SwitchMainItemMode( false );
            else if( button == MouseButton::WheelDown )
                Parameters::SwitchMainItemMode( true );
        }
    };

    class MainItemSlot : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetNotHittable(true);
            SetCellPrototype("MainItemSlotCell");
            SetGridSize(1);
            SetUserDataExt(ITEMS_CHOSEN_ALL);
        }

        Item[] OnGetItems() override
        {
            return ClientItems::RefreshItemsCollection(  UserDataExt );
        }

        int OnCheckItem(Item item) override
        {
            return item.CritterSlot == CritterItemSlot::Main ? 0 : -1;
        }
    };

    class MainItemSlotCell : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(188, 67);
            SetNotHittable(true);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            hstring picInv;
            if( item !is null )
                picInv = item.PicInv;
            SetBackgroundImage( picInv, SpriteLayout::Zoom );
        }
    };

    class AmmoCount : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(7, 14);
            SetNotHittable(true);
            SetTextFont(Fonts::Special);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetText( item !is null && item.Type == ItemType::Weapon ? "" + item.AmmoCount : "" );
        }
    };

    class DeteriorationValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(7, 24);
            SetNotHittable(true);
            SetTextFont(Fonts::Special);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetText( item !is null && item.Deteriorable ? item.Deterioration + "%" : "" );
        }
    };

    class UsePic : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(163, 8);
            SetSize(17, 12);
            SetAnchor(AnchorStyle(AnchorStyle::Right| AnchorStyle::Top));
            SetNotHittable(true);
            SetBackgroundImage("art/intrface/ap_pic.png");
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            hstring usePic;
            
            Item@ useItem = item;
            
            Critter@ chosen = Game.GetChosen();
            if( useItem is null && chosen !is null )
                @useItem = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
                ProtoItem proto = CritterItem::GetSlotItemProto(chosen);
                uint8 mode      = (useItem == null ? chosen.HandsItemMode : useItem.Mode);
            if( proto !is null )
            {
                int use = _WeaponModeUse( mode );
                if( proto.Type == ItemType::Weapon )
                {
                    if( use == USE_RELOAD )
                        usePic = hstring( "art/intrface/reload.frm" );
                    else if( use == USE_USE )
                        usePic = hstring( "art/intrface/useon.frm" );
                    else if( use < MAX_USES )
                        usePic = _WeaponPicUse( proto, use );
                }
                if( usePic == EMPTY_HSTRING && proto.IsCanUseOnSmth )
                    usePic = hstring( "art/intrface/useon.frm" );
                if( usePic == EMPTY_HSTRING && proto.IsCanUse )
                    usePic = hstring( "art/intrface/uset.frm" );
            }
            
            BackgroundImage.Load( usePic );
            SetPosition( 180 - BackgroundImage.Width, PosY );
        }
    };

    class ApCost : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(10, 44);
            SetNotHittable(true);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            uint apCost = 0;
            if( item !is null && item.Ownership == ItemOwnership::CritterInventory )
            {
                apCost = Parameters::GetItemUseApCost( Game.GetCritter( item.CritterId ), item, item.Mode );
            }
            else if( item is null )
            {
                Critter@ chosen = Game.GetChosen();
                if( chosen !is null )
                {
                    auto item2 = CritterItem::GetSlotItemProto( chosen );
                    apCost     = Parameters::GetItemUseApCost( chosen, item2, chosen.HandsItemMode );
                }
            }
            
            SetActive( apCost > 0 );
            if( apCost > 0 )
                FindText( "ApCostValue" ).SetText( "" + apCost );
        }
    };

    class ApCostImage : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(17, 12);
            SetBackgroundImage("art/intrface/ap_pic.png");
        }
    };

    class ApCostValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(20, 0);
            SetTextFont(Fonts::SandNum);
            SetTextColor(COLOR_IFACE);
        }
    };

    class AimPic : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(162, 41);
            SetSize(18, 18);
            SetNotHittable(true);
            SetBackgroundImage("art/intrface/aim_pic.png");
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            Critter@ chosen = Game.GetChosen();
            uint8 mode = 0;
            if( item !is null )
                mode = item.Mode;
            else if( chosen !is null )
                mode = chosen.HandsItemMode;
            
            BackgroundImage.Hidden = ( _WeaponModeAim( mode ) == HitLocations::LocationNone );
        }
    };

    class Indicators : Gui::Panel
    {
        #define INDICATOR_LINES          ( 0 )
        #define INDICATOR_NUMBERS        ( 1 )
        #define INDICATOR_BOTH           ( 2 )
        #define INDICATOR_CHANGE_TICK    ( 35 )
        
        void DrawIndicator( int[] rect, int[]& points, ucolor color, int cur, int max, uint& tick, bool isVertical, bool fromTopOrLeft )
        {
            int percent = 0;
            if( max != 0 )
            {
                percent = cur * 100 / max;
                percent = CLAMP( percent, 0, 100 );
            }
        
            if( Game.GetTick() >= tick )
            {
                uint pointsCount = ( isVertical ? rect[ 3 ] : rect[ 2 ] ) / 2 * percent / 100;
                if( pointsCount == 0 && percent > 0 )
                    pointsCount = 1;
        
                if( points.length() / 3 != pointsCount )
                {
                    if( pointsCount > points.length() / 3 )
                        pointsCount = points.length() / 3 + 1;
                    else
                        pointsCount = points.length() / 3 - 1;
        
                    points.resize( pointsCount * 3 );
                    for( uint i = 0; i < pointsCount; i++ )
                    {
                        int x, y;
                        if( isVertical )
                        {
                            x = rect[ 0 ];
                            if( fromTopOrLeft )
                                y = rect[ 1 ] + i * 2;
                            else
                                y = rect[ 1 ] + rect[ 3 ] - i * 2;
                        }
                        else
                        {
                            y = rect[ 1 ];
                            if( fromTopOrLeft )
                                x = rect[ 0 ] + i * 2;
                            else
                                x = rect[ 0 ] + rect[ 2 ] - i * 2;
                        }
                        points[ i * 3 + 0 ] = x;
                        points[ i * 3 + 1 ] = y;
                        points[ i * 3 + 2 ] = color.value;
                    }
                }
                tick = Game.GetTick() + INDICATOR_CHANGE_TICK;
            }
        
            if( points.length() > 0 )
                Game.DrawPrimitive( DRAW_PRIMITIVE_POINTLIST, points );
        }

        void OnConstruct() override
        {
            SetPosition(197, 0);
        }
    };

    class AmmoLine : Gui::Panel
    {
        int[] Points = {};
        uint CurTick;

        void OnConstruct() override
        {
            SetSize(1, 70);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            if(false)/*if( Settings.IndicatorType != INDICATOR_LINES && Settings.IndicatorType != INDICATOR_BOTH )*/
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null )
            {
                if( item.Type == ItemType::Weapon && item.Weapon_MaxAmmoCount > 0 )
                {
                    indicatorMax = item.Weapon_MaxAmmoCount;
                    indicatorCur = item.AmmoCount;
                }
                else
                {
                    indicatorMax = item.IndicatorMax;
                    indicatorCur = item.Indicator;
                }
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_GREEN, indicatorCur, indicatorMax, CurTick, true, false );
        }
    };

    class DeteriorationLine : Gui::Panel
    {
        int[] Points = {};
        uint CurTick;

        void OnConstruct() override
        {
            SetPosition(3, 0);
            SetSize(1, 70);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            if(false)/*if( Settings.IndicatorType != INDICATOR_LINES && Settings.IndicatorType != INDICATOR_BOTH )*/
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null && item.Deteriorable )
            {
                indicatorMax = Tla::MaxDeterioration;
                indicatorCur = item.Deterioration;
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_RED, indicatorCur, indicatorMax, CurTick, true, false );
        }
    };

    Screen CreateScreenHierarchy(Gui::Object parent)
    {
        Screen obj = Screen();
        CreateMainHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Main CreateMainHierarchy(Gui::Object parent)
    {
        Main obj = Main();
        CreateConsoleHierarchy(obj);
        CreateMessageBoxExtendedHierarchy(obj);
        CreateMessageBoxTextHierarchy(obj);
        CreateExtendMessageBoxHierarchy(obj);
        CreateFilter1Hierarchy(obj);
        CreateFilter2Hierarchy(obj);
        CreateGameMenuHierarchy(obj);
        CreateInventoryHierarchy(obj);
        CreateSwitchItemsHierarchy(obj);
        CreateSkillsHierarchy(obj);
        CreateMapHierarchy(obj);
        CreateCharacterHierarchy(obj);
        CreatePipBoyHierarchy(obj);
        CreateFixBoyHierarchy(obj);
        CreateCombatHierarchy(obj);
        CreateActionPointsHierarchy(obj);
        CreateBreakTimeHierarchy(obj);
        CreateHitPointsHierarchy(obj);
        CreateArmorClassHierarchy(obj);
        CreateMainItemPlateHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Console CreateConsoleHierarchy(Gui::Object parent)
    {
        Console obj = Console();
        CreateConsoleImageHierarchy(obj);
        CreateConsoleTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ConsoleImage CreateConsoleImageHierarchy(Gui::Object parent)
    {
        ConsoleImage obj = ConsoleImage();
        obj.Init(parent);
        return obj;
    }

    ConsoleText CreateConsoleTextHierarchy(Gui::Object parent)
    {
        ConsoleText obj = ConsoleText();
        obj.Init(parent);
        return obj;
    }

    MessageBoxExtended CreateMessageBoxExtendedHierarchy(Gui::Object parent)
    {
        MessageBoxExtended obj = MessageBoxExtended();
        obj.Init(parent);
        return obj;
    }

    MessageBoxText CreateMessageBoxTextHierarchy(Gui::Object parent)
    {
        MessageBoxText obj = MessageBoxText();
        obj.Init(parent);
        return obj;
    }

    ExtendMessageBox CreateExtendMessageBoxHierarchy(Gui::Object parent)
    {
        ExtendMessageBox obj = ExtendMessageBox();
        obj.Init(parent);
        return obj;
    }

    Filter1 CreateFilter1Hierarchy(Gui::Object parent)
    {
        Filter1 obj = Filter1();
        obj.Init(parent);
        return obj;
    }

    Filter2 CreateFilter2Hierarchy(Gui::Object parent)
    {
        Filter2 obj = Filter2();
        obj.Init(parent);
        return obj;
    }

    GameMenu CreateGameMenuHierarchy(Gui::Object parent)
    {
        GameMenu obj = GameMenu();
        obj.Init(parent);
        return obj;
    }

    Inventory CreateInventoryHierarchy(Gui::Object parent)
    {
        Inventory obj = Inventory();
        obj.Init(parent);
        return obj;
    }

    SwitchItems CreateSwitchItemsHierarchy(Gui::Object parent)
    {
        SwitchItems obj = SwitchItems();
        obj.Init(parent);
        return obj;
    }

    Skills CreateSkillsHierarchy(Gui::Object parent)
    {
        Skills obj = Skills();
        obj.Init(parent);
        return obj;
    }

    Map CreateMapHierarchy(Gui::Object parent)
    {
        Map obj = Map();
        obj.Init(parent);
        return obj;
    }

    Character CreateCharacterHierarchy(Gui::Object parent)
    {
        Character obj = Character();
        obj.Init(parent);
        return obj;
    }

    PipBoy CreatePipBoyHierarchy(Gui::Object parent)
    {
        PipBoy obj = PipBoy();
        obj.Init(parent);
        return obj;
    }

    FixBoy CreateFixBoyHierarchy(Gui::Object parent)
    {
        FixBoy obj = FixBoy();
        obj.Init(parent);
        return obj;
    }

    Combat CreateCombatHierarchy(Gui::Object parent)
    {
        Combat obj = Combat();
        CreateEndTurnHierarchy(obj);
        CreateEndCombatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    EndTurn CreateEndTurnHierarchy(Gui::Object parent)
    {
        EndTurn obj = EndTurn();
        obj.Init(parent);
        return obj;
    }

    EndCombat CreateEndCombatHierarchy(Gui::Object parent)
    {
        EndCombat obj = EndCombat();
        obj.Init(parent);
        return obj;
    }

    ActionPoints CreateActionPointsHierarchy(Gui::Object parent)
    {
        ActionPoints obj = ActionPoints();
        CreateLedHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Led CreateLedHierarchy(Gui::Object parent)
    {
        Led obj = Led();
        CreateLedGreenHierarchy(obj);
        CreateLedRedHierarchy(obj);
        CreateLedYellowHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    LedGreen CreateLedGreenHierarchy(Gui::Object parent)
    {
        LedGreen obj = LedGreen();
        obj.Init(parent);
        return obj;
    }

    LedRed CreateLedRedHierarchy(Gui::Object parent)
    {
        LedRed obj = LedRed();
        obj.Init(parent);
        return obj;
    }

    LedYellow CreateLedYellowHierarchy(Gui::Object parent)
    {
        LedYellow obj = LedYellow();
        obj.Init(parent);
        return obj;
    }

    BreakTime CreateBreakTimeHierarchy(Gui::Object parent)
    {
        BreakTime obj = BreakTime();
        CreateBreakTimeLedHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BreakTimeLed CreateBreakTimeLedHierarchy(Gui::Object parent)
    {
        BreakTimeLed obj = BreakTimeLed();
        obj.Init(parent);
        return obj;
    }

    HitPoints CreateHitPointsHierarchy(Gui::Object parent)
    {
        HitPoints obj = HitPoints();
        obj.Init(parent);
        return obj;
    }

    ArmorClass CreateArmorClassHierarchy(Gui::Object parent)
    {
        ArmorClass obj = ArmorClass();
        obj.Init(parent);
        return obj;
    }

    MainItemPlate CreateMainItemPlateHierarchy(Gui::Object parent)
    {
        MainItemPlate obj = MainItemPlate();
        CreateMainItemSlotHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MainItemSlot CreateMainItemSlotHierarchy(Gui::Object parent)
    {
        MainItemSlot obj = MainItemSlot();
        CreateMainItemSlotCellHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MainItemSlotCell CreateMainItemSlotCellHierarchy(Gui::Object parent)
    {
        MainItemSlotCell obj = MainItemSlotCell();
        CreateAmmoCountHierarchy(obj);
        CreateDeteriorationValueHierarchy(obj);
        CreateUsePicHierarchy(obj);
        CreateApCostHierarchy(obj);
        CreateAimPicHierarchy(obj);
        CreateIndicatorsHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    AmmoCount CreateAmmoCountHierarchy(Gui::Object parent)
    {
        AmmoCount obj = AmmoCount();
        obj.Init(parent);
        return obj;
    }

    DeteriorationValue CreateDeteriorationValueHierarchy(Gui::Object parent)
    {
        DeteriorationValue obj = DeteriorationValue();
        obj.Init(parent);
        return obj;
    }

    UsePic CreateUsePicHierarchy(Gui::Object parent)
    {
        UsePic obj = UsePic();
        obj.Init(parent);
        return obj;
    }

    ApCost CreateApCostHierarchy(Gui::Object parent)
    {
        ApCost obj = ApCost();
        CreateApCostImageHierarchy(obj);
        CreateApCostValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ApCostImage CreateApCostImageHierarchy(Gui::Object parent)
    {
        ApCostImage obj = ApCostImage();
        obj.Init(parent);
        return obj;
    }

    ApCostValue CreateApCostValueHierarchy(Gui::Object parent)
    {
        ApCostValue obj = ApCostValue();
        obj.Init(parent);
        return obj;
    }

    AimPic CreateAimPicHierarchy(Gui::Object parent)
    {
        AimPic obj = AimPic();
        obj.Init(parent);
        return obj;
    }

    Indicators CreateIndicatorsHierarchy(Gui::Object parent)
    {
        Indicators obj = Indicators();
        CreateAmmoLineHierarchy(obj);
        CreateDeteriorationLineHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    AmmoLine CreateAmmoLineHierarchy(Gui::Object parent)
    {
        AmmoLine obj = AmmoLine();
        obj.Init(parent);
        return obj;
    }

    DeteriorationLine CreateDeteriorationLineHierarchy(Gui::Object parent)
    {
        DeteriorationLine obj = DeteriorationLine();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateScreenHierarchy(null);
    }
}

namespace GlobalMap
{
        string FormatXX( int value )
        {
            value = CLAMP( value, 0, 99 );
            return value < 10 ? "0" + value : "" + value;
        }
    int GMWidth;
    int GMHeight;

    class GlobalMap : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetAnchor(AnchorStyle(AnchorStyle::Left| AnchorStyle::Top));
            SetNotHittable(true);
        }

        void OnInit() override
        {
            
                auto globalMapObjects = FindPanel( "GMObjects" );
                globalMapObjects.SetPosition( 0, 0 );
                cast< GMObjects >( globalMapObjects ).ChangeGMZoom( 0, true );
        }
    };

    class GlobalMapBase : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(180, 20);
            SetSize(453, 444);
            SetNotHittable(true);
            SetCropContent( true );
        }
    };

    class GMObjects : Gui::Panel
    {
        float GlobalZoom = 1.0f;
        int LastX;
        int LastY;
        
        int NormalX( int x)
        {
            return int( x * Width / GMWidth );
        }
        
        int NormalX2( int x)
        {
            return int( x * GMWidth / Width );
        }
        
        int NormalY( int y )
        {
            return int( y * Height/ GMHeight );
        }
        
        int NormalY2( int y )
        {
            return int( y * GMHeight / Height );
        }
        
        void ChangeGMZoom( float zoom, bool force = false )
        {
            if( !this.IsMouseHit() && !force )
                return;
            float zoomMax = 4.0f;
            float zoomMin = 2*Math::MaxF( 1.0f*Parent.Height/GMHeight,  1.0f*Parent.Width/GMWidth );
            
            if( GlobalZoom > 2 )
                zoom *=2;
            
            if( GlobalZoom + zoom < zoomMin && zoom < 0)
                return;
            if( GlobalZoom + zoom > zoomMax && zoom > 0)
                return;
            GlobalZoom += zoom;
            if( zoom == 0.0 )
                GlobalZoom = 1.0f;
            
            
            auto globalMapBase = cast< GlobalMapBase > ( Parent );
            int curX           = NormalX2( Settings.MouseX - PosX - globalMapBase.AbsolutePosX );
            int curY           = NormalY2( Settings.MouseY - PosY - globalMapBase.AbsolutePosY );
            
            SetSize( int( GMWidth * GlobalZoom ), int( GMHeight * GlobalZoom ) );
            
            
            curX = Math::Clamp( Settings.MouseX - globalMapBase.AbsolutePosX - NormalX( curX ), Parent.Width - Width, 0 );
            curY = Math::Clamp( Settings.MouseY - globalMapBase.AbsolutePosY - NormalY( curY ), Parent.Height - Height, 0 );
            SetPosition( curX, curY );
            
            auto grid = cast< Gui::Grid >( Find( "GMTiledBGGrid" ) );
            for( int i = 0, l = grid.Cells.length(); i < l; i++ )
            {
                auto cell = cast< GMTileTemplate >( grid.Cells[ i ] ); 
                cell.SetSize( int( cell.PictureWidth * GlobalZoom ), int( cell.PictureHeight * GlobalZoom ) );
            }
            
            grid.RefreshContentPositions();
            
            auto locGrid = cast< LocationsGrid >( Find( "LocationsGrid" ) );
            
            for( int i = 0, l = locGrid.Cells.length(); i < l; i++ )
            {
                auto cell = cast< LocationPic >( locGrid.Cells[ i ] ); 
                cell.SetLocPosition( GlobalZoom );
            }
            
        }

        void OnConstruct() override
        {
            SetPosition(-1, 2);
        }

        void OnInit() override
        {
            GMWidth  = Settings.GlobalMapWidth * Settings.GlobalMapZoneLength;
            GMHeight = Settings.GlobalMapHeight * Settings.GlobalMapZoneLength;
            SetSize(GMWidth, GMHeight);
            
        }

        void OnShow(dict<string, any> params) override
        {
            ChangeGMZoom( 0 );
        }

        void OnDraw() override
        {
            
            auto info = GlobalmapGroup::GetCurrentGroup();
            FindButton( "PositionButton" ).SetActive( valid( info ) && !info.IsMoving && !info.IsEncounter );
            FindPanel( "PositionMove" ).SetActive( valid( info ) && info.IsMoving );
        }

        void OnLMousePressed() override
        {
            CurPlayer.ServerCall.ProcessGlobalMapCommand( 1, NormalX2(Settings.MouseX - PosX - Parent.AbsolutePosX ), NormalY2(Settings.MouseY - PosY - Parent.AbsolutePosY ) );
            
        }

        void OnRMousePressed() override
        {
            LastX = Settings.MouseX;
            LastY = Settings.MouseY;
        }

        void OnMouseMove() override
        {
            if( !Input::IsMousePressed( MouseButton::Right ) )
                return;
            
            int NewPosX = PosX + ( Settings.MouseX - LastX );
            int NewPosY = PosY + ( Settings.MouseY - LastY );
            
            NewPosX = Math::Clamp( NewPosX, Parent.Width - Width, 0 );
            NewPosY = Math::Clamp( NewPosY, Parent.Height - Height, 0 );
            
            SetPosition( NewPosX, NewPosY );
            
            LastX = Settings.MouseX;
            LastY = Settings.MouseY;
        }

        void OnGlobalMouseDown(MouseButton button) override
        {
            if( button == MouseButton::WheelDown )
                ChangeGMZoom( -0.02 );
            else if( button == MouseButton::WheelUp )
                ChangeGMZoom( 0.04 );
            else if( button == MouseButton::Middle )
                ChangeGMZoom( 0 );
        }
    };

    class GMTiledBG : Gui::Panel
    {
        void OnConstruct() override
        {
            SetNotHittable(true);
        }
    };

    class GMTiledBGGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetNotHittable(true);
            SetCellPrototype("GMTileTemplate");
            SetGridSize(20);
            SetColumns(4);
        }
    };

    class GMTileTemplate : Gui::Panel
    {
         string FormatXX( int value )
            {
                value = CLAMP( value, 0, 99 );
                return value < 10 ? "0" + value : "" + value;
            }
            float PictureHeight = 300;
            float PictureWidth  = 350;

        void OnConstruct() override
        {
            SetNotHittable(true);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            SetBackgroundImage( "art/intrface/GlobalMap/WRLDMP" + FormatXX(cellIndex) + ".png", SpriteLayout::Zoom);
        }
    };

    class LocationsGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetNotHittable(true);
            SetCellPrototype("LocationPic");
            SetGridSize(0);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            
            ResizeGrid( GlobalMapLocations::GMLocations.length() );
            
        }
    };

    class LocationPic : Gui::Panel
    {
        GlobalMapLocations::LocationData Location;
        
        void SetLocPosition( float zoom )
        {
            if( Location == null )
                return;
            uint radius = uint ( Location.Radius * 2 * zoom );
            SetPosition( uint( Location.LocWx * zoom ) - radius / 2,  uint( Location.LocWy * zoom ) - radius / 2 );
            SetSize( radius, radius );
        }

        void OnConstruct() override
        {
            SetSize(49, 49);
            SetBackgroundImage("art/intrface/GlobalMap/WRLDSPR2.png", SpriteLayout::Stretch);
        }

        void OnShow(dict<string, any> params) override
        {
            SetLocPosition( 1.0f );
            if( Location != null && Location.Color != ucolor(0) )
                SetColor( Location.Color );
            else
                SetColor( COLOR_GREEN );
        }

        void OnLMousePressed() override
        {
            Parent.Parent.OnLMousePressed();
        }

        void OnRMousePressed() override
        {
            Parent.Parent.OnRMousePressed();
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Location = GlobalMapLocations::GMLocations[ cellIndex ];
        }
    };

    class Position : Gui::Panel
    {
        void OnConstruct() override
        {
        }

        void OnDraw() override
        {
            Critter chosen = Game.GetChosen();
            if( chosen == null )
                return;
            SetPosition( 
                    cast< GMObjects > ( Parent ).NormalX( int( chosen.WorldX ) ), 
                    cast< GMObjects > ( Parent ).NormalY( int( chosen.WorldY ) )
                    );
        }
    };

    class PositionButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-12, -6);
            SetSize(25, 13);
            SetBackgroundImage("art/intrface/GM_Town/town_view_sh.png");
            SetPressedImage("art/intrface/GM_Town/town_view_sh_dn.png");
            SetHoverImage("art/intrface/GM_Town/town_view_sh_dn.png");
        }

        void OnLMouseClick() override
        {
            GlobalMapLocations::TryEnterHoveredLocation();
        }
    };

    class PositionMove : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(-3, -3);
            SetSize(6, 6);
            SetNotHittable(true);
            SetBackgroundImage("art/intrface/GlobalMap/WMAPLOC.png");
        }
    };

    class GMOverlay : Gui::Panel
    {
        Sprite::Sprite GMPos;
        Sprite::Sprite GMPosMove;
        Sprite::Sprite GMTarget;
        Sprite::Sprite GMEncOn;
        Sprite::Sprite GMEncOff;
        Sprite::Sprite GMEncSpecialOff;
        Sprite::Sprite GMEncSpecialOn;
        uint EncOnOffTick;

        void OnConstruct() override
        {
            SetNotHittable(true);
        }

        void OnInit() override
        {
            GMPos           = Sprite::Sprite( "art/intrface/GM_Town/town_view_sh.png" );
            GMPosMove       = Sprite::Sprite( "art/intrface/GlobalMap/WMAPLOC.png" );
            GMTarget        = Sprite::Sprite( "art/intrface/GlobalMap/WMAPTARG.png" );
            GMEncOn         = Sprite::Sprite( "art/intrface/GlobalMap/WMAPFGT1.png" );
            GMEncOff        = Sprite::Sprite( "art/intrface/GlobalMap/WMAPFGT0.png" );
            GMEncSpecialOn  = Sprite::Sprite( "art/intrface/GlobalMap/WMRNDEN2.png" );
            GMEncSpecialOff = Sprite::Sprite( "art/intrface/GlobalMap/WMRNDEN3.png" );
        }

        void OnDraw() override
        {
            string text;
                        
            auto hoveredLocation = cast< GuiScreens::GlobalMap::LocationPic >( Gui::GetHoveredObject() );
            if( hoveredLocation != null )
                text += MSG_LOCATION(STR_LOC_NAME( hoveredLocation.Location.LocPid )) +"\n";
            
            auto gmBase           = cast< GlobalMapBase > ( Parent.Parent );
            auto globalMapObjects = cast< GMObjects > ( Parent );
            
            if( Parent.IsMouseHit() )
            {
                int CoordX               = globalMapObjects.NormalX2( Settings.MouseX - Parent.PosX - gmBase.AbsolutePosX );
                int CoordY               = globalMapObjects.NormalY2( Settings.MouseY - Parent.PosY - gmBase.AbsolutePosY );
            
                string Coordinates = MSG_GAME( MsgStr::StrGlobalMapCoordInfo );
                Coordinates        = Game.ReplaceText( Coordinates, "%d", CoordX );
                Coordinates        = Game.ReplaceText( Coordinates, "%d", CoordY );
                Coordinates        = Game.ReplaceText( Coordinates, "%s", "\n" );
                Coordinates        = Game.ReplaceText( Coordinates, "%d", CoordX / Settings.GlobalMapZoneLength );
                Coordinates        = Game.ReplaceText( Coordinates, "%d", CoordY / Settings.GlobalMapZoneLength );
            
                text += Coordinates;
            
                Game.DrawText( text, Settings.MouseX + 30, Settings.MouseY + 10, 200, 100, COLOR_GREEN, FONT_DEFAULT, FT_BORDERED );
            }
            
            auto info = GlobalmapGroup::GetCurrentGroup();
            if( info.IsMoving )
            { 
                GMTarget.Draw( globalMapObjects.NormalX( info.ToX ) + gmBase.AbsolutePosX + Parent.PosX, globalMapObjects.NormalY( info.ToY) + gmBase.AbsolutePosY + Parent.PosY, 0, 0, 0, 0 );
            
                auto group = GlobalmapGroup::GetCurrentGroup();
                if( valid( group ) )
                {
                    int[] points = array<int> ( group.Points );
                    for( uint i = 0; i < points.length(); i=i+3 )
                    {
                        points[i] = globalMapObjects.NormalX( points[i] ) + gmBase.AbsolutePosX + Parent.PosX;
                        points[i+1] = globalMapObjects.NormalY( points[i+1] ) + gmBase.AbsolutePosY + Parent.PosY;
                    }
                    Game.DrawPrimitive( DRAW_PRIMITIVE_POINTLIST, points );
                }
            }
        }
    };

    class MainPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(800, 600);
            SetNotHittable(true);
            SetBackgroundImage("art/intrface/GlobalMap/wm_iface800x600.png");
        }
    };

    class InventButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(47, 19);
            SetSize(32, 21);
            SetPressedImage("art/intrface/inv_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    };

    class MenuButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(47, 44);
            SetSize(34, 34);
            SetPressedImage("art/intrface/game_menu_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_MENU );
        }
    };

    class CharacterButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(83, 18);
            SetSize(41, 19);
            SetPressedImage("art/intrface/cha_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_CHARACTER );
        }
    };

    class PipBoyButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(83, 39);
            SetSize(41, 19);
            SetPressedImage("art/intrface/pip_boy_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    };

    class FixBoyButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(84, 59);
            SetSize(41, 19);
            SetPressedImage("art/intrface/iface_fix.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    };

    class ViewCar : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(12, 455);
            SetSize(156, 140);
            SetUseSorting(true);
        }

        int OnCheckItem(Item item) override
        {
            return item.Type == ItemType::Car ? 0 : -1;
        }
    };

    class CarImage : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(156, 140);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetBackgroundImage( item !is null ? item.PicInv : EMPTY_HSTRING );
        }
    };

    class TimePanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(640, 4);
            SetSize(158, 33);
        }
    };

    class DayText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(29, 33);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return  FormatXX( Game.Day );
        }
    };

    class MounthText : Gui::Text
    {
        string[] CodeMonth = { "", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k" };

        void OnConstruct() override
        {
            SetPosition(29, 0);
            SetSize(37, 33);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return CodeMonth[ Game.Month ];
        }
    };

    class YearText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(66, 0);
            SetSize(44, 33);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return "" + Game.Year;
        }
    };

    class TimeText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(110, 0);
            SetSize(48, 33);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( Game.Hour ) + FormatXX( Game.Minute );
        }
    };

    class DialPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(52, 43);
            SetSize(58, 29);
            SetBackgroundImage("art/intrface/GlobalMap/WMDIAL/WMDIAL.fofrm");
        }

        void OnDraw() override
        {
            uint timeInMinut = Game.Hour * 60 + Game.Minute;
            BackgroundImage.SetFrame( timeInMinut / float( 24 * 60 ) );
        }
    };

    class KnownLocationsMain : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(638, 128);
        }
    };

    class KnownProtoLocs : Gui::Grid
    {
        hstring[] KnownCityLocations;

        void OnConstruct() override
        {
            SetPosition(23, 4);
            SetSize(119, 186);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype("CityNamePanel");
            SetColumns(1);
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            KnownCityLocations = array<hstring>();
            for( uint i = 0, l = chosen.KnownLocProtoId.length(); i < l; i++)
            {
                // Не для всех городов и локаций есть ярлыки
                if( !MSG_LOCATION(STR_LOC_LABEL_PIC( chosen.KnownLocProtoId[ i ] ) ).isEmpty() )
                    KnownCityLocations.insertLast( chosen.KnownLocProtoId[ i ] );
            }
            
            if( GridSize != KnownCityLocations.length() + 5 )
                ResizeGrid( KnownCityLocations.length() + 5 );
        }
    };

    class CityNamePanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(119, 30);
        }
    };

    class DisableTab : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(119, 30);
            SetBackgroundImage("art/intrface/GlobalMap/wm_blanktab.png");
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            SetActive( cellIndex >= cast<KnownProtoLocs>(Parent.Parent).KnownCityLocations.length());
        }
    };

    class Tab : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(119, 30);
            SetBackgroundImage("art/intrface/GlobalMap/wm_tab.png");
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            SetActive( cellIndex < cast<KnownProtoLocs>(Parent.Parent).KnownCityLocations.length());
        }
    };

    class ImageNameTown : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(29, 5);
            SetSize(82, 18);
            SetBackgroundImage("art/intrface/GlobalMap/gm_Arroyo.png");
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            auto locs = cast<KnownProtoLocs>(Parent.Parent.Parent).KnownCityLocations;
            if( cellIndex >= locs.length() )
                return;
            hstring proto     = locs[ cellIndex ];
            string picName = MSG_LOCATION(STR_LOC_LABEL_PIC( proto ) );
            if( picName != "error" )
                 SetBackgroundImage( picName );
            
                 
            
        }
    };

    class PickCityButton : Gui::Button
    {
        uint LocIndex;

        void OnConstruct() override
        {
            SetPosition(7, 7);
            SetSize(15, 16);
            SetPressedImage("art/intrface/smallbutton_on.png");
            SetHoverImage("art/intrface/smallbutton_on.png");
        }

        void OnLMouseClick() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            auto locs = cast<KnownProtoLocs>(Parent.Parent.Parent).KnownCityLocations;
            if( LocIndex >= locs.length() )
                return;
            hstring proto = locs[ LocIndex ];
            
            uint16 x = 0, y = 0;
            
            if( GlobalMapLocations::GetLocationCoordinates ( proto, x, y ) )
            {
                CurPlayer.ServerCall.ProcessGlobalMapCommand( 1, x, y );
            }
            
                 
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            LocIndex = cellIndex;
        }
    };

    class ScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(2, 9);
            SetSize(11, 14);
            SetPressedImage("art/intrface/arrow_up_on.png");
        }

        void OnLMousePressed() override
        {
            Gui::Panel@ panel = Parent.FindPanel( "KnownProtoLocs" );
            panel.ModifyScroll( -10, 0 );
        }
    };

    class ScrollDonw : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(2, 22);
            SetSize(11, 14);
            SetPressedImage("art/intrface/arrow_down_on.png");
        }

        void OnLMousePressed() override
        {
            Gui::Panel@ panel = Parent.FindPanel( "KnownProtoLocs" );
            panel.ModifyScroll( 10, 0 );
        }
    };

    class GMTownButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(679, 438);
            SetSize(15, 16);
            SetPressedImage("art/intrface/smallbutton_on.png");
        }

        void OnLMouseClick() override
        {
            //CurPlayer.ServerCall.Rpc_ShowGMTown();
            
            auto group  = GlobalmapGroup::GetCurrentGroup();
            if( group != null && !group.IsMoving && !group.IsEncounter)
            {
                auto locInfo = GlobalMapLocations::GetHoveredLocationData( group.CurX, group.CurY );
                if( MSG_LOCATION(STR_LOC_PIC( locInfo.LocPid ) ) != "error" )
                {
                    if( locInfo != null )
                    {
                        CurPlayer.ServerCall.ProcessGlobalMapCommand( 9, locInfo.LocId, 0 );//GM_CMD_ENTRANCES
                    }
                }
            
            }
            
        }
    };

    class Console : Gui::Console
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(182, 482);
            SetSize(590, 16);
            SetTextFlags(FT_CENTERY);
        }
    };

    class MessageBox : Gui::MessageBox
    {
        void OnConstruct() override
        {
            SetPosition(183, 504);
            SetSize(590, 90);
        }
    };

    class GlobalGroupGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(8, 227);
            SetSize(170, 220);
            SetCellPrototype("ProtoGroupGrid");
            SetColumns(1);
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
        }
    };

    class ProtoGroupGrid : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(170, 23);
        }
    };

    class CritterName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(120, 22);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return "";
            return chosen.Name;
        }
    };

    class CritterCond : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(123, 0);
            SetSize(40, 15);
            SetText("online");
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("online");
        }
    };

    GlobalMap CreateGlobalMapHierarchy(Gui::Object parent)
    {
        GlobalMap obj = GlobalMap();
        CreateGlobalMapBaseHierarchy(obj);
        CreateMainPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    GlobalMapBase CreateGlobalMapBaseHierarchy(Gui::Object parent)
    {
        GlobalMapBase obj = GlobalMapBase();
        CreateGMObjectsHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    GMObjects CreateGMObjectsHierarchy(Gui::Object parent)
    {
        GMObjects obj = GMObjects();
        CreateGMTiledBGHierarchy(obj);
        CreateLocationsGridHierarchy(obj);
        CreatePositionHierarchy(obj);
        CreateGMOverlayHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    GMTiledBG CreateGMTiledBGHierarchy(Gui::Object parent)
    {
        GMTiledBG obj = GMTiledBG();
        CreateGMTiledBGGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    GMTiledBGGrid CreateGMTiledBGGridHierarchy(Gui::Object parent)
    {
        GMTiledBGGrid obj = GMTiledBGGrid();
        CreateGMTileTemplateHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    GMTileTemplate CreateGMTileTemplateHierarchy(Gui::Object parent)
    {
        GMTileTemplate obj = GMTileTemplate();
        obj.Init(parent);
        return obj;
    }

    LocationsGrid CreateLocationsGridHierarchy(Gui::Object parent)
    {
        LocationsGrid obj = LocationsGrid();
        CreateLocationPicHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    LocationPic CreateLocationPicHierarchy(Gui::Object parent)
    {
        LocationPic obj = LocationPic();
        obj.Init(parent);
        return obj;
    }

    Position CreatePositionHierarchy(Gui::Object parent)
    {
        Position obj = Position();
        CreatePositionButtonHierarchy(obj);
        CreatePositionMoveHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    PositionButton CreatePositionButtonHierarchy(Gui::Object parent)
    {
        PositionButton obj = PositionButton();
        obj.Init(parent);
        return obj;
    }

    PositionMove CreatePositionMoveHierarchy(Gui::Object parent)
    {
        PositionMove obj = PositionMove();
        obj.Init(parent);
        return obj;
    }

    GMOverlay CreateGMOverlayHierarchy(Gui::Object parent)
    {
        GMOverlay obj = GMOverlay();
        obj.Init(parent);
        return obj;
    }

    MainPanel CreateMainPanelHierarchy(Gui::Object parent)
    {
        MainPanel obj = MainPanel();
        CreateInventButtonHierarchy(obj);
        CreateMenuButtonHierarchy(obj);
        CreateCharacterButtonHierarchy(obj);
        CreatePipBoyButtonHierarchy(obj);
        CreateFixBoyButtonHierarchy(obj);
        CreateViewCarHierarchy(obj);
        CreateTimePanelHierarchy(obj);
        CreateKnownLocationsMainHierarchy(obj);
        CreateGMTownButtonHierarchy(obj);
        CreateConsoleHierarchy(obj);
        CreateMessageBoxHierarchy(obj);
        CreateGlobalGroupGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    InventButton CreateInventButtonHierarchy(Gui::Object parent)
    {
        InventButton obj = InventButton();
        obj.Init(parent);
        return obj;
    }

    MenuButton CreateMenuButtonHierarchy(Gui::Object parent)
    {
        MenuButton obj = MenuButton();
        obj.Init(parent);
        return obj;
    }

    CharacterButton CreateCharacterButtonHierarchy(Gui::Object parent)
    {
        CharacterButton obj = CharacterButton();
        obj.Init(parent);
        return obj;
    }

    PipBoyButton CreatePipBoyButtonHierarchy(Gui::Object parent)
    {
        PipBoyButton obj = PipBoyButton();
        obj.Init(parent);
        return obj;
    }

    FixBoyButton CreateFixBoyButtonHierarchy(Gui::Object parent)
    {
        FixBoyButton obj = FixBoyButton();
        obj.Init(parent);
        return obj;
    }

    ViewCar CreateViewCarHierarchy(Gui::Object parent)
    {
        ViewCar obj = ViewCar();
        CreateCarImageHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CarImage CreateCarImageHierarchy(Gui::Object parent)
    {
        CarImage obj = CarImage();
        obj.Init(parent);
        return obj;
    }

    TimePanel CreateTimePanelHierarchy(Gui::Object parent)
    {
        TimePanel obj = TimePanel();
        CreateDayTextHierarchy(obj);
        CreateMounthTextHierarchy(obj);
        CreateYearTextHierarchy(obj);
        CreateTimeTextHierarchy(obj);
        CreateDialPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DayText CreateDayTextHierarchy(Gui::Object parent)
    {
        DayText obj = DayText();
        obj.Init(parent);
        return obj;
    }

    MounthText CreateMounthTextHierarchy(Gui::Object parent)
    {
        MounthText obj = MounthText();
        obj.Init(parent);
        return obj;
    }

    YearText CreateYearTextHierarchy(Gui::Object parent)
    {
        YearText obj = YearText();
        obj.Init(parent);
        return obj;
    }

    TimeText CreateTimeTextHierarchy(Gui::Object parent)
    {
        TimeText obj = TimeText();
        obj.Init(parent);
        return obj;
    }

    DialPanel CreateDialPanelHierarchy(Gui::Object parent)
    {
        DialPanel obj = DialPanel();
        obj.Init(parent);
        return obj;
    }

    KnownLocationsMain CreateKnownLocationsMainHierarchy(Gui::Object parent)
    {
        KnownLocationsMain obj = KnownLocationsMain();
        CreateKnownProtoLocsHierarchy(obj);
        CreateScrollUpHierarchy(obj);
        CreateScrollDonwHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    KnownProtoLocs CreateKnownProtoLocsHierarchy(Gui::Object parent)
    {
        KnownProtoLocs obj = KnownProtoLocs();
        CreateCityNamePanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CityNamePanel CreateCityNamePanelHierarchy(Gui::Object parent)
    {
        CityNamePanel obj = CityNamePanel();
        CreateDisableTabHierarchy(obj);
        CreateTabHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DisableTab CreateDisableTabHierarchy(Gui::Object parent)
    {
        DisableTab obj = DisableTab();
        obj.Init(parent);
        return obj;
    }

    Tab CreateTabHierarchy(Gui::Object parent)
    {
        Tab obj = Tab();
        CreateImageNameTownHierarchy(obj);
        CreatePickCityButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ImageNameTown CreateImageNameTownHierarchy(Gui::Object parent)
    {
        ImageNameTown obj = ImageNameTown();
        obj.Init(parent);
        return obj;
    }

    PickCityButton CreatePickCityButtonHierarchy(Gui::Object parent)
    {
        PickCityButton obj = PickCityButton();
        obj.Init(parent);
        return obj;
    }

    ScrollUp CreateScrollUpHierarchy(Gui::Object parent)
    {
        ScrollUp obj = ScrollUp();
        obj.Init(parent);
        return obj;
    }

    ScrollDonw CreateScrollDonwHierarchy(Gui::Object parent)
    {
        ScrollDonw obj = ScrollDonw();
        obj.Init(parent);
        return obj;
    }

    GMTownButton CreateGMTownButtonHierarchy(Gui::Object parent)
    {
        GMTownButton obj = GMTownButton();
        obj.Init(parent);
        return obj;
    }

    Console CreateConsoleHierarchy(Gui::Object parent)
    {
        Console obj = Console();
        obj.Init(parent);
        return obj;
    }

    MessageBox CreateMessageBoxHierarchy(Gui::Object parent)
    {
        MessageBox obj = MessageBox();
        obj.Init(parent);
        return obj;
    }

    GlobalGroupGrid CreateGlobalGroupGridHierarchy(Gui::Object parent)
    {
        GlobalGroupGrid obj = GlobalGroupGrid();
        CreateProtoGroupGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ProtoGroupGrid CreateProtoGroupGridHierarchy(Gui::Object parent)
    {
        ProtoGroupGrid obj = ProtoGroupGrid();
        CreateCritterNameHierarchy(obj);
        CreateCritterCondHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CritterName CreateCritterNameHierarchy(Gui::Object parent)
    {
        CritterName obj = CritterName();
        obj.Init(parent);
        return obj;
    }

    CritterCond CreateCritterCondHierarchy(Gui::Object parent)
    {
        CritterCond obj = CritterCond();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateGlobalMapHierarchy(null);
    }
}

namespace Wait
{
    class Wait : Gui::Screen
    {
        string[] ImageName = { "art95.png", "assist.png", "bos.png", "car.png", "chosen.png", "explode.png", "heads.png",
                                "other0.png", "prisoner.png", "room.png", "temple.png", "twoheros.png", "vault.png", "vault_boy.png",
                            "vault_door.png", "wildmen.png" };

        void OnConstruct() override
        {
            SetModal(true);
            SetAvailableCursors(array< CursorType >  = {CursorType::Hand} );
            SetCanMove(true, false);
            SetDock(DockStyle::Fill);
        }

        void OnShow(dict<string, any> params) override
        {
            string imageName = "art/splash/" + ImageName[ Game.Random( 0, ImageName.length() - 1 ) ];
            SetBackgroundImage( hstring( imageName ), SpriteLayout::Zoom );
            SetSize( Settings.ScreenWidth, Settings.ScreenHeight );
        }
    };

    Wait CreateWaitHierarchy(Gui::Object parent)
    {
        Wait obj = Wait();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateWaitHierarchy(null);
    }
}

namespace Credits
{
    class Credits : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetAvailableCursors(array< CursorType > = {});
            SetSize(1, 1);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
            SetCropContent( true );
        }

        void OnShow(dict<string, any> params) override
        {
            SetSize( Settings.ScreenWidth, Settings.ScreenHeight );
            Settings.HideCursor = true;
        }

        void OnHide() override
        {
            Settings.HideCursor = false;
        }
    };

    class CreditsText : Gui::Text
    {
        uint Tick;
        uint DeltaTick = 20;

        void OnConstruct() override
        {
            SetText(MSG_GAME( MsgStr::StrGameCredits ));
            SetTextFont(Fonts::Big);
            SetTextFlags(FT_CENTERX);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrGameCredits ));
        }

        void OnInit() override
        {
            string text = MSG_GAME( MsgStr::StrGameCreditsSpeed );
            int result  = 0;
            if( text.tryToInt( result ) )
                DeltaTick = result;
            
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( Text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
        }

        void OnShow(dict<string, any> params) override
        {
            SetSize( Settings.ScreenWidth, Height );
            SetPosition( PosX, Settings.ScreenHeight );
        }

        void OnDraw() override
        {
            if( Tick > Game.GetTick() )
                return;
            Tick = Game.GetTick() + DeltaTick;
            
            SetPosition( PosX, PosY - 1 );
        }
    };

    Credits CreateCreditsHierarchy(Gui::Object parent)
    {
        Credits obj = Credits();
        CreateCreditsTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CreditsText CreateCreditsTextHierarchy(Gui::Object parent)
    {
        CreditsText obj = CreditsText();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateCreditsHierarchy(null);
    }
}

namespace Options
{
    void SaveOptions()
    {
        dict<string, string> savedOptions =
        {
            { "Language", "" + Settings.Language },
            { "ScreenWidth", "" + Settings.ScreenWidth },
            { "ScreenHeight", "" + Settings.ScreenHeight },
            { "FullScreen", "" + Settings.Fullscreen },
            { "AlwaysOnTop", "" + Settings.AlwaysOnTop },
            { "MusicVolume", "" + Settings.MusicVolume },
            { "SoundVolume", "" + Settings.SoundVolume },
            { "AlwaysRun", "" + Settings.AlwaysRun },
            //{ "DefaultCombatMode", "" + Settings.DefaultCombatMode },
            { "ProxyType", "" + Settings.ProxyType },
            { "ProxyHost", "" + Settings.ProxyHost },
            { "ProxyPort", "" + Settings.ProxyPort },
            { "ProxyUser", "" + Settings.ProxyUser },
            { "ProxyPass", "" + Settings.ProxyPass }
        };
        Game.SetUserConfig( savedOptions );
    }

    class Screen : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(800, 600);
            SetDock(DockStyle::Fill);
        }
    };

    class Main : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(80, 60);
            SetSize(640, 480);
            SetBackgroundImage("art/intrface/main_menu_options.png");
        }
    };

    class Options : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(640, 440);
        }
    };

    class Game : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 20);
        }
    };

    class Language : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 10);
            SetText(MSG_GAME( MsgStr::StrOptionsLanguage ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsLanguage ));
        }
    };

    class Russian : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.Language == "russ");
        }

        void OnLMouseClick() override
        {
            Game.ChangeLanguage("russ");
            Gui::Callback_OnLanguageChanged();
            SaveOptions();
        }
    };

    class Text1 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsLanguageRussian ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsLanguageRussian ));
        }
    };

    class English : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(330, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.Language == "engl");
        }

        void OnLMouseClick() override
        {
            Game.ChangeLanguage("engl");
            Gui::Callback_OnLanguageChanged();
            SaveOptions();
        }
    };

    class Text2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsLanguageEnglish ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsLanguageEnglish ));
        }
    };

    int[] ScreenWidthOpt = { 800, 1024, 1280, 1280, 1366, 1920 };
    int[] ScreenHeightOpt = { 600, 768, 800, 1024, 768, 1080 };

    class Resolution : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 40);
            SetText(MSG_GAME( MsgStr::StrOptionsResolution ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsResolution ));
        }
    };

    class Resolution1 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(180, -8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ScreenWidth == ScreenWidthOpt[ 0 ] && Settings.ScreenHeight == ScreenHeightOpt[ 0 ]);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SetResolution " + ScreenWidthOpt[ 0 ] + " " + ScreenHeightOpt[ 0 ] );
            
            SaveOptions();
        }
    };

    class Text14 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(ScreenWidthOpt[ 0 ] + "x" + ScreenHeightOpt[ 0 ]);
        }
    
        void OnRefreshText() override
        {
            SetText(ScreenWidthOpt[ 0 ] + "x" + ScreenHeightOpt[ 0 ]);
        }
    };

    class Resolution2 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(240, 8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ScreenWidth == ScreenWidthOpt[ 1 ] && Settings.ScreenHeight == ScreenHeightOpt[ 1 ]);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SetResolution " + ScreenWidthOpt[ 1 ] + " " + ScreenHeightOpt[ 1 ] );
            
            SaveOptions();
        }
    };

    class Text15 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(ScreenWidthOpt[ 1 ] + "x" + ScreenHeightOpt[ 1 ]);
        }
    
        void OnRefreshText() override
        {
            SetText(ScreenWidthOpt[ 1 ] + "x" + ScreenHeightOpt[ 1 ]);
        }
    };

    class Resolution3 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(300, -8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ScreenWidth == ScreenWidthOpt[ 2 ] && Settings.ScreenHeight == ScreenHeightOpt[ 2 ]);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SetResolution " + ScreenWidthOpt[ 2 ] + " " + ScreenHeightOpt[ 2 ] );
            
            SaveOptions();
        }
    };

    class Text16 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(ScreenWidthOpt[ 2 ] + "x" + ScreenHeightOpt[ 2 ]);
        }
    
        void OnRefreshText() override
        {
            SetText(ScreenWidthOpt[ 2 ] + "x" + ScreenHeightOpt[ 2 ]);
        }
    };

    class Resolution4 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(360, 8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ScreenWidth == ScreenWidthOpt[ 3 ] && Settings.ScreenHeight == ScreenHeightOpt[ 3 ]);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SetResolution " + ScreenWidthOpt[ 3 ] + " " + ScreenHeightOpt[ 3 ] );
            
            SaveOptions();
        }
    };

    class Text17 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(ScreenWidthOpt[ 3 ] + "x" + ScreenHeightOpt[ 3 ]);
        }
    
        void OnRefreshText() override
        {
            SetText(ScreenWidthOpt[ 3 ] + "x" + ScreenHeightOpt[ 3 ]);
        }
    };

    class Resolution5 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(420, -8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ScreenWidth == ScreenWidthOpt[ 4 ] && Settings.ScreenHeight == ScreenHeightOpt[ 4 ]);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SetResolution " + ScreenWidthOpt[ 4 ] + " " + ScreenHeightOpt[ 4 ] );
            
            SaveOptions();
        }
    };

    class Text18 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(ScreenWidthOpt[ 4 ] + "x" + ScreenHeightOpt[ 4 ]);
        }
    
        void OnRefreshText() override
        {
            SetText(ScreenWidthOpt[ 4 ] + "x" + ScreenHeightOpt[ 4 ]);
        }
    };

    class Resolution6 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(480, 8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ScreenWidth == ScreenWidthOpt[ 5 ] && Settings.ScreenHeight == ScreenHeightOpt[ 5 ]);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SetResolution " + ScreenWidthOpt[ 5 ] + " " + ScreenHeightOpt[ 5 ] );
            
            SaveOptions();
        }
    };

    class Text19 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(ScreenWidthOpt[ 5 ] + "x" + ScreenHeightOpt[ 5 ]);
        }
    
        void OnRefreshText() override
        {
            SetText(ScreenWidthOpt[ 5 ] + "x" + ScreenHeightOpt[ 5 ]);
        }
    };

    class FullScreen : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 70);
            SetText(MSG_GAME( MsgStr::StrOptionsFullScreen ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsFullScreen ));
        }
    };

    class CheckBox1 : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.Fullscreen);
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SwitchFullscreen" );
            SaveOptions();
        }
    };

    class AlwaysOnTop : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 100);
            SetText(MSG_GAME( MsgStr::StrOptionsAlwaysOnTop ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsAlwaysOnTop ));
        }
    };

    class CheckBox2 : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.AlwaysOnTop);
        }

        void OnLMouseClick() override
        {
            Settings.AlwaysOnTop = IsChecked;
            SaveOptions();
        }
    };

    class Music : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 130);
            SetText(MSG_GAME( MsgStr::StrOptionsMusic ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsMusic ));
        }
    };

    class MusicDec : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
        }

        void OnLMousePressed() override
        {
            if( Settings.MusicVolume > 0 )
            {
                Settings.MusicVolume -= 1;
                SaveOptions();
            }
        }
    };

    class MusicInc : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(280, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
        }

        void OnLMousePressed() override
        {
            if( Settings.MusicVolume < 100 )
            {
                Settings.MusicVolume += 1;
                SaveOptions();
            }
        }
    };

    class MusicValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(235, 0);
        }

        string get_Text() override
        {
            return "" + Settings.MusicVolume;
        }
    };

    class Sound : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 160);
            SetText(MSG_GAME( MsgStr::StrOptionsSound ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsSound ));
        }
    };

    class SoundDec : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
        }

        void OnLMousePressed() override
        {
            if( Settings.SoundVolume > 0 )
            {
                Settings.SoundVolume -= 1;
                SaveOptions();
            }
        }
    };

    class SoundInc : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(280, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
        }

        void OnLMousePressed() override
        {
            if( Settings.SoundVolume < 100 )
            {
                Settings.SoundVolume += 1;
                SaveOptions();
            }
        }
    };

    class SoundValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(235, 0);
        }

        string get_Text() override
        {
            return "" + Settings.SoundVolume;
        }
    };

    class AlwaysRun : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 190);
            SetText(MSG_GAME( MsgStr::StrOptionsAlwaysRun ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsAlwaysRun ));
        }
    };

    class CheckBox3 : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.AlwaysRun);
        }

        void OnLMouseClick() override
        {
            Settings.AlwaysRun = IsChecked;
            SaveOptions();
        }
    };

    class CombatMode : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 220);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMode ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMode ));
        }
    };

    class Both : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(180, -8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(false/*Settings.DefaultCombatMode == COMBAT_MODE_ANY*/);
        }

        void OnLMouseClick() override
        {
            //Settings.DefaultCombatMode = COMBAT_MODE_ANY;
            SaveOptions();
        }
    };

    class Text5 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatModeBoth ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatModeBoth ));
        }
    };

    class RealTime : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(280, 8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(false/*;//Settings.DefaultCombatMode == COMBAT_MODE_REAL_TIME*/);
        }

        void OnLMouseClick() override
        {
            //Settings.DefaultCombatMode = COMBAT_MODE_REAL_TIME;
            SaveOptions();
        }
    };

    class Text6 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatModeRt ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatModeRt ));
        }
    };

    class TurnBased : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(380, -8);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(false/*;//Settings.DefaultCombatMode == COMBAT_MODE_TURN_BASED*/);
        }

        void OnLMouseClick() override
        {
            //Settings.DefaultCombatMode = COMBAT_MODE_TURN_BASED;
            SaveOptions();
        }
    };

    class Text7 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatModeTb ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatModeTb ));
        }
    };

    class CombatMessages : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 250);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMessages ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMessages ));
        }
    };

    class Verbose : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.CombatMessagesType == 0);
        }

        void OnLMouseClick() override
        {
            Settings.CombatMessagesType = 0;
            SaveOptions();
        }
    };

    class Text8 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMessagesFull ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMessagesFull ));
        }
    };

    class Brief : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(330, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.CombatMessagesType != 0);
        }

        void OnLMouseClick() override
        {
            Settings.CombatMessagesType = 1;
            SaveOptions();
        }
    };

    class Text9 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMessagesShort ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsCombatMessagesShort ));
        }
    };

    class GameServer : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 280);
            SetText(MSG_GAME( MsgStr::StrOptionsGameServer ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsGameServer ));
        }
    };

    class Panel1 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(180, -2);
            SetSize(250, 12);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
        }
    };

    class Panel2 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(450, -2);
            SetSize(50, 12);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
        }
    };

    class Host : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(250, 12);
            SetText(Settings.ServerHost);
            SetTextFlags(FT_CENTERX);
        }
    
        void OnRefreshText() override
        {
            SetText(Settings.ServerHost);
        }
    };

    class Port : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(450, 0);
            SetSize(50, 12);
            SetText("" + Settings.ServerPort);
            SetTextFlags(FT_CENTERX);
        }
    
        void OnRefreshText() override
        {
            SetText("" + Settings.ServerPort);
        }
    };

    class ProxyType : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 310);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyType ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyType ));
        }
    };

    class ProxyNone : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ProxyType == 0);
        }

        void OnLMouseClick() override
        {
            Settings.ProxyType = 0;
            SaveOptions();
        }
    };

    class Text10 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeNone ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeNone ));
        }
    };

    class ProxySocks4 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(280, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ProxyType == 1);
        }

        void OnLMouseClick() override
        {
            Settings.ProxyType = 1;
            SaveOptions();
        }
    };

    class Text11 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeSocks4 ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeSocks4 ));
        }
    };

    class ProxySocks5 : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(380, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ProxyType == 2);
        }

        void OnLMouseClick() override
        {
            Settings.ProxyType = 2;
            SaveOptions();
        }
    };

    class Text12 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeSocks5 ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeSocks5 ));
        }
    };

    class ProxyHttp : Gui::RadioButton
    {
        void OnConstruct() override
        {
            SetPosition(480, 0);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
            SetChecked(Settings.ProxyType == 3);
        }

        void OnLMouseClick() override
        {
            Settings.ProxyType = 3;
            SaveOptions();
        }
    };

    class Text13 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeHttp ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyTypeHttp ));
        }
    };

    class ProxyServer : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 340);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyServer ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyServer ));
        }
    };

    class Panel3 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(180, -2);
            SetSize(250, 12);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
        }
    };

    class Panel4 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(450, -2);
            SetSize(50, 12);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
        }
    };

    class ProxyHost : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(250, 12);
            SetText(Settings.ProxyHost);
            SetTextFlags(FT_CENTERX);
        }
    
        void OnRefreshText() override
        {
            SetText(Settings.ProxyHost);
        }
    };

    class ProxyPort : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(450, 0);
            SetSize(50, 12);
            SetText("" + Settings.ProxyPort);
            SetTextFlags(FT_CENTERX);
        }
    
        void OnRefreshText() override
        {
            SetText("" + Settings.ProxyPort);
        }

        void OnInput(KeyCode key, string text) override
        {
            Settings.ProxyPort = Text.toInt( Settings.ProxyPort );
            Text = "" + Settings.ProxyPort;
            SaveOptions();
        }
    };

    class ProxyAccess : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(50, 370);
            SetText(MSG_GAME( MsgStr::StrOptionsProxyAccess ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsProxyAccess ));
        }
    };

    class Panel5 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(180, -2);
            SetSize(150, 12);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
        }
    };

    class Panel6 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(350, -2);
            SetSize(150, 12);
            SetBackgroundImage("art/intrface/black_pixel.png", SpriteLayout::Stretch);
        }
    };

    class ProxyLogin : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(180, 0);
            SetSize(150, 12);
            SetText(Settings.ProxyUser);
            SetTextFlags(FT_CENTERX);
        }
    
        void OnRefreshText() override
        {
            SetText(Settings.ProxyUser);
        }

        void OnInput(KeyCode key, string text) override
        {
            Settings.ProxyUser = Text;
            SaveOptions();
        }
    };

    class ProxyPassword : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(350, 0);
            SetSize(150, 12);
            SetText(Settings.ProxyPass);
            SetTextFlags(FT_CENTERX);
            SetInputPassword("#");
        }
    
        void OnRefreshText() override
        {
            SetText(Settings.ProxyPass);
        }

        void OnInput(KeyCode key, string text) override
        {
            Settings.ProxyPass = Text;
            SaveOptions();
        }
    };

    class Back : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(460, 450);
            SetSize(17, 11);
            SetBackgroundImage("art/intrface/opt_button_up.png");
            SetPressedImage("art/intrface/opt_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_MAIN_SCREEN_LOGIN );
        }
    };

    class Text3 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(25, 0);
            SetText(MSG_GAME( MsgStr::StrOptionsBack ));
            SetTextFont(Fonts::Fat);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrOptionsBack ));
        }
    };

    Screen CreateScreenHierarchy(Gui::Object parent)
    {
        Screen obj = Screen();
        CreateMainHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Main CreateMainHierarchy(Gui::Object parent)
    {
        Main obj = Main();
        CreateOptionsHierarchy(obj);
        CreateBackHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Options CreateOptionsHierarchy(Gui::Object parent)
    {
        Options obj = Options();
        CreateGameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Game CreateGameHierarchy(Gui::Object parent)
    {
        Game obj = Game();
        CreateLanguageHierarchy(obj);
        CreateResolutionHierarchy(obj);
        CreateFullScreenHierarchy(obj);
        CreateAlwaysOnTopHierarchy(obj);
        CreateMusicHierarchy(obj);
        CreateSoundHierarchy(obj);
        CreateAlwaysRunHierarchy(obj);
        CreateCombatModeHierarchy(obj);
        CreateCombatMessagesHierarchy(obj);
        CreateGameServerHierarchy(obj);
        CreateProxyTypeHierarchy(obj);
        CreateProxyServerHierarchy(obj);
        CreateProxyAccessHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Language CreateLanguageHierarchy(Gui::Object parent)
    {
        Language obj = Language();
        CreateRussianHierarchy(obj);
        CreateEnglishHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Russian CreateRussianHierarchy(Gui::Object parent)
    {
        Russian obj = Russian();
        CreateText1Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text1 CreateText1Hierarchy(Gui::Object parent)
    {
        Text1 obj = Text1();
        obj.Init(parent);
        return obj;
    }

    English CreateEnglishHierarchy(Gui::Object parent)
    {
        English obj = English();
        CreateText2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text2 CreateText2Hierarchy(Gui::Object parent)
    {
        Text2 obj = Text2();
        obj.Init(parent);
        return obj;
    }

    Resolution CreateResolutionHierarchy(Gui::Object parent)
    {
        Resolution obj = Resolution();
        CreateResolution1Hierarchy(obj);
        CreateResolution2Hierarchy(obj);
        CreateResolution3Hierarchy(obj);
        CreateResolution4Hierarchy(obj);
        CreateResolution5Hierarchy(obj);
        CreateResolution6Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Resolution1 CreateResolution1Hierarchy(Gui::Object parent)
    {
        Resolution1 obj = Resolution1();
        CreateText14Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text14 CreateText14Hierarchy(Gui::Object parent)
    {
        Text14 obj = Text14();
        obj.Init(parent);
        return obj;
    }

    Resolution2 CreateResolution2Hierarchy(Gui::Object parent)
    {
        Resolution2 obj = Resolution2();
        CreateText15Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text15 CreateText15Hierarchy(Gui::Object parent)
    {
        Text15 obj = Text15();
        obj.Init(parent);
        return obj;
    }

    Resolution3 CreateResolution3Hierarchy(Gui::Object parent)
    {
        Resolution3 obj = Resolution3();
        CreateText16Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text16 CreateText16Hierarchy(Gui::Object parent)
    {
        Text16 obj = Text16();
        obj.Init(parent);
        return obj;
    }

    Resolution4 CreateResolution4Hierarchy(Gui::Object parent)
    {
        Resolution4 obj = Resolution4();
        CreateText17Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text17 CreateText17Hierarchy(Gui::Object parent)
    {
        Text17 obj = Text17();
        obj.Init(parent);
        return obj;
    }

    Resolution5 CreateResolution5Hierarchy(Gui::Object parent)
    {
        Resolution5 obj = Resolution5();
        CreateText18Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text18 CreateText18Hierarchy(Gui::Object parent)
    {
        Text18 obj = Text18();
        obj.Init(parent);
        return obj;
    }

    Resolution6 CreateResolution6Hierarchy(Gui::Object parent)
    {
        Resolution6 obj = Resolution6();
        CreateText19Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text19 CreateText19Hierarchy(Gui::Object parent)
    {
        Text19 obj = Text19();
        obj.Init(parent);
        return obj;
    }

    FullScreen CreateFullScreenHierarchy(Gui::Object parent)
    {
        FullScreen obj = FullScreen();
        CreateCheckBox1Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CheckBox1 CreateCheckBox1Hierarchy(Gui::Object parent)
    {
        CheckBox1 obj = CheckBox1();
        obj.Init(parent);
        return obj;
    }

    AlwaysOnTop CreateAlwaysOnTopHierarchy(Gui::Object parent)
    {
        AlwaysOnTop obj = AlwaysOnTop();
        CreateCheckBox2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CheckBox2 CreateCheckBox2Hierarchy(Gui::Object parent)
    {
        CheckBox2 obj = CheckBox2();
        obj.Init(parent);
        return obj;
    }

    Music CreateMusicHierarchy(Gui::Object parent)
    {
        Music obj = Music();
        CreateMusicDecHierarchy(obj);
        CreateMusicIncHierarchy(obj);
        CreateMusicValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MusicDec CreateMusicDecHierarchy(Gui::Object parent)
    {
        MusicDec obj = MusicDec();
        obj.Init(parent);
        return obj;
    }

    MusicInc CreateMusicIncHierarchy(Gui::Object parent)
    {
        MusicInc obj = MusicInc();
        obj.Init(parent);
        return obj;
    }

    MusicValue CreateMusicValueHierarchy(Gui::Object parent)
    {
        MusicValue obj = MusicValue();
        obj.Init(parent);
        return obj;
    }

    Sound CreateSoundHierarchy(Gui::Object parent)
    {
        Sound obj = Sound();
        CreateSoundDecHierarchy(obj);
        CreateSoundIncHierarchy(obj);
        CreateSoundValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SoundDec CreateSoundDecHierarchy(Gui::Object parent)
    {
        SoundDec obj = SoundDec();
        obj.Init(parent);
        return obj;
    }

    SoundInc CreateSoundIncHierarchy(Gui::Object parent)
    {
        SoundInc obj = SoundInc();
        obj.Init(parent);
        return obj;
    }

    SoundValue CreateSoundValueHierarchy(Gui::Object parent)
    {
        SoundValue obj = SoundValue();
        obj.Init(parent);
        return obj;
    }

    AlwaysRun CreateAlwaysRunHierarchy(Gui::Object parent)
    {
        AlwaysRun obj = AlwaysRun();
        CreateCheckBox3Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CheckBox3 CreateCheckBox3Hierarchy(Gui::Object parent)
    {
        CheckBox3 obj = CheckBox3();
        obj.Init(parent);
        return obj;
    }

    CombatMode CreateCombatModeHierarchy(Gui::Object parent)
    {
        CombatMode obj = CombatMode();
        CreateBothHierarchy(obj);
        CreateRealTimeHierarchy(obj);
        CreateTurnBasedHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Both CreateBothHierarchy(Gui::Object parent)
    {
        Both obj = Both();
        CreateText5Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text5 CreateText5Hierarchy(Gui::Object parent)
    {
        Text5 obj = Text5();
        obj.Init(parent);
        return obj;
    }

    RealTime CreateRealTimeHierarchy(Gui::Object parent)
    {
        RealTime obj = RealTime();
        CreateText6Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text6 CreateText6Hierarchy(Gui::Object parent)
    {
        Text6 obj = Text6();
        obj.Init(parent);
        return obj;
    }

    TurnBased CreateTurnBasedHierarchy(Gui::Object parent)
    {
        TurnBased obj = TurnBased();
        CreateText7Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text7 CreateText7Hierarchy(Gui::Object parent)
    {
        Text7 obj = Text7();
        obj.Init(parent);
        return obj;
    }

    CombatMessages CreateCombatMessagesHierarchy(Gui::Object parent)
    {
        CombatMessages obj = CombatMessages();
        CreateVerboseHierarchy(obj);
        CreateBriefHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Verbose CreateVerboseHierarchy(Gui::Object parent)
    {
        Verbose obj = Verbose();
        CreateText8Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text8 CreateText8Hierarchy(Gui::Object parent)
    {
        Text8 obj = Text8();
        obj.Init(parent);
        return obj;
    }

    Brief CreateBriefHierarchy(Gui::Object parent)
    {
        Brief obj = Brief();
        CreateText9Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text9 CreateText9Hierarchy(Gui::Object parent)
    {
        Text9 obj = Text9();
        obj.Init(parent);
        return obj;
    }

    GameServer CreateGameServerHierarchy(Gui::Object parent)
    {
        GameServer obj = GameServer();
        CreatePanel1Hierarchy(obj);
        CreatePanel2Hierarchy(obj);
        CreateHostHierarchy(obj);
        CreatePortHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Panel1 CreatePanel1Hierarchy(Gui::Object parent)
    {
        Panel1 obj = Panel1();
        obj.Init(parent);
        return obj;
    }

    Panel2 CreatePanel2Hierarchy(Gui::Object parent)
    {
        Panel2 obj = Panel2();
        obj.Init(parent);
        return obj;
    }

    Host CreateHostHierarchy(Gui::Object parent)
    {
        Host obj = Host();
        obj.Init(parent);
        return obj;
    }

    Port CreatePortHierarchy(Gui::Object parent)
    {
        Port obj = Port();
        obj.Init(parent);
        return obj;
    }

    ProxyType CreateProxyTypeHierarchy(Gui::Object parent)
    {
        ProxyType obj = ProxyType();
        CreateProxyNoneHierarchy(obj);
        CreateProxySocks4Hierarchy(obj);
        CreateProxySocks5Hierarchy(obj);
        CreateProxyHttpHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ProxyNone CreateProxyNoneHierarchy(Gui::Object parent)
    {
        ProxyNone obj = ProxyNone();
        CreateText10Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text10 CreateText10Hierarchy(Gui::Object parent)
    {
        Text10 obj = Text10();
        obj.Init(parent);
        return obj;
    }

    ProxySocks4 CreateProxySocks4Hierarchy(Gui::Object parent)
    {
        ProxySocks4 obj = ProxySocks4();
        CreateText11Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text11 CreateText11Hierarchy(Gui::Object parent)
    {
        Text11 obj = Text11();
        obj.Init(parent);
        return obj;
    }

    ProxySocks5 CreateProxySocks5Hierarchy(Gui::Object parent)
    {
        ProxySocks5 obj = ProxySocks5();
        CreateText12Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text12 CreateText12Hierarchy(Gui::Object parent)
    {
        Text12 obj = Text12();
        obj.Init(parent);
        return obj;
    }

    ProxyHttp CreateProxyHttpHierarchy(Gui::Object parent)
    {
        ProxyHttp obj = ProxyHttp();
        CreateText13Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text13 CreateText13Hierarchy(Gui::Object parent)
    {
        Text13 obj = Text13();
        obj.Init(parent);
        return obj;
    }

    ProxyServer CreateProxyServerHierarchy(Gui::Object parent)
    {
        ProxyServer obj = ProxyServer();
        CreatePanel3Hierarchy(obj);
        CreatePanel4Hierarchy(obj);
        CreateProxyHostHierarchy(obj);
        CreateProxyPortHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Panel3 CreatePanel3Hierarchy(Gui::Object parent)
    {
        Panel3 obj = Panel3();
        obj.Init(parent);
        return obj;
    }

    Panel4 CreatePanel4Hierarchy(Gui::Object parent)
    {
        Panel4 obj = Panel4();
        obj.Init(parent);
        return obj;
    }

    ProxyHost CreateProxyHostHierarchy(Gui::Object parent)
    {
        ProxyHost obj = ProxyHost();
        obj.Init(parent);
        return obj;
    }

    ProxyPort CreateProxyPortHierarchy(Gui::Object parent)
    {
        ProxyPort obj = ProxyPort();
        obj.Init(parent);
        return obj;
    }

    ProxyAccess CreateProxyAccessHierarchy(Gui::Object parent)
    {
        ProxyAccess obj = ProxyAccess();
        CreatePanel5Hierarchy(obj);
        CreatePanel6Hierarchy(obj);
        CreateProxyLoginHierarchy(obj);
        CreateProxyPasswordHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Panel5 CreatePanel5Hierarchy(Gui::Object parent)
    {
        Panel5 obj = Panel5();
        obj.Init(parent);
        return obj;
    }

    Panel6 CreatePanel6Hierarchy(Gui::Object parent)
    {
        Panel6 obj = Panel6();
        obj.Init(parent);
        return obj;
    }

    ProxyLogin CreateProxyLoginHierarchy(Gui::Object parent)
    {
        ProxyLogin obj = ProxyLogin();
        obj.Init(parent);
        return obj;
    }

    ProxyPassword CreateProxyPasswordHierarchy(Gui::Object parent)
    {
        ProxyPassword obj = ProxyPassword();
        obj.Init(parent);
        return obj;
    }

    Back CreateBackHierarchy(Gui::Object parent)
    {
        Back obj = Back();
        CreateText3Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text3 CreateText3Hierarchy(Gui::Object parent)
    {
        Text3 obj = Text3();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateScreenHierarchy(null);
    }
}

namespace Inventory
{
    class Inventory : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetAvailableCursors(array< CursorType > = { CursorType::Hand, CursorType::Default });
            SetCanMove(true, false);
            SetSize(499, 377);
            SetBackgroundImage("art/intrface/inventory.png");
        }
    };

    class InvItems : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(42, 39);
        }

        void OnInit() override
        {
            auto@ itemsContainer = GuiScreens::ItemsContainer::CreateHierarchy( this );
            itemsContainer.ItemsCollection = ITEMS_INVENTORY;
        }
    };

    class SlotHand1 : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(155, 287);
            SetCellPrototype(".SlotItem");
            SetGridSize(1);
            SetUserData(CritterItemSlot::Main);
            SetUserDataExt(ITEMS_CHOSEN_ALL);
        }

        Item[] OnGetItems() override
        {
            return ClientItems::RefreshItemsCollection(  UserDataExt );
        }

        int OnCheckItem(Item item) override
        {
            return item.CritterSlot == CritterItemSlot::Main ? 0 : -1;
        }
    };

    class SlotHand2 : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(246, 287);
            SetCellPrototype(".SlotItem");
            SetGridSize(1);
            SetUserData(CritterItemSlot::Secondary);
            SetUserDataExt(ITEMS_CHOSEN_ALL);
        }

        Item[] OnGetItems() override
        {
            return ClientItems::RefreshItemsCollection(  UserDataExt );
        }

        int OnCheckItem(Item item) override
        {
            return item.CritterSlot == CritterItemSlot::Secondary ? 0 : -1;
        }
    };

    class SlotArmor : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(155, 184);
            SetCellPrototype(".SlotItem");
            SetGridSize(1);
            SetUserData(CritterItemSlot::Armor);
            SetUserDataExt(ITEMS_CHOSEN_ALL);
        }

        Item[] OnGetItems() override
        {
            return ClientItems::RefreshItemsCollection(  UserDataExt );
        }

        int OnCheckItem(Item item) override
        {
            return item.CritterSlot == CritterItemSlot::Armor ? 0 : -1;
        }
    };

    class SlotItem : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(155, 287);
            SetSize(90, 60);
            SetDraggable(true);
            SetBackgroundImage("art/intrface/dummy.png", SpriteLayout::Zoom);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? item.PicInv : EMPTY_HSTRING );
        }
    };

    class Chosen : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(176, 35);
            SetSize(61, 98);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }
    };

    ////import string generic_description0( int descType, int& offsX, int& offsY ) from "ClientMain";

    class Description : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(299, 48);
            SetSize(145, 182);
        }

        void OnDraw() override
        {
            string text = "";
            int ox = 0, oy = 0;
            
            text = ClientMain::generic_description( GenericDescriptionsTypes::InventoryMain, ox, oy );
            Game.DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, Fonts::Default, FT_NOBREAK_LINE );
            
            text = ClientMain::generic_description( GenericDescriptionsTypes::InventorySpecial, ox, oy );
            Game.DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, Fonts::Default, FT_NOBREAK_LINE );
            
            text = ClientMain::generic_description( GenericDescriptionsTypes::InventoryStats, ox, oy );
            Game.DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, Fonts::Default, FT_NOBREAK_LINE );
            
            text = ClientMain::generic_description( GenericDescriptionsTypes::InventoryResist, ox, oy );
            Game.DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, Fonts::Default, FT_NOBREAK_LINE );
        }
    };

    class Close : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(433, 324);
            SetSize(26, 26);
            SetPressedImage("art/intrface/inv_close_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    Inventory CreateInventoryHierarchy(Gui::Object parent)
    {
        Inventory obj = Inventory();
        CreateInvItemsHierarchy(obj);
        CreateSlotHand1Hierarchy(obj);
        CreateSlotHand2Hierarchy(obj);
        CreateSlotArmorHierarchy(obj);
        CreateSlotItemHierarchy(obj);
        CreateChosenHierarchy(obj);
        CreateDescriptionHierarchy(obj);
        CreateCloseHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    InvItems CreateInvItemsHierarchy(Gui::Object parent)
    {
        InvItems obj = InvItems();
        obj.Init(parent);
        return obj;
    }

    SlotHand1 CreateSlotHand1Hierarchy(Gui::Object parent)
    {
        SlotHand1 obj = SlotHand1();
        obj.Init(parent);
        return obj;
    }

    SlotHand2 CreateSlotHand2Hierarchy(Gui::Object parent)
    {
        SlotHand2 obj = SlotHand2();
        obj.Init(parent);
        return obj;
    }

    SlotArmor CreateSlotArmorHierarchy(Gui::Object parent)
    {
        SlotArmor obj = SlotArmor();
        obj.Init(parent);
        return obj;
    }

    SlotItem CreateSlotItemHierarchy(Gui::Object parent)
    {
        SlotItem obj = SlotItem();
        obj.Init(parent);
        return obj;
    }

    Chosen CreateChosenHierarchy(Gui::Object parent)
    {
        Chosen obj = Chosen();
        obj.Init(parent);
        return obj;
    }

    Description CreateDescriptionHierarchy(Gui::Object parent)
    {
        Description obj = Description();
        obj.Init(parent);
        return obj;
    }

    Close CreateCloseHierarchy(Gui::Object parent)
    {
        Close obj = Close();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateInventoryHierarchy(null);
    }
}

namespace PickUp
{
    class PickUp : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetAvailableCursors(array< CursorType > = { CursorType::Hand, CursorType::Default });
            SetCanMove(true, false);
            SetSize(417, 376);
            SetBackgroundImage("art/intrface/pickup.png");
        }

        void OnShow(dict<string, any> params) override
        {
            Critter chosen = Game.GetChosen();
            if (chosen is null) {
                return;
            }
            TransferTypes transfer = chosen.TransferType;
            if(transfer == TransferTypes::CritSteal)
            {
                FindButton("TakeAllButton").SetActive(false);
            }
        }
    };

    class ChosenInv : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(54, 33);
        }

        void OnInit() override
        {
            auto@ itemsContainer = GuiScreens::ItemsContainer::CreateHierarchy( this );
            itemsContainer.ItemsCollection = ITEMS_PICKUP_FROM;
        }
    };

    class OtherInv : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(175, 36);
        }

        void OnInit() override
        {
            Gui::Object@ cont = GuiScreens::ItemsContainer::CreateHierarchy( this );
            cast< GuiScreens::ItemsContainer::ItemsContainer >( cont ).ItemsCollection = ITEMS_PICKUP;
        }
    };

    class LootView : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(303, 35);
            SetSize(70, 100);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }

        void OnShow(dict<string, any> params) override
        {
            GuiScreens::Preview::Preview@ preview = cast< GuiScreens::Preview::Preview >( GetChild( 0 ) );
            preview.PreviewCritterId = params[ "TargetCritterId" ];
            preview.PreviewItemId    = params[ "TargetItemId" ];
        }
    };

    class TakeAllButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(313, 201);
            SetSize(39, 41);
            SetPressedImage("art/intrface/invmadn.png");
        }

        void OnLMouseClick() override
        {
            any[] actions = {};
            ChosenActions::GetChosenActions( actions );
            uint[] useItemAction = { Tla::ChosenTakeAll, 0, 0, 0, 0, 0, 0 };
            for( uint i = 0; i < useItemAction.length(); i++ )
                actions.insertLast( useItemAction[ i ] );
            ChosenActions::SetChosenActions( actions );
        }
    };

    class CloseButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(352, 325);
            SetSize(26, 26);
            SetPressedImage("art/intrface/inv_close_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    PickUp CreatePickUpHierarchy(Gui::Object parent)
    {
        PickUp obj = PickUp();
        CreateChosenInvHierarchy(obj);
        CreateOtherInvHierarchy(obj);
        CreateLootViewHierarchy(obj);
        CreateTakeAllButtonHierarchy(obj);
        CreateCloseButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChosenInv CreateChosenInvHierarchy(Gui::Object parent)
    {
        ChosenInv obj = ChosenInv();
        obj.Init(parent);
        return obj;
    }

    OtherInv CreateOtherInvHierarchy(Gui::Object parent)
    {
        OtherInv obj = OtherInv();
        obj.Init(parent);
        return obj;
    }

    LootView CreateLootViewHierarchy(Gui::Object parent)
    {
        LootView obj = LootView();
        obj.Init(parent);
        return obj;
    }

    TakeAllButton CreateTakeAllButtonHierarchy(Gui::Object parent)
    {
        TakeAllButton obj = TakeAllButton();
        obj.Init(parent);
        return obj;
    }

    CloseButton CreateCloseButtonHierarchy(Gui::Object parent)
    {
        CloseButton obj = CloseButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreatePickUpHierarchy(null);
    }
}

namespace Character
{
    CritterProperty[] ShowBaseStats = { CritterProperty::Strength, CritterProperty::Perception, CritterProperty::Endurance, CritterProperty::Charisma, CritterProperty::Intellect, CritterProperty::Agility, CritterProperty::Luck };
    CritterProperty[] ShowHealthStats = { CritterProperty::MaxLife, CritterProperty::IsPoisoned, CritterProperty::IsRadiated, CritterProperty::IsDamagedEye, CritterProperty::IsDamagedRightArm, CritterProperty::IsDamagedLeftArm, CritterProperty::IsDamagedRightLeg, CritterProperty::IsDamagedLeftLeg };
    CritterProperty[] ShowExtendedStats = { CritterProperty::ArmorClass, CritterProperty::ActionPoints, CritterProperty::CarryWeight, CritterProperty::MeleeDamage, CritterProperty::NormalResistance, CritterProperty::PoisonResistance, CritterProperty::RadiationResistance, CritterProperty::Sequence, CritterProperty::HealingRate, CritterProperty::CriticalChance };
    CritterProperty[] ShowSkills = { CritterProperty::SkillSmallGuns, CritterProperty::SkillBigGuns, CritterProperty::SkillEnergyWeapons, CritterProperty::SkillUnarmed, CritterProperty::SkillMeleeWeapons, CritterProperty::SkillThrowing, CritterProperty::SkillFirstAid, CritterProperty::SkillDoctor, CritterProperty::SkillSneak, CritterProperty::SkillLockpick,
        CritterProperty::SkillSteal, CritterProperty::SkillTraps, CritterProperty::SkillScience, CritterProperty::SkillRepair, CritterProperty::SkillSpeech, CritterProperty::SkillBarter, CritterProperty::SkillGambling, CritterProperty::SkillOutdoorsman };
    
    CritterProperty              CurTip = CritterProperty::Invalid;
    int                          UnspentSP = 0;
    dict< CritterProperty, int > SkillUp = {};
    
    int GetPropValue( CritterProperty prop )
    {
        Critter@ chosen = Game.GetChosen();
        return chosen !is null ? chosen.GetAsInt( prop ) : 0;
    }
    
    bool IsTagSkill( CritterProperty prop )
    {
        return CritterProperty( GetPropValue( CritterProperty::TagSkill1 ) ) == prop ||
            CritterProperty( GetPropValue( CritterProperty::TagSkill2 ) ) == prop ||
            CritterProperty( GetPropValue( CritterProperty::TagSkill3 ) ) == prop;
    }
    
    string FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(640, 480);
            SetBackgroundImage("art/intrface/character.png");
        }

        void OnShow(dict<string, any> params) override
        {
            UnspentSP = GetPropValue( CritterProperty::UnspentSkillPoints );
            SkillUp.clear();
            if( GetPropValue( CritterProperty::UnspentPerks ) > 0 )
                Game.ShowScreen( CLIENT_SCREEN_PERK );
        }
    };

    class BaseStats : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(15, 35);
            SetCellPrototype("BaseStat");
            SetGridSize(ShowBaseStats.length());
        }
    };

    class BaseStat : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(155, 33);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowBaseStats[ cellIndex ];
        }
    };

    class StatName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(4, 4);
            SetSize(40, 20);
            SetText("TXT");
            SetTextFont(Fonts::Big);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Prop ) );
        }
    };

    class StatValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(44, 2);
            SetSize(30, 24);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( GetPropValue( cast< BaseStat >( Parent ).Prop ) );
        }
    };

    class StatValueDesc : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(87, 4);
            SetSize(55, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL( GetPropValue( cast< BaseStat >( Parent ).Prop ) ) );
        }
    };

    class HealthStats : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(192, 42);
            SetCellPrototype("HealthStat");
            SetGridSize(ShowHealthStats.length());
        }
    };

    class HealthStat : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(122, 14);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowHealthStats[ cellIndex ];
        }
    };

    class StatDesc : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(122, 13);
            SetTextFlags(FT_CENTERY);
        }

        void OnDraw() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            ucolor color;
            if( prop == CritterProperty::IsRadiated )
                color = ( GetPropValue( CritterProperty::RadiationLevel ) != 0 ? ucolor(0) : COLOR_DARK );
            else if( prop == CritterProperty::IsPoisoned )
                color = ( GetPropValue( CritterProperty::PoisoningLevel ) != 0 ? ucolor(0) : COLOR_DARK );
            else
                color = ( GetPropValue( prop ) != 0 ? ucolor(0) : COLOR_DARK );
            SetTextColor( color );
        }

        string get_Text() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            if( prop == CritterProperty::MaxLife )
                return MSG_GAME( MsgStr::StrInvHp ) + "  " + GetPropValue( CritterProperty::CurrentHp ) + " / " + GetPropValue( CritterProperty::MaxLife );
            return MSG_GAME( STR_PARAM_NAME( prop ) );
        }
    };

    class ExtendedStats : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(192, 179);
            SetCellPrototype("ExtendedStat");
            SetGridSize(ShowExtendedStats.length());
        }
    };

    class ExtendedStat : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(122, 13);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowExtendedStats[ cellIndex ];
        }
    };

    class StatName2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(100, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnInit() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            Text                 = MSG_GAME( STR_PARAM_NAME_SHORT( prop ) );
        }
    };

    class StatValue2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(98, 0);
            SetSize(25, 13);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            string text;
            if( prop == CritterProperty::CarryWeight )
                text = "" + ( GetPropValue( prop ) / 1000 );
            else if( prop == CritterProperty::NormalResistance || prop == CritterProperty::PoisonResistance || prop == CritterProperty::RadiationResistance )
                text = "" + GetPropValue( prop ) + "%";
            else
                text = "" + GetPropValue( prop );
            return text;
        }
    };

    class Skills : Gui::Grid
    {
        CritterProperty CurSkill = ShowSkills[ 0 ];

        void OnConstruct() override
        {
            SetPosition(348, 26);
            SetCellPrototype("Skill");
            SetGridSize(ShowSkills.length());
        }
    };

    class Skill : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(280, 11);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = ShowSkills[ cellIndex ];
        }
    };

    class SkillName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(22, -1);
            SetSize(200, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Prop ) );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? ucolor(0xFFAAAAAA) : COLOR_TEXT );
        }

        void OnMouseDown(MouseButton button) override
        {
            if( button == MouseButton::Left )
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Prop;
        }
    };

    class SkillValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(225, -1);
            SetSize(40, 13);
            SetTextFlags(FT_CENTERY);
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? ucolor(0xFFAAAAAA) : COLOR_TEXT );
        }

        void OnMouseDown(MouseButton button) override
        {
            if( button == MouseButton::Left )
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Prop;
        }

        string get_Text() override
        {
            CritterProperty prop = cast< Skill >( Parent ).Prop;
            return ( GetPropValue( prop ) + SkillUp.get( prop, 0 ) ) + "%";
        }
    };

    class Title3 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(19, -25);
            SetSize(150, 24);
            SetText(MSG_GAME( MsgStr::StrChaSkills ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaSkills ));
        }
    };

    class Slider : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(245, -10);
            SetSize(43, 29);
            SetBackgroundImage("art/intrface/slider.png");
        }

        void OnDraw() override
        {
            SetPosition( 245, -10 + ShowSkills.find( cast< Skills >( Parent ).CurSkill ) * 11 );
        }
    };

    class IncPoint : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(22, 3);
            SetSize(16, 12);
            SetPressedImage("art/intrface/slider_inc.png");
        }

        void OnLMousePressed() override
        {
            if( UnspentSP <= 0 )
                return;
            
            CritterProperty curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            SkillUp.setIfNotExist( curSkill, 0 );
            int skillVal = GetPropValue( curSkill ) + SkillUp[ curSkill ];
            if( skillVal >= MAX_SKILL_VAL )
                return;
            
            int needSP = 1;
            if( skillVal > Settings.SkillModAdd6 )
                needSP = 6;
            else if( skillVal > Settings.SkillModAdd5 )
                needSP = 5;
            else if( skillVal > Settings.SkillModAdd4 )
                needSP = 4;
            else if( skillVal > Settings.SkillModAdd3 )
                needSP = 3;
            else if( skillVal > Settings.SkillModAdd2 )
                needSP = 2;
            
            if( UnspentSP < needSP )
                return;
            
            UnspentSP -= needSP;
            SkillUp[ curSkill ] = SkillUp[ curSkill ] + 1;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ] = SkillUp[ curSkill ] + 1;
        }
    };

    class DecPoint : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(22, 16);
            SetSize(17, 12);
            SetPressedImage("art/intrface/slider_dec.png");
        }

        void OnLMousePressed() override
        {
            CritterProperty curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            SkillUp.setIfNotExist( curSkill, 0 );
            if( SkillUp[ curSkill ] <= 0 )
                return;
            
            SkillUp[ curSkill ] = SkillUp[ curSkill ] - 1;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ] = SkillUp[ curSkill ] - 1;
            
            int skillVal = GetPropValue( curSkill ) + SkillUp[ curSkill ];
            if( skillVal > Settings.SkillModAdd6 )
                UnspentSP += 6;
            else if( skillVal > Settings.SkillModAdd5 )
                UnspentSP += 5;
            else if( skillVal > Settings.SkillModAdd4 )
                UnspentSP += 4;
            else if( skillVal > Settings.SkillModAdd3 )
                UnspentSP += 3;
            else if( skillVal > Settings.SkillModAdd2 )
                UnspentSP += 2;
            else
                UnspentSP += 1;
        }
    };

    class SkillPoints : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(352, 227);
        }
    };

    class Title2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(1, 1);
            SetSize(150, 26);
            SetText(MSG_GAME( MsgStr::StrChaUnspentSp ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaUnspentSp ));
        }
    };

    class UnspentValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(171, 1);
            SetSize(30, 25);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( UnspentSP );
        }
    };

    class Tip : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(342, 264);
        }

        void OnDraw() override
        {
            Gui::Object@ obj = Gui::GetFocusedObject();
            if( obj is null )
                return;
            
            CritterProperty prop = CritterProperty::Invalid;
            
            #define CHECK_PARAM_PARENT #( className ) if( prop == CritterProperty::Invalid && cast< className >( obj.Parent ) !is null ) prop = cast< className >( obj.Parent ).Prop
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtendedStat );
            CHECK_PARAM_PARENT( Skill );
            
            if( cast< TextLevel >( obj ) !is null )
                prop = CritterProperty::Level;
            if( cast< TextExp >( obj ) !is null )
                prop = CritterProperty::Experience;
            
            if( prop != CritterProperty::Invalid && CurTip != prop )
            {
                CurTip = prop;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( prop ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( prop ) );
                FindPanel( "Image" ).SetBackgroundImage( MSG_GAME(STR_PARAM_PIC( prop )) );
            }
        }
    };

    class Image : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(141, 44);
        }
    };

    class Name : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(8, 7);
            SetSize(270, 31);
            SetTextFont(Fonts::Thin);
            SetTextColor(COLOR_BLACK);
        }
    };

    class Desc : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(8, 44);
            SetSize(150, 124);
            SetTextColor(COLOR_BLACK);
        }
    };

    class Buttons : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(334, 448);
        }
    };

    class Print : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(31, 0);
        }
    };

    class Button1 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-21, 6);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }
    };

    class Text7 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-2, 5);
            SetText(MSG_GAME( MsgStr::StrChaPrint ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaPrint ));
        }
    };

    class Done : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(141, 0);
        }
    };

    class Button2 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-19, 6);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            if( UnspentSP < GetPropValue( CritterProperty::UnspentSkillPoints ) )
            {
                any[] args = {};
                for( uint i = 0; i < SkillUp.length(); i++ )
                {
                    if( SkillUp.getValue( i ) != 0 )
                    {
                        auto skill       = SkillUp.getKey( i );
                        auto skill_value = SkillUp.getValue( i );
                        if(IsTagSkill( skill ) )
                        {
                            skill_value /= 2; 
                        }
                        args.insertLast(skill);
                        args.insertLast(skill_value);
                    }
                }
                if( args.length() > 1 )
                    CurPlayer.ServerCall.ProcessSkillsUp(args);
            }
            Game.HideScreen();
        }
    };

    class Text8 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-2, 5);
            SetText(MSG_GAME( MsgStr::StrChaOk ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaOk ));
        }
    };

    class Back : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(237, 0);
        }
    };

    class Button3 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(-18, 6);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class Text9 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-1, 5);
            SetText(MSG_GAME( MsgStr::StrChaCancel ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaCancel ));
        }
    };

    class CharacterName : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(21, 1);
        }
    };

    class CharacterText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(67, 13);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        string get_Text() override
        {
            return Game.GetChosen() != null ? Game.GetChosen().Name : "";
        }
    };

    class CharacterAge : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(160, 1);
        }
    };

    class AgeText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(39, 13);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        string get_Text() override
        {
            return "" + GetPropValue( CritterProperty::Age );
        }
    };

    class CharacterGender : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(240, 1);
        }
    };

    class GenderText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(32, 13);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        string get_Text() override
        {
            return GetPropValue( CritterProperty::Gender ) == GenderType::Male ? MSG_GAME( MsgStr::StrMaleName ) : MSG_GAME( MsgStr::StrFemaleName );
        }
    };

    class LevelStats : Gui::Panel
    {
        void OnConstruct() override
        {
        }
    };

    class TextLevel : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(30, 282);
        }

        string get_Text() override
        {
            return Game.ReplaceText( MSG_GAME( MsgStr::StrChaLevel ), "%d", GetPropValue( CritterProperty::Level ) );
        }
    };

    class TextExp : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(30, 293);
        }

        string get_Text() override
        {
            return Game.ReplaceText( MSG_GAME( MsgStr::StrChaExperience ), "%d", GetPropValue( CritterProperty::Experience ) );
        }
    };

    class TextNextLevel : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(30, 304);
        }

        string get_Text() override
        {
            return Game.ReplaceText( MSG_GAME( MsgStr::StrChaNextLevel ), "%d", NUMERICAL_NUMBER( GetPropValue( CritterProperty::Level ))  * 1000 );
        }
    };

    class Switcher : Gui::Panel
    {
        int CurSwitch = 0; // 0 - perks, 1 - karma, 2 - kills
        int[] SwitchScroll = { 0, 0, 0 };

        void OnConstruct() override
        {
            SetPosition(12, 328);
        }

        void OnShow(dict<string, any> params) override
        {
            SwitchScroll[ 0 ] = SwitchScroll[ 1 ] = SwitchScroll[ 2 ] = 0;
        }

        void OnDraw() override
        {
            FindPanel( reflection::typeof< PerksTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 0 );
            FindPanel( reflection::typeof< KarmaTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 1 );
            FindPanel( reflection::typeof< KillsTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 2 );
        }
    };

    class PerksTitle : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(318, 33);
            SetBackgroundImage("art/intrface/cha_switcher_perks.png");
        }
    };

    class KarmaTitle : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(318, 33);
            SetBackgroundImage("art/intrface/cha_switcher_karma.png");
        }
    };

    class KillsTitle : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(318, 33);
            SetBackgroundImage("art/intrface/cha_switcher_kills.png");
        }
    };

    class PerksTitleText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(55, 15);
            SetText(MSG_GAME( MsgStr::StrSwitchPerksName ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSwitchPerksName ));
        }
    };

    class KarmaTitleText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(158, 15);
            SetText(MSG_GAME( MsgStr::StrSwitchKarmaName ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSwitchKarmaName ));
        }
    };

    class KillsTitleText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(256, 15);
            SetText(MSG_GAME( MsgStr::StrSwitchKillsName ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSwitchKillsName ));
        }
    };

    class PerksRegion : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(111, 33);
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 0;
        }
    };

    class KarmaRegion : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(111, 0);
            SetSize(98, 33);
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 1;
        }
    };

    class KillsRegion : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(209, 0);
            SetSize(109, 33);
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 2;
        }
    };

    class ScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(304, 42);
            SetSize(11, 14);
            SetBackgroundImage("art/intrface/arrow_up_off.png");
            SetPressedImage("art/intrface/arrow_up_on.png");
        }

        void OnLMousePressed() override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            if( cast< Switcher >( Parent ).SwitchScroll[ curSwitch ] > 0 )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]--;
        }
    };

    class ScrollDown : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(304, 56);
            SetSize(11, 14);
            SetBackgroundImage("art/intrface/arrow_down_off.png");
            SetPressedImage("art/intrface/arrow_down_on.png");
        }

        void OnLMousePressed() override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]++;
        }
    };

    class CurText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(17, 38);
            SetSize(282, 100);
        }

        void OnDraw() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            
            string text;
            int    curSwitch = cast< Switcher >( Parent ).CurSwitch;
            int    scroll    = cast< Switcher >( Parent ).SwitchScroll[ curSwitch ];
            if( curSwitch == 0 )
            {
                // Traits
                bool traitsTitleAdded = false;
                for( uint i = 0; i < CritterPropertyGroup::Traits.length(); i++ )
                {
                    if( GetPropValue( CritterPropertyGroup::Traits[ i ] ) != 0 )
                    {
                        if( !traitsTitleAdded )
                        {
                            traitsTitleAdded = true;
                            text += "    " + MSG_GAME( MsgStr::StrTraitsName ) + "\n";
                        }
                        text += MSG_GAME( STR_PARAM_NAME( CritterPropertyGroup::Traits[ i ] ) ) + "\n";
                    }
                }
                
                // Perks
                bool perksTitleAdded = false;
                for( uint i = 0; i < CritterPropertyGroup::Perks.length(); i++ )
                {
                    int value = GetPropValue( CritterPropertyGroup::Perks[ i ] );
                    if( value != 0 )
                    {
                        if( !perksTitleAdded )
                        {
                            perksTitleAdded = true;
                            text += "    " + MSG_GAME( MsgStr::StrPerksName ) + "\n";
                        }
                        text += MSG_GAME( STR_PARAM_NAME( CritterPropertyGroup::Perks[ i ] ) );
                        if( value > 1 )
                            text += " (" + value + ")";
                        text += "\n";
                    }
                }
            }
            else if( curSwitch == 1 )
            {
                // General karma
                text += MSG_GAME( MsgStr::StrKarmaGenGenName ) + "\n";
                
                // Karma perks
                for( uint i = 0; i < CritterPropertyGroup::KarmaPerks.length(); i++ )
                {
                    if( GetPropValue( CritterPropertyGroup::KarmaPerks[ i ] ) != 0 )
                        text += MSG_GAME( STR_PARAM_NAME( CritterPropertyGroup::KarmaPerks[ i ] ) ) + "\n";
                }
                
                // Town reputation
                bool townReputationTitleAdded = false;
                for( uint i = 0; i < CritterPropertyGroup::Reputations.length(); i++ )
                {
                    if( !townReputationTitleAdded )
                    {
                        townReputationTitleAdded = true;
                        text += "    " + MSG_GAME( MsgStr::StrTownrepTitleName ) + "\n";
                    }
            
                    int value = GetPropValue( CritterPropertyGroup::Reputations[ i ] );
                    text += MSG_GAME( STR_REPUTATION_NAME( i ) ) + ": " + MSG_GAME( STR_TOWNREP_RATIO_NAME( value ) ) + " " + value + "\n";
                }
                
                // Addiction
                bool addictionTitleAdded = false;
                bool[] addictions = array<bool>( chosen.Addictions );
                for( uint i = 0; i < addictions.length(); i++ )
                {
                    if( addictions[ i ] )
                    {
                        if( !addictionTitleAdded )
                        {
                            addictionTitleAdded = true;
                            text += "    " + MSG_GAME( MsgStr::StrAddictTitleName ) + "\n";
                        }
            
                        text += MSG_GAME( STR_ADDICTION_NAME( i ) ) + "\n";
                    }
                }
            }
            else if( curSwitch == 2 )
            {
                uint[] kills = array<uint>( chosen.Kills );
                for( uint i = 0; i < kills.length(); i++ )
                {
                    if( kills[ i ] != 0 )
                    {
                        text += MSG_GAME( STR_KILL_NAME( i ) );
                        if( kills[ i ] > 1 )
                            text += " (" + kills[ i ] + ")";
                        text += "\n";
                    }
                }
            }
            SetTextFlags( FT_SKIPLINES( scroll ) );
            SetText( text );
        }

        void OnMousePressed(MouseButton button) override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            if( button == MouseButton::WheelUp && cast< Switcher >( Parent ).SwitchScroll[ curSwitch ] > 0 )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]--;
            else if( button == MouseButton::WheelDown )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]++;
        }
    };

    Character CreateCharacterHierarchy(Gui::Object parent)
    {
        Character obj = Character();
        CreateBaseStatsHierarchy(obj);
        CreateHealthStatsHierarchy(obj);
        CreateExtendedStatsHierarchy(obj);
        CreateSkillsHierarchy(obj);
        CreateSkillPointsHierarchy(obj);
        CreateTipHierarchy(obj);
        CreateButtonsHierarchy(obj);
        CreateCharacterNameHierarchy(obj);
        CreateCharacterAgeHierarchy(obj);
        CreateCharacterGenderHierarchy(obj);
        CreateLevelStatsHierarchy(obj);
        CreateSwitcherHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BaseStats CreateBaseStatsHierarchy(Gui::Object parent)
    {
        BaseStats obj = BaseStats();
        CreateBaseStatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BaseStat CreateBaseStatHierarchy(Gui::Object parent)
    {
        BaseStat obj = BaseStat();
        CreateStatNameHierarchy(obj);
        CreateStatValueHierarchy(obj);
        CreateStatValueDescHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatName CreateStatNameHierarchy(Gui::Object parent)
    {
        StatName obj = StatName();
        obj.Init(parent);
        return obj;
    }

    StatValue CreateStatValueHierarchy(Gui::Object parent)
    {
        StatValue obj = StatValue();
        obj.Init(parent);
        return obj;
    }

    StatValueDesc CreateStatValueDescHierarchy(Gui::Object parent)
    {
        StatValueDesc obj = StatValueDesc();
        obj.Init(parent);
        return obj;
    }

    HealthStats CreateHealthStatsHierarchy(Gui::Object parent)
    {
        HealthStats obj = HealthStats();
        CreateHealthStatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    HealthStat CreateHealthStatHierarchy(Gui::Object parent)
    {
        HealthStat obj = HealthStat();
        CreateStatDescHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatDesc CreateStatDescHierarchy(Gui::Object parent)
    {
        StatDesc obj = StatDesc();
        obj.Init(parent);
        return obj;
    }

    ExtendedStats CreateExtendedStatsHierarchy(Gui::Object parent)
    {
        ExtendedStats obj = ExtendedStats();
        CreateExtendedStatHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ExtendedStat CreateExtendedStatHierarchy(Gui::Object parent)
    {
        ExtendedStat obj = ExtendedStat();
        CreateStatName2Hierarchy(obj);
        CreateStatValue2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatName2 CreateStatName2Hierarchy(Gui::Object parent)
    {
        StatName2 obj = StatName2();
        obj.Init(parent);
        return obj;
    }

    StatValue2 CreateStatValue2Hierarchy(Gui::Object parent)
    {
        StatValue2 obj = StatValue2();
        obj.Init(parent);
        return obj;
    }

    Skills CreateSkillsHierarchy(Gui::Object parent)
    {
        Skills obj = Skills();
        CreateSkillHierarchy(obj);
        CreateTitle3Hierarchy(obj);
        CreateSliderHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Skill CreateSkillHierarchy(Gui::Object parent)
    {
        Skill obj = Skill();
        CreateSkillNameHierarchy(obj);
        CreateSkillValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SkillName CreateSkillNameHierarchy(Gui::Object parent)
    {
        SkillName obj = SkillName();
        obj.Init(parent);
        return obj;
    }

    SkillValue CreateSkillValueHierarchy(Gui::Object parent)
    {
        SkillValue obj = SkillValue();
        obj.Init(parent);
        return obj;
    }

    Title3 CreateTitle3Hierarchy(Gui::Object parent)
    {
        Title3 obj = Title3();
        obj.Init(parent);
        return obj;
    }

    Slider CreateSliderHierarchy(Gui::Object parent)
    {
        Slider obj = Slider();
        CreateIncPointHierarchy(obj);
        CreateDecPointHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    IncPoint CreateIncPointHierarchy(Gui::Object parent)
    {
        IncPoint obj = IncPoint();
        obj.Init(parent);
        return obj;
    }

    DecPoint CreateDecPointHierarchy(Gui::Object parent)
    {
        DecPoint obj = DecPoint();
        obj.Init(parent);
        return obj;
    }

    SkillPoints CreateSkillPointsHierarchy(Gui::Object parent)
    {
        SkillPoints obj = SkillPoints();
        CreateTitle2Hierarchy(obj);
        CreateUnspentValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Title2 CreateTitle2Hierarchy(Gui::Object parent)
    {
        Title2 obj = Title2();
        obj.Init(parent);
        return obj;
    }

    UnspentValue CreateUnspentValueHierarchy(Gui::Object parent)
    {
        UnspentValue obj = UnspentValue();
        obj.Init(parent);
        return obj;
    }

    Tip CreateTipHierarchy(Gui::Object parent)
    {
        Tip obj = Tip();
        CreateImageHierarchy(obj);
        CreateNameHierarchy(obj);
        CreateDescHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Image CreateImageHierarchy(Gui::Object parent)
    {
        Image obj = Image();
        obj.Init(parent);
        return obj;
    }

    Name CreateNameHierarchy(Gui::Object parent)
    {
        Name obj = Name();
        obj.Init(parent);
        return obj;
    }

    Desc CreateDescHierarchy(Gui::Object parent)
    {
        Desc obj = Desc();
        obj.Init(parent);
        return obj;
    }

    Buttons CreateButtonsHierarchy(Gui::Object parent)
    {
        Buttons obj = Buttons();
        CreatePrintHierarchy(obj);
        CreateDoneHierarchy(obj);
        CreateBackHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Print CreatePrintHierarchy(Gui::Object parent)
    {
        Print obj = Print();
        CreateButton1Hierarchy(obj);
        CreateText7Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button1 CreateButton1Hierarchy(Gui::Object parent)
    {
        Button1 obj = Button1();
        obj.Init(parent);
        return obj;
    }

    Text7 CreateText7Hierarchy(Gui::Object parent)
    {
        Text7 obj = Text7();
        obj.Init(parent);
        return obj;
    }

    Done CreateDoneHierarchy(Gui::Object parent)
    {
        Done obj = Done();
        CreateButton2Hierarchy(obj);
        CreateText8Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button2 CreateButton2Hierarchy(Gui::Object parent)
    {
        Button2 obj = Button2();
        obj.Init(parent);
        return obj;
    }

    Text8 CreateText8Hierarchy(Gui::Object parent)
    {
        Text8 obj = Text8();
        obj.Init(parent);
        return obj;
    }

    Back CreateBackHierarchy(Gui::Object parent)
    {
        Back obj = Back();
        CreateButton3Hierarchy(obj);
        CreateText9Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Button3 CreateButton3Hierarchy(Gui::Object parent)
    {
        Button3 obj = Button3();
        obj.Init(parent);
        return obj;
    }

    Text9 CreateText9Hierarchy(Gui::Object parent)
    {
        Text9 obj = Text9();
        obj.Init(parent);
        return obj;
    }

    CharacterName CreateCharacterNameHierarchy(Gui::Object parent)
    {
        CharacterName obj = CharacterName();
        CreateCharacterTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CharacterText CreateCharacterTextHierarchy(Gui::Object parent)
    {
        CharacterText obj = CharacterText();
        obj.Init(parent);
        return obj;
    }

    CharacterAge CreateCharacterAgeHierarchy(Gui::Object parent)
    {
        CharacterAge obj = CharacterAge();
        CreateAgeTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    AgeText CreateAgeTextHierarchy(Gui::Object parent)
    {
        AgeText obj = AgeText();
        obj.Init(parent);
        return obj;
    }

    CharacterGender CreateCharacterGenderHierarchy(Gui::Object parent)
    {
        CharacterGender obj = CharacterGender();
        CreateGenderTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    GenderText CreateGenderTextHierarchy(Gui::Object parent)
    {
        GenderText obj = GenderText();
        obj.Init(parent);
        return obj;
    }

    LevelStats CreateLevelStatsHierarchy(Gui::Object parent)
    {
        LevelStats obj = LevelStats();
        CreateTextLevelHierarchy(obj);
        CreateTextExpHierarchy(obj);
        CreateTextNextLevelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TextLevel CreateTextLevelHierarchy(Gui::Object parent)
    {
        TextLevel obj = TextLevel();
        obj.Init(parent);
        return obj;
    }

    TextExp CreateTextExpHierarchy(Gui::Object parent)
    {
        TextExp obj = TextExp();
        obj.Init(parent);
        return obj;
    }

    TextNextLevel CreateTextNextLevelHierarchy(Gui::Object parent)
    {
        TextNextLevel obj = TextNextLevel();
        obj.Init(parent);
        return obj;
    }

    Switcher CreateSwitcherHierarchy(Gui::Object parent)
    {
        Switcher obj = Switcher();
        CreatePerksTitleHierarchy(obj);
        CreateKarmaTitleHierarchy(obj);
        CreateKillsTitleHierarchy(obj);
        CreatePerksTitleTextHierarchy(obj);
        CreateKarmaTitleTextHierarchy(obj);
        CreateKillsTitleTextHierarchy(obj);
        CreatePerksRegionHierarchy(obj);
        CreateKarmaRegionHierarchy(obj);
        CreateKillsRegionHierarchy(obj);
        CreateScrollUpHierarchy(obj);
        CreateScrollDownHierarchy(obj);
        CreateCurTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    PerksTitle CreatePerksTitleHierarchy(Gui::Object parent)
    {
        PerksTitle obj = PerksTitle();
        obj.Init(parent);
        return obj;
    }

    KarmaTitle CreateKarmaTitleHierarchy(Gui::Object parent)
    {
        KarmaTitle obj = KarmaTitle();
        obj.Init(parent);
        return obj;
    }

    KillsTitle CreateKillsTitleHierarchy(Gui::Object parent)
    {
        KillsTitle obj = KillsTitle();
        obj.Init(parent);
        return obj;
    }

    PerksTitleText CreatePerksTitleTextHierarchy(Gui::Object parent)
    {
        PerksTitleText obj = PerksTitleText();
        obj.Init(parent);
        return obj;
    }

    KarmaTitleText CreateKarmaTitleTextHierarchy(Gui::Object parent)
    {
        KarmaTitleText obj = KarmaTitleText();
        obj.Init(parent);
        return obj;
    }

    KillsTitleText CreateKillsTitleTextHierarchy(Gui::Object parent)
    {
        KillsTitleText obj = KillsTitleText();
        obj.Init(parent);
        return obj;
    }

    PerksRegion CreatePerksRegionHierarchy(Gui::Object parent)
    {
        PerksRegion obj = PerksRegion();
        obj.Init(parent);
        return obj;
    }

    KarmaRegion CreateKarmaRegionHierarchy(Gui::Object parent)
    {
        KarmaRegion obj = KarmaRegion();
        obj.Init(parent);
        return obj;
    }

    KillsRegion CreateKillsRegionHierarchy(Gui::Object parent)
    {
        KillsRegion obj = KillsRegion();
        obj.Init(parent);
        return obj;
    }

    ScrollUp CreateScrollUpHierarchy(Gui::Object parent)
    {
        ScrollUp obj = ScrollUp();
        obj.Init(parent);
        return obj;
    }

    ScrollDown CreateScrollDownHierarchy(Gui::Object parent)
    {
        ScrollDown obj = ScrollDown();
        obj.Init(parent);
        return obj;
    }

    CurText CreateCurTextHierarchy(Gui::Object parent)
    {
        CurText obj = CurText();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateCharacterHierarchy(null);
    }
}

namespace Dialog
{
    string[]@ SplitParams(string param)
    {
            return cast< string[]@ >(param.split( "\n" ));
    }
        

    class Dialog : Gui::Screen
    {
        bool TalkerIsNpc;
        ident TalkerId;
        string Text;
        string[] Answers = {};
        uint TalkTime;
        uint TalkStartTick;
        
        void SetDialogText(string msg)
        {
            auto panel = FindPanel("SpeechPanel");
            auto text  = panel.FindText( "SpeechText" );
            if(text != null)
            {
                text.SetText( msg );
            }
        }

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(640, 311);
            SetBackgroundImage("art/intrface/talk.png");
        }

        void OnShow(dict<string, any> params) override
        {
            TalkerIsNpc   = params[ "TalkerIsNpc" ];
            TalkerId      = params[ "TalkerId" ];
            Text          = params[ "Text" ];
            Answers       = SplitParams(params[ "Answers" ]);
            TalkTime      = params[ "TalkTime" ];
            TalkStartTick = Game.GetTick();
        }

        void OnHide() override
        {
             Game.HideScreen(CLIENT_SCREEN_BARTER);
        }
    };

    class DailogPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 121);
            SetSize(640, 190);
            SetBackgroundImage("art/intrface/talk_answ.png");
        }
    };

    class EndDialogTime : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(492, 59);
            SetSize(30, 10);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        void OnDraw() override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            string text;
            if( dialog.TalkTime > 0 )
            {
                uint curTick = Game.GetTick();
                uint endTick = dialog.TalkStartTick + dialog.TalkTime;
                text += curTick < endTick ? ( endTick - curTick ) / 1000 : 0;
            }
            
            SetText( text );
        }
    };

    class SpeechPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(142, 15);
            SetSize(350, 97);
            SetCropContent( true );
            SetAutoScroll(true, false);
        }
    };

    class SpeechText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(350, 97);
        }

        void OnShow(dict<string, any> params) override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            Text = dialog.Text;
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( dialog.Text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Parent.Width, Math::Max( th, Parent.Height ) );
            SetText( dialog.Text );
        }
    };

    class AnswersGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(127, 163);
            SetSize(390, 120);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype("AnswerText");
            SetPadding(0, 3);
        }

        void OnShow(dict<string, any> params) override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            ResizeGrid( dialog.Answers.length() );
        }
    };

    class AnswerText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(390, 10);
            SetTextFlags(FT_CENTERY);
        }

        void OnDraw() override
        {
            SetTextColor( IsHovered ? COLOR_WHITE : COLOR_GREEN );
        }

        void OnLMouseClick() override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            Game.CustomCall( "DialogAnswer " + dialog.TalkerIsNpc + " " + dialog.TalkerId + " " + CellIndex );
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            string text = Game.EncodeUtf8( TEXT_SYMBOL_DOT ) + dialog.Answers[ CellIndex ];
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
            SetText( text );
        }
    };

    class BarterButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(587, 157);
            SetSize(22, 21);
            SetPressedImage("art/intrface/big_red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            if( dialog.TalkerIsNpc && Game.GetCritter( dialog.TalkerId ) !is null && !Game.GetCritter( dialog.TalkerId ).IsNoBarter )
                Game.CustomCall( "DialogAnswer " + dialog.TalkerIsNpc + " " + dialog.TalkerId + " " + 0xF2 );
            else
                Screen.FindText( "SpeechText" ).SetText( MSG_GAME( MsgStr::StrBarterNoBarterMode ) );
        }
    };

    class BarterButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-26, -21);
            SetSize(78, 20);
            SetText(MSG_GAME( MsgStr::StrDialogBarter ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrDialogBarter ));
        }
    };

    class SayButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(589, 211);
            SetSize(22, 21);
            SetPressedImage("art/intrface/big_red_button_dn.png");
        }

        void OnLMouseClick() override
        {
             dict<string, any> dict = {};
             dict[ "TalkerIsNpc" ] = cast<Dialog>(Parent).TalkerIsNpc ? "1" : "0";
             dict[ "TalkerId" ] = "" + cast<Dialog>(Parent).TalkerId;
             dict[ "TalkStartTick" ] = "" + cast<Dialog>(Parent).TalkStartTick;
             dict["FromDialog"] = true;
             Game.ShowScreen( CLIENT_SCREEN_SAY, dict );
        }
    };

    class SayButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-27, -22);
            SetSize(78, 20);
            SetText(MSG_GAME( MsgStr::StrDialogSay ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrDialogSay ));
        }
    };

    class HistoryButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(12, 272);
            SetSize(51, 29);
            SetPressedImage("art/intrface/DI_REST2.png");
        }
    };

    class MoneyCountText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(8, 139);
            SetSize(60, 45);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return "$" + Game.GetChosen().CountItem( Content::Item::bottle_caps );
        }
    };

    Dialog CreateDialogHierarchy(Gui::Object parent)
    {
        Dialog obj = Dialog();
        CreateDailogPanelHierarchy(obj);
        CreateEndDialogTimeHierarchy(obj);
        CreateSpeechPanelHierarchy(obj);
        CreateAnswersGridHierarchy(obj);
        CreateBarterButtonHierarchy(obj);
        CreateSayButtonHierarchy(obj);
        CreateHistoryButtonHierarchy(obj);
        CreateMoneyCountTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DailogPanel CreateDailogPanelHierarchy(Gui::Object parent)
    {
        DailogPanel obj = DailogPanel();
        obj.Init(parent);
        return obj;
    }

    EndDialogTime CreateEndDialogTimeHierarchy(Gui::Object parent)
    {
        EndDialogTime obj = EndDialogTime();
        obj.Init(parent);
        return obj;
    }

    SpeechPanel CreateSpeechPanelHierarchy(Gui::Object parent)
    {
        SpeechPanel obj = SpeechPanel();
        CreateSpeechTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SpeechText CreateSpeechTextHierarchy(Gui::Object parent)
    {
        SpeechText obj = SpeechText();
        obj.Init(parent);
        return obj;
    }

    AnswersGrid CreateAnswersGridHierarchy(Gui::Object parent)
    {
        AnswersGrid obj = AnswersGrid();
        CreateAnswerTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    AnswerText CreateAnswerTextHierarchy(Gui::Object parent)
    {
        AnswerText obj = AnswerText();
        obj.Init(parent);
        return obj;
    }

    BarterButton CreateBarterButtonHierarchy(Gui::Object parent)
    {
        BarterButton obj = BarterButton();
        CreateBarterButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BarterButtonName CreateBarterButtonNameHierarchy(Gui::Object parent)
    {
        BarterButtonName obj = BarterButtonName();
        obj.Init(parent);
        return obj;
    }

    SayButton CreateSayButtonHierarchy(Gui::Object parent)
    {
        SayButton obj = SayButton();
        CreateSayButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SayButtonName CreateSayButtonNameHierarchy(Gui::Object parent)
    {
        SayButtonName obj = SayButtonName();
        obj.Init(parent);
        return obj;
    }

    HistoryButton CreateHistoryButtonHierarchy(Gui::Object parent)
    {
        HistoryButton obj = HistoryButton();
        obj.Init(parent);
        return obj;
    }

    MoneyCountText CreateMoneyCountTextHierarchy(Gui::Object parent)
    {
        MoneyCountText obj = MoneyCountText();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateDialogHierarchy(null);
    }
}

namespace Barter
{
    class Barter : Gui::Screen
    {
        ident CritterId;
        
        string GetItemsInfoStr( int collection )
        {
            uint weight = 0;
            uint volume = 0;
            uint cost   = 0;
            
            Item@[] @ items = ClientItems::RefreshItemsCollection( collection );
            for( uint i = 0; i < items.length(); i++ )
                cost += items[ i ].Cost * items[ i ].Count;
            
            return "$" + cost;
        }
        
        void SetDialogText(string msg)
        {
            auto panel = FindPanel("DiscPanel");
            auto text  = panel.FindText( "DescText" );
            if(text != null)
            {
                text.SetText( msg );
            }
        }

        void OnConstruct() override
        {
            SetModal(true);
            SetAvailableCursors(array< CursorType >  = {CursorType::Hand});
            SetCanMove(true, false);
            SetSize(640, 311);
            SetBackgroundImage("art/intrface/talk.png");
        }

        void OnShow(dict<string, any> params) override
        {
            CritterId = params[ "CritterId" ];
        }

        void OnHide() override
        {
            ClientItems::RefreshItemsCollection(ITEMS_INVENTORY);
        }
    };

    class DiscPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(142, 15);
            SetSize(365, 95);
            SetCropContent( true );
            SetAutoScroll(true, false);
        }
    };

    ////import string item_description0( Item& item, int lookType ) from "ClientMain";

    class DescText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(365, 95);
        }

        void OnDraw() override
        {
            //Gui::Object@ Gui::GetHoveredObject()
            Gui::Object@ obj = Gui::GetHoveredObject();
            if( obj is null || obj.Grid is null )
                return;
            
            Gui::ItemView@ itemView = cast< Gui::ItemView >( obj.Grid );
            if( itemView is null )
                return;
            
            Item@ item = itemView.GetItem( obj.CellIndex );
            if( item is null )
                return;
            
            string text = ClientMain::item_description( item, ItemLookTypes::Barter );
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
            SetText( text );
        }
    };

    class MainBarter : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 120);
            SetSize(640, 191);
            SetBackgroundImage("art/intrface/barter.png");
        }
    };

    class ChosenPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(320, 191);
        }
    };

    class ChosenPreview : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(23, 35);
            SetSize(50, 90);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }
    };

    class ChosenInv : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(105, 31);
            SetSize(70, 145);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype(".ImageChosen");
            SetGridSize(3);
            SetColumns(1);
            SetUserDataExt(ITEMS_BARTER);
            SetUseSorting(true);
        }

        Item[] OnGetItems() override
        {
            Item[] items = ClientItems::RefreshItemsCollection( UserDataExt );
            
            return items;
        }

        int OnCheckItem(Item item) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    };

    class ChosenInvScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(192, 55);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_up_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "ChosenInv" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    };

    class ChosenInvScrollDown : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(193, 81);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_dn_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "ChosenInv" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    };

    class ChosenOffer : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(241, 10);
            SetSize(70, 160);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype(".ImageChosen");
            SetGridSize(4);
            SetColumns(1);
            SetUserDataExt(ITEMS_BARTER_OFFER);
            SetUseSorting(true);
        }

        Item[] OnGetItems() override
        {
            Item[] items = ClientItems::RefreshItemsCollection( UserDataExt );
            Game.Log("refreshing items " + UserDataExt);
            return items;
        }

        int OnCheckItem(Item item) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    };

    class ChosenOfferScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(208, 111);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_up_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "ChosenOffer" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    };

    class ChosenOfferScrollDown : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(208, 135);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_dn_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "ChosenOffer" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    };

    class ImageChosen : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(105, 31);
            SetSize(70, 40);
            SetBackgroundImage("art/intrface/dummy.png", SpriteLayout::Zoom);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetDraggable( item !is null );
            hstring picInv;
            if( item !is null )
                picInv = item.PicInv;
            BackgroundImage.Load( picInv );
        }
    };

    class CountChosenOffer : Gui::Text
    {
        void OnConstruct() override
        {
            SetTextColor(COLOR_WHITE);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            uint count = 0;
            if( item !is null && item.Stackable )
                count = item.Count;
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    };

    class CostChosenOffer : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(241, 170);
            SetSize(70, 10);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_WHITE);
        }

        void OnDraw() override
        {
            SetText( cast< Barter >( Screen ).GetItemsInfoStr( ITEMS_BARTER_OFFER ) );
        }
    };

    class OtherPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(320, 0);
            SetSize(320, 191);
        }
    };

    class OtherPreview : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(247, 35);
            SetSize(50, 90);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }

        void OnShow(dict<string, any> params) override
        {
            auto@ preview = cast< GuiScreens::Preview::Preview >( GetChild( 0 ) );
            preview.PreviewCritterId = cast< Barter >( Screen ).CritterId;
        }
    };

    class OtherInv : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(144, 31);
            SetSize(70, 145);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype(".ImageOther");
            SetGridSize(3);
            SetColumns(1);
            SetUserDataExt(ITEMS_BARTER_OPPONENT);
            SetUseSorting(true);
        }

        Item[] OnGetItems() override
        {
            Item[] items = ClientItems::RefreshItemsCollection( UserDataExt );
            
            return items;
        }

        int OnCheckItem(Item item) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    };

    class OtherInvScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(104, 54);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_up_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "OtherInv" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    };

    class OtherInvScrollDown : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(104, 81);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_dn_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "OtherInv" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    };

    class OtherOffer : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetPosition(9, 10);
            SetSize(70, 160);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype(".ImageOther");
            SetGridSize(4);
            SetColumns(1);
            SetUserDataExt(ITEMS_BARTER_OPPONENT_OFFER);
            SetUseSorting(true);
        }

        Item[] OnGetItems() override
        {
            Item[] items = ClientItems::RefreshItemsCollection( UserDataExt );
            
            return items;
        }

        int OnCheckItem(Item item) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    };

    class OtherOfferScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(97, 111);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_up_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "OtherOffer" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    };

    class OtherOfferScrollDown : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(98, 135);
            SetSize(22, 23);
            SetPressedImage("art/intrface/inv_scr_dn_pressed.png");
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent.Find( "OtherOffer" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    };

    class ImageOther : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(144, 31);
            SetSize(70, 40);
            SetBackgroundImage("art/intrface/dummy.png", SpriteLayout::Zoom);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetDraggable( item !is null );
            hstring picInv;
            if( item !is null )
                picInv = item.PicInv;
            BackgroundImage.Load( picInv );
        }
    };

    class CountOtherInv : Gui::Text
    {
        void OnConstruct() override
        {
            SetTextColor(COLOR_WHITE);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            uint count = 0;
            if( item !is null && item.Stackable )
                count = item.Count;
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    };

    class CostOtherOffer : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(9, 170);
            SetSize(70, 10);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_WHITE);
        }

        void OnDraw() override
        {
            SetText( cast< Barter >( Screen ).GetItemsInfoStr( ITEMS_BARTER_OPPONENT_OFFER ) );
        }
    };

    class OfferButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(40, 163);
            SetSize(14, 14);
            SetPressedImage("art/intrface/BarterButton.png");
        }

        void OnLMouseClick() override
        {
            ClientItems::BarterOffer();
        }
    };

    class OfferButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(5, -21);
            SetText(MSG_GAME( MsgStr::StrBarterOffer ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrBarterOffer ));
        }
    };

    class CloseButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(585, 162);
            SetSize(14, 14);
            SetPressedImage("art/intrface/BarterButton.png");
        }

        void OnLMouseClick() override
        {
            Barter@ barter = cast< Barter >( Screen );
            Game.CustomCall( "DialogAnswer true " + barter.CritterId + " " + 0xF1 );
            Game.HideScreen();
        }
    };

    class CloseButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(5, -19);
            SetText(MSG_GAME( MsgStr::StrBarterTalk ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrBarterTalk ));
        }
    };

    Barter CreateBarterHierarchy(Gui::Object parent)
    {
        Barter obj = Barter();
        CreateDiscPanelHierarchy(obj);
        CreateMainBarterHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DiscPanel CreateDiscPanelHierarchy(Gui::Object parent)
    {
        DiscPanel obj = DiscPanel();
        CreateDescTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DescText CreateDescTextHierarchy(Gui::Object parent)
    {
        DescText obj = DescText();
        obj.Init(parent);
        return obj;
    }

    MainBarter CreateMainBarterHierarchy(Gui::Object parent)
    {
        MainBarter obj = MainBarter();
        CreateChosenPanelHierarchy(obj);
        CreateOtherPanelHierarchy(obj);
        CreateOfferButtonHierarchy(obj);
        CreateCloseButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChosenPanel CreateChosenPanelHierarchy(Gui::Object parent)
    {
        ChosenPanel obj = ChosenPanel();
        CreateChosenPreviewHierarchy(obj);
        CreateChosenInvHierarchy(obj);
        CreateChosenInvScrollUpHierarchy(obj);
        CreateChosenInvScrollDownHierarchy(obj);
        CreateChosenOfferHierarchy(obj);
        CreateChosenOfferScrollUpHierarchy(obj);
        CreateChosenOfferScrollDownHierarchy(obj);
        CreateImageChosenHierarchy(obj);
        CreateCostChosenOfferHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChosenPreview CreateChosenPreviewHierarchy(Gui::Object parent)
    {
        ChosenPreview obj = ChosenPreview();
        obj.Init(parent);
        return obj;
    }

    ChosenInv CreateChosenInvHierarchy(Gui::Object parent)
    {
        ChosenInv obj = ChosenInv();
        obj.Init(parent);
        return obj;
    }

    ChosenInvScrollUp CreateChosenInvScrollUpHierarchy(Gui::Object parent)
    {
        ChosenInvScrollUp obj = ChosenInvScrollUp();
        obj.Init(parent);
        return obj;
    }

    ChosenInvScrollDown CreateChosenInvScrollDownHierarchy(Gui::Object parent)
    {
        ChosenInvScrollDown obj = ChosenInvScrollDown();
        obj.Init(parent);
        return obj;
    }

    ChosenOffer CreateChosenOfferHierarchy(Gui::Object parent)
    {
        ChosenOffer obj = ChosenOffer();
        obj.Init(parent);
        return obj;
    }

    ChosenOfferScrollUp CreateChosenOfferScrollUpHierarchy(Gui::Object parent)
    {
        ChosenOfferScrollUp obj = ChosenOfferScrollUp();
        obj.Init(parent);
        return obj;
    }

    ChosenOfferScrollDown CreateChosenOfferScrollDownHierarchy(Gui::Object parent)
    {
        ChosenOfferScrollDown obj = ChosenOfferScrollDown();
        obj.Init(parent);
        return obj;
    }

    ImageChosen CreateImageChosenHierarchy(Gui::Object parent)
    {
        ImageChosen obj = ImageChosen();
        CreateCountChosenOfferHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CountChosenOffer CreateCountChosenOfferHierarchy(Gui::Object parent)
    {
        CountChosenOffer obj = CountChosenOffer();
        obj.Init(parent);
        return obj;
    }

    CostChosenOffer CreateCostChosenOfferHierarchy(Gui::Object parent)
    {
        CostChosenOffer obj = CostChosenOffer();
        obj.Init(parent);
        return obj;
    }

    OtherPanel CreateOtherPanelHierarchy(Gui::Object parent)
    {
        OtherPanel obj = OtherPanel();
        CreateOtherPreviewHierarchy(obj);
        CreateOtherInvHierarchy(obj);
        CreateOtherInvScrollUpHierarchy(obj);
        CreateOtherInvScrollDownHierarchy(obj);
        CreateOtherOfferHierarchy(obj);
        CreateOtherOfferScrollUpHierarchy(obj);
        CreateOtherOfferScrollDownHierarchy(obj);
        CreateImageOtherHierarchy(obj);
        CreateCostOtherOfferHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    OtherPreview CreateOtherPreviewHierarchy(Gui::Object parent)
    {
        OtherPreview obj = OtherPreview();
        obj.Init(parent);
        return obj;
    }

    OtherInv CreateOtherInvHierarchy(Gui::Object parent)
    {
        OtherInv obj = OtherInv();
        obj.Init(parent);
        return obj;
    }

    OtherInvScrollUp CreateOtherInvScrollUpHierarchy(Gui::Object parent)
    {
        OtherInvScrollUp obj = OtherInvScrollUp();
        obj.Init(parent);
        return obj;
    }

    OtherInvScrollDown CreateOtherInvScrollDownHierarchy(Gui::Object parent)
    {
        OtherInvScrollDown obj = OtherInvScrollDown();
        obj.Init(parent);
        return obj;
    }

    OtherOffer CreateOtherOfferHierarchy(Gui::Object parent)
    {
        OtherOffer obj = OtherOffer();
        obj.Init(parent);
        return obj;
    }

    OtherOfferScrollUp CreateOtherOfferScrollUpHierarchy(Gui::Object parent)
    {
        OtherOfferScrollUp obj = OtherOfferScrollUp();
        obj.Init(parent);
        return obj;
    }

    OtherOfferScrollDown CreateOtherOfferScrollDownHierarchy(Gui::Object parent)
    {
        OtherOfferScrollDown obj = OtherOfferScrollDown();
        obj.Init(parent);
        return obj;
    }

    ImageOther CreateImageOtherHierarchy(Gui::Object parent)
    {
        ImageOther obj = ImageOther();
        CreateCountOtherInvHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CountOtherInv CreateCountOtherInvHierarchy(Gui::Object parent)
    {
        CountOtherInv obj = CountOtherInv();
        obj.Init(parent);
        return obj;
    }

    CostOtherOffer CreateCostOtherOfferHierarchy(Gui::Object parent)
    {
        CostOtherOffer obj = CostOtherOffer();
        obj.Init(parent);
        return obj;
    }

    OfferButton CreateOfferButtonHierarchy(Gui::Object parent)
    {
        OfferButton obj = OfferButton();
        CreateOfferButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    OfferButtonName CreateOfferButtonNameHierarchy(Gui::Object parent)
    {
        OfferButtonName obj = OfferButtonName();
        obj.Init(parent);
        return obj;
    }

    CloseButton CreateCloseButtonHierarchy(Gui::Object parent)
    {
        CloseButton obj = CloseButton();
        CreateCloseButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CloseButtonName CreateCloseButtonNameHierarchy(Gui::Object parent)
    {
        CloseButtonName obj = CloseButtonName();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateBarterHierarchy(null);
    }
}

namespace PipBoy
{
    enum MenuMode
    {
        None,
        Status,
        Automaps,
        Archives,
        Text,
        MapPanel,
    }
    
    MenuMode CurMenu;
    DescText@ CurText;
    
    string FormatXX( int val )
    {
        return val < 10 ? "0" + val : "" + val;
    }

    class PipBoy : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(640, 480);
            SetBackgroundImage("art/intrface/PipBoy.png");
        }

        void OnShow(dict<string, any> params) override
        {
            CurMenu = GuiScreens::PipBoy::MenuMode::None;
        }
    };

    class ShowPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(250, 36);
            SetSize(360, 420);
        }

        void OnDraw() override
        {
            Find( "NonePanel" ).SetActive( CurMenu == GuiScreens::PipBoy::MenuMode::None );
            Find( "StatusPanel" ).SetActive( CurMenu == GuiScreens::PipBoy::MenuMode::Status );
            Find( "AutoMapsGrid" ).SetActive( CurMenu == GuiScreens::PipBoy::MenuMode::Automaps );
            Find( "ArchivesPanel" ).SetActive( CurMenu == GuiScreens::PipBoy::MenuMode::Archives );
            Find( "DescText" ).SetActive( CurMenu == GuiScreens::PipBoy::MenuMode::Text );
            Find( "DrawMapPanel" ).SetActive( CurMenu == GuiScreens::PipBoy::MenuMode::MapPanel );
        }
    };

    class NonePanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetPosition(75, 134);
            SetSize(204, 141);
            SetBackgroundImage("art/intrface/PipX.png");
        }
    };

    class StatusPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetSize(360, 420);
            SetCropContent( true );
            SetAutoScroll(true, false);
        }
    };

    class ReplicationStatus : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(360, 40);
        }
    };

    class ReplTitle : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetText(MSG_GAME( MsgStr::StrPipStatus ));
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipStatus ));
        }
    };

    class ReplMoneyName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(0, 10);
            SetSize(250, 10);
            SetText(MSG_GAME( MsgStr::StrPipReplicationMoney ));
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipReplicationMoney ));
        }
    };

    class ReplMoneyValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(250, 10);
            SetSize(110, 10);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return "";
            string text = MSG_GAME( MsgStr::StrPipReplicationMoneyVal );
            text        = Game.ReplaceText( text, "%d", chosen.ReplicationMoney );
            return text;
        }
    };

    class ReplCostName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(0, 20);
            SetSize(250, 10);
            SetText(MSG_GAME( MsgStr::StrPipReplicationCost ));
            SetTextFlags(FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipReplicationCost ));
        }
    };

    class ReplCostcValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(250, 20);
            SetSize(110, 10);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return "";
            string text = MSG_GAME( MsgStr::StrPipReplicationCostVal );
            text        = Game.ReplaceText( text, "%d", chosen.ReplicationCost );
            return text;
        }
    };

    class ReplCountName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(0, 30);
            SetSize(250, 10);
            SetText(MSG_GAME( MsgStr::StrPipReplicationCount ));
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipReplicationCount ));
        }
    };

    class ReplCountValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(250, 30);
            SetSize(110, 10);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return "";
            string text = MSG_GAME( MsgStr::StrPipReplicationCountVal );
            text        = Game.ReplaceText( text, "%d", chosen.ReplicationCount );
            return text;
        }
    };

    class TimepoutStatus : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 40);
            SetSize(360, 110);
        }
    };

    class TimeoutTitle : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetText(MSG_GAME( MsgStr::StrPipTimeouts ));
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipTimeouts ));
        }
    };

    class TimeoutsGrid : Gui::Grid
    {
        CritterProperty[] Timeouts = {  CritterProperty::TimeoutReplication,
                                        CritterProperty::TimeoutSneak, CritterProperty::TimeoutKarmaVoting, CritterProperty::TimeoutRemoveFromGame,
                                        CritterProperty::TimeoutBattle, CritterProperty::TimeoutSkSteal, CritterProperty::TimeoutSkLockpick,          
                                        CritterProperty::TimeoutSkScience, CritterProperty::TimeoutSkRepair, CritterProperty::TimeoutSkDoctor, CritterProperty::TimeoutSkFirstAid };

        void OnConstruct() override
        {
            SetPosition(0, 10);
            SetSize(360, 100);
            SetCellPrototype("TimeoutsGridProto");
            SetGridSize(Timeouts.length());
            SetColumns(1);
        }
    };

    class TimeoutsGridProto : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
        }
    };

    class TimeoutName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(250, 10);
            SetTextFlags(FT_CENTERY);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            CritterProperty prop = cast< TimeoutsGrid >( Grid ).Timeouts[ cellIndex ];
            SetText( MSG_GAME( STR_PARAM_NAME( prop ) ) );
        }
    };

    class TimeoutValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(250, 0);
            SetSize(110, 10);
            SetTextFlags(FT_CENTERY);
        }

        string get_Text() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return "";
            string text          = MSG_GAME( MsgStr::StrTimeoutSeconds );
            CritterProperty prop = cast< TimeoutsGrid >( Grid ).Timeouts[ CellIndex ];
            int timeout          = (chosen.GetAsInt( prop ) - Game.GetFullSecond())/Settings.TimeMultiplier;
            timeout              = timeout > 0 ? timeout : 0;
            text                 = Game.ReplaceText( text, "%d", timeout );
            return text;
            
        }
    };

    class QuestStatus : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 150);
            SetSize(360, 20);
        }
    };

    class QuestTitle : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetText(MSG_GAME( MsgStr::StrPipQuests ));
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipQuests ));
        }
    };

    class QuestGrid : Gui::Grid
    {
        string[] CityQuest = {};
        
        void FindCityQuest()
        {
            CityQuest.clear();
            
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
        
            for( uint i = 0; i < CritterPropertyGroup::Quests.length(); i++ )
            {
                CritterProperty quest = CritterPropertyGroup::Quests[ i ];
                if( chosen.GetAsInt( quest ) == 0 )
                    continue;
                string questName = MSG_QUEST( STR_QUEST_NAME( quest ) );
                if( !CityQuest.exists( questName ) )
                    CityQuest.insertLast( questName );
            }
        }

        void OnConstruct() override
        {
            SetPosition(0, 10);
            SetSize(360, 10);
            SetCellPrototype("QuestCityName");
            SetColumns(1);
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                FindCityQuest();
                ResizeGrid( CityQuest.length() );
            }
        }
    };

    class QuestCityName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetTextFlags(FT_CENTERY);
        }

        void OnLMouseClick() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            
            string result; 
            uint   count = 1;
            string cityQuest = cast< QuestGrid >( Grid ).CityQuest[ CellIndex ];
            for( uint i = 0; i < CritterPropertyGroup::Quests.length(); i++ )
            {
                CritterProperty quest = CritterPropertyGroup::Quests[ i ];
                if( chosen.GetAsInt( quest ) == 0 )
                    continue;
                string questName = MSG_QUEST( STR_QUEST_NAME( quest ) );
                if( questName != cityQuest )
                    continue;
              
                result += Game.ReplaceText( MSG_QUEST( MsgStr::StrQuestNumber ), "%d", "" + count );
                result += MSG_QUEST( STR_QUEST_DESC( quest ) ) +"\n";
                result += MSG_QUEST( MsgStr::StrQuestProcess );
                result += MSG_QUEST( STR_QUEST_STATUS( quest, chosen.GetAsInt( quest ) ) ) + "\n\n";
                count++;
            }
            CurMenu      = GuiScreens::PipBoy::MenuMode::Text;
            CurText.SetTextFlags( 0 );
            CurText.Text = result;
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            SetText( cast< QuestGrid >( Grid ).CityQuest[ cellIndex ] );
        }
    };

    class ScoresTitle : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(0, 170);
            SetSize(360, 10);
            SetText(MSG_GAME( MsgStr::StrPipScores ));
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipScores ));
        }

        void OnLMouseClick() override
        {
            string result;
            
            auto score = Game.BestScores;
            for( uint i = 0; i < score.length(); i++ )
            {
                if( score[ i ] == "" )
                    continue;
                if( IS_MSG_GAME( STR_SCORES_TITLE( i ) ) )
                    result += MSG_GAME( STR_SCORES_TITLE( i ) ) + "\n\n";
                    
                if( IS_MSG_GAME( STR_SCORES_NAME( i ) ) )
                {
                    result += MSG_GAME( STR_SCORES_NAME( i ) ) + "\n";
                    result += score[ i ] + "\n\n";
                }
            }
            CurText.SetTextFlags( FT_CENTERX );
            CurMenu      = GuiScreens::PipBoy::MenuMode::Text;
            CurText.Text = result;
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                Gui::Object@ obj = Parent.Find( "QuestStatus" );
                int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;
                obj.GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, true );
                SetPosition( PosX, obj.PosY + wholeHeight );
            }
        }
    };

    class ShowMaps
    {
        hstring  ProtoId;
        int8 MapIndex;
        
        ShowMaps( hstring protoId, int8 mapIndex )
        {
            ProtoId  = protoId;
            MapIndex = mapIndex;
        } 
        
    }

    class AutoMapsGrid : Gui::Grid
    {
        ShowMaps[] CurShowMaps = {};
        
        void InitAutoMaps()
        {   
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            
            hstring[] pids = array<hstring> ( chosen.KnownLocProtoId );
            CurShowMaps.clear();
            for( uint i = 0; i < pids.length(); i++ )
            {
                hstring locPid = pids[ i ];
                CurShowMaps.insertLast( ShowMaps( locPid, -1 ) );
                uint j = 0;
                while( IS_MSG_LOCATION( STR_LOC_MAP_NAME( locPid, j ) ) )
                {
                    CurShowMaps.insertLast( ShowMaps( locPid, j ) );
                    j++;
                }
            }
        }

        void OnConstruct() override
        {
            SetActive(false);
            SetSize(360, 420);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype("AutoMapsText");
            SetColumns(1);
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                InitAutoMaps();
                ResizeGrid( CurShowMaps.length() );
            }
        }
    };

    class AutoMapsText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        void OnLMouseClick() override
        {
            ShowMaps@ showMaps = cast< AutoMapsGrid >( Grid ).CurShowMaps[ CellIndex ];
            if( showMaps.MapIndex != -1 )
            {
                CurMenu        = GuiScreens::PipBoy::MenuMode::MapPanel;
                auto map       = cast< DrawMapPanel >( Screen.Find( "DrawMapPanel" ) );
                map.LocProtoId = showMaps.ProtoId;
                map.MapIndex   = showMaps.MapIndex;
            }
            else
            {
                CurText.SetTextFlags( 0 );
                CurText.Text = MSG_LOCATION( STR_LOC_INFO( showMaps.ProtoId ) );
                CurMenu      = GuiScreens::PipBoy::MenuMode::Text;
            }
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            ShowMaps@ showMaps = cast< AutoMapsGrid >( Grid ).CurShowMaps[ cellIndex ];
            string result;
            if( showMaps.MapIndex == -1 )
                result = MSG_LOCATION( STR_LOC_NAME( showMaps.ProtoId ) );
            else
                result = MSG_LOCATION( STR_LOC_MAP_NAME( showMaps.ProtoId, showMaps.MapIndex ) );
            SetText( result );
        }
    };

    class ArchivesPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(360, 420);
            SetCropContent( true );
            SetAutoScroll(true, false);
        }
    };

    class ArchivesTitle : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetText(MSG_GAME( MsgStr::StrPipInfo ));
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPipInfo ));
        }
    };

    class ArchivesGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(0, 10);
            SetSize(360, 10);
            SetCellPrototype("ArchivesText");
            SetGridSize(0);
            SetColumns(1);
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                Critter@ chosen = Game.GetChosen();
                if( chosen !is null )
                    ResizeGrid( chosen.HoloInfo.length() );
            }
        }
    };

    class ArchivesText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(360, 10);
            SetTextFlags(FT_CENTERY);
        }

        void OnLMouseClick() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            CurText.SetTextFlags( 0 );
            CurText.Text = MSG_HOLO( STR_HOLO_INFO_DESC( chosen.HoloInfo[ CellIndex ] ) );
            CurMenu      = GuiScreens::PipBoy::MenuMode::Text;
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            string text = MSG_HOLO( STR_HOLO_INFO_NAME( chosen.HoloInfo[ cellIndex ] ) );
            SetText( text );
        }
    };

    class DescText : Gui::Text
    {
        int Scroll;
        uint CurFontFlags;

        void OnConstruct() override
        {
            SetActive(false);
            SetSize(360, 420);
        }

        void OnInit() override
        {
            @CurText = this;
        }

        void OnMouseClick(MouseButton button) override
        {
            if( button == MouseButton::WheelUp && Scroll > 0 )
                Scroll--;
            else if( button == MouseButton::WheelDown )
                Scroll++;
            SetTextFlags( FT_SKIPLINES( Scroll ) | CurFontFlags );
        }

        void OnActiveChanged() override
        {
            CurFontFlags = TextFlags;
            Scroll       = 0;
        }
    };

    class DrawMapPanel : Gui::Panel
    {
        hstring LocProtoId;
        uint8 MapIndex;

        void OnConstruct() override
        {
            SetActive(false);
            SetSize(360, 420);
        }

        void OnDraw() override
        {
            //CustumCall( "DrawMap_" + PosX + "_" + PosY + "_" + Width + "_" + Height + "_" + LocProtoId + "_" + MapIndex );
        }
    };

    class TimePanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(20, 12);
            SetSize(185, 23);
        }
    };

    class DayText : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(23, 23);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_BOTTOM);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( Game.Day );
        }
    };

    class MonthText : Gui::Text
    {
        string[] CodeMonth = { "", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k" };

        void OnConstruct() override
        {
            SetPosition(23, 0);
            SetSize(33, 23);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_BOTTOM);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return CodeMonth[ Game.Month ];
        }
    };

    class YearText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(63, 0);
            SetSize(40, 23);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_BOTTOM);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return "" + Game.Year;
        }
    };

    class TimeText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(136, 0);
            SetSize(48, 23);
            SetTextFont(Fonts::Num);
            SetTextFlags(FT_CENTERX | FT_BOTTOM);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            return FormatXX( Game.Hour ) + FormatXX( Game.Minute );
        }
    };

    class ButtonsPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(53, 338);
        }
    };

    class StatusButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(0, 1);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CurMenu = GuiScreens::PipBoy::MenuMode::Status;
        }
    };

    class AutomapsButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(1, 55);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CurMenu = GuiScreens::PipBoy::MenuMode::Automaps;
        }
    };

    class ArchivesButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(0, 84);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            CurMenu = GuiScreens::PipBoy::MenuMode::Archives;
        }
    };

    class ClosButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(1, 110);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    PipBoy CreatePipBoyHierarchy(Gui::Object parent)
    {
        PipBoy obj = PipBoy();
        CreateShowPanelHierarchy(obj);
        CreateTimePanelHierarchy(obj);
        CreateButtonsPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ShowPanel CreateShowPanelHierarchy(Gui::Object parent)
    {
        ShowPanel obj = ShowPanel();
        CreateNonePanelHierarchy(obj);
        CreateStatusPanelHierarchy(obj);
        CreateAutoMapsGridHierarchy(obj);
        CreateArchivesPanelHierarchy(obj);
        CreateDescTextHierarchy(obj);
        CreateDrawMapPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    NonePanel CreateNonePanelHierarchy(Gui::Object parent)
    {
        NonePanel obj = NonePanel();
        obj.Init(parent);
        return obj;
    }

    StatusPanel CreateStatusPanelHierarchy(Gui::Object parent)
    {
        StatusPanel obj = StatusPanel();
        CreateReplicationStatusHierarchy(obj);
        CreateTimepoutStatusHierarchy(obj);
        CreateQuestStatusHierarchy(obj);
        CreateScoresTitleHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ReplicationStatus CreateReplicationStatusHierarchy(Gui::Object parent)
    {
        ReplicationStatus obj = ReplicationStatus();
        CreateReplTitleHierarchy(obj);
        CreateReplMoneyNameHierarchy(obj);
        CreateReplMoneyValueHierarchy(obj);
        CreateReplCostNameHierarchy(obj);
        CreateReplCostcValueHierarchy(obj);
        CreateReplCountNameHierarchy(obj);
        CreateReplCountValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ReplTitle CreateReplTitleHierarchy(Gui::Object parent)
    {
        ReplTitle obj = ReplTitle();
        obj.Init(parent);
        return obj;
    }

    ReplMoneyName CreateReplMoneyNameHierarchy(Gui::Object parent)
    {
        ReplMoneyName obj = ReplMoneyName();
        obj.Init(parent);
        return obj;
    }

    ReplMoneyValue CreateReplMoneyValueHierarchy(Gui::Object parent)
    {
        ReplMoneyValue obj = ReplMoneyValue();
        obj.Init(parent);
        return obj;
    }

    ReplCostName CreateReplCostNameHierarchy(Gui::Object parent)
    {
        ReplCostName obj = ReplCostName();
        obj.Init(parent);
        return obj;
    }

    ReplCostcValue CreateReplCostcValueHierarchy(Gui::Object parent)
    {
        ReplCostcValue obj = ReplCostcValue();
        obj.Init(parent);
        return obj;
    }

    ReplCountName CreateReplCountNameHierarchy(Gui::Object parent)
    {
        ReplCountName obj = ReplCountName();
        obj.Init(parent);
        return obj;
    }

    ReplCountValue CreateReplCountValueHierarchy(Gui::Object parent)
    {
        ReplCountValue obj = ReplCountValue();
        obj.Init(parent);
        return obj;
    }

    TimepoutStatus CreateTimepoutStatusHierarchy(Gui::Object parent)
    {
        TimepoutStatus obj = TimepoutStatus();
        CreateTimeoutTitleHierarchy(obj);
        CreateTimeoutsGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TimeoutTitle CreateTimeoutTitleHierarchy(Gui::Object parent)
    {
        TimeoutTitle obj = TimeoutTitle();
        obj.Init(parent);
        return obj;
    }

    TimeoutsGrid CreateTimeoutsGridHierarchy(Gui::Object parent)
    {
        TimeoutsGrid obj = TimeoutsGrid();
        CreateTimeoutsGridProtoHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TimeoutsGridProto CreateTimeoutsGridProtoHierarchy(Gui::Object parent)
    {
        TimeoutsGridProto obj = TimeoutsGridProto();
        CreateTimeoutNameHierarchy(obj);
        CreateTimeoutValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TimeoutName CreateTimeoutNameHierarchy(Gui::Object parent)
    {
        TimeoutName obj = TimeoutName();
        obj.Init(parent);
        return obj;
    }

    TimeoutValue CreateTimeoutValueHierarchy(Gui::Object parent)
    {
        TimeoutValue obj = TimeoutValue();
        obj.Init(parent);
        return obj;
    }

    QuestStatus CreateQuestStatusHierarchy(Gui::Object parent)
    {
        QuestStatus obj = QuestStatus();
        CreateQuestTitleHierarchy(obj);
        CreateQuestGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    QuestTitle CreateQuestTitleHierarchy(Gui::Object parent)
    {
        QuestTitle obj = QuestTitle();
        obj.Init(parent);
        return obj;
    }

    QuestGrid CreateQuestGridHierarchy(Gui::Object parent)
    {
        QuestGrid obj = QuestGrid();
        CreateQuestCityNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    QuestCityName CreateQuestCityNameHierarchy(Gui::Object parent)
    {
        QuestCityName obj = QuestCityName();
        obj.Init(parent);
        return obj;
    }

    ScoresTitle CreateScoresTitleHierarchy(Gui::Object parent)
    {
        ScoresTitle obj = ScoresTitle();
        obj.Init(parent);
        return obj;
    }

    AutoMapsGrid CreateAutoMapsGridHierarchy(Gui::Object parent)
    {
        AutoMapsGrid obj = AutoMapsGrid();
        CreateAutoMapsTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    AutoMapsText CreateAutoMapsTextHierarchy(Gui::Object parent)
    {
        AutoMapsText obj = AutoMapsText();
        obj.Init(parent);
        return obj;
    }

    ArchivesPanel CreateArchivesPanelHierarchy(Gui::Object parent)
    {
        ArchivesPanel obj = ArchivesPanel();
        CreateArchivesTitleHierarchy(obj);
        CreateArchivesGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ArchivesTitle CreateArchivesTitleHierarchy(Gui::Object parent)
    {
        ArchivesTitle obj = ArchivesTitle();
        obj.Init(parent);
        return obj;
    }

    ArchivesGrid CreateArchivesGridHierarchy(Gui::Object parent)
    {
        ArchivesGrid obj = ArchivesGrid();
        CreateArchivesTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ArchivesText CreateArchivesTextHierarchy(Gui::Object parent)
    {
        ArchivesText obj = ArchivesText();
        obj.Init(parent);
        return obj;
    }

    DescText CreateDescTextHierarchy(Gui::Object parent)
    {
        DescText obj = DescText();
        obj.Init(parent);
        return obj;
    }

    DrawMapPanel CreateDrawMapPanelHierarchy(Gui::Object parent)
    {
        DrawMapPanel obj = DrawMapPanel();
        obj.Init(parent);
        return obj;
    }

    TimePanel CreateTimePanelHierarchy(Gui::Object parent)
    {
        TimePanel obj = TimePanel();
        CreateDayTextHierarchy(obj);
        CreateMonthTextHierarchy(obj);
        CreateYearTextHierarchy(obj);
        CreateTimeTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DayText CreateDayTextHierarchy(Gui::Object parent)
    {
        DayText obj = DayText();
        obj.Init(parent);
        return obj;
    }

    MonthText CreateMonthTextHierarchy(Gui::Object parent)
    {
        MonthText obj = MonthText();
        obj.Init(parent);
        return obj;
    }

    YearText CreateYearTextHierarchy(Gui::Object parent)
    {
        YearText obj = YearText();
        obj.Init(parent);
        return obj;
    }

    TimeText CreateTimeTextHierarchy(Gui::Object parent)
    {
        TimeText obj = TimeText();
        obj.Init(parent);
        return obj;
    }

    ButtonsPanel CreateButtonsPanelHierarchy(Gui::Object parent)
    {
        ButtonsPanel obj = ButtonsPanel();
        CreateStatusButtonHierarchy(obj);
        CreateAutomapsButtonHierarchy(obj);
        CreateArchivesButtonHierarchy(obj);
        CreateClosButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    StatusButton CreateStatusButtonHierarchy(Gui::Object parent)
    {
        StatusButton obj = StatusButton();
        obj.Init(parent);
        return obj;
    }

    AutomapsButton CreateAutomapsButtonHierarchy(Gui::Object parent)
    {
        AutomapsButton obj = AutomapsButton();
        obj.Init(parent);
        return obj;
    }

    ArchivesButton CreateArchivesButtonHierarchy(Gui::Object parent)
    {
        ArchivesButton obj = ArchivesButton();
        obj.Init(parent);
        return obj;
    }

    ClosButton CreateClosButtonHierarchy(Gui::Object parent)
    {
        ClosButton obj = ClosButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreatePipBoyHierarchy(null);
    }
}

namespace FixBoy
{
    enum NumMenu
    {
        MenuList,
        MenuCraft,
        MenuDesc,
    }
    
    class CCraft
    {
        uint Id;
        int[] OutItems = {};
        bool IsCanCraft;
        
        CCraft( uint id, int[] items, bool isCanCraft )
        {
            Id         = id;
            OutItems   = items;
            IsCanCraft = isCanCraft;
        }
    };
    
    void SetPositionOnWhoileSize( Gui::Object@ parent )
    {
        uint x = 0, y = 0;
        for( uint i = 0; i < parent.ChildCount; i++ )
        {
            Gui::Object@ curObj = parent.GetChild( i );
            if( cast< Gui::Grid >( curObj ) is null )
                SetPositionOnWhoileSize( curObj );
            if( i == 0 )
            {
                x = curObj.PosX;
                y = curObj.PosY;
                continue;
            }
            Gui::Object@ preObj = parent.GetChild( i - 1 );
            int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;
            preObj.GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, false );
            y += wholeHeight;
            curObj.SetPosition( curObj.PosX, y );
        }
    }
    
    void ChangeChildActive( Gui::Object@ obj, string name )
    {
        for( uint i = 0; i < obj.ChildCount; i++ )
            obj.GetChild( i ).SetActive( false );
        if( !name.isEmpty() )
            obj.Find( name ).SetActive( true );
    }

    class FixBoy : Gui::Screen
    {
        NumMenu Menu;
        
        CCraft[] CraftList = {};
        CCraft@ CraftItem;
        int StrNum;
        
        int[] OutItems = {};
        int[] NeedResources = {};
        int[] NeedTools = {};
        int[] NeedParams = {};
        
        void SetMenu( NumMenu menu )
        {
            if( menu == Menu )
                return;
            Menu = menu;
            
            switch( Menu )
            {
                case GuiScreens::FixBoy::NumMenu::MenuDesc:
                ChangeChildActive( Find( "Panel1" ), "MessageText" );
                break;
                
                case GuiScreens::FixBoy::NumMenu::MenuList:
                ChangeChildActive( Find( "Panel1" ), "ShowCraftItemGrid" );
                break;
                
                case GuiScreens::FixBoy::NumMenu::MenuCraft:
                ChangeChildActive( Find( "Panel1" ), "ShowCraftParamPanel" );
                SetPositionOnWhoileSize( Find( "ShowCraftParamPanel" ) );
                break;
                
                default:
                break;
            }
            
                    
        }

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(640, 480);
            SetBackgroundImage("art/intrface/fixboy.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( params is null )
            {
                CurPlayer.ServerCall.Rpc_CraftItem( Tla::FixboyList, 0, 0 );
                SetMenu( GuiScreens::FixBoy::NumMenu::MenuDesc );
            }
            else
            {
                StrNum = params[ "StrNum" ];
                if( StrNum != 0 )
                {
                    SetMenu( GuiScreens::FixBoy::NumMenu::MenuDesc );
                    return;
                }
                
                uint craftId = params[ "CraftId" ];
                if( craftId == 0 )
                {
                    int[] data = {}; // Todo: restore fixboy cast<array< int >>( params[ "Data" ] );
                    CraftList.clear();
                    uint index = 0;
                    while( index + 5 < data.length() )
                    {
                        uint id         = data[ index++ ];
                        bool isCanCraft = data[ index++ ] == 1;
                        uint len        = data[ index++];
                        int[] outItems = array<int>( len );
                        for( uint i = 0; i < len; i++ )
                            outItems[ i ] = data[ index++ ];
                        CraftList.insertLast( CCraft( id, outItems, isCanCraft ) );
                       
                    }
                    SetMenu( GuiScreens::FixBoy::NumMenu::MenuList );
                }
                else
                {
                    Game.Log("Crafft id!");
                    uint index = 0;
                    int[] data = {}; //cast<array< int >>( params[ "Data" ] );
                    if( data.length() == 0 )
                        return;
                    
                    uint length = index + data[ index++ ];
                    NeedResources.clear();
                    while( index < length )
                        NeedResources.insertLast( data[ index++ ] );
                    
                    length = index + data[ index++ ];
                    NeedTools.clear();
                    while( index < length )
                        NeedTools.insertLast( data[ index++ ] );
                    
                    length = index + data[ index++ ];
                    NeedParams.clear();
                    while( index < length )
                        NeedParams.insertLast( data[ index++ ] );
                    
                    SetMenu( GuiScreens::FixBoy::NumMenu::MenuCraft );
                }
            }
        }
    };

    class Panel1 : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(85, 70);
            SetSize(340, 350);
        }
    };

    class MessageText : Gui::Text
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetSize(340, 350);
            SetTextFlags(FT_CENTERX);
        }

        void OnActiveChanged() override
        {
            if( !Active )
            {
                SetText( "" );
                return;
            }
            auto fix = cast< FixBoy >( Screen );
            if( fix.StrNum == 0 )
                SetText( "" );
            else
                SetText( MSG_GAME( fix.StrNum ) );
        }
    };

    class ShowCraftItemGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetSize(340, 350);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype("CraftItemName");
            SetGridSize(0);
            SetColumns(1);
        }

        void OnShow(dict<string, any> params) override
        {
            CCraft[] @craft = cast< FixBoy >( Screen ).CraftList;
            ResizeGrid( craft.length() );
        }
    };

    class CraftItemName : Gui::Text
    {
        CCraft@ ItemCraft;

        void OnConstruct() override
        {
            SetSize(340, 10);
            SetTextFlags(FT_CENTERY);
        }

        void OnLMouseClick() override
        {
            @cast< FixBoy >( Screen ).CraftItem  = ItemCraft;
            CurPlayer.ServerCall.Rpc_CraftItem( Tla::FixboyList, ItemCraft.Id, 0 );
        }

        void OnHoverChanged() override
        {
            SetTextColor( IsHovered ? COLOR_GREEN : ItemCraft.IsCanCraft ? COLOR_TEXT : COLOR_RED );
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            
            @ItemCraft = @cast< FixBoy >( Screen ).CraftList[ cellIndex ];
            int[] @outItems = ItemCraft.OutItems;
            
            uint i = 0;
            string result;
            while( i < outItems.length() )
            {
                if( i != 0 )
                    result += MSG_GAME( MsgStr::StrAnd );
                
                string text = MSG_GAME( MsgStr::StrFixPieces );
                string name = MSG_ITEM( ITEMSTR( hstring_fromHash(outItems[ i++ ]), 1 ) );
                text        = Game.ReplaceText( text, "%NAME", name );
                text        = Game.ReplaceText( text, "%COUNT", outItems[ i++ ] );
                result += text;
            }
            
            SetText( result );
            SetTextColor( ItemCraft.IsCanCraft ? COLOR_TEXT : COLOR_RED );
        }
    };

    class ShowCraftParamPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetSize(340, 350);
            SetCropContent( true );
            SetAutoScroll(true, false);
        }
    };

    class MainCraftItem : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(340, 110);
        }
    };

    class TitleCraftItem : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(340, 10);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            int[] @outItems = cast< FixBoy >( Screen ).CraftItem.OutItems;
            uint i = 0;
            string result;
            
            while( i < outItems.length() )
            {
                if( i != 0 )
                    result += MSG_GAME( MsgStr::StrAnd );
                    
                string text = MSG_GAME( MsgStr::StrFixPieces );
                string name = MSG_ITEM( ITEMSTR( hstring_fromHash(outItems[ i++ ]), 1 ) );
                text        = Game.ReplaceText( text, "%NAME", name );
                text        = Game.ReplaceText( text, "%COUNT", outItems[ i++ ] );
                result += text;
            }
            SetText( result );
        }
    };

    class ImageCraftItemGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetCellPrototype("ImageCraftItem");
            SetGridSize(0);
            SetColumns(8);
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            int[] @outItems = cast< FixBoy >( Screen ).CraftItem.OutItems;
            ResizeGrid( outItems.length() / 2 );
        }
    };

    class ImageCraftItem : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(145, 10);
            SetSize(50, 50);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            int[] @outItems = cast< FixBoy >( Screen ).CraftItem.OutItems;
            ProtoItem item = Game.GetProtoItem( hstring_fromHash(outItems[ 2 * cellIndex ]) );
            if( item !is null )
                SetBackgroundImage( item.PicInv, SpriteLayout::Zoom );
        }
    };

    class DescCraftItem : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(0, 60);
            SetSize(340, 50);
            SetTextFlags(FT_CENTERX);
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            auto fixBoy = cast< FixBoy >( Screen );
            string text = MSG_GAME( hstring( "CraftItem" ).hash + fixBoy.CraftItem.Id );
            int tw      = 0, th = 0, lines = 0;
            Game.GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
            SetText( text );
        }
    };

    class NeedParamsMain : Gui::Text
    {
        void ChangedTargetItem()
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
                return;
            auto fixBoy   = cast< FixBoy >( Screen );
            
            string result = MSG_GAME( MsgStr::StrFixParams ) + "\n";
            int[]@ needParams = cast< FixBoy >( Screen ).NeedParams;
            uint index = 0;
            while( index < needParams.length() )
            {
                CritterProperty prop = CritterProperty( needParams[ index++ ] );
                string text          = MSG_GAME( MsgStr::StrFixYouhave );
                text                 = Game.ReplaceText( text, "%NAME", MSG_GAME( STR_PARAM_NAME( prop ) ) );
                text                 = Game.ReplaceText( text, "%VALUE1", needParams[ index++ ] );
                text                 = Game.ReplaceText( text, "%VALUE2", chosen.GetAsInt( prop ) );
                result += text + "\n";
            }
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( result, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetText( result );
            SetSize( Width, th );
        }

        void OnConstruct() override
        {
            SetPosition(0, 110);
            SetSize(340, 15);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    };

    class NeedToolsMain : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 125);
            SetSize(340, 65);
        }
    };

    class NeedToolsName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(340, 15);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            int[]@ needTools = cast< FixBoy >( Screen ).NeedTools;
            string text = MSG_GAME( MsgStr::StrFixTools ) +"\n";
            uint index  = 0;
            while( index < needTools.length() )
            {
                if( index != 0 )
                    text += needTools[ index + 2 ] == 1 ? "или " : "и ";
                text += MSG_ITEM( ITEMSTR( hstring_fromHash(needTools[ index ]), 1 ) );
                text += ", " + needTools[ index + 1 ] + "\n";
                index += 3;
            }
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetText( text );
            SetSize( Width, th );
        }
    };

    class NeedToolsImage : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(0, 15);
            SetSize(340, 50);
            SetCellPrototype("ToolImage");
            SetColumns(8);
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            ResizeGrid( cast< FixBoy >( Screen ).NeedTools.length() / 3 );
                
            int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;
            GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, true );
            uint scroll = ( Parent.Width - wholeWidth ) / 2;
            SetPosition( scroll, PosY );
        }
    };

    class ToolImage : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(50, 50);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            hstring pid = hstring_fromHash(cast< FixBoy >( Screen ).NeedTools[ 3 * cellIndex ]);
            ProtoItem item = Game.GetProtoItem( pid ); 
            if( item !is null )
                SetBackgroundImage( item.PicInv, SpriteLayout::Zoom );
        }
    };

    class NeedItemsMain : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 190);
            SetSize(340, 65);
        }
    };

    class NeedItemsName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(340, 15);
            SetText(MSG_GAME( MsgStr::StrFixItems ));
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrFixItems ));
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            string text = MSG_GAME( MsgStr::StrFixTools ) +"\n";
            int[]@ needTools = @cast< FixBoy >( Screen ).NeedResources;
            uint index = 0;
            while( index < needTools.length() )
            {
                if( index != 0 )
                    text += needTools[ index + 2 ] == 1 ? "или " : "и ";
                text += MSG_ITEM( ITEMSTR( hstring_fromHash(needTools[ index ]), 1 ) );
                text += ", " + needTools[ index + 1 ] + "\n";
                index += 3;
            }
            int tw = 0, th = 0, lines = 0;
            Game.GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetText( text );
            SetSize( Width, th + 5 );
        }
    };

    class NeedItemsImage : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(0, 15);
            SetSize(340, 50);
            SetCellPrototype("NeedItemImage");
            SetColumns(8);
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            ResizeGrid( cast< FixBoy >( Screen ).NeedResources.length() / 3 );
            int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;   
            GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, true );
            uint scroll = ( Parent.Width - wholeWidth ) / 2;
            SetPosition( scroll, PosY );
        }
    };

    class NeedItemImage : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(50, 50);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            hstring pid = hstring_fromHash(cast< FixBoy >( Screen ).NeedResources[ 3 * cellIndex ]);
            ProtoItem item = Game.GetProtoItem( pid ); 
            if( item !is null )
                SetBackgroundImage( item.PicInv, SpriteLayout::Zoom );
        }
    };

    class ListDecButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(477, 154);
            SetSize(35, 35);
            SetPressedImage("art/intrface/fixboy_scrup.png");
        }

        void OnLMouseClick() override
        {
            Gui::Panel@ panel;
            auto fix = cast< FixBoy >( Screen );
            if( fix.Menu == GuiScreens::FixBoy::NumMenu::MenuList )
                @panel = Screen.FindPanel( "ShowCraftItemGrid" );
            else if( fix.Menu == GuiScreens::FixBoy::NumMenu::MenuCraft )
                @panel = Screen.FindPanel( "ShowCraftParamPanel" );
            else
                return;
            
            panel.ModifyScroll( -10, 0 );
        }
    };

    class LictIncButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(477, 192);
            SetSize(35, 37);
            SetPressedImage("art/intrface/fixboy_scrdn.png");
        }

        void OnLMouseClick() override
        {
            Gui::Panel@ panel;
            auto fix = cast< FixBoy >( Screen );
            if( fix.Menu == GuiScreens::FixBoy::NumMenu::MenuList )
                @panel = Screen.FindPanel( "ShowCraftItemGrid" );
            else if( fix.Menu == GuiScreens::FixBoy::NumMenu::MenuCraft )
                @panel = Screen.FindPanel( "ShowCraftParamPanel" );
            else 
                return;
            
            panel.ModifyScroll( 10, 0 );
        }
    };

    class FixButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(546, 169);
            SetSize(62, 47);
            SetPressedImage("art/intrface/fixboy_fix.png");
            SetDisabledImage("art/intrface/fixboy_fix.png");
        }

        void OnDraw() override
        {
            auto fix = cast< FixBoy >( Screen );
            SetCondition( fix.Menu == GuiScreens::FixBoy::NumMenu::MenuCraft );
        }

        void OnLMouseClick() override
        {
            auto fix = cast< FixBoy >( Screen );
            CurPlayer.ServerCall.Rpc_CraftItem( Tla::FixboyList, 0, 0 );
        }
    };

    class DoneButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(501, 398);
            SetSize(82, 46);
            SetPressedImage("art/intrface/fixboy_done.png");
        }

        void OnLMouseClick() override
        {
            auto fixBoy = cast< FixBoy >( Screen );
            if( fixBoy.Menu == GuiScreens::FixBoy::NumMenu::MenuList )
                Game.HideScreen();
            else
                fixBoy.SetMenu( GuiScreens::FixBoy::NumMenu::MenuList );
        }
    };

    FixBoy CreateFixBoyHierarchy(Gui::Object parent)
    {
        FixBoy obj = FixBoy();
        CreatePanel1Hierarchy(obj);
        CreateListDecButtonHierarchy(obj);
        CreateLictIncButtonHierarchy(obj);
        CreateFixButtonHierarchy(obj);
        CreateDoneButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Panel1 CreatePanel1Hierarchy(Gui::Object parent)
    {
        Panel1 obj = Panel1();
        CreateMessageTextHierarchy(obj);
        CreateShowCraftItemGridHierarchy(obj);
        CreateShowCraftParamPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MessageText CreateMessageTextHierarchy(Gui::Object parent)
    {
        MessageText obj = MessageText();
        obj.Init(parent);
        return obj;
    }

    ShowCraftItemGrid CreateShowCraftItemGridHierarchy(Gui::Object parent)
    {
        ShowCraftItemGrid obj = ShowCraftItemGrid();
        CreateCraftItemNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CraftItemName CreateCraftItemNameHierarchy(Gui::Object parent)
    {
        CraftItemName obj = CraftItemName();
        obj.Init(parent);
        return obj;
    }

    ShowCraftParamPanel CreateShowCraftParamPanelHierarchy(Gui::Object parent)
    {
        ShowCraftParamPanel obj = ShowCraftParamPanel();
        CreateMainCraftItemHierarchy(obj);
        CreateNeedParamsMainHierarchy(obj);
        CreateNeedToolsMainHierarchy(obj);
        CreateNeedItemsMainHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MainCraftItem CreateMainCraftItemHierarchy(Gui::Object parent)
    {
        MainCraftItem obj = MainCraftItem();
        CreateTitleCraftItemHierarchy(obj);
        CreateImageCraftItemGridHierarchy(obj);
        CreateDescCraftItemHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TitleCraftItem CreateTitleCraftItemHierarchy(Gui::Object parent)
    {
        TitleCraftItem obj = TitleCraftItem();
        obj.Init(parent);
        return obj;
    }

    ImageCraftItemGrid CreateImageCraftItemGridHierarchy(Gui::Object parent)
    {
        ImageCraftItemGrid obj = ImageCraftItemGrid();
        CreateImageCraftItemHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ImageCraftItem CreateImageCraftItemHierarchy(Gui::Object parent)
    {
        ImageCraftItem obj = ImageCraftItem();
        obj.Init(parent);
        return obj;
    }

    DescCraftItem CreateDescCraftItemHierarchy(Gui::Object parent)
    {
        DescCraftItem obj = DescCraftItem();
        obj.Init(parent);
        return obj;
    }

    NeedParamsMain CreateNeedParamsMainHierarchy(Gui::Object parent)
    {
        NeedParamsMain obj = NeedParamsMain();
        obj.Init(parent);
        return obj;
    }

    NeedToolsMain CreateNeedToolsMainHierarchy(Gui::Object parent)
    {
        NeedToolsMain obj = NeedToolsMain();
        CreateNeedToolsNameHierarchy(obj);
        CreateNeedToolsImageHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    NeedToolsName CreateNeedToolsNameHierarchy(Gui::Object parent)
    {
        NeedToolsName obj = NeedToolsName();
        obj.Init(parent);
        return obj;
    }

    NeedToolsImage CreateNeedToolsImageHierarchy(Gui::Object parent)
    {
        NeedToolsImage obj = NeedToolsImage();
        CreateToolImageHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ToolImage CreateToolImageHierarchy(Gui::Object parent)
    {
        ToolImage obj = ToolImage();
        obj.Init(parent);
        return obj;
    }

    NeedItemsMain CreateNeedItemsMainHierarchy(Gui::Object parent)
    {
        NeedItemsMain obj = NeedItemsMain();
        CreateNeedItemsNameHierarchy(obj);
        CreateNeedItemsImageHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    NeedItemsName CreateNeedItemsNameHierarchy(Gui::Object parent)
    {
        NeedItemsName obj = NeedItemsName();
        obj.Init(parent);
        return obj;
    }

    NeedItemsImage CreateNeedItemsImageHierarchy(Gui::Object parent)
    {
        NeedItemsImage obj = NeedItemsImage();
        CreateNeedItemImageHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    NeedItemImage CreateNeedItemImageHierarchy(Gui::Object parent)
    {
        NeedItemImage obj = NeedItemImage();
        obj.Init(parent);
        return obj;
    }

    ListDecButton CreateListDecButtonHierarchy(Gui::Object parent)
    {
        ListDecButton obj = ListDecButton();
        obj.Init(parent);
        return obj;
    }

    LictIncButton CreateLictIncButtonHierarchy(Gui::Object parent)
    {
        LictIncButton obj = LictIncButton();
        obj.Init(parent);
        return obj;
    }

    FixButton CreateFixButtonHierarchy(Gui::Object parent)
    {
        FixButton obj = FixButton();
        obj.Init(parent);
        return obj;
    }

    DoneButton CreateDoneButtonHierarchy(Gui::Object parent)
    {
        DoneButton obj = DoneButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateFixBoyHierarchy(null);
    }
}

namespace Menu
{
    class Screen : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(164, 144);
        }
    };

    class Multiplayer : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(164, 144);
            SetBackgroundImage("art/intrface/options_multiplayer.png");
        }

        void OnShow(dict<string, any> params) override
        {
            SetActive( !Settings.Singleplayer );
        }
    };

    class Options : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 18);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.ShowScreen( CLIENT_SCREEN_OPTIONS );
        }
    };

    class Text6 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptOptions ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptOptions ));
        }
    };

    class Exit : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 54);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "NetDisconnect" );
        }
    };

    class Text7 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptExit ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptExit ));
        }
    };

    class Resume : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 90);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class Text8 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptResume ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptResume ));
        }
    };

    class Singleplayer : Gui::Panel
    {
        void OnConstruct() override
        {
            SetActive(false);
            SetSize(164, 217);
            SetBackgroundImage("art/intrface/options_singleplayer.png");
        }

        void OnShow(dict<string, any> params) override
        {
            SetActive( Settings.Singleplayer );
        }
    };

    class SaveGame : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 18);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "SaveGame" );
        }
    };

    class Text1 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptSavegame ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptSavegame ));
        }
    };

    class LoadGame : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 54);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "LoadGame" );
        }
    };

    class Text2 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptLoadgame ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptLoadgame ));
        }
    };

    class Options2 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 90);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.Message( MSG_GAME( MsgStr::StrOptionsNotAvailable ) );
        }
    };

    class Text3 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptOptions ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptOptions ));
        }
    };

    class Exit2 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 126);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "NetDisconnect" );
        }
    };

    class Text4 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptExit ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptExit ));
        }
    };

    class Resume2 : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 162);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class Text5 : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 16);
            SetText(MSG_GAME( MsgStr::StrMenuoptResume ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrMenuoptResume ));
        }
    };

    Screen CreateScreenHierarchy(Gui::Object parent)
    {
        Screen obj = Screen();
        CreateMultiplayerHierarchy(obj);
        CreateSingleplayerHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Multiplayer CreateMultiplayerHierarchy(Gui::Object parent)
    {
        Multiplayer obj = Multiplayer();
        CreateOptionsHierarchy(obj);
        CreateExitHierarchy(obj);
        CreateResumeHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Options CreateOptionsHierarchy(Gui::Object parent)
    {
        Options obj = Options();
        CreateText6Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text6 CreateText6Hierarchy(Gui::Object parent)
    {
        Text6 obj = Text6();
        obj.Init(parent);
        return obj;
    }

    Exit CreateExitHierarchy(Gui::Object parent)
    {
        Exit obj = Exit();
        CreateText7Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text7 CreateText7Hierarchy(Gui::Object parent)
    {
        Text7 obj = Text7();
        obj.Init(parent);
        return obj;
    }

    Resume CreateResumeHierarchy(Gui::Object parent)
    {
        Resume obj = Resume();
        CreateText8Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text8 CreateText8Hierarchy(Gui::Object parent)
    {
        Text8 obj = Text8();
        obj.Init(parent);
        return obj;
    }

    Singleplayer CreateSingleplayerHierarchy(Gui::Object parent)
    {
        Singleplayer obj = Singleplayer();
        CreateSaveGameHierarchy(obj);
        CreateLoadGameHierarchy(obj);
        CreateOptions2Hierarchy(obj);
        CreateExit2Hierarchy(obj);
        CreateResume2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SaveGame CreateSaveGameHierarchy(Gui::Object parent)
    {
        SaveGame obj = SaveGame();
        CreateText1Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text1 CreateText1Hierarchy(Gui::Object parent)
    {
        Text1 obj = Text1();
        obj.Init(parent);
        return obj;
    }

    LoadGame CreateLoadGameHierarchy(Gui::Object parent)
    {
        LoadGame obj = LoadGame();
        CreateText2Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text2 CreateText2Hierarchy(Gui::Object parent)
    {
        Text2 obj = Text2();
        obj.Init(parent);
        return obj;
    }

    Options2 CreateOptions2Hierarchy(Gui::Object parent)
    {
        Options2 obj = Options2();
        CreateText3Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text3 CreateText3Hierarchy(Gui::Object parent)
    {
        Text3 obj = Text3();
        obj.Init(parent);
        return obj;
    }

    Exit2 CreateExit2Hierarchy(Gui::Object parent)
    {
        Exit2 obj = Exit2();
        CreateText4Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text4 CreateText4Hierarchy(Gui::Object parent)
    {
        Text4 obj = Text4();
        obj.Init(parent);
        return obj;
    }

    Resume2 CreateResume2Hierarchy(Gui::Object parent)
    {
        Resume2 obj = Resume2();
        CreateText5Hierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Text5 CreateText5Hierarchy(Gui::Object parent)
    {
        Text5 obj = Text5();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateScreenHierarchy(null);
    }
}

namespace Aim
{
    class Aim : Gui::Screen
    {
        ident TargetCritterId;
        
        string GetChance( int loc )
        {
            Critter@ chosen = Game.GetChosen();
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr is null )
                return "";
            Item@ item = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
            ProtoItem proto = CritterItem::GetSlotItemProto(chosen);
            uint8 mode      = (item == null ? chosen.HandsItemMode : item.Mode);
            uint8 use       = _WeaponModeUse( mode );
            uint8 aim       = _WeaponModeAim( mode );
            mode            = _WeaponModeMake( use, loc );
            int hit         = ClientMain::to_hit( chosen, cr, proto, mode );
            return (hit == 0 ? "-" : "" + hit);
        }
        
        void OnHitLocationSelect( uint loc )
        {
            Game.HideScreen();
            Critter@ chosen = Game.GetChosen();
            ident targetCritterId = cast< Aim >( Screen ).TargetCritterId;
            Item@ item = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
            uint8 use  = (item == null ? chosen.HandsItemMode : item.Mode) & 0xF;
            uint8 mode = use | ( loc << 4 );
            ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseItem, valid(item) ? item.Id : ZERO_IDENT, 0, TARGET_CRITTER, targetCritterId, mode, 0 } );
        }  

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(504, 309);
            SetBackgroundImage("art/intrface/Aim.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( params !is null )
                TargetCritterId = params[ "TargetCritterId" ];
        }
    };

    class ViewTargetPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(170, 31);
            SetSize(170, 225);
            SetBackgroundImage("art/intrface/AimMan.png");
        }

        void OnDraw() override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr is null )
            {
                Game.HideScreen();
                return;
            }
            string name = hstring(CritterAnims::GetCritterAlias(cr.ModelName).str.replace("aa.frm","na.frm"));
            Game.Log("name picture " + name);
            SetBackgroundImage( name );
        }
    };

    class ChanceHead : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(31, 34);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationHead );
        }
    };

    class ChanceHeadName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(40, -3);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 +  cr.CrTypeAlias * 10 + HitLocations::LocationHead - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationHead );
        }
    };

    class ChanceEyes : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(31, 101);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationEyes );
        }
    };

    class ChanceEyesName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(40, -4);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
            {
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationEyes - 1 );
                Game.Log("CrTypeAlias " + (1000 + cr.CrTypeAlias * 10 + HitLocations::LocationEyes - 1) );
            }
            
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationEyes );
        }
    };

    class ChanceRightArm : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(31, 164);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationRightArm );
        }
    };

    class ChanceRightArmName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(40, -4);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationRightArm - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationRightArm );
        }
    };

    class ChanceRigthLeg : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(31, 230);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationRightLeg );
        }
    };

    class ChanceRigihthLegName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(40, -5);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationRightLeg - 1 );
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationRightLeg );
        }
    };

    class ChanceTorse : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(453, 34);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationTorso );
        }
    };

    class ChanceTorsoName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-100, -3);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY | FT_CENTERR);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationTorso - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationTorso );
        }
    };

    class ChanceGroin : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(453, 101);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationGroin );
        }
    };

    class ChanceGroinName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-100, -4);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY | FT_CENTERR);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationGroin - 1 );
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationGroin );
        }
    };

    class ChanceLeftArm : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(453, 165);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationLeftArm );
        }
    };

    class ChanceLeftArmName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-100, -5);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERY | FT_CENTERR);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationLeftArm - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationLeftArm );
        }
    };

    class ChnaceLeftLeg : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(453, 230);
            SetSize(20, 20);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        string get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HitLocations::LocationLeftLeg );
        }
    };

    class ChanceLeftLegName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(-100, -5);
            SetSize(80, 15);
            SetTextFlags(FT_CENTERR | FT_BOTTOM);
        }

        void OnShow(dict<string, any> params) override
        {
            Critter@ cr = Game.GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = Game.GetText( TextPackName::Combat, 1000 + cr.CrTypeAlias * 10 + HitLocations::LocationLeftLeg - 1 );
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HitLocations::LocationLeftLeg );
        }
    };

    class CloseButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(209, 268);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    Aim CreateAimHierarchy(Gui::Object parent)
    {
        Aim obj = Aim();
        CreateViewTargetPanelHierarchy(obj);
        CreateChanceHeadHierarchy(obj);
        CreateChanceEyesHierarchy(obj);
        CreateChanceRightArmHierarchy(obj);
        CreateChanceRigthLegHierarchy(obj);
        CreateChanceTorseHierarchy(obj);
        CreateChanceGroinHierarchy(obj);
        CreateChanceLeftArmHierarchy(obj);
        CreateChnaceLeftLegHierarchy(obj);
        CreateCloseButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ViewTargetPanel CreateViewTargetPanelHierarchy(Gui::Object parent)
    {
        ViewTargetPanel obj = ViewTargetPanel();
        obj.Init(parent);
        return obj;
    }

    ChanceHead CreateChanceHeadHierarchy(Gui::Object parent)
    {
        ChanceHead obj = ChanceHead();
        CreateChanceHeadNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceHeadName CreateChanceHeadNameHierarchy(Gui::Object parent)
    {
        ChanceHeadName obj = ChanceHeadName();
        obj.Init(parent);
        return obj;
    }

    ChanceEyes CreateChanceEyesHierarchy(Gui::Object parent)
    {
        ChanceEyes obj = ChanceEyes();
        CreateChanceEyesNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceEyesName CreateChanceEyesNameHierarchy(Gui::Object parent)
    {
        ChanceEyesName obj = ChanceEyesName();
        obj.Init(parent);
        return obj;
    }

    ChanceRightArm CreateChanceRightArmHierarchy(Gui::Object parent)
    {
        ChanceRightArm obj = ChanceRightArm();
        CreateChanceRightArmNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceRightArmName CreateChanceRightArmNameHierarchy(Gui::Object parent)
    {
        ChanceRightArmName obj = ChanceRightArmName();
        obj.Init(parent);
        return obj;
    }

    ChanceRigthLeg CreateChanceRigthLegHierarchy(Gui::Object parent)
    {
        ChanceRigthLeg obj = ChanceRigthLeg();
        CreateChanceRigihthLegNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceRigihthLegName CreateChanceRigihthLegNameHierarchy(Gui::Object parent)
    {
        ChanceRigihthLegName obj = ChanceRigihthLegName();
        obj.Init(parent);
        return obj;
    }

    ChanceTorse CreateChanceTorseHierarchy(Gui::Object parent)
    {
        ChanceTorse obj = ChanceTorse();
        CreateChanceTorsoNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceTorsoName CreateChanceTorsoNameHierarchy(Gui::Object parent)
    {
        ChanceTorsoName obj = ChanceTorsoName();
        obj.Init(parent);
        return obj;
    }

    ChanceGroin CreateChanceGroinHierarchy(Gui::Object parent)
    {
        ChanceGroin obj = ChanceGroin();
        CreateChanceGroinNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceGroinName CreateChanceGroinNameHierarchy(Gui::Object parent)
    {
        ChanceGroinName obj = ChanceGroinName();
        obj.Init(parent);
        return obj;
    }

    ChanceLeftArm CreateChanceLeftArmHierarchy(Gui::Object parent)
    {
        ChanceLeftArm obj = ChanceLeftArm();
        CreateChanceLeftArmNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceLeftArmName CreateChanceLeftArmNameHierarchy(Gui::Object parent)
    {
        ChanceLeftArmName obj = ChanceLeftArmName();
        obj.Init(parent);
        return obj;
    }

    ChnaceLeftLeg CreateChnaceLeftLegHierarchy(Gui::Object parent)
    {
        ChnaceLeftLeg obj = ChnaceLeftLeg();
        CreateChanceLeftLegNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ChanceLeftLegName CreateChanceLeftLegNameHierarchy(Gui::Object parent)
    {
        ChanceLeftLegName obj = ChanceLeftLegName();
        obj.Init(parent);
        return obj;
    }

    CloseButton CreateCloseButtonHierarchy(Gui::Object parent)
    {
        CloseButton obj = CloseButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateAimHierarchy(null);
    }
}

namespace Split
{
    class Split : Gui::Screen
    {
        ident TargetItemId;
        uint SplitCount;
        int ItemsCollection;
        
        Item@ GetTargetItem()
        {
            Item@[]@ items = ClientItems::RefreshItemsCollection( ItemsCollection );
            for( uint i = 0; i < items.length(); i++ )
                if( items[ i ].Id == TargetItemId )
                    return items[ i ];
            Game.Log("item not found");
            return null;
        }

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(259, 162);
            SetBackgroundImage("art/intrface/MOVEMULT.png");
        }

        void OnShow(dict<string, any> params) override
        {
            SplitCount      = 1;
            TargetItemId    = params[ "TargetItemId" ];
            ItemsCollection = params[ "ItemsCollection" ];
        }

        void OnGlobalInput(KeyCode key, string text) override
        {
            int result = 0;
            uint count = 0;
            if( text.tryToInt( result ) )
            {
                count = SplitCount * 10;
                count += result;
                if( count > 99999 )
                    count = count % 100000;
                SplitCount = count;
            }
        }
    };

    class MainName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(259, 35);
            SetText(MSG_GAME( MsgStr::StrSplitTitle ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSplitTitle ));
        }
    };

    class ViewItemPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(17, 46);
            SetSize(90, 65);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }

        void OnShow(dict<string, any> params) override
        {
            Split@ split = cast< Split >( Screen );
            auto@ preview = cast< GuiScreens::Preview::Preview >( GetChild( 0 ) );
            preview.PreviewItemId   = split.TargetItemId;
            preview.ItemInInv       = true;
            preview.ItemsCollection = ClientItems::GetCollectionFromType(split.ItemsCollection);
        }
    };

    class CountText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(123, 44);
            SetSize(80, 25);
            SetTextFont(Fonts::BigNum);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            Split@ split = cast< Split >( Screen );
            int count = split.SplitCount;
            string result;
            if( count >= 10000 )
                return "" + count;
            else if( count >= 1000 )
                return "0" + count;
            else if( count >= 100 )
                return "00" + count;
            else if( count >= 10 )
                return "000" + count;
            else
                return "0000" + count;
        }
    };

    class IncCountButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(201, 45);
            SetSize(16, 12);
            SetPressedImage("art/intrface/slider_inc.png");
        }

        void OnLMousePressed() override
        {
            Split@ split = cast< Split >( Screen );
            if( split.SplitCount < 999999 )
                split.SplitCount++;
        }
    };

    class DecCountButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(201, 56);
            SetSize(17, 12);
            SetPressedImage("art/intrface/minus_button_dn.png");
        }

        void OnLMousePressed() override
        {
            Split@ split = cast< Split >( Screen );
            if( split.SplitCount > 1 )
                split.SplitCount--;
        }
    };

    class MaxCountButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(128, 79);
            SetSize(86, 33);
            SetPressedImage("art/intrface/SKLDXON.png");
        }

        void OnLMouseClick() override
        {
            Split@ split = cast< Split >( Screen );
            Item@ item = split.GetTargetItem();
            if( item !is null )
                split.SplitCount = item.Count;
        }
    };

    class MaxCountName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(86, 33);
            SetNotHittable(true);
            SetText(MSG_GAME( MsgStr::StrSplitAll ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSplitAll ));
        }
    };

    class DoneButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(101, 129);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Split@ split = cast< Split >( Screen );
            Item@ item = split.GetTargetItem();
                    Game.Log("Calling barter close! collection " + split.ItemsCollection + "; split.SplitCount " + split.SplitCount );
            if( item !is null )
            {
                Game.Log("Item not null/ Count: " + item.Count);
                if( split.SplitCount > item.Count )
                {
                    split.SplitCount = item.Count;
                    return;
                }
                
                if( split.ItemsCollection == ITEMS_CHOSEN_ALL )
                {
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenMoveItem, item.Id, split.SplitCount, CritterItemSlot::Outside, 0, 0, 0 } );
                }
                else if( split.ItemsCollection == ITEMS_PICKUP || split.ItemsCollection == ITEMS_PICKUP_FROM )
                {
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenMoveItemCont, item.Id, split.ItemsCollection, split.SplitCount, 0, 0, 0 } );
                }
                else if( split.ItemsCollection == ITEMS_BARTER || split.ItemsCollection == ITEMS_BARTER_OFFER ||
                    split.ItemsCollection == ITEMS_BARTER_OPPONENT || split.ItemsCollection == ITEMS_BARTER_OPPONENT_OFFER )
                {
                    Game.Log("Calling barter transfer!");
                    ClientItems::BarterTransfer(split.TargetItemId, split.ItemsCollection, split.SplitCount);
                    //Game.CustomCall( "BarterMoveItem " + split.TargetItemId + " " + split.ItemsCollection + " " + split.SplitCount );
                }
            }
            Game.HideScreen();
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(149, 127);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    Split CreateSplitHierarchy(Gui::Object parent)
    {
        Split obj = Split();
        CreateMainNameHierarchy(obj);
        CreateViewItemPanelHierarchy(obj);
        CreateCountTextHierarchy(obj);
        CreateIncCountButtonHierarchy(obj);
        CreateDecCountButtonHierarchy(obj);
        CreateMaxCountButtonHierarchy(obj);
        CreateDoneButtonHierarchy(obj);
        CreateCancelButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MainName CreateMainNameHierarchy(Gui::Object parent)
    {
        MainName obj = MainName();
        obj.Init(parent);
        return obj;
    }

    ViewItemPanel CreateViewItemPanelHierarchy(Gui::Object parent)
    {
        ViewItemPanel obj = ViewItemPanel();
        obj.Init(parent);
        return obj;
    }

    CountText CreateCountTextHierarchy(Gui::Object parent)
    {
        CountText obj = CountText();
        obj.Init(parent);
        return obj;
    }

    IncCountButton CreateIncCountButtonHierarchy(Gui::Object parent)
    {
        IncCountButton obj = IncCountButton();
        obj.Init(parent);
        return obj;
    }

    DecCountButton CreateDecCountButtonHierarchy(Gui::Object parent)
    {
        DecCountButton obj = DecCountButton();
        obj.Init(parent);
        return obj;
    }

    MaxCountButton CreateMaxCountButtonHierarchy(Gui::Object parent)
    {
        MaxCountButton obj = MaxCountButton();
        CreateMaxCountNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MaxCountName CreateMaxCountNameHierarchy(Gui::Object parent)
    {
        MaxCountName obj = MaxCountName();
        obj.Init(parent);
        return obj;
    }

    DoneButton CreateDoneButtonHierarchy(Gui::Object parent)
    {
        DoneButton obj = DoneButton();
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateSplitHierarchy(null);
    }
}

namespace Timer
{
    class Timer : Gui::Screen
    {
        uint Time;
        ident TargetItemId;

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(259, 162);
            SetBackgroundImage("art/intrface/MOVEMULT.png");
        }

        void OnShow(dict<string, any> params) override
        {
            Time         = 1;
            TargetItemId = ZERO_IDENT;
            TargetItemId = params[ "TargetItemId" ];
        }
    };

    class ViewItemPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(16, 43);
            SetSize(90, 65);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }

        void OnShow(dict<string, any> params) override
        {
            Timer@ timer = cast< Timer >( Screen );
            auto@ preview = cast< GuiScreens::Preview::Preview >( GetChild( 0 ) );
            preview.PreviewItemId = timer.TargetItemId;
            preview.ItemInInv     = true;
        }
    };

    class TimerPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(116, 36);
            SetSize(105, 81);
            SetBackgroundImage("art/intrface/timer.png");
        }
    };

    class MinuteText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(20, 30);
            SetSize(16, 25);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            Timer@ timer = cast< Timer >( Screen );
            return "" + ( timer.Time / 60 );
        }
    };

    class SecondText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(49, 30);
            SetSize(32, 25);
            SetTextFont(Fonts::BigNum);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            Timer@ timer = cast< Timer >( Screen );
            int val = timer.Time % 60;
            return val < 10 ? "0" + val : "" + val;
        }
    };

    class IncButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(82, 29);
            SetSize(16, 12);
            SetPressedImage("art/intrface/plus_button_dn.png");
        }

        void OnLMousePressed() override
        {
            Timer@ timer = cast< Timer >( Screen );
            if( timer.Time < 599 )
                timer.Time++;
        }
    };

    class DecButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(81, 41);
            SetSize(17, 12);
            SetPressedImage("art/intrface/minus_button_dn.png");
        }

        void OnLMousePressed() override
        {
            Timer@ timer = cast< Timer >( Screen );
            if( timer.Time > 1 )
                timer.Time--;
        }
    };

    class DoneButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(99, 129);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Timer@ timer = cast< Timer >( Screen );
            Item@ item = Game.GetItem( timer.TargetItemId );
            if( item !is null )
                ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseItem, item.Id, 0, TARGET_SELF, 0, ITEM_MODE_USE, timer.Time } );
            
            Game.HideScreen();
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(149, 128);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    Timer CreateTimerHierarchy(Gui::Object parent)
    {
        Timer obj = Timer();
        CreateViewItemPanelHierarchy(obj);
        CreateTimerPanelHierarchy(obj);
        CreateDoneButtonHierarchy(obj);
        CreateCancelButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ViewItemPanel CreateViewItemPanelHierarchy(Gui::Object parent)
    {
        ViewItemPanel obj = ViewItemPanel();
        obj.Init(parent);
        return obj;
    }

    TimerPanel CreateTimerPanelHierarchy(Gui::Object parent)
    {
        TimerPanel obj = TimerPanel();
        CreateMinuteTextHierarchy(obj);
        CreateSecondTextHierarchy(obj);
        CreateIncButtonHierarchy(obj);
        CreateDecButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MinuteText CreateMinuteTextHierarchy(Gui::Object parent)
    {
        MinuteText obj = MinuteText();
        obj.Init(parent);
        return obj;
    }

    SecondText CreateSecondTextHierarchy(Gui::Object parent)
    {
        SecondText obj = SecondText();
        obj.Init(parent);
        return obj;
    }

    IncButton CreateIncButtonHierarchy(Gui::Object parent)
    {
        IncButton obj = IncButton();
        obj.Init(parent);
        return obj;
    }

    DecButton CreateDecButtonHierarchy(Gui::Object parent)
    {
        DecButton obj = DecButton();
        obj.Init(parent);
        return obj;
    }

    DoneButton CreateDoneButtonHierarchy(Gui::Object parent)
    {
        DoneButton obj = DoneButton();
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateTimerHierarchy(null);
    }
}

namespace DialogBox
{
    #define DIALOGBOX_NONE             ( 0 )
    #define DIALOGBOX_FOLLOW           ( 1 )
    #define DIALOGBOX_BARTER           ( 2 )
    #define DIALOGBOX_ENCOUNTER_ANY    ( 3 )
    #define DIALOGBOX_ENCOUNTER_RT     ( 4 )
    #define DIALOGBOX_ENCOUNTER_TB     ( 5 )
    #define DIALOGBOX_MANUAL           ( 6 )

    class DialogBox : Gui::Screen
    {
        uint BaseHeight;
        uint DialogID;

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(302, 99);
            SetBackgroundImage("art/intrface/dialogbox_top.png");
        }

        void OnInit() override
        {
            BaseHeight = Height;
        }

        void OnShow(dict<string, any> params) override
        {
            uint height        = BaseHeight;
            uint heightButtons = Find( "ButtonSlot" ).Height;
            DialogID           = params[ "DialogID" ];
            height += ( Stdlib::StrToStrArr(params["ButtonTexts"]).length() ) * heightButtons;
            SetSize( Width, height );
        }
    };

    class BoxText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(26, 23);
            SetSize(257, 64);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( params[ "Text" ] );
        }
    };

    class Buttons : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(0, 99);
            SetCellPrototype("ButtonSlot");
            SetColumns(1);
        }

        void OnShow(dict<string, any> params) override
        {
            ResizeGrid( Stdlib::StrToStrArr(params["ButtonTexts"]).length() );
        }
    };

    class ButtonSlot : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(302, 28);
        }
    };

    class Bottom : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 24);
            SetSize(302, 4);
            SetBackgroundImage("art/intrface/dialogbox_bottom.png");
        }

        void OnShow(dict<string, any> params) override
        {
            SetActive( CellIndex == Stdlib::StrToStrArr(params["ButtonTexts"]).length() - 1 );
        }
    };

    class Middle : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(302, 24);
            SetBackgroundImage("art/intrface/dialogbox_middle.png");
        }

        void OnShow(dict<string, any> params) override
        {
            SetActive( CellIndex <= Stdlib::StrToStrArr(params["ButtonTexts"]).length() - 1 );
        }
    };

    class Button : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(54, 4);
            SetSize(15, 17);
            SetPressedImage("art/intrface/DialogBox_Button.png");
        }

        void OnLMouseClick() override
        {
            CurPlayer.ServerCall.Rpc_AnswerDialogBox( cast< DialogBox >( Parent ).DialogID, CellIndex );
            Game.HideScreen();
        }
    };

    class Title : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(74, 11);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( Stdlib::StrToStrArr(params["ButtonTexts"])[ CellIndex ] );
        }
    };

    DialogBox CreateDialogBoxHierarchy(Gui::Object parent)
    {
        DialogBox obj = DialogBox();
        CreateBoxTextHierarchy(obj);
        CreateButtonsHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    BoxText CreateBoxTextHierarchy(Gui::Object parent)
    {
        BoxText obj = BoxText();
        obj.Init(parent);
        return obj;
    }

    Buttons CreateButtonsHierarchy(Gui::Object parent)
    {
        Buttons obj = Buttons();
        CreateButtonSlotHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ButtonSlot CreateButtonSlotHierarchy(Gui::Object parent)
    {
        ButtonSlot obj = ButtonSlot();
        CreateBottomHierarchy(obj);
        CreateMiddleHierarchy(obj);
        CreateButtonHierarchy(obj);
        CreateTitleHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Bottom CreateBottomHierarchy(Gui::Object parent)
    {
        Bottom obj = Bottom();
        obj.Init(parent);
        return obj;
    }

    Middle CreateMiddleHierarchy(Gui::Object parent)
    {
        Middle obj = Middle();
        obj.Init(parent);
        return obj;
    }

    Button CreateButtonHierarchy(Gui::Object parent)
    {
        Button obj = Button();
        obj.Init(parent);
        return obj;
    }

    Title CreateTitleHierarchy(Gui::Object parent)
    {
        Title obj = Title();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateDialogBoxHierarchy(null);
    }
}

namespace Elevator
{
    ////import bool get_elevator0( uint type, uint[]& data ) from "Elevator";

    class Elevator : Gui::Screen
    {
        uint Type;
        uint[] Data = {};

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
        }

        void OnShow(dict<string, any> params) override
        {
            // Data[ 3 ]  -  main pic
            if( params is null )
                return;
            Type = params[ "ElevatorType" ];
            if( !Elevator::get_elevator( Type, Data ) )
                return;
            
            SetBackgroundImage( hstring_fromHash(Data[ 3 ]) );
        }
    };

    class AdditionalPanel : Gui::Panel
    {
        void OnConstruct() override
        {
        }

        void OnShow(dict<string, any> params) override
        {
            // Data[ 6 ]  -  additional pic offset
            // Data[ 7 - 8 ]  -  additional pic point
            Elevator@ elevator = cast< Elevator >( Screen );
            SetBackgroundImage( hstring_fromHash(elevator.Data[6]) );
            SetPosition( elevator.Data[ 7 ], elevator.Data[ 8 ] );
        }
    };

    class ButtonsPanel : Gui::Panel
    {
        void OnConstruct() override
        {
        }

        void OnShow(dict<string, any> params) override
        {
            // Data[ 13 ]  -  buttons count  ( 1 )
            // Data[ 12 ]  -  button down pic offset ( 1 )
            // 14+ -  rect for every button  ( 4 )
            Elevator@ elevator = cast< Elevator >( Screen );
            uint count = elevator.Data[ 13 ];
            _Children.clear();
            for( uint i = 0; i < count; i++ )
            {    
                ElevatorButton@ button = CreateElevatorButtonHierarchy( this );
                button.Index = i;
                button.SetPressedImage( hstring_fromHash(elevator.Data[12]) );
                int index = 14 + i * 4;
                int posX  = elevator.Data[ index ];
                int posY  = elevator.Data[ index + 1 ];
                button.SetPosition( posX, posY );
                button.SetActive( true );
            }
        }
    };

    class ElevatorButton : Gui::Button
    {
        int Index;

        void OnConstruct() override
        {
            SetActive(false);
        }

        void OnLMouseClick() override
        {
            // Data[ 1 ]  -  start level
            Elevator@ elevator = cast< Elevator >( Screen );
            CurPlayer.ServerCall.Rpc_SelectLevel( elevator.Data[ 1 ] + Index, 0, 0 );
            Game.HideScreen();
        }
    };

    Elevator CreateElevatorHierarchy(Gui::Object parent)
    {
        Elevator obj = Elevator();
        CreateAdditionalPanelHierarchy(obj);
        CreateButtonsPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    AdditionalPanel CreateAdditionalPanelHierarchy(Gui::Object parent)
    {
        AdditionalPanel obj = AdditionalPanel();
        obj.Init(parent);
        return obj;
    }

    ButtonsPanel CreateButtonsPanelHierarchy(Gui::Object parent)
    {
        ButtonsPanel obj = ButtonsPanel();
        CreateElevatorButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ElevatorButton CreateElevatorButtonHierarchy(Gui::Object parent)
    {
        ElevatorButton obj = ElevatorButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateElevatorHierarchy(null);
    }
}

namespace Say
{
    class Say : Gui::Screen
    {
        // Окно вызвано из интерфейса диалога
        bool FromDialog;
        //Признак: не выводить введенный текст в лог
        bool DontShowMessage;
        bool TalkerIsNpc;
        ident TalkerId;

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(290, 85);
            SetBackgroundImage("art/intrface/say.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if(!(params is null))
            {
                TalkerIsNpc = params[ "TalkerIsNpc" ] == "1";
                 FromDialog  = params[ "FromDialog" ] == "true";
                 TalkerId    = params[ "TalkerId" ];
            }
        }
    };

    class TitleSay : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(140, 14);
            SetText(MSG_GAME( MsgStr::StrSayTitle ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSayTitle ));
        }
    };

    class MainSayText : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(23, 32);
            SetSize(245, 15);
            SetTextFlags(FT_CENTERY);
            SetInputLength(40);
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( "" );
        }
    };

    class DoneButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(38, 58);
            SetSize(14, 14);
            SetPressedImage("art/intrface/DI_RDBT1.png");
        }

        void OnLMouseClick() override
        {
            string inputText = Screen.FindText( "MainSayText" ).Text;
            if( !cast< Say >( Parent ).DontShowMessage )
                Game.Message( inputText );
            //Game.CustomCall( "ScreenSay_" + inputText );
            Critter@ chosen = Game.GetChosen();
            if( chosen is null )
            {
                Game.HideScreen();
                return;
            }
            if( chosen.CanSendSay )
                CurPlayer.ServerCall.Rpc_ProcessSay( inputText, cast< Say >( Parent ).FromDialog, 
                cast< Say >( Parent ).TalkerId, cast< Say >( Parent ).TalkerIsNpc );
            Game.HideScreen();
        }
    };

    class DoneButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(20, -1);
            SetText(MSG_GAME( MsgStr::StrSayOk ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSayOk ));
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(164, 57);
            SetSize(14, 14);
            SetPressedImage("art/intrface/DI_RDBT1.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class CancelButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(19, -1);
            SetText(MSG_GAME( MsgStr::StrSayCancel ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSayCancel ));
        }
    };

    Say CreateSayHierarchy(Gui::Object parent)
    {
        Say obj = Say();
        CreateTitleSayHierarchy(obj);
        CreateMainSayTextHierarchy(obj);
        CreateDoneButtonHierarchy(obj);
        CreateCancelButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TitleSay CreateTitleSayHierarchy(Gui::Object parent)
    {
        TitleSay obj = TitleSay();
        obj.Init(parent);
        return obj;
    }

    MainSayText CreateMainSayTextHierarchy(Gui::Object parent)
    {
        MainSayText obj = MainSayText();
        obj.Init(parent);
        return obj;
    }

    DoneButton CreateDoneButtonHierarchy(Gui::Object parent)
    {
        DoneButton obj = DoneButton();
        CreateDoneButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DoneButtonName CreateDoneButtonNameHierarchy(Gui::Object parent)
    {
        DoneButtonName obj = DoneButtonName();
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        CreateCancelButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CancelButtonName CreateCancelButtonNameHierarchy(Gui::Object parent)
    {
        CancelButtonName obj = CancelButtonName();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateSayHierarchy(null);
    }
}

namespace GMTown
{
    class GMTown : Gui::Screen
    {
        uint LocId;
        hstring LocPid;
        int[] IndexMaps = {};

        void OnConstruct() override
        {
            SetModal(true);
            SetPosition(180, 20);
            SetAnchor(AnchorStyle(AnchorStyle::Left| AnchorStyle::Top));
        }

        void OnShow(dict<string, any> params) override
        {
            if( params !is null )
            {
                LocId          = params[ "LocationId" ];
                LocPid         = hstring( params[ "LocationPid" ] );
                // Todo: restore gui IndexMaps      = cast< array< int > >( params[ "IndexMaps" ] );
                string picName = MSG_LOCATION( STR_LOC_PIC( LocPid ) );
                SetBackgroundImage( picName );
            }
        }
    };

    class MapEntraceaGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetCellPrototype("ProtoGrid");
            SetColumns(1);
        }

        void OnShow(dict<string, any> params) override
        {
            GMTown@ gmTown = cast< GMTown >( Screen );
            hstring proto = gmTown.LocPid;
            int[]@ indexMaps = gmTown.IndexMaps;
            ResizeGrid( indexMaps.length() );
            
            for( uint i = 0; i < Cells.length(); i++ )
            {
                Gui::Object@ cell = Cells[ i ];
                uint mapIndex = indexMaps[ i ];
                string name = MSG_LOCATION( STR_LOC_ENTRANCE_NAME( proto, mapIndex ) );
                string strX = MSG_LOCATION( STR_LOC_ENTRANCE_PICX( proto, mapIndex ) );
                string strY = MSG_LOCATION( STR_LOC_ENTRANCE_PICY( proto, mapIndex ) );
            
                cell.FindText( "NameMap" ).SetText( name );
                int x = 0, y = 0;
                if( strX.tryToInt( x ) && strY.tryToInt( y ) )
                    cell.SetPosition( x, y );
            }
        }
    };

    class ProtoGrid : Gui::Panel
    {
        void OnConstruct() override
        {
        }
    };

    class NameMap : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(12, 7);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
        }
    };

    class ShowMapButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(0, 15);
            SetSize(25, 13);
            SetBackgroundImage("art/intrface/GM_Town/town_view_gm.png");
            SetPressedImage("art/intrface/GM_Town/town_view_gm_dn.png");
        }

        void OnLMouseClick() override
        {
            GMTown@ gmTown = cast< GMTown >( Screen );
            uint locId    = gmTown.LocId;
            uint entrance = gmTown.IndexMaps[ CellIndex ];
            CurPlayer.ServerCall.ProcessGlobalMapCommand( 10, locId, entrance );//GM_CMD_VIEW_MAP
        }
    };

    class EnterMapButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(0, 30);
            SetSize(25, 13);
            SetBackgroundImage("art/intrface/GM_Town/town_view_sh.png");
            SetPressedImage("art/intrface/GM_Town/town_view_sh_dn.png");
        }

        void OnLMouseClick() override
        {
            GMTown@ gmTown = cast< GMTown >( Screen );
            uint locId    = gmTown.LocId;
            uint entrance = gmTown.IndexMaps[ CellIndex ];
            CurPlayer.ServerCall.ProcessGlobalMapCommand( 3, locId, entrance );//GM_CMD_TOLOCAL
        }
    };

    GMTown CreateGMTownHierarchy(Gui::Object parent)
    {
        GMTown obj = GMTown();
        CreateMapEntraceaGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MapEntraceaGrid CreateMapEntraceaGridHierarchy(Gui::Object parent)
    {
        MapEntraceaGrid obj = MapEntraceaGrid();
        CreateProtoGridHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ProtoGrid CreateProtoGridHierarchy(Gui::Object parent)
    {
        ProtoGrid obj = ProtoGrid();
        CreateNameMapHierarchy(obj);
        CreateShowMapButtonHierarchy(obj);
        CreateEnterMapButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    NameMap CreateNameMapHierarchy(Gui::Object parent)
    {
        NameMap obj = NameMap();
        obj.Init(parent);
        return obj;
    }

    ShowMapButton CreateShowMapButtonHierarchy(Gui::Object parent)
    {
        ShowMapButton obj = ShowMapButton();
        obj.Init(parent);
        return obj;
    }

    EnterMapButton CreateEnterMapButtonHierarchy(Gui::Object parent)
    {
        EnterMapButton obj = EnterMapButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateGMTownHierarchy(null);
    }
}

namespace InputBox
{
    class InputBox : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(288, 257);
            SetBackgroundImage("art/intrface/InputBox/input_box.png");
        }
    };

    class IboxText : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(53, 38);
            SetSize(195, 137);
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow(dict<string, any> params) override
        {
            uint holoNum = 99999;
            if( params !is null )
                holoNum = Game.GetItem( params[ "ItemId" ] ).HolodiskNum;
            
            SetText( MSG_HOLO( STR_HOLO_INFO_DESC( holoNum ) ) );
        }
    };

    class IboxTitle : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(53, 187);
            SetSize(193, 13);
            SetTextFlags(FT_CENTERY);
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow(dict<string, any> params) override
        {
            uint holoNum = 99999;
            if( params !is null )
                holoNum = Game.GetItem( params[ "ItemId" ] ).HolodiskNum;
            
            SetText( MSG_HOLO( STR_HOLO_INFO_NAME( holoNum ) ) );
        }
    };

    class IboxDone : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(62, 214);
            SetSize(14, 14);
            SetPressedImage("art/intrface/InputBox/DI_RDBT1.png");
        }

        void OnGlobalMouseClick(MouseButton button) override
        {
            string text  = Screen.FindText( "IboxText" ).Text;
            string title = Screen.FindText( "IboxTitle" ).Text;
            //SetChosenAction( array< int > = { Id, 0, 0, 0, 0, 0, 0 } );
        }
    };

    class IboxDoneName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(45, 7);
            SetText(MSG_GAME( MsgStr::StrInputBoxWrite ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrInputBoxWrite ));
        }
    };

    class IboxCancel : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(167, 214);
            SetSize(14, 14);
            SetPressedImage("art/intrface/InputBox/DI_RDBT1.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class IboxCancelName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(45, 7);
            SetText(MSG_GAME( MsgStr::StrInputBoxBack ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrInputBoxBack ));
        }
    };

    InputBox CreateInputBoxHierarchy(Gui::Object parent)
    {
        InputBox obj = InputBox();
        CreateIboxTextHierarchy(obj);
        CreateIboxTitleHierarchy(obj);
        CreateIboxDoneHierarchy(obj);
        CreateIboxCancelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    IboxText CreateIboxTextHierarchy(Gui::Object parent)
    {
        IboxText obj = IboxText();
        obj.Init(parent);
        return obj;
    }

    IboxTitle CreateIboxTitleHierarchy(Gui::Object parent)
    {
        IboxTitle obj = IboxTitle();
        obj.Init(parent);
        return obj;
    }

    IboxDone CreateIboxDoneHierarchy(Gui::Object parent)
    {
        IboxDone obj = IboxDone();
        CreateIboxDoneNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    IboxDoneName CreateIboxDoneNameHierarchy(Gui::Object parent)
    {
        IboxDoneName obj = IboxDoneName();
        obj.Init(parent);
        return obj;
    }

    IboxCancel CreateIboxCancelHierarchy(Gui::Object parent)
    {
        IboxCancel obj = IboxCancel();
        CreateIboxCancelNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    IboxCancelName CreateIboxCancelNameHierarchy(Gui::Object parent)
    {
        IboxCancelName obj = IboxCancelName();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateInputBoxHierarchy(null);
    }
}

namespace SkillBox
{
    CritterProperty[] UsedSkills = { CritterProperty::SkillSneak, CritterProperty::SkillLockpick, CritterProperty::SkillSteal, CritterProperty::SkillTraps, CritterProperty::SkillFirstAid, CritterProperty::SkillDoctor, CritterProperty::SkillScience, CritterProperty::SkillRepair };
    
    ident TargetCritterId;
    ident TargetItemId;
    bool IsInventory;
    
    string FormatXXX( int value )
    {
        value       = CLAMP( value, 0, 999 );
        string text = "";
        if( value < 100 )
            text += "0";
        if( value < 10 )
            text += "0";
        return text + value;
    }

    class SkillBox : Gui::Screen
    {
        void OnConstruct() override
        {
            SetCanMove(true, false);
            SetSize(185, 368);
            SetAnchor(AnchorStyle(AnchorStyle::Right));
            SetBackgroundImage("art/intrface/SKLDXBOX.png");
        }

        void OnShow(dict<string, any> params) override
        {
            TargetCritterId = ZERO_IDENT;
            TargetItemId    = ZERO_IDENT;
            IsInventory     = false;
            if( params !is null && params.length() == 3)
            {
                TargetCritterId = params[ "TargetCritterId" ];
                TargetItemId    = params[ "TargetItemId" ];
                IsInventory     = params[ "IsInventory" ] == "true";
            }
        }
    };

    class MainName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(47, 8);
            SetSize(92, 30);
            SetText(MSG_GAME( MsgStr::StrChaSkills ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaSkills ));
        }
    };

    class SkillsGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(15, 46);
            SetCellPrototype("SkillsPanel");
            SetGridSize(UsedSkills.length());
            SetPadding(0, 10);
        }
    };

    class SkillsPanel : Gui::Panel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(150, 26);
        }

        void OnResizeGrid(Gui::Object cell, uint cellIndex) override
        {
            Prop = UsedSkills[ cellIndex ];
        }
    };

    class SkillButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPressedImage("art/intrface/SKLDXON.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
            
            CritterProperty Prop = cast< SkillsPanel >( Parent ).Prop;
            if( TargetCritterId == ZERO_IDENT && TargetItemId == ZERO_IDENT )
            {    
                if( Prop == CritterProperty::SkillSneak )
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnCritter, uint( CritterProperty::SkillSneak ), 0, 0, 0, 0, 0 } );
                else
                {
                    Settings.Cursor     = CursorType::UseSkill;
                    Settings.CursorData = uint( Prop );
                }
            }
            else
            {
                if( TargetCritterId != ZERO_IDENT )
                {
                    Critter@ cr = Game.GetCritter( TargetCritterId );
                    if( cr !is null )
                        ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnCritter, uint( Prop ), TargetCritterId, 0, 0, 0, 0 } );
                }
                else
                {
                    Item@ item = Game.GetItem( TargetItemId );
                    if( item !is null )
                    {
                        if( item.Type != ItemType::Generic && item.Type != ItemType::Grid )
                            ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnItem, uint( Prop ), TargetItemId, IsInventory ? 1 : 0, 0, 0, 0 } );
                        else
                            ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseSklOnScen, uint( Prop ), item.ProtoId.hash, item.HexX, item.HexY, 0, 0 } );
                    }
                }
            }
        }
    };

    class SkillName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(85, 26);
            SetNotHittable(true);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< SkillsPanel >( Parent ).Prop ) );
        }
    };

    class SkillValue : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(93, 0);
            SetSize(50, 26);
            SetTextFont(Fonts::BigNum);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_IFACE);
        }

        string get_Text() override
        {
            Critter@ chosen = Game.GetChosen();
            if( chosen !is null )
                return FormatXXX( chosen.GetAsInt( cast< SkillsPanel >( Parent ).Prop ) );
            return "";
        }
    };

    class ExitButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(48, 338);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class ExitText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(16, -5);
            SetSize(75, 25);
            SetText(MSG_GAME( MsgStr::StrChaCancel ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrChaCancel ));
        }
    };

    SkillBox CreateSkillBoxHierarchy(Gui::Object parent)
    {
        SkillBox obj = SkillBox();
        CreateMainNameHierarchy(obj);
        CreateSkillsGridHierarchy(obj);
        CreateExitButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MainName CreateMainNameHierarchy(Gui::Object parent)
    {
        MainName obj = MainName();
        obj.Init(parent);
        return obj;
    }

    SkillsGrid CreateSkillsGridHierarchy(Gui::Object parent)
    {
        SkillsGrid obj = SkillsGrid();
        CreateSkillsPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SkillsPanel CreateSkillsPanelHierarchy(Gui::Object parent)
    {
        SkillsPanel obj = SkillsPanel();
        CreateSkillButtonHierarchy(obj);
        CreateSkillNameHierarchy(obj);
        CreateSkillValueHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    SkillButton CreateSkillButtonHierarchy(Gui::Object parent)
    {
        SkillButton obj = SkillButton();
        obj.Init(parent);
        return obj;
    }

    SkillName CreateSkillNameHierarchy(Gui::Object parent)
    {
        SkillName obj = SkillName();
        obj.Init(parent);
        return obj;
    }

    SkillValue CreateSkillValueHierarchy(Gui::Object parent)
    {
        SkillValue obj = SkillValue();
        obj.Init(parent);
        return obj;
    }

    ExitButton CreateExitButtonHierarchy(Gui::Object parent)
    {
        ExitButton obj = ExitButton();
        CreateExitTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ExitText CreateExitTextHierarchy(Gui::Object parent)
    {
        ExitText obj = ExitText();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateSkillBoxHierarchy(null);
    }
}

namespace Use
{
    class UseItem : Gui::Screen
    {
        ident TargetCritterId;
        ident TargetItemId;
        
        void OnItemSelect( Item& item )
        {
            Game.HideScreen();
            
            if( TargetCritterId != ZERO_IDENT )
            {   
                Critter@ targetCr = Game.GetCritter( TargetCritterId );
                if( targetCr !is null )
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseItem, item.Id, item.ProtoId.hash, TARGET_CRITTER, TargetCritterId, ITEM_MODE_USE, 0 } );
            }
            else if( TargetItemId != ZERO_IDENT )
            {
                Item@ targetItem = Game.GetItem( TargetItemId );
                if( targetItem !is null )
                    ChosenActions::SetChosenActions( array< any > = { Tla::ChosenUseItem, item.Id, item.ProtoId.hash, TARGET_ITEM, TargetItemId, ITEM_MODE_USE, 0 } );
            }
        }

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(292, 376);
            SetBackgroundImage("art/intrface/USE.png");
        }

        void OnShow(dict<string, any> params) override
        {
            TargetCritterId = params[ "TargetCritterId" ];
            TargetItemId    = params[ "TargetItemId" ];
        }
    };

    class MainItemView : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(39, 34);
        }

        void OnInit() override
        {
            auto@ itemsContainer = GuiScreens::ItemsContainer::CreateHierarchy( this );
            itemsContainer.ItemsCollection = ITEMS_USE;
            itemsContainer.SetSelectCallback( GuiScreens::ItemsContainer::SelectCallbackFunc( cast< UseItem >( Parent ).OnItemSelect ) );
        }
    };

    class Chosen : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(174, 35);
            SetSize(61, 98);
        }

        void OnInit() override
        {
            GuiScreens::Preview::CreateHierarchy( this );
        }

        void OnShow(dict<string, any> params) override
        {
            GuiScreens::Preview::Preview@ preview = cast< GuiScreens::Preview::Preview >( GetChild( 0 ) );
            preview.PreviewCritterId = params[ "TargetCritterId" ];
            preview.PreviewItemId    = params[ "TargetItemId" ];
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(231, 324);
            SetSize(26, 26);
            SetPressedImage("art/intrface/inv_close_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    UseItem CreateUseItemHierarchy(Gui::Object parent)
    {
        UseItem obj = UseItem();
        CreateMainItemViewHierarchy(obj);
        CreateChosenHierarchy(obj);
        CreateCancelButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MainItemView CreateMainItemViewHierarchy(Gui::Object parent)
    {
        MainItemView obj = MainItemView();
        obj.Init(parent);
        return obj;
    }

    Chosen CreateChosenHierarchy(Gui::Object parent)
    {
        Chosen obj = Chosen();
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateUseItemHierarchy(null);
    }
}

namespace Perk
{
    ////import bool PerkCheck0( Critter& cr, CritterProperty perk ) from "Perks";
    
    CritterProperty[] AccessPerks = {};
    CritterProperty TargetPerk;
    int Scroll;
    int MaxScroll;
    
    void GetAccessPerks()
    {
        Critter@ chosen = Game.GetChosen();
        if( not valid( chosen ) )
            return;
        AccessPerks.clear();
        
        for( uint i  = 0, j = CritterPropertyGroup::Perks.length(); i < j; i++ )
            if( Perks::PerkCheck( chosen, CritterPropertyGroup::Perks[ i ] ) )
                AccessPerks.insertLast( CritterPropertyGroup::Perks[ i ] );
    }

    class Perk : Gui::Screen
    {
        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(573, 230);
            SetBackgroundImage("art/intrface/perk.png");
        }

        void OnShow(dict<string, any> params) override
        {
            GetAccessPerks();
        }
    };

    class PerkGrid : Gui::Grid
    {
        void OnConstruct() override
        {
            SetPosition(43, 39);
            SetCellPrototype("PerkName");
            SetGridSize(10);
        }

        void OnShow(dict<string, any> params) override
        {
            MaxScroll = int(AccessPerks.length())- int(GridSize);
            if( MaxScroll < 0 )
                MaxScroll = 0;
        }
    };

    class PerkName : Gui::Text
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize(200, 13);
            SetText("TXT");
            SetTextFlags(FT_CENTERY);
            SetTextFocusedColor(COLOR_WHITE);
        }
    
        void OnRefreshText() override
        {
            SetText("TXT");
        }

        void OnMouseClick(MouseButton button) override
        {
            if( button == MouseButton::WheelUp || button == MouseButton::WheelDown )
            {   
                Scroll += ( button == MouseButton::WheelUp ? -1 : 1 );
                if( Scroll < 0 )
                    Scroll = 0;
                else if( Scroll > MaxScroll )
                    Scroll = MaxScroll;
            }
        }

        void OnLMouseClick() override
        {
            TargetPerk = Prop;
        }

        string get_Text() override
        {
            Prop = uint( CellIndex + Scroll ) < AccessPerks.length() ? AccessPerks[ CellIndex + Scroll ] : CritterProperty::Invalid;
            return Prop != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_NAME( Prop ) ) : "";
        }
    };

    class Tip : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(272, 17);
        }
    };

    class NameTip : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(18, 6);
            SetTextFont(Fonts::Thin);
            SetTextColor(COLOR_BLACK);
        }

        string get_Text() override
        {
            return TargetPerk != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_NAME( TargetPerk ) ) : "";
        }
    };

    class DescTip : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(4, 45);
            SetSize(145, 130);
            SetTextColor(COLOR_BLACK);
        }

        string get_Text() override
        {
            return TargetPerk != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_DESC( TargetPerk ) ) : "";
        }
    };

    class ImageTip : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(148, 50);
        }

        void OnDraw() override
        {
            SetBackgroundImage( TargetPerk != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_PIC( TargetPerk ) ) : "" );
        }
    };

    class DoneButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(49, 186);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            if( TargetPerk != CritterProperty::Invalid )
            {
                CurPlayer.ServerCall.ProcessPerkUp(TargetPerk);
                //Game.CustomCall( "AssignPerk " + TargetPerk );
                Game.HideScreen();
            }
        }
    };

    class DoneText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(15, -3);
            SetSize(65, 23);
            SetText(MSG_GAME( MsgStr::StrPerkTake ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPerkTake ));
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(154, 184);
            SetSize(15, 16);
            SetPressedImage("art/intrface/red_button_dn.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class CancelText : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(15, -3);
            SetSize(65, 23);
            SetText(MSG_GAME( MsgStr::StrPerkCancel ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrPerkCancel ));
        }
    };

    class ScrollUpButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(27, 42);
            SetSize(11, 14);
            SetPressedImage("art/intrface/arrow_up_on.png");
        }

        void OnLMouseClick() override
        {
            Scroll -= 1;
            if( Scroll < 0 )
                Scroll = 0;
        }
    };

    class ScrollDownButtom : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(27, 55);
            SetSize(11, 14);
            SetPressedImage("art/intrface/arrow_down_on.png");
        }

        void OnLMouseClick() override
        {
            Scroll += 1;
            if( Scroll > MaxScroll )
                Scroll = MaxScroll;
        }
    };

    Perk CreatePerkHierarchy(Gui::Object parent)
    {
        Perk obj = Perk();
        CreatePerkGridHierarchy(obj);
        CreateTipHierarchy(obj);
        CreateDoneButtonHierarchy(obj);
        CreateCancelButtonHierarchy(obj);
        CreateScrollUpButtonHierarchy(obj);
        CreateScrollDownButtomHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    PerkGrid CreatePerkGridHierarchy(Gui::Object parent)
    {
        PerkGrid obj = PerkGrid();
        CreatePerkNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    PerkName CreatePerkNameHierarchy(Gui::Object parent)
    {
        PerkName obj = PerkName();
        obj.Init(parent);
        return obj;
    }

    Tip CreateTipHierarchy(Gui::Object parent)
    {
        Tip obj = Tip();
        CreateNameTipHierarchy(obj);
        CreateDescTipHierarchy(obj);
        CreateImageTipHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    NameTip CreateNameTipHierarchy(Gui::Object parent)
    {
        NameTip obj = NameTip();
        obj.Init(parent);
        return obj;
    }

    DescTip CreateDescTipHierarchy(Gui::Object parent)
    {
        DescTip obj = DescTip();
        obj.Init(parent);
        return obj;
    }

    ImageTip CreateImageTipHierarchy(Gui::Object parent)
    {
        ImageTip obj = ImageTip();
        obj.Init(parent);
        return obj;
    }

    DoneButton CreateDoneButtonHierarchy(Gui::Object parent)
    {
        DoneButton obj = DoneButton();
        CreateDoneTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DoneText CreateDoneTextHierarchy(Gui::Object parent)
    {
        DoneText obj = DoneText();
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        CreateCancelTextHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CancelText CreateCancelTextHierarchy(Gui::Object parent)
    {
        CancelText obj = CancelText();
        obj.Init(parent);
        return obj;
    }

    ScrollUpButton CreateScrollUpButtonHierarchy(Gui::Object parent)
    {
        ScrollUpButton obj = ScrollUpButton();
        obj.Init(parent);
        return obj;
    }

    ScrollDownButtom CreateScrollDownButtomHierarchy(Gui::Object parent)
    {
        ScrollDownButtom obj = ScrollDownButtom();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreatePerkHierarchy(null);
    }
}

namespace TownView
{
    class TownView : Gui::Screen
    {
        uint LocationId;
        uint LocationEntrance;

        void OnConstruct() override
        {
            SetCanMove(true, false);
            SetSize(164, 158);
            SetBackgroundImage("art/intrface/town_view.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( params !is null )
            {
                LocationId       = params[ "LocationId" ];
                LocationEntrance = params[ "LocationEntrance" ];
            }
            
            
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 20);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            Game.CustomCall( "TryExit" );
            
        }
    };

    class CancelButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(136, 33);
            SetNotHittable(true);
            SetText(MSG_GAME( MsgStr::StrTownViewBack ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrTownViewBack ));
        }
    };

    class EnterButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(13, 61);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }

        void OnLMouseClick() override
        {
            TownView@ townView = cast< TownView >( Screen );
            ident locId     = GMTown::CurrentLocationId;
            uint entrance = GMTown::CurrentEntrance;
            CurPlayer.ServerCall.ProcessGlobalMapCommand( 3, locId, entrance );//GM_CMD_TOLOCAL
        }
    };

    class EnterButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(136, 33);
            SetNotHittable(true);
            SetText(MSG_GAME( MsgStr::StrTownViewEnter ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrTownViewEnter ));
        }
    };

    class CounterCheckBox : Gui::CheckBox
    {
        void OnConstruct() override
        {
            SetPosition(13, 101);
            SetSize(136, 33);
            SetPressedImage("art/intrface/moptbtn.png");
        }
    };

    class CounterCheckBoxName : Gui::Text
    {
        void OnConstruct() override
        {
            SetSize(136, 33);
            SetNotHittable(true);
            SetText(MSG_GAME( MsgStr::StrTownViewContours ));
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrTownViewContours ));
        }
    };

    TownView CreateTownViewHierarchy(Gui::Object parent)
    {
        TownView obj = TownView();
        CreateCancelButtonHierarchy(obj);
        CreateEnterButtonHierarchy(obj);
        CreateCounterCheckBoxHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        CreateCancelButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CancelButtonName CreateCancelButtonNameHierarchy(Gui::Object parent)
    {
        CancelButtonName obj = CancelButtonName();
        obj.Init(parent);
        return obj;
    }

    EnterButton CreateEnterButtonHierarchy(Gui::Object parent)
    {
        EnterButton obj = EnterButton();
        CreateEnterButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    EnterButtonName CreateEnterButtonNameHierarchy(Gui::Object parent)
    {
        EnterButtonName obj = EnterButtonName();
        obj.Init(parent);
        return obj;
    }

    CounterCheckBox CreateCounterCheckBoxHierarchy(Gui::Object parent)
    {
        CounterCheckBox obj = CounterCheckBox();
        CreateCounterCheckBoxNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CounterCheckBoxName CreateCounterCheckBoxNameHierarchy(Gui::Object parent)
    {
        CounterCheckBoxName obj = CounterCheckBoxName();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateTownViewHierarchy(null);
    }
}

namespace Cursor
{
    class Screen : Gui::Screen
    {
        void OnConstruct() override
        {
            SetCanMove(true, false);
        }
    };

    class Cursor : Gui::Panel
    {
        Sprite::Sprite CursorDefault;
        Sprite::Sprite CursorHand;
        Sprite::Sprite CursorWait;
        Sprite::Sprite CursorAttack;
        Sprite::Sprite CursorUseItem;
        Sprite::Sprite CursorUseSkill;
        Sprite::Sprite[] CursorMoveScreen = {};
        
        ContourType CurCrittersCountour;

        void OnConstruct() override
        {
        }

        void OnInit() override
        {
                        CursorDefault = Sprite::Sprite( "art/intrface/cursor_default.png" );
                        CursorHand = Sprite::Sprite( "art/intrface/cursor_hand.png" );
                        CursorWait = Sprite::Sprite( "art/intrface/cursor_wait.png" );
                        CursorAttack = Sprite::Sprite( "art/intrface/cursor_attack.png" );
                        CursorUseItem = Sprite::Sprite( "art/intrface/cursor_use_item.png" );
                        CursorUseSkill = Sprite::Sprite( "art/intrface/cursor_use_skill.png" );
                        CursorMoveScreen = array< Sprite::Sprite >( 8 );
                        for(int i = 0; i < 8; i++)
                            CursorMoveScreen[ i ] = Sprite::Sprite();
                        CursorMoveScreen[ 0 ].Load( "art/intrface/cursor_move_screen_u.png" );
                        CursorMoveScreen[ 1 ].Load( "art/intrface/cursor_move_screen_ur.png" );
                        CursorMoveScreen[ 2 ].Load( "art/intrface/cursor_move_screen_r.png" );
                        CursorMoveScreen[ 3 ].Load( "art/intrface/cursor_move_screen_dr.png" );
                        CursorMoveScreen[ 4 ].Load( "art/intrface/cursor_move_screen_d.png" );
                        CursorMoveScreen[ 5 ].Load( "art/intrface/cursor_move_screen_dl.png" );
                        CursorMoveScreen[ 6 ].Load( "art/intrface/cursor_move_screen_l.png" );
                        CursorMoveScreen[ 7 ].Load( "art/intrface/cursor_move_screen_ul.png" );
            
        }

        void OnDraw() override
        {
            if( Settings.HideCursor )
                return;
            
            int cursor = Settings.Cursor;
            // Move cursor
            Settings.ShowMoveCursor = ( cursor == CursorType::Move );
            // Game scroll
            bool hasMouseScroll = true;
            if( Settings.ScrollMouseLeft && Settings.ScrollMouseUp )
                CursorMoveScreen[ 7 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, -1 );
            else if( Settings.ScrollMouseRight && Settings.ScrollMouseUp )
                CursorMoveScreen[ 1 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, 1, -1 );
            else if( Settings.ScrollMouseLeft && Settings.ScrollMouseDown )
                CursorMoveScreen[ 5 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, 1 );
            else if( Settings.ScrollMouseRight && Settings.ScrollMouseDown )
                CursorMoveScreen[ 3 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, 1, 1 );
            else if( Settings.ScrollMouseLeft )
                CursorMoveScreen[ 6 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, 0 );
            else if( Settings.ScrollMouseRight )
                CursorMoveScreen[ 2 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, 1, 0 );
            else if( Settings.ScrollMouseUp )
                CursorMoveScreen[ 0 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, 0, -1 );
            else if( Settings.ScrollMouseDown )
                CursorMoveScreen[ 4 ].Draw( Settings.MouseX, Settings.MouseY, 0, 0, 0, 1 );
            else
                hasMouseScroll = false;
            if( hasMouseScroll )
                return;
            // Attack contours
            ContourType contour = ( cursor == CursorType::UseWeapon ? ContourType::Custom : ContourType::None );
            if( contour != CurCrittersCountour )
            {
                CurCrittersCountour = contour;
                CurMap.SetCrittersContour(CurCrittersCountour);
            }
            
            // Other cursors
            if( cursor == CursorType::UseWeapon )
            {
                CursorAttack.Draw( Settings.MouseX, Settings.MouseY, 0, 0, 0, 0 );
            
                Critter@ chosen = Game.GetChosen();
                if( chosen is null )
                    return;
            
                Critter@ cr = CurMap.GetCritterAtScreenPos( Settings.MouseX, Settings.MouseY );
                if( cr is null || cr is chosen )
                    return;
            
                uint attackDist = Parameters::GetActiveItemAttackDistance( chosen );
                if( attackDist == 0 )
                    return;
            
                bool trace = false;
                Critter@[] critters = {};
                critters = CurMap.GetCrittersInPath( chosen.HexX, chosen.HexY, cr.HexX, cr.HexY, 0.0f, attackDist, CritterFindType::Any );
                for( uint i = 0; i < critters.length(); i++ )
                {
                    if( critters[ i ].Id == cr.Id )
                    {
                        trace = true;
                        break;
                    }
                }
                if( !trace )
                    return;
            
                Item@ item = chosen.GetItem( ItemProperty::CritterSlot, CritterItemSlot::Main );
                ProtoItem proto = CritterItem::GetSlotItemProto(chosen);
                int hit         = ClientMain::to_hit( chosen, cr, proto, item == null ? chosen.HandsItemMode : item.Mode );
                if( hit == 0 )
                    return;
                
                Game.DrawText( hit + "%", Settings.MouseX + 6, Settings.MouseY + 6, 100, 100, COLOR_RED, Fonts::Default, 0 );
            }
            else if( cursor == CursorType::UseItem )
            {
                CursorUseItem.Draw( Settings.MouseX, Settings.MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CursorType::UseSkill )
            {
                CursorUseSkill.Draw( Settings.MouseX, Settings.MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CursorType::Move )
            {
                uint16 hx, hy;
                Critter @chosen = Game.GetChosen();
                if (chosen is null) {
                    return;
                }
                CurMap.SetCursorPos(chosen, Settings.MouseX, Settings.MouseY, Input::IsShiftDown(), true);
                
                if( !CurMap.GetHexAtScreenPos( Settings.MouseX, Settings.MouseY, hx, hy ) )
                    CursorDefault.Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CursorType::Default )
            {
                CursorDefault.Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CursorType::Hand )
            {
                //Game.CustomCall( "CurDrawHand" );
                CursorHand.Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, -1 );
            }
            else
            {
                CursorDefault.Draw( Settings.MouseX, Settings.MouseY, 0, 0, -1, -1 );
            }
        }
    };

    class LMenu : Gui::Panel
    {
        void OnConstruct() override
        {
        }
    };

    class MenuSlots : Gui::Grid
    {
        void OnConstruct() override
        {
            SetSize(40, 300);
            SetCellPrototype("MenuSlot");
        }
    };

    class MenuSlot : Gui::Panel
    {
        void OnConstruct() override
        {
            SetPosition(0, 1);
            SetSize(40, 40);
            SetBackgroundImage("art/intrface/lmenu_sortdown_dn.png");
        }
    };

    Screen CreateScreenHierarchy(Gui::Object parent)
    {
        Screen obj = Screen();
        CreateCursorHierarchy(obj);
        CreateLMenuHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    Cursor CreateCursorHierarchy(Gui::Object parent)
    {
        Cursor obj = Cursor();
        obj.Init(parent);
        return obj;
    }

    LMenu CreateLMenuHierarchy(Gui::Object parent)
    {
        LMenu obj = LMenu();
        CreateMenuSlotsHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MenuSlots CreateMenuSlotsHierarchy(Gui::Object parent)
    {
        MenuSlots obj = MenuSlots();
        CreateMenuSlotHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    MenuSlot CreateMenuSlotHierarchy(Gui::Object parent)
    {
        MenuSlot obj = MenuSlot();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateScreenHierarchy(null);
    }
}

namespace ItemsContainer
{
    funcdef void SelectCallbackFunc( Item& item );

    class ItemsContainer : Gui::Panel
    {
        int ItemsCollection = ITEMS_INVENTORY;
        SelectCallbackFunc@ SelectCallback;
        
        void SetSelectCallback( SelectCallbackFunc@ callback )
        {
            @SelectCallback = callback;
        }

        void OnConstruct() override
        {
        }
    };

    class ContainerItemView : Gui::ItemView
    {
        void OnConstruct() override
        {
            SetSize(70, 300);
            SetCropContent( true );
            SetAutoScroll(true, false);
            SetCellPrototype("ContainerItemPanel");
            SetGridSize(10);
            SetColumns(1);
            SetUserDataExt(ITEMS_INVENTORY);
            SetUseSorting(true);
        }

        void OnShow(dict<string, any> params) override
        {
            SetUserDataExt( cast< ItemsContainer >( Parent ).ItemsCollection );
            Resort();
        }

        Item[] OnGetItems() override
        {
            Item[] items = ClientItems::RefreshItemsCollection( ClientItems::Collection( UserDataExt ) );
            
            return items;
        }

        int OnCheckItem(Item item) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    };

    class ContainerItemPanel : Gui::Panel
    {
        void OnConstruct() override
        {
            SetSize(70, 30);
            SetDraggable(true);
        }

        void OnLMouseClick() override
        {
            if( Settings.Cursor == CursorType::Default )
            {
                ItemsContainer@ cont = cast< ItemsContainer >( Parent.Parent );
                if( cont.SelectCallback !is null )
                {
                    Gui::ItemView@ itemView = cast< Gui::ItemView >( Parent );
                    Item@ item = itemView.GetItem( CellIndex );
                    if( item !is null )
                        cont.SelectCallback( item );
                }
            }
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            SetDraggable( item !is null );
        }
    };

    class ImageItem : Gui::Panel
    {
        void OnConstruct() override
        {
            SetNotHittable(true);
        }

        void OnShow(dict<string, any> params) override
        {
            SetSize( Parent.Width, Parent.Height );
        }

        void OnDragChanged() override
        {
            if( !IsDragged )
                SetSize( Parent.Width, Parent.Height );
            else
                SetSize( Parent.Width * 2, Parent.Height * 2 );
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            hstring picInv;
            if( item !is null )
                picInv = item.PicInv;
            SetBackgroundImage( picInv, SpriteLayout::Zoom );
        }
    };

    class CountItem : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(68, 29);
            SetNotHittable(true);
            SetTextFlags(FT_CENTERR | FT_BOTTOM);
            SetTextColor(COLOR_WHITE);
        }

        void OnDrawItem(Item item, Gui::Object cell, uint cellIndex) override
        {
            uint count = 0;
            if( item !is null && item.Stackable )
                count = item.Count;
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    };

    class ScrollUp : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(76, 6);
            SetSize(22, 23);
            SetBackgroundImage("art/intrface/inv_scr_up_normal.png");
            SetPressedImage("art/intrface/inv_scr_up_pressed.png");
            SetDisabledImage("art/intrface/inv_scr_up_disabled.png");
        }

        void OnDraw() override
        {
            Gui::ItemView@ contItems = cast< Gui::ItemView >( Parent.Find( "ContainerItemView", false ) );
            SetCondition( contItems.CanModifyScroll( -1, 0 ) );
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ contItems = cast< Gui::ItemView >( Parent.Find( "ContainerItemView", false ) );
            contItems.ModifyScroll( -10, 0 );
        }
    };

    class ScrollDown : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(76, 29);
            SetSize(22, 23);
            SetBackgroundImage("art/intrface/inv_scr_dn_normal.png");
            SetPressedImage("art/intrface/inv_scr_dn_pressed.png");
            SetDisabledImage("art/intrface/inv_scr_dn_disabled.png");
        }

        void OnDraw() override
        {
            Gui::ItemView@ contItems = cast< Gui::ItemView >( Parent.Find( "ContainerItemView", false ) );
            SetCondition( contItems.CanModifyScroll( 1, 0 ) );
        }

        void OnLMousePressed() override
        {
            Gui::ItemView@ contItems = cast< Gui::ItemView >( Parent.Find( "ContainerItemView", false ) );
            contItems.ModifyScroll( 10, 0 );
        }
    };

    ItemsContainer CreateItemsContainerHierarchy(Gui::Object parent)
    {
        ItemsContainer obj = ItemsContainer();
        CreateContainerItemViewHierarchy(obj);
        CreateScrollUpHierarchy(obj);
        CreateScrollDownHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ContainerItemView CreateContainerItemViewHierarchy(Gui::Object parent)
    {
        ContainerItemView obj = ContainerItemView();
        CreateContainerItemPanelHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ContainerItemPanel CreateContainerItemPanelHierarchy(Gui::Object parent)
    {
        ContainerItemPanel obj = ContainerItemPanel();
        CreateImageItemHierarchy(obj);
        CreateCountItemHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    ImageItem CreateImageItemHierarchy(Gui::Object parent)
    {
        ImageItem obj = ImageItem();
        obj.Init(parent);
        return obj;
    }

    CountItem CreateCountItemHierarchy(Gui::Object parent)
    {
        CountItem obj = CountItem();
        obj.Init(parent);
        return obj;
    }

    ScrollUp CreateScrollUpHierarchy(Gui::Object parent)
    {
        ScrollUp obj = ScrollUp();
        obj.Init(parent);
        return obj;
    }

    ScrollDown CreateScrollDownHierarchy(Gui::Object parent)
    {
        ScrollDown obj = ScrollDown();
        obj.Init(parent);
        return obj;
    }

    ItemsContainer CreateHierarchy(Gui::Object parent)
    {
        return CreateItemsContainerHierarchy(parent);
    }
}

namespace Preview
{
    class Preview : Gui::Panel
    {
        ident PreviewCritterId;
        ident PreviewItemId;
        bool ItemInInv        = false;
        ClientItems::Collection ItemsCollection = ClientItems::Collection::ChosenAll;
        Sprite::Sprite spr = Sprite::Sprite();
        int CurDir = 0;
        uint LastDirChangeTick = 0;

        void OnConstruct() override
        {
            SetSize(100, 100);
            SetCropContent( true );
        }

        void OnInit() override
        {
            SetSize( Parent.Width, Parent.Height );
            CurDir            = 0;
            LastDirChangeTick = Game.GetTick();
        }

        void OnShow(dict<string, any> params) override
        {
            if( PreviewCritterId == ZERO_IDENT && PreviewItemId == ZERO_IDENT )
            {
                Critter@ chosen = Game.GetChosen();
                PreviewCritterId = ( chosen !is null ? chosen.Id : ZERO_IDENT );
            }
        }

        void OnDraw() override
        {
            if( PreviewCritterId != ZERO_IDENT )
            {
                Critter@ cr = Game.GetCritter( PreviewCritterId );
                if( cr is null )
                    return;
                if( cr.IsModel() )
                {
                    float[] chaPosition = array<float>( 14 );
                    // Position
                    chaPosition[ 0 ] = AbsolutePosX + Width / 2;
                    chaPosition[ 1 ] = AbsolutePosY + Height - 10;
                    // Rotation
                    chaPosition[ 2 ] = Settings.MapCameraAngle;
                    chaPosition[ 3 ] = ( Settings.MapHexagonal ? 150 - CurDir * 60 : 135 - CurDir * 45 );
                    chaPosition[ 4 ] = 0.0;
                    // Scale
                    chaPosition[ 5 ] = 1.0;
                    chaPosition[ 6 ] = 1.0;
                    chaPosition[ 7 ] = 1.0;
                    // Speed
                    chaPosition[ 8 ] = 1.0;
                    // Reserved
                    chaPosition[ 9 ] = 0.0;
                    // Stencil rectangle
                    chaPosition[ 10 ] = AbsolutePosX;
                    chaPosition[ 11 ] = AbsolutePosY;
                    chaPosition[ 12 ] = AbsolutePosX + Width;
                    chaPosition[ 13 ] = AbsolutePosY + Height;
                    // Todo: rerstore gui Game.DrawCritter3d( 2, cr.ModelName, int(cr.GetStateAnim()), int(CritterActionAnim::Idle), cr.ModelLayers, chaPosition, 0 );
                }
                else
                {
                    uint curTick = Game.GetTick();
                    if( curTick - LastDirChangeTick >= 500 )
                    {
                        LastDirChangeTick = curTick;
                        CurDir++;
                        if( CurDir >= ( Settings.MapHexagonal ? 6 : 8 ) )
                            CurDir = 0;
                    }
                    Game.DrawCritter2d( cr.ModelName, cr.GetStateAnim(), CritterActionAnim::Idle, CurDir, AbsolutePosX, AbsolutePosY, AbsolutePosX + Width, AbsolutePosY + Height, false, true, 0 );
                }
            }
            else if( PreviewItemId != ZERO_IDENT )
            {
                //Item@ item = Game.GetItem( PreviewItemId );
                Item item = ClientItems::GetCollectionItem( PreviewItemId, ItemsCollection );
                if( item !is null )
                {
                    spr.Load( ItemInInv ? item.PicInv : item.PicMap );
                    spr.SetFirstFrame();
                    if( ItemInInv )
                        spr.Draw( AbsolutePosX, AbsolutePosY, Width, Height, layout: SpriteLayout::Zoom );
                    else
                        spr.Draw( AbsolutePosX, AbsolutePosY, Width, Height, layout: SpriteLayout::Center );
                }
            }
        }
    };

    Preview CreatePreviewHierarchy(Gui::Object parent)
    {
        Preview obj = Preview();
        obj.Init(parent);
        return obj;
    }

    Preview CreateHierarchy(Gui::Object parent)
    {
        return CreatePreviewHierarchy(parent);
    }
}

namespace SayExtended
{
    class SayExtended : Gui::Screen
    {
        int HeaderMessageID;
        int InputMessageID = 0;
        int ProtoID;
        uint16 HexX;
        uint16 HexY;
        bool FromScenery;

        void OnConstruct() override
        {
            SetModal(true);
            SetCanMove(true, false);
            SetSize(290, 85);
            SetBackgroundImage("art/intrface/say.png");
        }

        void OnShow(dict<string, any> params) override
        {
            if( params !is null && params.length() > 0 )
            {
                HeaderMessageID = params[ "MsgHeaderId" ];
                if( params.length() > 4)
                {
                    InputMessageID = params[ "InputMessageID" ];
                    ProtoID        = params[ "ProtoID" ];
                    HexX           = params[ "HexX" ];
                    HexY           = params[ "HexY" ];
                    FromScenery    = true;
                }
                else
                {
                    FromScenery = false;
                }
            }
        }
    };

    class TitleSay : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(140, 14);
            SetTextFont(Fonts::Fat);
            SetTextFlags(FT_CENTERX | FT_CENTERY);
            SetTextColor(COLOR_SAND);
        }

        void OnShow(dict<string, any> params) override
        {
            SetText( MSG_TEXT( cast< SayExtended >( Parent ).HeaderMessageID ) );
        }
    };

    class MainSayText : Gui::TextInput
    {
        void OnConstruct() override
        {
            SetPosition(23, 32);
            SetSize(245, 15);
            SetTextFlags(FT_CENTERY);
            SetInputLength(40);
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow(dict<string, any> params) override
        {
            if (cast< SayExtended >( Parent ).InputMessageID != 0)
            {
                SetText( MSG_TEXT( cast< SayExtended >( Parent ).InputMessageID ) );
            }
            else
            {
                SetText( "" );
            }
        }
    };

    class DoneButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(38, 58);
            SetSize(14, 14);
            SetPressedImage("art/intrface/DI_RDBT1.png");
        }

        void OnLMouseClick() override
        {
            string inputText = Screen.FindText( "MainSayText" ).Text;
            auto screen      = cast< SayExtended >( Parent );
            if(screen.FromScenery)
            {
                CurPlayer.ServerCall.ProcessSayExtendedFromScenery( inputText, screen.ProtoID, screen.HexX, screen.HexY );
            }
            else
            {
                CurPlayer.ServerCall.Rpc_ProcessSayExtended( inputText );
            }
            Game.HideScreen();
        }
    };

    class DoneButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(20, -1);
            SetText(MSG_GAME( MsgStr::StrSayOk ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSayOk ));
        }
    };

    class CancelButton : Gui::Button
    {
        void OnConstruct() override
        {
            SetPosition(164, 57);
            SetSize(14, 14);
            SetPressedImage("art/intrface/DI_RDBT1.png");
        }

        void OnLMouseClick() override
        {
            Game.HideScreen();
        }
    };

    class CancelButtonName : Gui::Text
    {
        void OnConstruct() override
        {
            SetPosition(19, -1);
            SetText(MSG_GAME( MsgStr::StrSayCancel ));
            SetTextFont(Fonts::Fat);
            SetTextColor(COLOR_SAND);
        }
    
        void OnRefreshText() override
        {
            SetText(MSG_GAME( MsgStr::StrSayCancel ));
        }
    };

    SayExtended CreateSayExtendedHierarchy(Gui::Object parent)
    {
        SayExtended obj = SayExtended();
        CreateTitleSayHierarchy(obj);
        CreateMainSayTextHierarchy(obj);
        CreateDoneButtonHierarchy(obj);
        CreateCancelButtonHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    TitleSay CreateTitleSayHierarchy(Gui::Object parent)
    {
        TitleSay obj = TitleSay();
        obj.Init(parent);
        return obj;
    }

    MainSayText CreateMainSayTextHierarchy(Gui::Object parent)
    {
        MainSayText obj = MainSayText();
        obj.Init(parent);
        return obj;
    }

    DoneButton CreateDoneButtonHierarchy(Gui::Object parent)
    {
        DoneButton obj = DoneButton();
        CreateDoneButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    DoneButtonName CreateDoneButtonNameHierarchy(Gui::Object parent)
    {
        DoneButtonName obj = DoneButtonName();
        obj.Init(parent);
        return obj;
    }

    CancelButton CreateCancelButtonHierarchy(Gui::Object parent)
    {
        CancelButton obj = CancelButton();
        CreateCancelButtonNameHierarchy(obj);
        obj.Init(parent);
        return obj;
    }

    CancelButtonName CreateCancelButtonNameHierarchy(Gui::Object parent)
    {
        CancelButtonName obj = CancelButtonName();
        obj.Init(parent);
        return obj;
    }

    Gui::Screen CreateScreen()
    {
        return CreateSayExtendedHierarchy(null);
    }
}
