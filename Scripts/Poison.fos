// FOS Server
// Author: cvet
// Original Fallout2 system

#define POISON_BASE_DURATION (REAL_SECOND(505))
#define POISON_DURATION_SUB  (REAL_SECOND(5))

#define STR_POISON_GAIN      (12810)
#define STR_POISON_PROCESS   (12811)
#define STR_POISON_REDUCE    (12812)
#define STR_POISON_FREE      (12813)

void AffectPoison(Critter cr, int value)
{
    if (cr.IsDead()) {
        return;
    }

    uint[] indexes = {};
    uint[] durations = {};
    uint[] rates = {};
    bool isActive = cr.GetTimeEvents(Tla::CtePoison, indexes, durations, rates) != 0;
    int levelVal = cr.PoisoningLevel;
    int resistVal = cr.DamageResistance[DamageTypes::Poison];

    if (value > 0) {
        value -= value * resistVal / 100;
    }
    else if (levelVal == 0) {
        return;
    }
    cr.PoisoningLevel = CLAMP(levelVal + value, 0, 2000);
    levelVal = cr.PoisoningLevel;

    uint strNum = 0;
    if (levelVal == 0) {
        strNum = STR_POISON_FREE;
    }
    else if (value > 0) {
        strNum = STR_POISON_GAIN;
    }
    else if (value < 0) {
        strNum = STR_POISON_REDUCE;
    }
    if (strNum != 0) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, strNum);
    }

    if (levelVal > 0) {
        if (!cr.IsPoisoned) {
            cr.IsPoisoned = true;
        }

        if (levelVal > 100) {
            int hp = levelVal - 100;
            cr.CurrentHp -= hp;
            if (cr.CurrentHp <= 0) {
                CritterState::ToDead(cr, Game.Random(0, 1) == 0 ? Anim2Actions::DeadFront : Anim2Actions::DeadBack, null);
            }
            cr.PoisoningLevel = 100;
        }
    }
    else {
        if (cr.IsPoisoned) {
            cr.IsPoisoned = false;
        }
    }

    if (isActive) {
        // Try hurry event, if new stage aviable
        if (levelVal == 0) {
            cr.EraseTimeEvents(Tla::CtePoison);
        }
        else {
            uint oldDuration = durations[0];
            uint newDuration = GetPoisonDuration(cr);
            if (newDuration < oldDuration) {
                cr.ChangeTimeEvent(indexes[0], newDuration, 0);
            }
        }
    }
    else {
        // Try start new event
        cr.AddTimeEvent(cte_Poison, GetPoisonDuration(cr), Tla::CtePoison);
    }
}

void DropPoison(Critter cr)
{
    cr.EraseTimeEvents(Tla::CtePoison);
    cr.PoisoningLevel = 0;
    if (cr.IsPoisoned) {
        cr.IsPoisoned = false;
    }
}

uint cte_Poison(Critter cr, int identifier, uint& rate)
{
    if (cr.IsDead()) {
        return 100;
    }

    int levelVal = cr.PoisoningLevel;
    if (levelVal > 0) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_POISON_PROCESS);
        cr.PoisoningLevel = CLAMP(levelVal - 2, 0, 2000);
        cr.CurrentHp -= 1;
        if (cr.CurrentHp <= 0) {
            CritterState::ToDead(cr, Game.Random(0, 1) == 0 ? Anim2Actions::DeadFront : Anim2Actions::DeadBack, null);
        }
    }

    if (cr.PoisoningLevel == 0) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_POISON_FREE);
        if (cr.IsPoisoned) {
            cr.IsPoisoned = false;
        }
        return 0;
    }

    return GetPoisonDuration(cr);
}

uint GetPoisonDuration(Critter cr)
{
    int duration = POISON_BASE_DURATION;
    int levelVal = cr.PoisoningLevel;
    if (levelVal == 0) {
        return 0;
    }
    duration -= levelVal * POISON_DURATION_SUB;
    if (duration <= 0) {
        duration = REAL_SECOND(1);
    }
    return duration;
}

/* fallout2 revers engineering by Atom

   One "tick" = 0.1 seconds (fallout's unit of time),

   Each time the poison level is adjusted by N (N can be >0 or <0), the following happens:

   adjust_poison(int N) // original fallout version
   {
   if (N <= 0)
   {
    poison_level+=N;
    if (poison_level<0) poison_level=0;
   }
   if (N>0) poison_level += N * (100 - poison_resistance) / 100;

   if (poison_level > 0)
   {
    delete time event "check poison", if there is one;
    add new time event "check poison" MAX(5050-50*poison_level,0) ticks from now;
   }
   }

   "check poison" event does the following:
   {
   adjust_poison(-2);
   injure_critter(1); // this is "uncalled" damage
   }

   -------------
   Note: it's often the case that fallout add events with time = 0, but they can be resolved immediately. this is always the case if poison_level>100, so
   adjust_poison can be easily changed to this:

   adjust_poison(int N)  // simplified fallout version
   {
   if (N <= 0)
   {
    poison_level+=N;
    if (poison_level<0) poison_level=0;
   }
   if (N>0) then poison_level += N * (100 - poison_resistance) / 100;

   if (poison_level > 0)
   {
    if (poison_level > 100)
    {
      injure_critter(poison_level - 100);
      poison_level=100;
    }
    delete time event "check poison", if there is one;
    add new time event "check poison" MAX(5050-50*poison_level,0) ticks from now;
   }
   }

   Note: now about the next problem - even if in one moment the "check poison" event is scheduled 1 second from now, adjusting (e.g. taking) the poison will
   delete this event and place a new one. but it's better to take min(previous time, new time). Also, another bug (or maybe it's not a bug?): if there is an
   event placed, and someone drinks anditode and set his poison_level to 0, event is not deleted. So:

   adjust_poison(int N)  // modified and debugged fallout version
   {
   if (N <= 0)
   {
    poison_level+=N;
    if (poison_level<0) poison_level=0;
    if (poison_level==0) delete time event "check poison", if there is one; // this line is questionable
   }
   if (N>0) then poison_level += N * (100 - poison_resistance) / 100;



   if (poison_level > 0)
   {
    if (poison_level > 100)
    {
      injure_critter(poison_level - 100);
      poison_level=100;
    }
    int time = 5050-50*poison_level;
    if (there is an "check poison" event)
    {
      int oldtime = old_event_time
      if (time<oldtime)
      {
        delete time event "check poison", if there is one;
        add new time event "check poison" (5050-50*poison_level) ticks from now;
      }
    }
    else
      add new time event "check poison" (5050-50*poison_level) ticks from now;
   }
   else
    delete time event "check poison", if there is one;
   }

   {12810}{}{You have been poisoned!}
   {12811}{}{You take damage from poison.}
   {12812}{}{You feel a little better.}
   {12813}{}{You feel better.}
 */
