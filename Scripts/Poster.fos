// FOS Server
// Author: rifleman17
// Постеры, которые можно вешать на стену
// Игрок использует свернутый плакат в инвентаре, если стоит на нужном гексе, то на стену рядом вешается плакат
// Гексы расставил Dagnir на картах личных складов

///@ Property Item PrivateServer hstring PosterSNWall
///@ Property Item PrivateServer hstring PosterEWWall

#define STR_USED        (5)
#define STR_WRONG_WALL  (6)

#define ENTRY_SN_POSTER ("1752")
#define ENTRY_EW_POSTER ("1704")

// clang-format off

int[][] posters =
/*  Info, Cost, SN стена, EW стена*/
{
    { 2, 1000, Content::Item::poster_2.hash, Content::Item::poster_3.hash },
    { 4, 2000, Content::Item::poster_4.hash, Content::Item::poster_5.hash },
    { 6, 3000, Content::Item::poster_6.hash, Content::Item::poster_7.hash },
    { 8, 4000, Content::Item::poster_8.hash, Content::Item::poster_9.hash },
    { 10, 5000, Content::Item::poster_bundle.hash, Content::Item::misc_0625.hash },
    { 12, 9000, Content::Item::misc_0626.hash, Content::Item::misc_0627.hash },
    { 14, 12000, Content::Item::misc_0628.hash, Content::Item::misc_0629.hash },
    { 16, 15000, Content::Item::misc_0630.hash, Content::Item::misc_0631.hash },
    { 18, 22000, Content::Item::misc_0632.hash, Content::Item::misc_0633.hash }
};

// clang-format on

void _BundleInit(Item item, bool firstTime)
{
    if (firstTime) {
        uint idx = Game.Random(0, posters.length() - 1);
        item.Cost = posters[idx][1];
        item.Info = posters[idx][0];
        item.PosterSNWall = hstring_fromHash(posters[idx][2]);
        item.PosterEWWall = hstring_fromHash(posters[idx][3]);
    }

    item.OnCritterUse.Subscribe(_BundleUse);
}

bool _BundleUse(Item item, Critter cr, uint param)
{
    Map map = cr.GetMap();
    if (valid(map)) {
        Entrance::Entry[] entries = {};
        entries.insertLast(Entrance::ParseEntries(map, hstring(ENTRY_SN_POSTER)));
        entries.insertLast(Entrance::ParseEntries(map, hstring(ENTRY_EW_POSTER)));
        uint16 x = cr.HexX;
        uint16 y = cr.HexY;
        for (uint i = 0; i < entries.length(); i++) {
            if (entries[i].HexX == cr.HexX && entries[i].HexY == cr.HexY) {
                if (entries[i].Name == hstring(ENTRY_EW_POSTER)) {
                    map.MoveHexByDir(x, y, 5, 1);
                    map.MoveHexByDir(x, y, 4, 1);
                    Item poster = map.AddItem(x, y, item.PosterSNWall, 1);
                    if (valid(poster)) {
                        poster.IsNoHighlight = true;
                    }
                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_USED);
                    Game.DeleteItem(item);
                    return true;
                }
                if (entries[i].Name == hstring(ENTRY_SN_POSTER)) {
                    map.MoveHexByDir(x, y, 1, 1);
                    Item poster = map.AddItem(x, y, item.PosterEWWall, 1);
                    if (valid(poster)) {
                        poster.IsNoHighlight = true;
                    }
                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_USED);
                    cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_USED);
                    Game.DeleteItem(item);
                    return true;
                }
            }
        }
        cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_WRONG_WALL);
        return true;
    }
    return false;
}
