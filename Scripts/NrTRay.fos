// FOS Server Sort 2
// Author: cvet

#define FD_NO_MONEY             (5)
#define FD_NO_PLACES            (6)
#define FD_BUY_SUCCESS_WORKSHOP (7)
#define FD_BUY_SUCCESS_CARSTOP  (8)
#define FD_MODIFY_NO_MONEY      (37)
#define FD_MODIFY_NO_NEED       (38)
#define FD_GENERIC_ERROR        (100)
#define FD_TAKE_KEY_IN_HAND     (101)
#define FD_CAR_NOT_FOUND        (102)
#define FD_TAKE_KEY_IN_HAND2    (103)

#define STR_BUY_LIST            (2100)
#define STR_COST_HUMMER         (2101)
#define STR_COST_BUGGY          (2102)
#define STR_COST_SCOUT          (2103)
#define STR_COST_HIGHWAYMAN     (2104)

#define ENTRY_WORKSHOP          (hstring("100"))

#define KEY_COPY_COST           (1000)

int GetFuelCost(Item car)
{
    return int(car.Car_TankVolume) - car.Charge + 10;
}

int GetWearCost(Item car)
{
    return car.Deterioration + 10;
}

int GetBioCost(Item car)
{
    return Car::GetCarCost(car.ProtoId) * 10 / 100;
}

void dlg_PrepareBuy(Critter player, Critter tray, string& lexems)
{
    if (not IS_DIALOG_GENERATED(lexems)) {
        return;
    }

    lexems += "$hummer" + Car::GetCarCost(Content::Item::hummer);
    lexems += "$buggy" + Car::GetCarCost(Content::Item::buggy);
    lexems += "$scout" + Car::GetCarCost(Content::Item::scout);
    lexems += "$highwayman" + Car::GetCarCost(Content::Item::highwayman);
}

uint r_BuyHummer(Critter player, Critter tray, int val)
{
    return TryCreateCar(player, Content::Item::hummer);
}

uint r_BuyBuggy(Critter player, Critter tray, int val)
{
    return TryCreateCar(player, Content::Item::buggy);
}

uint r_BuyScout(Critter player, Critter tray, int val)
{
    return TryCreateCar(player, Content::Item::scout);
}

uint r_BuyHighwayman(Critter player, Critter tray, int val)
{
    return TryCreateCar(player, Content::Item::highwayman);
}

uint TryCreateCar(Critter player, hstring protoCar)
{
    if (protoCar != Content::Item::hummer && protoCar != Content::Item::buggy && protoCar != Content::Item::scout && protoCar != Content::Item::highwayman) {
        return FD_GENERIC_ERROR;
    }

    uint cost = Car::GetCarCost(protoCar);
    if (player.CountItem(Content::Item::bottle_caps) < cost) {
        return FD_NO_MONEY;
    }

    Map map = player.GetMap();
    if (not valid(map)) {
        return FD_GENERIC_ERROR;
    }

    Entrance::Entry[] entries = {};
    entries.insertLast(Entrance::ParseEntries(map, ENTRY_WORKSHOP));
    entries.insertLast(Entrance::ParseEntries(map, ENTRY_CAR));

    uint16 hx, hy;
    hstring entNum;
    for (uint i = 0; i <= entries.length(); i++) {
        if (i == entries.length()) {
            return FD_NO_PLACES;
        }

        Entrance::Entry ent = entries[i];
        if (map.CheckPlaceForItem(ent.HexX, ent.HexY, protoCar)) {
            hx = ent.HexX;
            hy = ent.HexY;
            entNum = ent.Name;
            break;
        }
    }

    uint keyId = Game.Random(10000, 50000);

    Item car = map.AddItem(hx, hy, protoCar, 1);
    if (not valid(car)) {
        return FD_GENERIC_ERROR;
    }
    car.LockerId = keyId;
    car.Charge = car.Car_TankVolume;
    car.Deterioration = 0;
    /*
       Item bag = car.GetChild( 0 );
       if( valid( bag ) )
       {
       bag.LockerId = keyId;
       bag.LockerComplexity = Game.Random( 50, 100 );
       }
     */
    Item key = player.AddItem(Content::Item::key, 1);
    if (valid(key)) {
        key.LockerId = keyId;
    }

    player.DeleteItem(Content::Item::bottle_caps, cost);
    if (entNum == ENTRY_WORKSHOP) {
        return FD_BUY_SUCCESS_WORKSHOP;
    }

    return FD_BUY_SUCCESS_CARSTOP;
}

Item GetPlayerKey(Critter player)
{
    Item key = _CritGetItemHand(player);
    if (not valid(key) || key.Type != ItemType::Key) {
        return null;
    }
    return key;
}

Item GetPlayerCar(Critter player, uint forceDialog)
{
    Map map = player.GetMap();
    if (not valid(map)) {
        forceDialog = FD_GENERIC_ERROR;
        return null;
    }

    Item key = GetPlayerKey(player);
    if (not valid(key)) {
        forceDialog = FD_TAKE_KEY_IN_HAND;
        return null;
    }

    Entrance::Entry[] entries = {};
    entries.insertLast(Entrance::ParseEntries(map, ENTRY_WORKSHOP));
    entries.insertLast(Entrance::ParseEntries(map, ENTRY_CAR));
    for (uint i = 0; i < entries.length(); i++) {
        Item car = Obsolete::GetMapCar(map, entries[i].HexX, entries[i].HexY);
        if (valid(car) && car.LockerId == key.LockerId) {
            return car;
        }
    }

    forceDialog = FD_CAR_NOT_FOUND;
    return null;
}

uint r_CheckCar(Critter player, Critter tray, int val)
{
    uint forceDialog = 0;
    if (not valid(GetPlayerCar(player, forceDialog))) {
        return forceDialog;
    }
    return 0;
}

uint dlg_SellCar(Critter player, Critter tray, string& lexems)
{
    if (not IS_DIALOG_GENERATED(lexems)) {
        return 0;
    }
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        lexems = "$sell_cost0";
    }
    else {
        uint cost = Car::GetCarCost(car.ProtoId) / 2;
        if (car.IsQuestItem) {
            cost = 0;
        }
        lexems = "$sell_cost" + cost;
    }

    return forceDialog;
}

uint r_SellCar(Critter player, Critter tray, int val)
{
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        return forceDialog;
    }
    uint cost = Car::GetCarCost(car.ProtoId) / 2;
    if (car.IsQuestItem) {
        cost = 0;
    }
    Item key = _CritGetItemHand(player);
    if (valid(key) && key.Type == ItemType::Key && key.LockerId == car.LockerId) {
        Game.DeleteItem(key);
    }
    Game.DeleteItem(car);
    player.AddItem(Content::Item::bottle_caps, cost);
    return 0;
}

uint dlg_Fuel(Critter player, Critter tray, string& lexems)
{
    if (not IS_DIALOG_GENERATED(lexems)) {
        return 0;
    }
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        lexems = "$fuel_cost0";
    }
    else {
        lexems = "$fuel_cost" + GetFuelCost(car);
    }
    return forceDialog;
}

uint dlg_Wear(Critter player, Critter tray, string& lexems)
{
    if (not IS_DIALOG_GENERATED(lexems)) {
        return 0;
    }
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        lexems = "$wear_cost0";
    }
    else {
        lexems = "$wear_cost" + GetWearCost(car);
    }
    return forceDialog;
}

uint dlg_Bio(Critter player, Critter tray, string& lexems)
{
    if (not IS_DIALOG_GENERATED(lexems)) {
        return 0;
    }
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        lexems = "$bio_cost0";
    }
    else {
        lexems = "$bio_cost" + GetBioCost(car);
    }
    return forceDialog;
}

uint r_DoFuel(Critter player, Critter tray, int val)
{
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        return forceDialog;
    }

    uint cost = GetFuelCost(car);
    uint money = player.CountItem(Content::Item::bottle_caps);
    if (cost > money) {
        return FD_MODIFY_NO_MONEY;
    }

    if (car.Charge >= car.Car_TankVolume) {
        return FD_MODIFY_NO_NEED;
    }
    car.Charge = car.Car_TankVolume;
    player.DeleteItem(Content::Item::bottle_caps, cost);
    return 0;
}

uint r_DoWear(Critter player, Critter tray, int val)
{
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        return forceDialog;
    }

    uint cost = GetWearCost(car);
    uint money = player.CountItem(Content::Item::bottle_caps);
    if (cost > money) {
        return FD_MODIFY_NO_MONEY;
    }

    if (car.Deterioration == 0) {
        return FD_MODIFY_NO_NEED;
    }
    car.Deterioration = 0;
    player.DeleteItem(Content::Item::bottle_caps, cost);
    return 0;
}

uint r_DoBio(Critter player, Critter tray, int val)
{
    uint forceDialog = 0;
    Item car = GetPlayerCar(player, forceDialog);
    if (not valid(car)) {
        return forceDialog;
    }

    if (car.CarIsBioEngine) {
        return FD_MODIFY_NO_NEED;
    }

    uint cost = GetBioCost(car);
    uint money = player.CountItem(Content::Item::bottle_caps);
    if (cost > money) {
        return FD_MODIFY_NO_MONEY;
    }

    car.CarIsBioEngine = true;
    player.DeleteItem(Content::Item::bottle_caps, cost);
    return 0;
}

uint r_CopyKey(Critter player, Critter tray, int val)
{
    uint money = player.CountItem(Content::Item::bottle_caps);
    if (money < KEY_COPY_COST) {
        return FD_MODIFY_NO_MONEY;
    }

    Item key = GetPlayerKey(player);
    if (not valid(key)) {
        return FD_TAKE_KEY_IN_HAND2;
    }

    Item keyCopy = player.AddItem(Content::Item::key, 1);
    if (not valid(keyCopy)) {
        return FD_GENERIC_ERROR;
    }
    keyCopy.LockerId = key.LockerId;

    player.DeleteItem(Content::Item::bottle_caps, KEY_COPY_COST);
    return 0;
}
