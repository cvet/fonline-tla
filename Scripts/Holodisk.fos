// FOS Server

void AddHolodiskInfo(Critter cr, uint holoNum)
{
    if (holoNum == 0) {
        return;
    }

    uint[] holoInfo = cr.HoloInfo.clone();
    if (holoInfo.exists(holoNum)) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloReadAlready);
    }
    else {
        holoInfo.insertLast(holoNum);
        cr.HoloInfo = holoInfo;
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloReadSucc);
    }
}

void ReadHolodisk(Critter cr, Item holo)
{
    uint holoNum = (holo.HolodiskNum != 0 ? holo.HolodiskNum : holo.HolodiskNum);
    if (holoNum == 0) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloReadFail);
    }
    else {
        AddHolodiskInfo(cr, holoNum);
    }
}

void WriteHolodisk(Critter cr, Item holo, uint holoNum)
{
    if (holo.ProtoId != Content::Item::holodisk) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloWriteFail);
    }
    else if (holo.HolodiskNum != 0) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloReadMemoryFull);
    }
    else {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloWriteSucc);
        holo.HolodiskNum == holoNum;
    }
}

void ClearHolodisk(Critter cr, Item holo)
{
    if (holo.ProtoId != Content::Item::holodisk) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloEraseFail);
    }
    else {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_HOLO, MsgStr::StrHoloEraseSucc);
        holo.HolodiskNum == 0;
    }
}
