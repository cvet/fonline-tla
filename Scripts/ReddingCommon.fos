// FOS Server

///@ Property Critter Protected     uint8 ReddDoctorPoisoned Group = Quests Quest = 4311 Max = 3
///@ Property Critter PrivateServer uint8 ReddRooneyCemetery Max = 4
///@ Property Game PrivateServer bool ReddJohnsonBroadcast

#define STR_GRAVE (5425)
// #define DL#(s) (Game.Log(s))
#define DL #(s)
// Скрипт охраны Hex'a

class CGuardsManagerForNCR : GuardLib::CGuardsManager
{
    CGuardsManagerForNCR()
    {
        super();
        DialogId = Content::Dialog::redd_regulator;
    }
}

// класс с алгоритмом
CGuardsManagerForNCR Grd = CGuardsManagerForNCR();

bool GuardItemTest(Item item)
{
    return Grd.GuardItemTest(item);
}

// Усиление нпц
void PowerNpc(Critter cr)
{
    cr.StrengthBase = Game.Random(8, 10);
    cr.PerceptionBase = Game.Random(8, 10);
    cr.EnduranceBase = Game.Random(8, 10);
    cr.AgilityBase = Game.Random(8, 10);
    cr.Level = Game.Random(24, 30);
    cr.ActionPointsBase = Game.Random(10, 12);
    cr.CriticalChanceBase = Game.Random(20, 30);

    for (uint i = 0; i < CritterPropertyGroup::ResistsBase.length(); i++) {
        if (CritterPropertyGroup::ResistsBase[i] != CritterProperty::EmpResistanceBase) {
            cr.SetAsInt(CritterPropertyGroup::ResistsBase[i], Game.Random(40, 70));
        }
    }

    uint type = Game.Random(0, 4);
    switch (type) {
    case 1:
        cr.PerkSniper = 1;
        cr.PerkTerminator = 0;
        cr.PerkSlayer = 0;
        break;
    case 2:
        cr.PerkTerminator = 1;
        cr.PerkSniper = 0;
        cr.PerkSlayer = 0;
        break;
    case 3:
        cr.PerkSlayer = 1;
        cr.PerkSniper = 0;
        cr.PerkTerminator = 0;
        break;
    case 4:
        cr.PerkTerminator = 1;
        cr.PerkSlayer = 1;
        cr.PerkSniper = 0;
        break;
    default:
        cr.PerkSniper = 0;
        cr.PerkTerminator = 0;
        cr.PerkSlayer = 0;
        break;
    }
    cr.PerkBetterCriticals = (Game.Random(1, 10) == 1 ? 1 : 0);
    cr.PerkBonusRangedDamage = 1;
    cr.PerkLifegiver = Game.Random(1, 3);
    cr.PerkBonusRateOfFire = 1;
    cr.PerkBonusHthDamage = 1;
    for (uint i = 0; i < CritterPropertyGroup::Skills.length(); i++) {
        cr.SetAsInt(CritterPropertyGroup::Skills[i], Game.Random(150, 250));
    }
    cr.MaxLifeBase = Game.Random(250, 500);
    cr.CurrentHp = cr.MaxLife;
}

bool s_RooneyGrave(Critter player, StaticItem scenery, Item item, int skill)
{
    if (!valid(item)) {
        return true;
    }

    if (player.ReddRooneyCemetery < 3 && player.ReddRooneyCemetery > 0 && item.ProtoId == Content::Item::flower &&
        player.CountItem(Content::Item::flower) > 1) {
        player.ReddRooneyCemetery = 3;
        player.DestroyItem(Content::Item::flower, 2);
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_GRAVE);
        player.Experience += 200;
    }

    return true;
}

#define STR_POISONED_NO_QUEST (1)

void _PoisonedInit(Critter cr, bool firstTime)
{
    CritterState::ToKnockout(cr, KNOCKOUT_ACTION_ANIM_DEFAULT(true), 1000, cr.HexX, cr.HexY);
    cr.OnSomeUseItemOnMe.Subscribe(_SmthUseItem);
}

// CRITTER_EVENT_USE_ITEM_ON_ME
bool _SmthUseItem(Critter cr, Critter whoUse, Item item, uint param)
{
    if (item.ProtoId == Content::Item::antidote) {
        if (cr.ReddDoctorPoisoned == 1) {
            Game.RunDialog(whoUse, Content::Dialog::redd_poisoned, cr.HexX, cr.HexY, false);
            return true;
        }
        else {
            cr.SayMsg(SAY_EMOTE, TextPackName::Dialogs, DLGSTR(cr.DialogId, STR_POISONED_NO_QUEST));
        }
    }
    return false;
}

// Квест "На Связи" Доктор Джонсон
#define DOCTOR_CHANNEL  (1717)
#define STR_FIRST       (3300)
#define STR_LAST        (3340)
#define STR_BREAK_FIRST (3341)
#define STR_BREAK_LAST  (3343)

// Проверка, в инвентаре игрока есть радио с нужной волной
bool d_CheckRadio(Critter player, Critter npc)
{
    Item[] items = player.GetItems();
    for (uint i = 0; i < items.length(); i++) {
        if (items[i].ProtoId == Content::Item::radio && items[i].RadioChannel == DOCTOR_CHANNEL) { // TODO: вставить проверку канала
            return true;
        }
    }
    return false;
}

void r_Broadcast(Critter player, Critter npc)
{
    DL("broadcat result");
    Game.DeferredCall(8000, BeginBroadcast);
}

void BeginBroadcast()
{
    DL("Begin broadcast");
    if (Game.ReddJohnsonBroadcast) {
        return;
    }

    Game.ReddJohnsonBroadcast = true;
    Game.SavedDeferredCall(0, Broadcast, STR_FIRST);
}

void Broadcast(any value)
{
    DL("broadcast " + value);
    if (not Game.ReddJohnsonBroadcast) {
        return;
    }

    if (value >= STR_LAST) {
        Game.ReddJohnsonBroadcast = false;
        return;
    }

    Game.RadioMessageMsg(DOCTOR_CHANNEL, TextPackName::Text, value);

    value = int(value) + 1;

    Game.SavedDeferredCall(8000, Broadcast, value);
}

// Инициализация нпц. происходит при вводе нпц в игру
void _GuardInit(Critter npc, bool firstTime)
{
    // вешаем обработчики событий
    npc.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    npc.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    // npc.OnIdle.Subscribe(_GuardIdle);
    npc.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    npc.OnMessage.Subscribe(_GuardOnMessage);
    npc.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    npc.OnSomeCritterUseItem.Subscribe(_GuardOnUseItem);
    npc.OnSomeCritterStealing.Subscribe(_GuardStealing);
    npc.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    npc.OnSomeCritterDropItem.Subscribe(_GuardOnDropItem); // r17

    // Создаем событие наблюдения
    if (not firstTime && npc.GetTimeEvents(Tla::CteObserving) == 0) {
        npc.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

uint cte_Observing(Critter npc, any identifier, uint& stage)
{
    return Grd.EventObserving(npc);
}

void _GuardOnAddCritter(Critter crit, Critter showCrit)
{
    Grd.EventOnAddCritter(crit, showCrit);
}

void _GuardOnRemoveCritter(Critter crit, Critter hideCrit)
{
    Grd.EventOnRemoveCritter(crit, hideCrit);
}

bool _GuardEndPlane(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    Grd.EventEndPlane(npc);
    return true;
}

void _GuardOnMoveItem(Critter crit, Critter fromCrit, Item item, CritterItemSlot fromSlot)
{
    Grd.EventOnMoveItem(crit, fromCrit, Game.GetItem(item.Id), fromSlot);
}

void _GuardOnMessage(Critter crit, Critter fromCrit, int message, any value)
{
    Grd.EventOnMessage(crit, fromCrit, message, value);
}

void _GuardOnUseItem(Critter crit, Critter fromCrit, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    Grd.EventOnUseItem(crit, fromCrit, item, onCritter, onItem, null);
}

void _GuardOnDropItem(Critter crit, Critter fromCrit, Item item) // r17
{
    Grd.EventOnDropItem(crit, fromCrit, item);
}

void _GuardOnSmthAttack(Critter crit, Critter fromCrit, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    Grd.EventOnSmthAttack(crit, fromCrit, target);
}

void _GuardStealing(Critter crit, Critter thief, Critter fromCrit, Item item, uint count)
{
    Grd.EventStealing(crit, fromCrit, thief, false, item, count);
}
