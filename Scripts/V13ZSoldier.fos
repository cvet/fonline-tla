// FOS Server
// Author: Sufir

// Defines
ident CurGuardian; // Todo: init guardian
hstring GuardDlg = Content::Dialog::v13_guard;
uint16 GuardX = 69, GuardY = 72, GuardDir = 3;

void _SoldierInit(Critter soldier, bool firstTime)
{
    soldier.IsNoSupply = true;
    soldier.OnMessage.Subscribe(_SoldierGetMessage);
    soldier.OnSomeCritterDropItem.Subscribe(_SoldierMined);
    soldier.OnSomeCritterDead.Subscribe(_GuardianDead);
    soldier.OnAttacked.Subscribe(_FriendlyFire);
    soldier.OnAttack.Subscribe(_FriendlyFire2);
    soldier.OnNpcPlaneBegin.Subscribe(_FriendlyFirePlane);
}

void _SoldierGetMessage(Critter soldier, Critter fromCr, int message, any value)
{
    if (!soldier.IsAlive()) {
        return;
    }
    if (soldier.Id == fromCr.Id) {
        return;
    }
    if (!fromCr.IsSeenBy(soldier)) {
        return;
    }
    Critter player = Game.GetCritter(value);
    if (!valid(player)) {
        return;
    }
    if (!player.IsOwnedByPlayer()) {
        return;
    }
    if (message == V13ZGuard::MsgV13GuardAlarm) {
        NpcPlanes::AddAttackPlane(soldier, 0, player.Id, int(float(player.CharismaBase) * 1.5));
        // EnemyStack::AddEnemyToStack( soldier,  player.Id  );
    }
    else if (message == V13ZGuard::MsgV13GuardKill) {
        NpcPlanes::AddAttackPlane(soldier, 0, player.Id);
    }
}

// Если солдат обнаружил закладывающего взрывчатку игрока - атакуем его.
void _SoldierMined(Critter soldier, Critter dropper, Item item)
{
    if (!NpcPlanes::IsNoPlanes(soldier)) {
        return;
    }
    if (!valid(dropper)) {
        return;
    }
    if (!dropper.IsOwnedByPlayer()) {
        return;
    }
    if (!dropper.IsAlive()) {
        return;
    }

    // Заминировать нас не так-то просто, нужно быть действительно мастером и удачливым ловкачем.
    if (V13GuardLib::IsMined(soldier, item, dropper, soldier.PerceptionBase * 20, PidsGroups::Pids_MiscActiveExplosions)) {
        NpcPlanes::AddAttackPlane(soldier, 0, dropper.Id);
    }
}

// Если сержант на КПП убит, один из солдат займёт его место, если хоть один из солдат жив.
void _GuardianDead(Critter soldier, Critter guardian, Critter killer)
{
    if (!soldier.IsAlive()) {
        return;
    }

    if (guardian.Id == CurGuardian) {
        soldier.NpcRole = V13ZGuard::RoleGuardian;
        guardian.NpcRole = V13ZGuard::RoleSoldier;
        CurGuardian = soldier.Id;
        guardian.HomeMapId = soldier.HomeMapId;
        guardian.HomeHexX = soldier.HomeHexX;
        guardian.HomeHexY = soldier.HomeHexY;
        guardian.HomeDir = soldier.HomeDir;
        soldier.HomeMapId = soldier.GetMap().Id;
        soldier.HomeHexX = GuardX;
        soldier.HomeHexY = GuardY;
        soldier.HomeDir = GuardDir;
        guardian.DialogId = soldier.DialogId;
        soldier.DialogId = GuardDlg;
        guardian.SetupScript(_SoldierInit);
        soldier.SetupScript(V13ZGuard::_GuardInit);
    }
    else {
        if (valid(killer)) {
            NpcPlanes::AddAttackPlane(soldier, 0, killer.Id);
        }
    }
}

// Если NPC атакован одним из "своих" - не атакуем его.
bool _FriendlyFirePlane(Critter guardian, int planeId, int reason, Critter some, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(guardian, planeId);

    if (plane.Type == AI_PLANE_ATTACK) {
        Critter target = Game.GetCritter(plane.Attack_TargId);
        if (valid(target) && target.NpcRole == V13ZGuard::RoleGuardian || target.NpcRole == V13ZGuard::RoleSoldier) {
            return false;
        }
    }
    return true;
}
bool _FriendlyFire2(Critter critter, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    return _FriendlyFire(critter, target);
}

// Если NPC атакован одним из "своих" - не атакуем его.
bool _FriendlyFire(Critter guardian, Critter attacker)
{
    if (guardian.IsNpc() && attacker.IsNpc()) {
        if (guardian.NpcRole == V13ZGuard::RoleGuardian || guardian.NpcRole == V13ZGuard::RoleSoldier) {
            guardian.Wait(5000);
            attacker.Wait(5000);
            if (EnemyStack::CheckEnemyInStack(guardian, attacker.Id)) {
                EnemyStack::EraseEnemyFromStack(guardian, attacker.Id);
            }
            if (EnemyStack::CheckEnemyInStack(attacker, guardian.Id)) {
                EnemyStack::EraseEnemyFromStack(attacker, guardian.Id);
            }
            NpcPlanes::EraseAttackPlane(attacker, guardian.Id);
            NpcPlanes::EraseAttackPlane(guardian, attacker.Id);
            return true;
        }
    }
    return false;
}
