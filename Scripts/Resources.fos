// FOS Server Sort 2
// Author: Tab10id

///@ Property Critter Protected uint8 ModFarrelAmmiak Group = Quests Quest = 3316 Max = 2
///@ Property Map PrivateServer uint=>uint ResourcesData

#define DL #(str)
// #define DL #(str) Game.Log(str)

#define MAX_RESOURCES_COUNT_PER_SCENERY (10)
#define TIME_FOR_RESOURCES_COUNT_RESP   (60 * 60 * 24 * 3)
#define RESOURCES_COUNT_RESP_COUNT      (2)
#define DEFAULT_TIMEOUT                 (REAL_MINUTE(10))
#define OUTDOORSMAN_TIMEOUT             #(cr)(Game.GetFullSecond() +(DEFAULT_TIMEOUT / cr.SkillOutdoorsman))
#define OUTDOORSMAN_SUPERSLEDGE_TIMEOUT #(cr)(Game.GetFullSecond() +(DEFAULT_TIMEOUT /(cr.SkillOutdoorsman * 3 / 2)))

#define STR_NO_RESOURCE                 (3700)
#define STR_WEIGHT_TOO_HEAVY            (3701)
#define STR_ITEMS_ADDED                 (3702)
#define STR_ITEM_ADDED                  (3703)
#define STR_WOOD_ADDED                  (3704)
#define STR_TYPE_COUNT                  (3705)
#define STR_TYPE_KG                     (3706)
#define STR_NO_AMMIAK                   (3707)
#define STR_AMMIAK_ADDED                (3708)

#define EXP_FOR_ORE                     (20)

// FalloutAnims1::Aim                   ( 14 )
// FalloutAnims2::Stay                  ( 1 )

// clang-format off

// Todo: fix resource pids
uint[][][] ToolsSettings =
{
    {
        // Axe
        { Content::Item::axe.hash },                                                                                                      // Пиды инструментов
        { 0 },                                                                                                                            // Анимация проигрываемая при попытке собрать ресурсы
        { 0 },                                                                                                                            // Анимация проигрываемая при попытке собрать ресурсы
        { 2066, 2316, 2317, 2318, 2319, 2320, 2321, 2945, 2946, 2947, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572 }, // Пиды источников ресурсов
        { 0 },                                                                                                                            // Количество предметов в одном обхекте Scenery (0 - значение по умолчанию)
        { Content::Item::firewood.hash, Content::Item::sharpened_pole.hash },                                                             // Пиды возможных ресурсов
        { 1,            1 },                                                                                                              // минимальное количество получаемых ресурсов
        { 1,            1 },                                                                                                              // максимальное количество получаемых ресурсов
        { 95,           100 },                                                                                                            // Шансы получения того или иного вида ресурсов (шансы проверяются по порядку)
    },
    {
        // Sledgehammer
        { Content::Item::sledgehammer.hash, Content::Item::super_sledge.hash },
        { Anim1::Hammer,     Anim1::Hammer },
        { Anim2Actions::Swing1h,   Anim2Actions::Swing1h },
        { 2074, 2075, 2079, 2080, 2092, 2093, 2428, 2429, 2430, 2431, 2435, 3273, 3580 },
        { 0 },
        { Content::Item::rock.hash },
        { 1 },
        { 5 },
        { 100 },
    },
    {
        // Sledgehammer
        { Content::Item::sledgehammer.hash, Content::Item::super_sledge.hash },
        { Anim1::Hammer,     Anim1::Hammer },
        { Anim2Actions::Swing1h,   Anim2Actions::Swing1h },
        { 2069, 2070, 2072, 2073, 2078, 2081, 2090, 2091, 2688 },
        { 0 },
        { Content::Item::rock.hash, Content::Item::mineral.hash, Content::Item::metal_ore.hash },
        { 1,        1,           1 },
        { 5,        2,           1 },
        { 80,       65,          100 },
    },
    {
        // Multi tool
        { Content::Item::multi_tool.hash },
        { 0 },
        { 0 },
        { 2106, 2252, 2253, 2254, 2255, 3294, 3295, 3296 },
        { 5 },
        { Content::Item::metal_trash.hash, Content::Item::pump_parts.hash },
        { 1,               1 },
        { 2,               1 },
        { 70,              100 },
    },
    {
        // Multi tool
        { Content::Item::bottle_empty.hash },
        { 0 },
        { 0 },
        { 42 },
        { 1 },
        { Content::Item::bottle_ammiak.hash },
        { 0 },
        { 0 },
        { 100 },
    }
};

// clang-format on

CTool[] Tools = {};

// Класс стандартной обработки
ToolDefault defTool;

// Классы рассширенной обработки условий и результатов
ToolAxe toolAxe;
ToolSuperSledge toolSuperSledge;
ToolGiveExpForOre toolGiveExpForOre;
ToolShowInfoInWeight toolShowInfoInWeight;
ToolBottle toolBottle;

uint MakeDataKey(uint16 hx, uint16 hy, hstring pid)
{
    return (hx << 16) | hy;
}

void SetToolsExt()
{
    Tools[0].SetCallbackDemand(toolAxe, Content::Item::axe).SetCallbackResult(toolAxe, Content::Item::firewood);
    Tools[1].SetCallbackSetTimeouts(toolSuperSledge, Content::Item::super_sledge);
    Tools[2]
        .SetCallbackSetTimeouts(toolSuperSledge, Content::Item::super_sledge)
        .SetCallbackAddExp(toolGiveExpForOre, Content::Item::metal_ore)
        .SetCallbackResult(toolShowInfoInWeight, Content::Item::metal_ore)
        .SetCallbackResult(toolShowInfoInWeight, Content::Item::mineral);
    Tools[4]
        .SetCallbackDemand(toolBottle, Content::Item::bottle_empty)
        .SetCallbackResult(toolBottle, Content::Item::bottle_ammiak)
        .SetCallbackSetTimeouts(toolBottle, Content::Item::bottle_empty);
}

class CStarter
{
    CStarter()
    {
        for (uint i = 0; i < ToolsSettings.length(); i++) {
            uint k = 0;
            Tools.resize(Tools.length() + 1);
            CTool tool = Tools[Tools.length() - 1];
            tool.ToolPids = IntToHashArray(ToolsSettings[i][k++]);
            tool.Anim1 = ToolsSettings[i][k++];
            tool.Anim2 = ToolsSettings[i][k++];
            tool.SourcePids = IntToHashArray(ToolsSettings[i][k++]);
            tool.SourceCount = ToolsSettings[i][k++];
            tool.NewItemsPids = IntToHashArray(ToolsSettings[i][k++]);
            tool.MinCount = ToolsSettings[i][k++];
            tool.MaxCount = ToolsSettings[i][k++];
            tool.NewItemsChances = ToolsSettings[i][k];
            tool.CallbackDemand.resize(tool.ToolPids.length());
            tool.CallbackResult.resize(tool.NewItemsPids.length());
            tool.CallbackSetTimeouts.resize(tool.ToolPids.length());
            tool.CallbackAddExp.resize(tool.NewItemsPids.length());
            tool.SetCallbackDemand(defTool).SetCallbackResult(defTool).SetCallbackGetTimeouts(defTool).SetCallbackSetTimeouts(defTool).SetCallbackAddExp(
                defTool);
        }
        SetToolsExt();
    }

    private
    hstring[] IntToHashArray(uint[] hashes)
    {
        hstring[] result = {};
        for (uint i = 0; i < hashes.length(); i++) {
            result.insertLast(hstring_fromHash(hashes[i]));
        }
        return result;
    }
} CStarter starter;

interface IResourceDemand
{
    bool OnDemand(Critter master, hstring toolPid);
};
interface IResourceResult
{
    uint OnResult(Critter master, Item onItem, StaticItem onScenery, hstring toolPid, uint count, hstring newItemsPid);
};
interface IResourceGetTimeouts
{
    bool OnGetTimeouts(Critter master, hstring toolPid);
};
interface IResourceSetTimeouts
{
    void OnSetTimeouts(Critter master, hstring toolPid, uint count, hstring newItemsPid);
};
interface IResourceAddExp
{
    void OnAddExp(Critter master, hstring toolPid, uint count, hstring newItemsPid);
};

class CTool
{
    hstring[] ToolPids = {};
    hstring[] SourcePids = {};
    uint[] SourceCount = {};
    hstring[] NewItemsPids = {};
    uint[] NewItemsChances = {};
    uint[] Anim1 = {};
    uint[] Anim2 = {};
    uint[] MinCount = {};
    uint[] MaxCount = {};
    IResourceDemand[] CallbackDemand = {};
    IResourceResult[] CallbackResult = {};
    IResourceGetTimeouts CallbackGetTimeouts;
    IResourceSetTimeouts[] CallbackSetTimeouts = {};
    IResourceAddExp[] CallbackAddExp = {};

    CTool SetCallbackDemand(IResourceDemand callback)
    {
        for (uint i = 0; i < ToolPids.length(); i++) {
            CallbackDemand[i] = callback;
        }
        return this;
    }

    CTool SetCallbackResult(IResourceResult callback)
    {
        for (uint i = 0; i < NewItemsPids.length(); i++) {
            CallbackResult[i] = callback;
        }
        return this;
    }

    CTool SetCallbackDemand(IResourceDemand callback, hstring toolPid)
    {
        int toolIdx = GetToolIdx(toolPid);
        if (toolIdx != -1) {
            CallbackDemand[toolIdx] = callback;
        }
        else {
            DL("Tool with pid №" + toolPid + " not found in group");
        }
        return this;
    }

    CTool SetCallbackResult(IResourceResult callback, hstring newItemPid)
    {
        int newItemIdx = GetNewItemIdx(newItemPid);
        if (newItemIdx != -1) {
            CallbackResult[newItemIdx] = callback;
        }
        else {
            DL("New item with pid №" + newItemPid + " not found in group");
        }
        return this;
    }

    CTool SetCallbackGetTimeouts(IResourceGetTimeouts callback)
    {
        CallbackGetTimeouts = callback;
        return this;
    }

    CTool SetCallbackSetTimeouts(IResourceSetTimeouts callback)
    {
        for (uint i = 0; i < ToolPids.length(); i++) {
            CallbackSetTimeouts[i] = callback;
        }
        return this;
    }

    CTool SetCallbackSetTimeouts(IResourceSetTimeouts callback, hstring toolPid)
    {
        int toolIdx = GetToolIdx(toolPid);
        if (toolIdx != -1) {
            CallbackSetTimeouts[toolIdx] = callback;
        }
        else {
            DL("Tool with pid №" + toolPid + " not found in group");
        }
        return this;
    }

    CTool SetCallbackAddExp(IResourceAddExp callback)
    {
        for (uint i = 0; i < NewItemsPids.length(); i++) {
            CallbackAddExp[i] = callback;
        }
        return this;
    }

    CTool SetCallbackAddExp(IResourceAddExp callback, hstring newItemPid)
    {
        int newItemIdx = GetNewItemIdx(newItemPid);
        if (newItemIdx != -1) {
            CallbackAddExp[newItemIdx] = callback;
        }
        else {
            DL("New item with pid №" + newItemPid + " not found in group");
        }
        return this;
    }

    int GetNewItemIdx(Critter player, int toolIdx)
    {
        bool demand = true;
        if (not(CallbackDemand[toolIdx] is null)) {
            demand = CallbackDemand[toolIdx].OnDemand(player, ToolPids[toolIdx]);
        }
        if (demand) {
            for (uint i = 0; i < NewItemsChances.length(); i++) {
                if (uint(Game.Random(0, 99)) < NewItemsChances[i]) {
                    return int(i);
                }
                else {
                    continue;
                }
            }
        }
        return -1;
    }

    int GetNewItemIdx(hstring pid)
    {
        DL("NewItemsPids count: " + NewItemsPids.length());
        for (uint i = 0; i < NewItemsPids.length(); i++) {
            DL("NewItemsPids" + i + ": " + NewItemsPids[i]);
            if (NewItemsPids[i] == pid) {
                return int(i);
            }
        }
        return -1;
    }

    int GetToolIdx(hstring pid)
    {
        for (uint i = 0; i < ToolPids.length(); i++) {
            if (ToolPids[i] == pid) {
                return i;
            }
        }
        return -1;
    }
};

void _ToolInit(Item item, bool firstTime)
{
    item.OnCritterUseOn.Subscribe(_ToolUse);
}

bool _ToolUse(Item item, Critter cr, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    hstring pid = item.ProtoId;
    hstring onObj;
    uint resourceCount;
    if (valid(onItem)) {
        onObj = onItem.ProtoId;
    }
    else {
        if (valid(onScenery)) {
            onObj = onScenery.ProtoId;
        }
        else {
            return false;
        }
    }

    CTool tool;
    tool = GetTool(pid, onObj);

    if (valid(tool)) {
        uint toolIdx = tool.GetToolIdx(pid);
        if (not(tool.CallbackGetTimeouts is null)) {
            bool noTimeouts = tool.CallbackGetTimeouts.OnGetTimeouts(cr, pid);
            if (not noTimeouts) {
                return true;
            }
        }
        if (not CritterCanGetMoreItems(cr)) {
            return true;
        }

        AnimateCritter(cr, tool.Anim1[toolIdx], tool.Anim2[toolIdx]);
        ident mapId = cr.MapId;
        DL("Tool used");
        if (valid(onScenery)) {
            resourceCount = GetSceneryResourcesCount(mapId, onScenery);
            if (resourceCount == 0) {
                cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RESOURCE);
                return true;
            }
        }

        int newItemIdx = tool.GetNewItemIdx(cr, toolIdx);
        if (newItemIdx != -1) {
            if (tool.NewItemsPids[newItemIdx] != EMPTY_HSTRING) {
                uint itemCount = Game.Random(tool.MinCount[newItemIdx], tool.MaxCount[newItemIdx]);
                if (itemCount > 0) {
                    if (valid(onScenery)) {
                        if (resourceCount < itemCount) {
                            itemCount = resourceCount;
                        }
                        resourceCount -= itemCount;
                        SetSceneryResourcesCount(resourceCount, mapId, onScenery);
                    }
                    cr.AddItem(tool.NewItemsPids[newItemIdx], itemCount);
                }
                if (not(tool.CallbackResult[newItemIdx] is null)) {
                    itemCount += tool.CallbackResult[newItemIdx].OnResult(cr, onItem, onScenery, pid, itemCount, tool.NewItemsPids[newItemIdx]);
                }
                if (not(tool.CallbackSetTimeouts[toolIdx] is null)) {
                    tool.CallbackSetTimeouts[toolIdx].OnSetTimeouts(cr, pid, itemCount, tool.NewItemsPids[newItemIdx]);
                }
                if (not(tool.CallbackAddExp[newItemIdx] is null)) {
                    tool.CallbackAddExp[newItemIdx].OnAddExp(cr, pid, itemCount, tool.NewItemsPids[newItemIdx]);
                }
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    else {
        DL("Wrong tool using");
    }
    return false;
}

bool CritterCanGetMoreItems(Critter player)
{
    if ((player.CarryWeight - player.ItemsWeight) < 0) {
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_WEIGHT_TOO_HEAVY);
        return false;
    }
    return true;
}

uint GetSceneryResourcesCount(ident mapId, StaticItem scenery)
{
    uint resourceCount = 0;
    Map map = Game.GetMap(mapId);
    uint dataKey = MakeDataKey(scenery.HexX, scenery.HexY, scenery.ProtoId);
    auto resourcesData = map.ResourcesData.clone();
    if (resourcesData.exists(dataKey)) {
        resourceCount = resourcesData[dataKey];
    }
    else {
        uint maxResCount = GetMaxResourceCount(scenery.ProtoId);
        resourcesData[dataKey] = maxResCount;
        map.ResourcesData = resourcesData;
        any[] forTE = {};
        forTE.insertLast(mapId);
        forTE.insertLast(scenery.HexX);
        forTE.insertLast(scenery.HexY);
        forTE.insertLast(scenery.ProtoId.uhash);
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_FOR_RESOURCES_COUNT_RESP), AddResourcesCount, forTE);
        resourceCount = maxResCount;
    }
    return resourceCount;
}

void SetSceneryResourcesCount(uint resourceCount, ident mapId, StaticItem scenery)
{
    Map map = Game.GetMap(mapId);
    uint dataKey = MakeDataKey(scenery.HexX, scenery.HexY, scenery.ProtoId);
    auto resourcesData = map.ResourcesData.clone();
    resourcesData[dataKey] = resourceCount;
    map.ResourcesData = resourcesData;
}

CTool GetTool(hstring pid, hstring source)
{
    DL("ToolsGroup count: " + Tools.length());
    for (uint i = 0; i < Tools.length(); i++) {
        for (uint k = 0; k < Tools[i].ToolPids.length(); k++) {
            if (Tools[i].ToolPids[k] == pid) {
                for (uint l = 0; l < Tools[i].SourcePids.length(); l++) {
                    if (Tools[i].SourcePids[l] == source) {
                        return Tools[i];
                    }
                }
                break;
            }
        }
    }
    return null;
}

CTool GetTool(hstring sourcePid)
{
    for (uint i = 0; i < Tools.length(); i++) {
        for (int k = 0; k < int(Tools[i].SourcePids.length()); k++) {
            if (Tools[i].SourcePids[k] == sourcePid) {
                return Tools[i];
            }
        }
    }
    return null;
}

void AddResourcesCount(any[] values)
{
    Map map = Game.GetMap(values[0]);
    uint dataKey = MakeDataKey(values[1], values[2], hstring_fromHash(values[3]));
    auto resourcesData = map.ResourcesData.clone();
    if (resourcesData.exists(dataKey)) {
        resourcesData[dataKey] = resourcesData[dataKey] + RESOURCES_COUNT_RESP_COUNT;
        if (resourcesData[dataKey] < GetMaxResourceCount(hstring_fromHash(values[3]))) {
            map.ResourcesData = resourcesData;
            Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_FOR_RESOURCES_COUNT_RESP), AddResourcesCount, values);
            return;
        }
        resourcesData.remove(dataKey);
        map.ResourcesData = resourcesData;
    }
}

void AnimateCritter(Critter cr, uint anim1, uint anim2)
{
    if (anim1 != 0 or anim2 != 0) {
        cr.Animate(anim1, anim2, null, true, true);
    }
}

uint GetMaxResourceCount(hstring scProto)
{
    CTool tool = GetTool(scProto);
    {
        uint count = tool.SourceCount[0];
        if (count != 0) {
            return count;
        }
    }
    return MAX_RESOURCES_COUNT_PER_SCENERY;
}

class ToolDefault : IResourceDemand, IResourceResult, IResourceGetTimeouts, IResourceSetTimeouts, IResourceAddExp
{
    uint OnResult(Critter master, Item onItem, StaticItem onScenery, hstring toolPid, uint count, hstring newItemsPid)
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_PROTO_ITEM_NAME(newItemsPid) + "@";
        if (count > 1) {
            lexem += "$count" + count + "$type" + "@msg text " + STR_TYPE_COUNT + "@";
            master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem);
        }
        else {
            if (count == 1) {
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_ADDED, lexem);
            }
        }
        return 0;
    }

    bool OnDemand(Critter master, hstring toolPid)
    {
        return true;
    }

    bool OnGetTimeouts(Critter master, hstring toolPid)
    {
        if (IS_TIMEOUT(master.TimeoutSkOutdoorsman)) {
            master.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrSkillWeariness);
            return false;
        }
        return true;
    }

    void OnSetTimeouts(Critter master, hstring toolPid, uint count, hstring newItemsPid)
    {
        master.TimeoutSkOutdoorsman = OUTDOORSMAN_TIMEOUT(master);
    }

    void OnAddExp(Critter master, hstring toolPid, uint count, hstring newItemsPid)
    {
        // do nothing
    }
};

// Tools

class ToolBottle : IResourceDemand, IResourceResult, IResourceSetTimeouts
{
    bool OnDemand(Critter master, hstring toolPid)
    {
        return master.ModFarrelAmmiak > 0;
    }

    uint OnResult(Critter master, Item onItem, StaticItem onScenery, hstring toolPid, uint count, hstring newItemsPid)
    {
        uint itemCount = 1;
        uint resourceCount = 1;
        if (valid(onItem)) {
            Map map = Game.GetMap(onItem.MapId);
            uint dataKey = MakeDataKey(onItem.HexX, onItem.HexY, onItem.ProtoId);
            dict<uint, uint> resourcesData = map.ResourcesData.clone();
            if (resourcesData.exists(dataKey)) {
                resourceCount = resourcesData[dataKey];
            }

            if (resourceCount == 0) {
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NO_AMMIAK);
                return 0;
            }

            resourceCount = 0;
            resourcesData[dataKey] = resourceCount;
            map.ResourcesData = resourcesData;

            any[] forTE = {};
            forTE.insertLast(onItem.MapId);
            forTE.insertLast(onItem.HexX);
            forTE.insertLast(onItem.HexY);
            forTE.insertLast(onItem.ProtoId.uhash);
            Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_FOR_RESOURCES_COUNT_RESP * 5), AddResourcesCount, forTE);

            Item tool = master.GetItem(toolPid);
            if ((Game.Random(1, 6) + int(master.Luck / 4)) > 5 && valid(tool)) {
                master.AddItem(Content::Item::bottle_ammiak, 1);
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_AMMIAK_ADDED);
                Game.DeleteItem(tool, 1);
            }
            else {
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NO_AMMIAK);
            }
        }
        return 0;
    }

    void OnSetTimeouts(Critter master, hstring toolPid, uint count, hstring newItemsPid)
    {
        // ...
    }
};

class ToolAxe : IResourceDemand, IResourceResult
{
    bool OnDemand(Critter master, hstring toolPid)
    {
        return Game.Random(0, 99) < (50 + (master.AgilityBase * 5));
    }

    uint OnResult(Critter master, Item onItem, StaticItem onScenery, hstring toolPid, uint count, hstring newItemsPid)
    {
        uint resourceCount = GetMaxResourceCount(onScenery.ProtoId);
        uint maxCount = master.SkillOutdoorsman / 50;
        if (maxCount == 0) {
            maxCount = 1;
        }
        uint itemCount = Game.Random(1, maxCount);
        ident mapId = master.MapId;
        if (valid(onScenery)) {
            Map map = Game.GetMap(mapId);
            uint dataKey = MakeDataKey(onScenery.HexX, onScenery.HexY, onScenery.ProtoId);
            auto resourcesData = map.ResourcesData;
            resourceCount = resourcesData.get(dataKey, resourceCount);
            if (resourceCount < itemCount) {
                itemCount = resourceCount;
            }
        }
        if (resourceCount == 0 && count == 0) {
            master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RESOURCE);
            return 0;
        }
        else {
            resourceCount -= itemCount;
            if ((count + itemCount) > 0) {
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_WOOD_ADDED);
            }
        }
        if (valid(onScenery)) {
            Map map = Game.GetMap(mapId);
            uint dataKey = MakeDataKey(onScenery.HexX, onScenery.HexY, onScenery.ProtoId);
            auto resourcesData = map.ResourcesData.clone();
            resourcesData[dataKey] = resourceCount;
            map.ResourcesData = resourcesData;
        }
        master.AddItem(Content::Item::firewood, itemCount);
        return itemCount;
    }
};

class ToolSuperSledge : IResourceSetTimeouts
{
    void OnSetTimeouts(Critter master, hstring toolPid, uint count, hstring newItemsPid)
    {
        master.TimeoutSkOutdoorsman = OUTDOORSMAN_SUPERSLEDGE_TIMEOUT(master);
    }
};

class ToolGiveExpForOre : IResourceAddExp
{
    void OnAddExp(Critter master, hstring toolPid, uint count, hstring newItemsPid)
    {
        master.Experience += EXP_FOR_ORE;
    }
};

class ToolShowInfoInWeight : IResourceResult
{
    uint OnResult(Critter master, Item onItem, StaticItem onScenery, hstring toolPid, uint count, hstring newItemsPid)
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_PROTO_ITEM_NAME(newItemsPid) + "@";
        if (count > 0) {
            ProtoItem newProtoItem = Game.GetProtoItem(newItemsPid);
            uint itemWeight = newProtoItem.Weight * count / 1000;
            lexem += "$count" + itemWeight + "$type" + "@msg text " + STR_TYPE_KG + "@";
            master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem);
        }
        return 0;
    }
};
