// FOS Common

///@ Property Game Protected CritterProperty[] RegProperties
///@ Property Critter Protected bool IsGenerated
///@ RemoteCall Server AddRegistrationProperty(CritterProperty property)
///@ RemoteCall Server GeneratePlayer(CritterProperty=>int props)

#ifdef __SERVER

void ModuleInit()
{
    AddRegistrationProperty(CritterProperty::StrengthBase);
    AddRegistrationProperty(CritterProperty::PerceptionBase);
    AddRegistrationProperty(CritterProperty::EnduranceBase);
    AddRegistrationProperty(CritterProperty::CharismaBase);
    AddRegistrationProperty(CritterProperty::IntellectBase);
    AddRegistrationProperty(CritterProperty::AgilityBase);
    AddRegistrationProperty(CritterProperty::LuckBase);
    AddRegistrationProperty(CritterProperty::TagSkill1);
    AddRegistrationProperty(CritterProperty::TagSkill2);
    AddRegistrationProperty(CritterProperty::TagSkill3);
    for (uint i = 0; i < CritterPropertyGroup::Traits.length(); i++) {
        AddRegistrationProperty(CritterPropertyGroup::Traits[i]);
    }
    AddRegistrationProperty(CritterProperty::Age);
    AddRegistrationProperty(CritterProperty::Gender);
}

void AddRegistrationProperty(CritterProperty prop)
{
    auto properies = array<CritterProperty>(Game.RegProperties);
    properies.insertLast(prop);
    Game.RegProperties = properies;
}

void AddRegistrationProperty(Player player, CritterProperty prop)
{
    AddRegistrationProperty(prop);
}

void GeneratePlayer(Player player, dict<CritterProperty, int> props)
{
    Critter cr = player.GetControlledCritter();

    if (cr.IsGenerated) {
        ThrowException("Player already generated", cr);
    }

    Parameters::CritterGenerate(props);

    for (uint i = 0; i < props.length(); i++) {
        cr.SetAsInt(props.getKey(i), props.getValue(i));
    }

    cr.ModelNameBase = (cr.Gender == GenderType::Male ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F);
    Assert(cr.ModelNameBase != EMPTY_HSTRING);
    cr.ModelName = cr.ModelNameBase;
    cr.IsGenerated = true;
    cr.CurrentHp = cr.MaxLife;
    Game.Log("Player generated");
}

#endif

#ifdef __CLIENT

void ModuleInit()
{
    Game.OnCritterIn.Subscribe(OnCritterIn);
}

dict<CritterProperty, int> RegProps = {};

void CallRegisterPlayer(string name, string pass, dict<CritterProperty, int> props)
{
    // GetCacheData
    Game.SetCacheText("RegName__", name);
    Game.SetCacheText("RegPassword__", pass);
    RegProps = props.clone();
    Game.CustomCall("Register\n" + name + "\n" + pass, "\n");
    GuiScreensExt::TryExit();

    // Wait disconnection and login
    while (true) {
        Yield(10);

        if (!Settings.IsConnected && !Settings.IsConnecting && !Settings.IsUpdating) {
            Game.CustomCall("Login\n" + Game.GetCacheText("RegName__") + "\n" + Game.GetCacheText("RegPassword__"), "\n");
            break;
        }
    }
}

void OnCritterIn(Critter cr)
{
    if (!cr.IsChosen || cr.IsGenerated) {
        return;
    }

    Assert(RegProps.length() > 0);
    CurPlayer.ServerCall.GeneratePlayer(RegProps.clone());
}

void AddRegistrationProperty(CritterProperty prop)
{
    CurPlayer.ServerCall.AddRegistrationProperty(prop);
}

#endif
