// FOS Server Client Sort 2

// Author: cvet
// Server and client stuff for radio

///@ RemoteCall Server unsafe_ChangeBroadcast(ident radioId, int broadcastSend, int broadcastRecv)
///@ RemoteCall Server unsafe_ChangeActivity(ident radioId, int isSend)
///@ RemoteCall Server unsafe_ChangeChannel(ident radioId, int radioChannel)
///@ RemoteCall Client ShowEditScreen(ident itemId)

//  Server
#ifndef __CLIENT

void EditRadioSettings(Critter cr, Item radio)
{
    cr.GetOwner().ClientCall.ShowEditScreen(radio.Id);
}

void unsafe_ChangeChannel(Player player, ident radioId, int radioChannel)
{
    Critter cr = player.GetControlledCritter();
    Item radio = cr.GetItem(radioId);
    if (not valid(radio) || not radio.IsRadio) {
        return;
    }
    if (FLAG(radio.RadioFlags, RADIO_DISABLE_SHIFT_CHANNEL)) {
        return;
    }

    radio.RadioChannel = CLAMP(radioChannel, 0, 0xFFFF);
}

void unsafe_ChangeActivity(Player player, ident radioId, int isSend)
{
    Critter cr = player.GetControlledCritter();
    Item radio = cr.GetItem(radioId);
    if (not valid(radio) || not radio.IsRadio) {
        return;
    }

    if (isSend != 0) {
        if (not FLAG(radio.RadioFlags, RADIO_DISABLE_SHIFT_SEND)) {
            radio.RadioFlags ^= RADIO_DISABLE_SEND;
        }
    }
    else {
        if (not FLAG(radio.RadioFlags, RADIO_DISABLE_SHIFT_RECV)) {
            radio.RadioFlags ^= RADIO_DISABLE_RECV;
        }
    }
}

void unsafe_ChangeBroadcast(Player player, ident radioId, int broadcastSend, int broadcastRecv)
{
    Critter cr = player.GetControlledCritter();
    Item radio = cr.GetItem(radioId);
    if (not valid(radio) || not radio.IsRadio) {
        return;
    }

    // Change send
    if (not FLAG(radio.RadioFlags, RADIO_DISABLE_SHIFT_BC_SEND)) {
        if (broadcastSend == RADIO_BROADCAST_WORLD || broadcastSend == RADIO_BROADCAST_LOCATION || broadcastSend == RADIO_BROADCAST_MAP ||
            broadcastSend == RADIO_BROADCAST_ZONE(2) || broadcastSend == RADIO_BROADCAST_ZONE(5)) {
            radio.RadioBroadcastSend = broadcastSend;
        }
    }

    // Change recv
    if (not FLAG(radio.RadioFlags, RADIO_DISABLE_SHIFT_BC_RECV)) {
        if (broadcastRecv == RADIO_BROADCAST_WORLD || broadcastRecv == RADIO_BROADCAST_LOCATION || broadcastRecv == RADIO_BROADCAST_MAP ||
            broadcastRecv == RADIO_BROADCAST_ZONE(2) || broadcastRecv == RADIO_BROADCAST_ZONE(5)) {
            radio.RadioBroadcastRecv = broadcastRecv;
        }
    }
}

void SetInHand(Critter cr, int flags, int broadcastSend, int broadcastRecv)
{
    Item item = cr.GetItem(ItemProperty::CritterSlot, CritterItemSlot::Main);
    if (not valid(item)) {
        return;
    }

    item.IsRadio = true;
    item.RadioFlags = uint8(flags);
    item.RadioBroadcastSend = uint8(broadcastSend);
    item.RadioBroadcastRecv = uint8(broadcastRecv);
}

void UnsetInHand(Critter cr, int, int, int)
{
    Item item = cr.GetItem(ItemProperty::CritterSlot, CritterItemSlot::Main);
    if (valid(item)) {
        item.IsRadio = false;
    }
}

#endif // !__CLIENT

// / Client
#ifdef __CLIENT

class ScreenMain : Gui::Screen
{
    TextboxChannel Channel;
    ButtonSendRecv Send;
    ButtonSendRecv Recv;
    ButtonBroadcast @[] BroadcastSend = {};
    ButtonBroadcast @[] BroadcastRecv = {};
    int BroadcastSendType;
    int BroadcastRecvType;

    ident RadioId;
    int RadioChannel;
    int RadioBroadcastSend;
    int RadioBroadcastRecv;
    int RadioFlags;

    void OnShow(dict<string, any> params) override
    {
        // Store data
        RadioId = params["ItemId"];
        RadioChannel = params["RadioChannel"];
        RadioBroadcastSend = params["RadioBroadcastRecv"];
        RadioBroadcastRecv = params["RadioBroadcastSend"];
        RadioFlags = params["RadioFlags"];

        // Set actual Gui:: states
        Channel.SetChannel(RadioChannel);

        Send.SetState(not FLAG(RadioFlags, RADIO_DISABLE_SEND));
        Recv.SetState(not FLAG(RadioFlags, RADIO_DISABLE_RECV));

        BroadcastSendType = 0;
        if (RadioBroadcastSend == RADIO_BROADCAST_WORLD) {
            BroadcastSendType = 1;
        }
        else if (RadioBroadcastSend == RADIO_BROADCAST_ZONE(5)) {
            BroadcastSendType = 2;
        }
        else if (RadioBroadcastSend == RADIO_BROADCAST_ZONE(2)) {
            BroadcastSendType = 3;
        }
        else if (RadioBroadcastSend == RADIO_BROADCAST_LOCATION) {
            BroadcastSendType = 4;
        }
        else if (RadioBroadcastSend == RADIO_BROADCAST_MAP) {
            BroadcastSendType = 5;
        }
        for (uint i = 0; i < BroadcastSend.length(); i++) {
            BroadcastSend[i].SetState(false);
        }
        if (BroadcastSendType != 0) {
            BroadcastSend[BroadcastSendType - 1].SetState(true);
        }

        BroadcastRecvType = 0;
        if (RadioBroadcastRecv == RADIO_BROADCAST_WORLD) {
            BroadcastRecvType = 1;
        }
        else if (RadioBroadcastRecv == RADIO_BROADCAST_ZONE(5)) {
            BroadcastRecvType = 2;
        }
        else if (RadioBroadcastRecv == RADIO_BROADCAST_ZONE(2)) {
            BroadcastRecvType = 3;
        }
        else if (RadioBroadcastRecv == RADIO_BROADCAST_LOCATION) {
            BroadcastRecvType = 4;
        }
        else if (RadioBroadcastRecv == RADIO_BROADCAST_MAP) {
            BroadcastRecvType = 5;
        }
        for (uint i = 0; i < BroadcastRecv.length(); i++) {
            BroadcastRecv[i].SetState(false);
        }
        if (BroadcastRecvType != 0) {
            BroadcastRecv[BroadcastRecvType - 1].SetState(true);
        }
    }

    void ChangeChannel()
    {
        if (RadioChannel == int(Channel.RadioChannel)) {
            return;
        }
        RadioChannel = Channel.RadioChannel;
        CurPlayer.ServerCall.unsafe_ChangeChannel(RadioId, RadioChannel);

        Game.Message(TextPackName::Game, MsgStr::StrRadioChannelChanged);
    }

    void ChangeActivity(bool isSend)
    {
        int shiftFlag = (isSend ? RADIO_DISABLE_SHIFT_SEND : RADIO_DISABLE_SHIFT_RECV);
        int disabledFlag = (isSend ? RADIO_DISABLE_SEND : RADIO_DISABLE_RECV);
        uint cantShiftStr = (isSend ? MsgStr::StrRadioCantShiftSend : MsgStr::StrRadioCantShiftRecv);
        uint beginStr = (isSend ? MsgStr::StrRadioBroadcastSendBegin : MsgStr::StrRadioBroadcastRecvBegin);
        uint endStr = (isSend ? MsgStr::StrRadioBroadcastSendEnd : MsgStr::StrRadioBroadcastRecvEnd);

        if (not FLAG(RadioFlags, shiftFlag)) {
            RadioFlags ^= disabledFlag;
            CurPlayer.ServerCall.unsafe_ChangeActivity(RadioId, isSend ? 1 : 0);

            if (not FLAG(RadioFlags, disabledFlag)) {
                Game.Message(TextPackName::Game, beginStr);
            }
            else {
                Game.Message(TextPackName::Game, endStr);
            }
        }
        else {
            Game.Message(TextPackName::Game, cantShiftStr);
        }

        if (isSend) {
            Send.SetState(not FLAG(RadioFlags, disabledFlag));
        }
        else {
            Recv.SetState(not FLAG(RadioFlags, disabledFlag));
        }
    }

    void ChangeBroadcast(bool isSend, int type)
    {
        int shiftFlag = (isSend ? RADIO_DISABLE_SHIFT_BC_SEND : RADIO_DISABLE_SHIFT_BC_RECV);
        uint cantShiftStr = (isSend ? MsgStr::StrRadioCantShiftBcSend : MsgStr::StrRadioCantShiftBcRecv);
        uint changeStr = (isSend ? MsgStr::StrRadioBroadcastSendChange : MsgStr::StrRadioBroadcastRecvChange);

        if ((RadioFlags & shiftFlag) != 0) {
            Game.Message(TextPackName::Game, cantShiftStr);
            return;
        }

        if (isSend) {
            BroadcastSendType = type;
        }
        else {
            BroadcastRecvType = type;
        }

        int newBroadcastSend = RADIO_BROADCAST_WORLD;
        if (BroadcastSendType == 2) {
            newBroadcastSend = RADIO_BROADCAST_ZONE(5);
        }
        else if (BroadcastSendType == 3) {
            newBroadcastSend = RADIO_BROADCAST_ZONE(2);
        }
        else if (BroadcastSendType == 4) {
            newBroadcastSend = RADIO_BROADCAST_LOCATION;
        }
        else if (BroadcastSendType == 5) {
            newBroadcastSend = RADIO_BROADCAST_MAP;
        }
        else {
            BroadcastSendType = 1;
        }
        int newBroadcastRecv = RADIO_BROADCAST_WORLD;
        if (BroadcastRecvType == 2) {
            newBroadcastRecv = RADIO_BROADCAST_ZONE(5);
        }
        else if (BroadcastRecvType == 3) {
            newBroadcastRecv = RADIO_BROADCAST_ZONE(2);
        }
        else if (BroadcastRecvType == 4) {
            newBroadcastRecv = RADIO_BROADCAST_LOCATION;
        }
        else if (BroadcastRecvType == 5) {
            newBroadcastRecv = RADIO_BROADCAST_MAP;
        }
        else {
            BroadcastRecvType = 1;
        }

        if (RadioBroadcastSend == newBroadcastSend && RadioBroadcastRecv == newBroadcastRecv) {
            return;
        }

        RadioBroadcastSend = newBroadcastSend;
        RadioBroadcastRecv = newBroadcastRecv;
        CurPlayer.ServerCall.unsafe_ChangeBroadcast(RadioId, RadioBroadcastSend, RadioBroadcastRecv);
        Game.Message(TextPackName::Game, changeStr);

        for (uint i = 0; i < BroadcastSend.length(); i++) {
            BroadcastSend[i].SetState(false);
        }
        BroadcastSend[BroadcastSendType - 1].SetState(true);
        for (uint i = 0; i < BroadcastRecv.length(); i++) {
            BroadcastRecv[i].SetState(false);
        }
        BroadcastRecv[BroadcastRecvType - 1].SetState(true);
    }
};

class TextboxChannel : Gui::TextInput
{
    ScreenMain Instance;
    uint16 RadioChannel;

    TextboxChannel(ScreenMain instance)
    {
        Instance = instance;
        Instance.Channel = this;
    }

    void OnInput(KeyCode key) override
    {
        string t = Text;

        if ((Instance.RadioFlags & RADIO_DISABLE_SHIFT_CHANNEL) == 0) {
            if (t.length() > 0 && t[-1] == "\n") {
                t[-1] = "";
            }

            int channel = t.toInt();
            channel = CLAMP(channel, 0, 0xFFFF);
            t = "" + channel;

            RadioChannel = channel;
            if (key == KeyCode::Return || key == KeyCode::Numpadenter) {
                Instance.ChangeChannel();
            }
        }
        else {
            t = "" + RadioChannel;
            Game.Message(TextPackName::Game, MsgStr::StrRadioCantShiftChannel);
        }
    }

    void SetChannel(uint16 channel)
    {
        RadioChannel = channel;
        SetText("" + channel, Fonts::Default, FT_CENTERX | FT_CENTERY);
        SetTextColor(COLOR_GREEN);
    }
};

class ButtonRefresh : Gui::Button
{
    ScreenMain Instance;

    ButtonRefresh(ScreenMain instance)
    {
        Instance = instance;
    }

    void OnMouseClick(MouseButton click) override
    {
        if ((Instance.RadioFlags & RADIO_DISABLE_SHIFT_CHANNEL) == 0) {
            Instance.ChangeChannel();
        }
        else {
            Game.Message(TextPackName::Game, MsgStr::StrRadioCantShiftChannel);
        }
    }
};

class ButtonSendRecv : Gui::Button
{
    ScreenMain Instance;
    bool IsSend;

    ButtonSendRecv(ScreenMain instance, bool isSend)
    {
        Instance = instance;
        IsSend = isSend;
        if (IsSend) {
            Instance.Send = this;
        }
        else {
            Instance.Recv = this;
        }
    }

    void OnMouseClick(MouseButton click) override
    {
        if (click == MouseButton::Left) {
            Instance.ChangeActivity(IsSend);
        }
    }

    void SetState(bool state)
    {
        SetSwitch(state);
    }
};

class ButtonBroadcast : Gui::Button
{
    ScreenMain Instance;
    bool IsSend;
    int Type;

    ButtonBroadcast(ScreenMain instance, bool isSend, int type)
    {
        Instance = instance;
        IsSend = isSend;
        Type = type;
        if (isSend) {
            Instance.BroadcastSend[type - 1] = this;
        }
        else {
            Instance.BroadcastRecv[type - 1] = this;
        }
    }

    void OnMouseClick(MouseButton click) override
    {
        if (click == MouseButton::Left) {
            Instance.ChangeBroadcast(IsSend, Type);
        }
    }

    void SetState(bool state)
    {
        SetSwitch(state);
    }
};

void InitRadioScreen()
{
    Gui::RegisterScreen(CLIENT_SCREEN_RADIO, CreateRadioScreen);
}

Gui::Screen CreateRadioScreen()
{
    // Main screen
    ScreenMain screen = ScreenMain();
    screen.SetBackgroundImage(IniParser::GetIfaceIniStr("RadioMainPic"));
    screen.SetCloseOnMiss(true);

    Gui::Text mainText = Gui::Text();
    mainText.Init(screen);
    int[] result = IniParser::GetIniValues42("RadioMainText");
    mainText.SetPosition(result[0], result[1]);
    mainText.SetSize(result[2], result[3]);

    mainText.SetText(Game.GetText(TextPackName::Game, MsgStr::StrRadioMain), Fonts::Default, FT_CENTERX | FT_CENTERY | FT_BORDERED);
    mainText.SetTextColor(COLOR_SAND);

    // Channel textbox
    TextboxChannel textboxChannel = TextboxChannel(screen);
    textboxChannel.Init(screen);
    result = IniParser::GetIniValues42("RadioChannel");
    textboxChannel.SetPosition(result[0], result[1]);
    textboxChannel.SetSize(result[2], result[3]);

    textboxChannel.SetInputLength(5);

    Gui::Text channelText = Gui::Text();
    channelText.Init(screen);
    result = IniParser::GetIniValues42("RadioChannelText");
    channelText.SetPosition(result[0], result[1]);
    channelText.SetSize(result[2], result[3]);

    channelText.SetText(Game.GetText(TextPackName::Game, MsgStr::StrRadioChannel), Fonts::Default, FT_CENTERX | FT_CENTERY | FT_BORDERED);
    channelText.SetTextColor(COLOR_SAND);

    // Refresh radio channel
    ButtonRefresh buttonRefresh = ButtonRefresh(screen);
    buttonRefresh.Init(screen);
    result = IniParser::GetIniValues42("RadioRefresh");
    buttonRefresh.SetPosition(result[0], result[1]);
    buttonRefresh.SetSize(result[2], result[3]);

    buttonRefresh.SetPressedImage(IniParser::GetIfaceIniStr("RadioRefreshPicDn"));

    Gui::Text refreshText = Gui::Text();
    refreshText.Init(screen);
    result = IniParser::GetIniValues42("RadioRefreshText");
    refreshText.SetPosition(result[0], result[1]);
    refreshText.SetSize(result[2], result[3]);

    refreshText.SetText(Game.GetText(TextPackName::Game, MsgStr::StrRadioRefresh), Fonts::Default, FT_CENTERX | FT_CENTERY | FT_BORDERED);
    refreshText.SetTextColor(COLOR_SAND);

    // Broadcast
    Gui::Text broadcastSendText = Gui::Text();
    broadcastSendText.Init(screen);
    result = IniParser::GetIniValues42("RadioBroadcastSendText");
    broadcastSendText.SetPosition(result[0], result[1]);
    broadcastSendText.SetSize(result[2], result[3]);

    broadcastSendText.SetText(Game.GetText(TextPackName::Game, MsgStr::StrRadioBroadcastSend), Fonts::Default, FT_CENTERY | FT_BORDERED);
    broadcastSendText.SetTextColor(COLOR_SAND);
    Gui::Text broadcastRecvText = Gui::Text();
    broadcastRecvText.Init(screen);
    result = IniParser::GetIniValues42("RadioBroadcastRecvText");
    broadcastRecvText.SetPosition(result[0], result[1]);
    broadcastRecvText.SetSize(result[2], result[3]);

    broadcastRecvText.SetText(Game.GetText(TextPackName::Game, MsgStr::StrRadioBroadcastRecv), Fonts::Default, FT_CENTERR | FT_CENTERY | FT_BORDERED);
    broadcastRecvText.SetTextColor(COLOR_SAND);

    ButtonSendRecv buttonSend = ButtonSendRecv(screen, true);
    buttonSend.Init(screen);
    result = IniParser::GetIniValues42("RadioBroadcastSend");
    buttonSend.SetPosition(result[0], result[1]);
    buttonSend.SetSize(result[2], result[3]);

    buttonSend.SetPressedImage(IniParser::GetIfaceIniStr("RadioBroadcastSendPicDn"));

    ButtonSendRecv buttonRecv = ButtonSendRecv(screen, false);
    buttonRecv.Init(screen);
    // result = IniParser::GetIniValues42("RadioBroadcastRecv");
    buttonRecv.SetPosition(result[0], result[1]);
    buttonRecv.SetSize(result[2], result[3]);

    buttonRecv.SetPressedImage(IniParser::GetIfaceIniStr("RadioBroadcastRecvPicDn"));

    screen.BroadcastSend.resize(5);
    screen.BroadcastRecv.resize(5);
    for (uint i = 1; i <= 5; i++) {
        ButtonBroadcast buttonBroadcastSend = ButtonBroadcast(screen, true, i);
        buttonBroadcastSend.Init(screen);
        result = IniParser::GetIniValues42("RadioBroadcastSend");
        buttonBroadcastSend.SetPosition(result[0], result[1]);
        buttonBroadcastSend.SetSize(result[2], result[3]);

        buttonBroadcastSend.SetPressedImage(IniParser::GetIfaceIniStr("RadioBroadcastSend" + i + "PicDn"));

        ButtonBroadcast buttonBroadcastRecv = ButtonBroadcast(screen, false, i);
        buttonBroadcastRecv.Init(screen);
        result = IniParser::GetIniValues42("RadioBroadcastRecv");
        buttonBroadcastRecv.SetPosition(result[0], result[1]);
        buttonBroadcastRecv.SetSize(result[2], result[3]);

        buttonBroadcastRecv.SetPressedImage(IniParser::GetIfaceIniStr("RadioBroadcastRecv" + i + "PicDn"));

        Gui::Text broadcastText = Gui::Text();
        broadcastText.Init(screen);
        result = IniParser::GetIniValues42("RadioBroadcast");
        broadcastText.SetPosition(result[0], result[1]);
        broadcastText.SetSize(result[2], result[3]);

        broadcastText.SetText(Game.GetText(TextPackName::Game, MsgStr::StrRadioBroadcast1 + i - 1), Fonts::Default, FT_CENTERX | FT_CENTERY | FT_BORDERED);
        broadcastText.SetTextColor(COLOR_SAND);
    }

    return screen;
}

void ShowEditScreen(ident itemId)
{
    Critter chosen = Game.GetChosen();
    if (not valid(chosen)) {
        return;
    }

    Item @[] items = chosen.GetItems();
    uint count = items.length();
    for (uint i = 0, j = items.length(); i < j; i++) {
        Item item = items[i];
        if (item.Id == itemId) {
            dict<string, any> params = {{"ItemId", item.Id},
                                        {"RadioChannel", item.RadioChannel},
                                        {"RadioBroadcastRecv", item.RadioBroadcastRecv},
                                        {"RadioBroadcastSend", item.RadioBroadcastSend},
                                        {"RadioFlags", item.RadioFlags}};
            Game.ShowScreen(CLIENT_SCREEN_RADIO, params);
        }
    }
}
#endif // __CLIENT
