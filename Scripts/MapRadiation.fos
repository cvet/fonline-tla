// FOS Server
// Author: cvet
// Radiation generic map

///@ Property Map PrivateServer int MapRadiationMinDose
///@ Property Map PrivateServer int MapRadiationMaxDose

#define RADIATION_LOOP     (Game.Random(10000, 20000)) // Radiation damage time, in milliseconds
#define RADIATION_DOSE_MIN (1)
#define RADIATION_DOSE_MAX (5)

void _LowRadiation(Map map, bool firstTime)
{
    map.LoopTime1 = RADIATION_LOOP;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN / 2;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX / 2;
    map.OnLoop.Subscribe(_MapLoop);
}

void _MediumRadiation(Map map, bool firstTime)
{
    map.LoopTime1 = RADIATION_LOOP;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX;
    map.OnLoop.Subscribe(_MapLoop);
}

void _HighRadiation(Map map, bool firstTime)
{
    map.LoopTime1 = RADIATION_LOOP;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN * 2;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX * 2;
    map.OnLoop.Subscribe(_MapLoop);
}

void _DeadlyRadiation(Map map, bool firstTime)
{
    map.LoopTime1 = RADIATION_LOOP;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN * 10;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX * 5;
    map.OnLoop.Subscribe(_MapLoop);
}

void _MapLoop(Map map)
{
    AffectRadiationToAllCritters(map, 0);
    map.LoopTime1 = RADIATION_LOOP;
}

void AffectRadiationToAllCritters(Map map, int value)
{
    if (value == 0) {
        value = Game.Random(map.MapRadiationMinDose, map.MapRadiationMaxDose);
    }

    Critter[] critters = map.GetCritters(CritterFindType::Alive);
    for (uint i = 0; i < critters.length(); i++) {
        Radiation::AffectRadiation(critters[i], value);
    }
}
