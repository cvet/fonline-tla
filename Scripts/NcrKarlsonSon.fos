// FOS Server
// Author: rifleman17

///@ Property Critter Protected     uint8 NCRKarlsonSon Group = Quests Quest = 4266 Max = 9
///@ Property Critter PrivateServer ident NcrSonCatcherId
///@ Property Critter PrivateServer uint8 NcrSonMovesCounter Max = 9

#define RUN_PLANE_ID      (111) // код плана "бежать от игрока"
#define MAX_RUNS          (5)   // число перебежек
#define SON_WAIT_PRIORITY (100) // приоритет плана "подожди игрока"
#define SEARCH_RADIUS     (3) // расстояние в гексах до игрока, в котором он должен быть вовремя остановок мальчика
#define RUN_RADIUS        (5) // расстояние, на которое бежит мальчик (20)

#define Q_STAT_FAILED     (4) // статус квеста - провален (не догнал)
#define Q_STAT_CATCHED    (5) // статус квеста - выполнен

#define STR_RUN           (1) // строка, которую произносит человек

void r_RunKarlsonRun(Critter player, Critter npc)
{
    if (!valid(npc) || !NpcPlanes::IsNoPlanes(npc)) {
        return;
    }

    npc.NcrSonMovesCounter = 0;
    npc.NcrSonCatcherId = player.Id;

    npc.OnNpcPlaneEnd.Subscribe(_PlaneEnd);

    Run(npc);
}

// Npc misc plane script
void plane_WaitPlayer(Critter npc)
{
    npc.NcrSonMovesCounter += 1;
    npc.SayMsg(SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR(npc.DialogId, STR_RUN));

    Critter player = Game.GetCritter(npc.NcrSonCatcherId);
    if (!_CheckIsPlayerHere(npc)) {
        npc.NcrSonMovesCounter = MAX_RUNS;
        player.NCRKarlsonSon = Q_STAT_FAILED;
        return;
    }

    if (npc.NcrSonMovesCounter <= MAX_RUNS) {
        Run(npc);
    }
    else {
        player.NCRKarlsonSon = Q_STAT_CATCHED;
        npc.IsNoHome = false;
    }
}

bool _CheckIsPlayerHere(Critter cr)
{
    Critter player = Game.GetCritter(cr.NcrSonCatcherId);
    if (!valid(player)) {
        return false;
    }

    if (!valid(player.GetMap())) {
        return false;
    }

    if (player.GetMap().Id != cr.GetMap().Id) {
        return false;
    }

    return Game.GetDistance(cr, player) <= SEARCH_RADIUS;
}

// CRITTER_EVENT_PLANE_END
bool _PlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (plane.Identifier == RUN_PLANE_ID && reason == REASON_SUCCESS) {
        NpcPlanes::AddMiscPlane(cr, SON_WAIT_PRIORITY, Game.GetFullSecond() + 60, NcrKarlsonSon::plane_WaitPlayer);
    }
    else if (plane.Identifier == RUN_PLANE_ID && reason != REASON_SUCCESS) {
        Run(cr);
        return false;
    }
    return true;
}

// ~loadscript ncr_karlson_son
void Run(Critter cr)
{
    uint16 hX = cr.HexX;
    uint16 hY = cr.HexY;

    Caravan::GetFreeHex(cr.GetMap(), RUN_RADIUS, hX, hY);

    NpcPlanes::AddWalkPlane(cr, AI_PLANE_WALK_PRIORITY, RUN_PLANE_ID, 0, hX, hY, Game.Random(0, 5), true, 1);
}
