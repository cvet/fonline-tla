// FOS Server
// Author: heX
// Охранники на входе во внутренний город.
// обыскивают, и запрещают проносить наркотики, алкоголь, взрывчатку
// и заходить в ПА/АПА броне.  ;-)
// ver 0.4

/*
   ToDo:
   сделать закрытие-открытие ворот
 */

ident[] PlayerOk = {};     // Массив с id игроков которых обыскали и им можно проходить
ident[] PlayerWarned = {}; // Массив с id игроков которых предупредили - дважды предупреждать не будут
// ident[] PlayerBad = {}; // Массив с id игроков которые прошли без обыска

GuardLib::CGuardsManager Grd;

void _GateGuardInit(Critter guard, bool firstTime)
{
    guard.OnMessage.Subscribe(Guard_OnMessage);
    guard.OnCritterAppeared.Subscribe(Guard_on_add_critter);
    guard.OnCritterDisappeared.Subscribe(Guard_on_remove_critter);
    guard.OnItemOnMapDisappeared.Subscribe(Guard_on_pick_item);
}

void Guard_on_add_critter(Critter npc, Critter player)
{
    if (not player.IsControlledByPlayer) {
        return;
    }
    // Game.Log("Add OK.");
    int i = UtilsForArray::FindInArray(PlayerOk, player.Id);
    if (i > 0) {
        PlayerOk.removeAt(i);
    }
    i = UtilsForArray::FindInArray(PlayerWarned, player.Id);
    if (i > 0) {
        PlayerWarned.removeAt(i);
    }
}

// Вызывается, когда из поля зрения NPC исчезает криттер.
void Guard_on_remove_critter(Critter npc, Critter player)
{
    if (not player.IsControlledByPlayer) {
        return;
    }
    int i = UtilsForArray::FindInArray(PlayerOk, player.Id);
    if (i > 0) {
        PlayerOk.removeAt(i);
    }
    i = UtilsForArray::FindInArray(PlayerWarned, player.Id);
    if (i > 0) {
        PlayerWarned.removeAt(i);
    }
}

// тестирование предмета на разрешонность
bool ItemTest(hstring protoId)
{
    if (UtilsForArray::Present(protoId, PidsGroups::Pids_Drugs) || UtilsForArray::Present(protoId, PidsGroups::Pids_DrugsAlcohol) ||
        UtilsForArray::Present(protoId, PidsGroups::Pids_MiscExplosions) || UtilsForArray::Present(protoId, PidsGroups::Pids_MiscActiveExplosions)) {
        return false;
    }
    else {
        return true;
    }
}

// алгоритм обыска
// возращает коды недопуска
// 0 - все хорошо
// 1 - плохой предмет
// 2 - алкоголь
// 3 - наркотики
// 4 - взрывчатка
// 5 - нету пропуска
int Searching(Critter npc, Critter player)
{
    int result = 5;
    hstring pid;
    Item[] items = player.GetItems();
    for (int i = 0, l = items.length(); i < l; i++) {
        pid = items[i].ProtoId;
        if (not ItemTest(pid)) {
            return 1;
        }
        if (pid == Content::Item::day_pass) {
            result = 0;
        }
        if (pid == Content::Item::fake_citizenship) {
            result = 0;
        }
    }
    return result;
}

// Сообщения от тригеров
void Guard_OnMessage(Critter guard, Critter player, int num, any val)
{
    // Game.Log("OnMessage ok");
    if (not player.IsControlledByPlayer) {
        return;
    }
    if (not NpcPlanes::IsNoPlanes(guard)) {
        return;
    }
    if (guard.Condition != CritterCondition::Alive) {
        return;
    }
    if (player.CurrentHp < 0) {
        return;
    }
    if (VcGuardsman::GetRank(player) > 0) {
        return; // Гвардейцам разрешено проходить без пропуска
    }

    if (num == GuardLib::MessagePlayerOnWarningHex) {
        // Предупреждаем игрока
        if (UtilsForArray::Present(player.Id, PlayerWarned)) {
            return; // значит мы его уже предупредили - дважды повторять не будем
        }
        PlayerWarned.insertLast(player.Id);
        Item itm = _CritGetItemArmor(player);
        if (valid(itm)) {
            if (UtilsForArray::Present(itm.ProtoId, PidsGroups::Pids_ArmorHeavy)) {
                guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 5));
                return;
            }
        }
        guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 1));
        return;
    }

    if (num == GuardLib::MessagePlayerOnSearchHex) {
        if (Game.GetDistance(guard, player) == 1) {
            if (UtilsForArray::Present(player.Id, PlayerOk)) {
                return; // мы его уже обыскивали - больше покачто небудем.
            }
            guard.SetDir(Game.GetDirection(guard.HexX, guard.HexY, player.HexX, player.HexY));
            if (VcGuard::GuardItemTest(_CritGetItemHand(player))) {
                // оружие в руках
                guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 6));
                return;
            }
            Item itm = _CritGetItemArmor(player);
            if (valid(itm)) {
                if (UtilsForArray::Present(itm.ProtoId, PidsGroups::Pids_ArmorHeavy)) {
                    // плохая броня
                    guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 5));
                    return;
                }
            }
            _CritAnimateUse(guard);
            int searchResult = 0;
            if ((searchResult = Searching(guard, player)) == 0) {
                // все окей
                // guard.Say(SAY_NORM_ON_HEAD, "Даже отобрать нечего, топай дальше");
                guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 2));
                PlayerOk.insertLast(player.Id);
            }
            else {
                if (searchResult == 5) { // нету пропуска
                    guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 7));
                }
                else {
                    // плохие предметы
                    // guard.Say(SAY_NORM_ON_HEAD, "О! да у тебя тут Алкоголь и Наркотики. Не уходи от нас братец!");
                    guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 3));
                    PlayerOk.removeAt(uint(UtilsForArray::FindInArray(PlayerOk, player.Id)));
                }
            }
            return;
        }
        else {
            return;
        }
    }

    if (num == GuardLib::MessagePlayerOnAtackHex) {
        if (not UtilsForArray::Present(player.Id, PlayerOk)) {
            // игрок ушел в город и его надо вернуть назад
            // ALERT!
            guard.SayMsg(SAY_SHOUT_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 4));
            // guard.Say(SAY_SHOUT_ON_HEAD,"Стой! Стрелять буду!");

            // игрок 'просит' чтобы его пристрелили
            SendMessage::ToWhoSeesMe(player, GuardLib::MessagePleaseKillMeIAmIdiot, 0);

            // Alert(player, GuardLib::MaxAlert, GuardLib::AlertTypeEnterOnDeny);
        }
        else {
            // игрок ушел в город
        }
    }

    if (num == GuardLib::MessagePlayerOnPreEnter) {
        // это не честный обыск, но зато надежный.
        if (Searching(guard, player) != 0) {
            uint idx = uint(UtilsForArray::FindInArray(PlayerOk, player.Id));
            if (idx >= 0) {
                PlayerOk.removeAt(idx);
            }
            idx = uint(UtilsForArray::FindInArray(PlayerOk, player.Id));
            if (idx >= 0) {
                PlayerWarned.removeAt(idx);
            }
            guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 1));
        }
    }
}

// зона в которой солдаты предупреждают о необходимости обыскивания
void t_incoming(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered) {
        return;
    }

    // Проверяем игрок ли это
    if (not player.IsControlledByPlayer) {
        return;
    }

    // он вышел или вошел?
    if (dir == 1 || dir == 2 || dir == 3) {
        // вышел из города дальше зоны предупреждения
        // удаляем из листов
        // grd.DelObserving(player);//!!!
        // PlayerOk.removeAt(uint(UtilsForArray::FindInArray(PlayerOk, player.Id)));
        return;
    }

    // Посылаем сообщение о том, что наступили на этот хекс.
    SendMessage::ToWhoSeesMe(player, GuardLib::MessagePlayerOnWarningHex, 0);
}

// обыскивают
// rename t_income -> t_searching
void t_income(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered) {
        return;
    }
    // Проверяем игрок ли это
    if (not player.IsControlledByPlayer) {
        return;
    }
    // Посылаем сообщение о том, что наступили на этот хекс.
    SendMessage::ToWhoSeesMe(player, GuardLib::MessagePlayerOnSearchHex, 0);
}

// игрок проходит первые ворота города
void t_pre_enter(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered) {
        return;
    }

    // Проверяем игрок ли это
    if (not player.IsControlledByPlayer) {
        return;
    }

    if (dir == 1 || dir == 2 || dir == 3) {
        return;
    }
    // Посылаем сообщение о том, что наступили на этот хекс.
    SendMessage::ToWhoSeesMe(player, GuardLib::MessagePlayerOnPreEnter, 0);
}

// игрок вошел в город
void t_enter(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (not entered) {
        return;
    }

    // Проверяем игрок ли это
    if (not player.IsControlledByPlayer) {
        return;
    }

    if (dir == 1 || dir == 2 || dir == 3) {
        // вышел из города
        // удаляем из листов
        // убираем из листа наблюдения - больше он охрану не интересует
        // grd.DelObserving(player);//!!!
        return;
    }

    // Посылаем сообщение о том, что наступили на этот хекс.
    SendMessage::ToWhoSeesMe(player, GuardLib::MessagePlayerOnAtackHex, 0);
}

void Guard_on_pick_item(Critter guard, Item hideItem, Critter picker)
{
    if (not valid(picker)) {
        return;
    }
    if (not picker.IsControlledByPlayer) {
        return;
    }
    if (not NpcPlanes::IsNoPlanes(guard)) {
        return;
    }
    if (guard.Condition != CritterCondition::Alive) {
        return;
    }
    // Game.Log("pickup detect");

    if (not ItemTest(hideItem.ProtoId)) {
        int i = 0;
        if (UtilsForArray::FindInArray(PlayerOk, picker.Id, i)) {
            PlayerOk.removeAt(i);
            guard.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Dialogs, DLGSTR(Content::Dialog::vc_gate_guard, 1));
        }
    }
}

uint r_searching(Critter player, Critter guard, int val)
{
    if (Searching(guard, player) == 0) {
        // окей
        if (not UtilsForArray::Present(player.Id, PlayerOk)) {
            PlayerOk.insertLast(player.Id);
        }
        return 9;
    }
    // не пускаем
    return 10;
}

// constructor [ heX ]

// Инициализация нпц. происходит при вводе нпц в игру
void _GuardInit(Critter npc, bool firstTime)
{
    // вешаем обработчики событий
    npc.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    npc.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    // npc.OnIdle.Subscribe(_GuardIdle);
    npc.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    npc.OnMessage.Subscribe(_GuardOnMessage);
    npc.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    npc.OnSomeCritterUseItem.Subscribe(_GuardOnUseItem);
    npc.OnSomeCritterStealing.Subscribe(_GuardStealing);
    npc.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    npc.OnSomeCritterDropItem.Subscribe(_GuardOnDropItem); // r17

    // Создаем событие наблюдения
    if (not firstTime && npc.GetTimeEvents(Tla::CteObserving) == 0) {
        npc.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

uint cte_Observing(Critter npc, any identifier, uint& stage)
{
    return Grd.EventObserving(npc);
}

void _GuardOnAddCritter(Critter crit, Critter showCrit)
{
    Grd.EventOnAddCritter(crit, showCrit);
}

void _GuardOnRemoveCritter(Critter crit, Critter hideCrit)
{
    Grd.EventOnRemoveCritter(crit, hideCrit);
}

bool _GuardEndPlane(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    Grd.EventEndPlane(npc);
    return true;
}

void _GuardOnMoveItem(Critter crit, Critter fromCrit, Item item, CritterItemSlot fromSlot)
{
    Grd.EventOnMoveItem(crit, fromCrit, Game.GetItem(item.Id), fromSlot);
}

void _GuardOnMessage(Critter crit, Critter fromCrit, int message, any value)
{
    Grd.EventOnMessage(crit, fromCrit, message, value);
}

void _GuardOnUseItem(Critter crit, Critter fromCrit, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    Grd.EventOnUseItem(crit, fromCrit, item, onCritter, onItem, null);
}

void _GuardOnDropItem(Critter crit, Critter fromCrit, Item item) // r17
{
    Grd.EventOnDropItem(crit, fromCrit, item);
}

void _GuardOnSmthAttack(Critter crit, Critter fromCrit, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    Grd.EventOnSmthAttack(crit, fromCrit, target);
}

void _GuardStealing(Critter crit, Critter thief, Critter fromCrit, Item item, uint count)
{
    Grd.EventStealing(crit, fromCrit, thief, false, item, count);
}
