// FOS Server

/*
   rifleman17

   Шаблоны поведения НПЦ: снайпер, терминатор, медик, слеер
 */

// Базовый класс с общими методами и настройками. Не предусматривается использование его в качестве шаблона поведения.
// Для настройки поведения используйте наследников.

// сообщения
const int MsgAttackTarget = 156;
const int MsgPlayerMustDie = 157;
const int MsgHealme = 356;
#define MSG_ATTACKING_PLAYER (357)
#define MSG_COVERME          (358)
// радиус реакции на сообщения, если расстояние между тем, кто отправил сообщение и тем, кто его принял меньше либо равно радиусу
// получатель сообщения отреагирует, иначе проигнорирует сообшение
#define ATMSG_HELP_DIST (12)

class CommonPattern
{
    // вспомогательная функция - определяет, должен ли получатель реагировать на сообщение
    bool _MsgReact(Critter sender, Critter reciever, uint msg)
    {
        uint dist = Game.GetDistance(sender, reciever);
        if (dist == 0) {
            return false;
        }
        if (sender.Id == reciever.Id) {
            return false;
        }

        switch (msg) {
        case MsgAttackTarget:
            return (dist <= ATMSG_HELP_DIST);
        case MsgPlayerMustDie:
            return true;
        default:
            break;
        }
        return false;
    }

    // Вспомогательная функция - попытка использовать стимпак, если он есть в инвентаре
    // Если здоровья меньше 50% и в инвентаре есть стимпаки
    void _TryUseStim(Critter cr)
    {
        if (!cr.IsAlive()) {
            return;
        }
        if (cr.CurrentHp * 100 > cr.MaxLife * 50) {
            return;
        }

        if (cr.CountItem(Content::Item::super_stimpak) > 0 || cr.CountItem(Content::Item::stimpak) > 0) {
            Item item = cr.GetItem((cr.CountItem(Content::Item::super_stimpak) > 0 ? Content::Item::super_stimpak : Content::Item::stimpak));
            Drugs::UseDrugOn(cr, cr, item);
            _CritAnimateUse(cr);
            return;
        }
    }

    // Игрок в радиусе видимости
    void _ShowCritter(Critter cr, Critter showCrit)
    {
        if (!NpcPlanes::IsCurPlane(cr, AI_PLANE_ATTACK) && showCrit.IsControlledByPlayer) {
            NpcPlanes::NpcPlane[] planes = {};
            uint count = NpcPlanes::GetPlanes(cr, planes);
            if (count > 0) {
                ident critId = showCrit.Id;
                for (uint i = 0; i < count; i++) {
                    if (planes[i].Attack_TargId == critId) {
                        return;
                    }
                }
            }
            AttackPlayer(cr, showCrit);
        }
    }

    // Криттер атакован
    bool _Attacked(Critter cr, Critter attacker)
    {
        _TryUseStim(cr);
        SendMessage::ToAllOnMap(cr, MsgHealme, 0);
        return false;
    }

    // Криттер убит
    void _Dead(Critter cr, Critter killer)
    {
        if (!cr.IsDead()) {
            return;
        }

        Item[] items = cr.GetItems();
        for (uint i = 0; i < items.length(); i++) {
            Item item = items[i];
            // Износ оружия
            Repair::SetDeterioration(item, Game.Random(50, 90));
            // Удаление избыточных патронов
            if (item.Type == ItemType::Ammo) {
                Game.DestroyItem(item, uint(item.Count - Game.Random(1, 30)));
            }
        }
    }

    // начало выполнения плана
    bool _PlaneBegin(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
    {
        NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

        if (plane.Type == AI_PLANE_ATTACK) {
            Critter target = Game.GetCritter(plane.Attack_TargId);
            if (valid(target) && target.TeamId == cr.TeamId) {
                NpcPlanes::EraseAttackPlane(cr, target);
                NpcPlanes::EraseAttackPlane(target, cr);
                return false; // Отмена атаки криттера из своей группы.
            }
        }
        return true;
    }

    void AttackPlayer(Critter cr, Critter player)
    {
        AttackPlayer(cr, 0, player);
    }

    void AttackPlayer(Critter cr, uint priority, Critter player)
    {
        if (!player.IsControlledByPlayer) {
            return;
        }
        NpcPlanes::AddAttackPlane(cr, priority, player);
    }

    void SetEvents(Critter cr)
    {
    }
}

/* **************************************** Вспомогательные функции **************************************** */
// Находит минимум и максимум в массиве целых. Если не найдены - вернет ложь
bool
_GetLimits(uint[] arr, uint min, uint max)
{
    if (arr.length() == 0) {
        return false;
    }
    min = arr[0];
    max = arr[0];
    for (uint i = 0; i < arr.length(); i++) {
        min = (min < arr[i] ? min : arr[i]);
        max = (max > arr[i] ? max : arr[i]);
    }

    return true;
}
// Находит индекс минимального значения в массиве
bool _GetFirstMinIndex(uint[] arr, uint& minIndex)
{
    uint min = 0;
    uint max = 0;
    if (!_GetLimits(arr, min, max)) {
        return false;
    }

    for (uint i = 0; i < arr.length(); i++) {
        if (arr[i] == min) {
            minIndex = i;
        }
    }
    return false;
}
// Берет случайный элемент массива из всех элементов, равных максимуму в данном массиве
bool _GetRandomMaxIndex(uint[] arr, uint maxIndex)
{
    uint min = 0;
    uint max = 0;
    if (!_GetLimits(arr, min, max)) {
        return false;
    }
    uint[] maxes = {};
    for (uint i = 0; i < arr.length(); i++) {
        if (arr[i] == max) {
            maxes.insertLast(i);
        }
    }
    maxIndex = maxes[Game.Random(0, maxes.length() - 1)];
    return true;
}

/* Раньше, из-за инклуд, этот скрипт распространялся на все другие скрипты, включающие его, теперь метод нужно отдельно прописать в каждом наследнике.
   void _CritterInit( Critter cr, bool firstTime )
   {
    pattern.SetEvents( cr );
   }
 */
