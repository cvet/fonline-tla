// FOS Server

/*
   Автомат нюка-колы
   Игрок может использовать монету на автомате, в этом случае, если пройдет проверку по удаче получит одну бутылку нюка-колы.
   Если проверка не пройдена, автомат выстрелит в него бутылкой. Бутылка летит на HIT_RANGE гексов в направлении игрока.
   Если игрок не пройдет проверку на ловкость, получит от MIN_DMG до MAX_DMG повреждений.
   Если на пути бутылки стоит другой криттер, получить повреждения может он. Игрок, использовавший монетку будет считаться атакующим.
 */

///@ Property Critter PrivateServer uint NukeStock
///@ Property Critter PrivateServer uint NukeRestockTime

#define ONE_GAME_WEEK       (60 * 60 * 24 * 7)
#define MAX_STOCK           (10)
#define HIT_RANGE           (3) // расстояние, на которое "стреляет" автомат
#define MIN_DMG             (1)
#define MAX_DMG             (75)

#define STR_USE_CAPS        (101)
#define STR_GET_NUKE        (102)
#define STR_HITTED          (103)
#define STR_DODGE           (104)
#define STR_SOMEBODY_DODGE  (105)
#define STR_EMPTY           (106)

#define PLAYERS_SRCH_RADIUS (10)

#define _CheckStat          #(cr, stat, bonus)(Game.Random(1, 10) <cr.GetAsInt(stat) + bonus)

bool _UseCapsOnNukeMachine(Critter player, Item scenery, int skill, Item item)
{
    if (!valid(item) || item.ProtoId != Content::Item::bottle_caps) {
        return false;
    }

    if (player.NukeRestockTime < Game.GetFullSecond()) {
        player.NukeStock = uint(Game.Random(MAX_STOCK / 2, MAX_STOCK));
        player.NukeRestockTime = Game.GetFullSecond() + ONE_GAME_WEEK;
    }

    if (player.NukeStock > 0) {
        player.DeleteItem(Content::Item::bottle_caps, 1);

        player.NukeStock -= 1;
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_USE_CAPS);

        if (_CheckStat(player, CritterProperty::Luck, 0)) {
            player.AddItem(Content::Item::nuka_cola, 1);
            player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_GET_NUKE);
            return true;
        }
        else {
            TryHitSomeOne(player, scenery);
            return true;
        }
    }
    else {
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_EMPTY);
        return true;
    }
}

void TryHitSomeOne(Critter player, Item nukeMashine)
{
    Map map = player.GetMap();
    if (!valid(map)) {
        return;
    }

    uint16 x0 = nukeMashine.HexX;
    uint16 y0 = nukeMashine.HexY;

    uint16 x1 = x0;
    uint16 y1 = y0;

    uint dir = Game.GetDirection(x0, y0, player.HexX, player.HexY);
    bool targetHitted = false;

    map.MoveHexByDir(x1, y1, dir, 3);
    map.RunFlyEffect(Content::Item::flying_knife, null, null, x0, y0, x1, y1);

    for (uint i = 0; i < HIT_RANGE; i++) {
        map.MoveHexByDir(x0, y0, dir, 1);
        Critter target = map.GetCritter(x0, y0);
        if (valid(target) && !targetHitted) {
            if (target.IsAlive()) {
                if (_CheckStat(target, CritterProperty::Agility, 0)) {
                    target.SayMsg(SAY_NETMSG, TextPackName::Text, STR_DODGE);
                    _CritAnimate(target, CritterActionAnim::DodgeFront);
                    Critter[] critters = map.GetCritters(target.HexX, target.HexY, PLAYERS_SRCH_RADIUS, CritterFindType::Players);
                    if (!critters.isEmpty()) {
                        string lexems = "$name " + (target.IsControlledByPlayer ?
                                                        Obsolete::GetPlayerName(target.Id) :
                                                        (target.DialogId != EMPTY_HSTRING ? "@msg DLG " + STR_NPC_NAME_DLG(target.DialogId) + " @" : ""));
                        for (uint j = 0; j < critters.length(); j++) {
                            if (critters[j].Id != target.Id) {
                                critters[j].SayMsg(SAY_NETMSG, TextPackName::Text, STR_SOMEBODY_DODGE, lexems);
                            }
                        }
                    }
                }
                else {
                    target.SayMsg(SAY_SHOUT, TextPackName::Text, STR_HITTED);
                    targetHitted = true;
                    Combat::InjureCritter(target, Game.Random(MIN_DMG, MAX_DMG), DamageTypes::Normal, dir, player.Id);
                    map.AddItem(x0, y0, Content::Item::nuka_cola, 1);
                    break;
                }
            }
        }
    }
}
