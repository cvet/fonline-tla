// FOS Server Sort 3

// Name:	arroyo_mynoc_defence
// Author:	Sufir

///@ Property Game PrivateServer uint ArroyoMynocTimeout

// Defines
#define QUEST_TIMEOUT (1) // Количество игровых суток, которые даются на выполнение каждой из стадий квеста.
// Таймаут указывается для каждой стадии квеста. Т.е. при QUEST_TIMEOUT = 1 на выполнение
// квеста будет дано 2-е суток сутки на выполнение первой стадии и сутки на выполнение второй.
// При отсутсвии других соискателей, на квест будет даваться вдвое больше времени.

#define MIN_PLAYERS       (3)  // Минимальный размер группы.
#define MIN_LVL           (5)  // Минимальный уровень.
#define MAX_LVL           (24) // Максимальный уровень.

#define DIALOG_NUM_COUNT  (27) // Переходим на этот диалог, если группа мала для квеста.
#define DIALOG_NUM_LVL    (28) // Переходим на этот диалог, если игроки не соответсвуют по уровню.
#define DIALOG_QUEST_USED (29) // Переходим на этот диалог, если квест выполняется другой группой.
#define DIALOG_NUM_KARMA  (30) // Переходим на этот диалог, если карма группы слишком низкая для выполнения квеста.

#define ARROYO_POS_X      (4 * Settings.GlobalMapZoneLength - Settings.GlobalMapZoneLength / 2) // Координаты Арройо. От них считаем где будет находиться
#define ARROYO_POS_Y      (3 * Settings.GlobalMapZoneLength - Settings.GlobalMapZoneLength / 2) // локация с рейдерами.

bool d_IsGroupExist(Critter player, Critter npc)
{
    Critter[] group = {};
    Critter leader = Game.GetCritter(GetLeaderId(player));
    group.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Any, group);
    if (group.length() > 1) {
        return true;
    }
    else {
        return false;
    }
}

bool d_IsGroupNotExist(Critter player, Critter npc)
{
    return !d_IsGroupExist(player, null);
}

bool d_IsQuestGroupLevelRight(Critter player, Critter npc)
{
    Critter[] group = {};
    Critter leader = Game.GetCritter(GetLeaderId(player));
    group.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Any, group);

    // Проверяем уровни группы в которой состоит игрок берущий квест
    // если кто-то из участников группы не соответствует по уровню - отправляем на вариант диалога DIALOG_NUM_LVL
    for (uint i = 0; i < group.length(); i++) {
        // Если в группе есть НПС - пропускаем его, он может быть любого уровня.
        if (!group[i].IsControlledByPlayer) {
            continue;
        }

        // Если хоть один из участников группы не соответсвует требованиям - отправляем на вариант диалога DIALOG_NUM_LVL
        if (group[i].Level < MIN_LVL || group[i].Level > MAX_LVL) {
            return false;
        }
    }
    return true;
}

bool d_IsQuestGroupLevelNotRight(Critter player, Critter npc)
{
    return !d_IsQuestGroupLevelRight(player, null);
}

bool d_IsQuestGroupHaveGoodKarma(Critter player, Critter npc)
{
    Critter[] group = {};
    Critter leader = Game.GetCritter(GetLeaderId(player));
    group.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Any, group);

    // Проверяем карму группы в которой состоит игрок берущий квест,
    // если суммарная карма или репутация в Арройо группы низкая - отправляем на вариант диалога DIALOG_NUM_KARMA
    int GroupKarma = 0;
    for (uint i = 0; i < group.length(); i++) {
        GroupKarma = GroupKarma + group[i].Karma;
    }

    int ArroyoRep = 0;
    for (uint i = 0; i < group.length(); i++) {
        if (group[i].IsControlledByPlayer) {
            ArroyoRep = ArroyoRep + group[i].ReputationArroyo;
        }
    }

    if (GroupKarma <= -20 || ArroyoRep <= -10) {
        return false;
    }
    else {
        return true;
    }
}

bool d_IsQuestGroupHaveBadKarma(Critter player, Critter npc)
{
    return !d_IsQuestGroupHaveGoodKarma(player, null);
}

bool d_IsQuestActive(Critter player, Critter npc)
{
    // Если квест уже взят другой группой - отправляем на вариант диалога DIALOG_QUEST_USED
    if (!TimeOutIsFree()) {
        return true;
    }
    else {
        return false;
    }
}

bool d_IsQuestNotActive(Critter player, Critter npc)
{
    return !d_IsQuestActive(player, null);
}

// Запуск квеста.
void r_StartQuest(Critter player, Critter npc)
{
    // Квест ещё ни кем не брался. Даем квест игроку и его группе.
    // Тут мы проверим доступность квеста только по времени, все прочие проверки должны быть сделаны в диалоге зараниее.
    if (TimeOutIsFree()) {
        StartQuest(player, 1);
    }
}

// Запуск второй стадии квеста.
uint r_StartStage2(Critter player, Critter npc)
{
    // Находим группу в которой состоит игрок и лидера группы.
    Critter[] group = {};
    Critter leader = Game.GetCritter(GetLeaderId(player));
    group.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Any, group);

    // Проверяем размер группы в которой состоит игрок берущий квест,
    // если размер группы меньше необходимого - отправляем на вариант диалога DIALOG_NUM_COUNT
    if (group.length() < MIN_PLAYERS) {
        return DIALOG_NUM_COUNT;
    }
    else {
        StartQuest(player, 2);
    }
    return 0;
}

// ===== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ===== \\

// Вспомогательная функция, для запуска квеста, используется в r_StartQuest
void StartQuest(Critter player, uint stage)
{
    // Находим группу в которой состоит игрок и лидера группы.
    Critter[] group = {};
    Critter leader = Game.GetCritter(GetLeaderId(player));
    group.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Any, group);

    // Проверяем размер группы в которой состоит игрок берущий квест,
    // если размер группы меньше необходимого - отправляем на вариант диалога DIALOG_NUM_COUNT
    // Это на тот случай, если игроки поотцеплялись от лидера во время диалога.
    if (group.length() < MIN_PLAYERS) {
        return;
    }

    // В первую очередь удаляем старую карту.
    // Если квест берёт новая группа - у предыдущей проваливаем квест.
    if (stage == 1) {
        DeleteRaidersCamp(true);
        // Если группа берёт вторую стадию квеста, просто удаляем старую карту.
    }
    else {
        DeleteRaidersCamp(false);
    }

    // Записываем текущий состав группы.
    auto lastDefenceGroup = array<ident>(group.length());
    for (uint i = 0; i < group.length(); i++) {
        lastDefenceGroup[i] = group[i].Id;
    }
    Game.ArroyoLastDefenceGroup = lastDefenceGroup;

    // Обнулим счётчик рейдеров, на всякий случай.
    Game.ArroyoRaidersCount = 0;

    // Создаем локацию, если не удалось прекращаем работу функции.
    // Локации создаем ориентируясь по стадиям квеста у лидера.
    if (stage == 1) {
        Location camp = _GetRaidersCamp(group);
        if (!valid(camp)) {
            return;
        }

        Map map = camp.GetMapByIndex(0);

        // Сохраняем идентификатор карты, для последующего удаления
        Game.ArroyoMynocMap = camp.Id;

        // Проходимся по всей группе и инициализируем квест у игроков не выполнявших (q_arroyo_mynoc_defence = 0) его ранее
        // или проваливших его (q_arroyo_mynoc_defence = 4 или 8). Все прочие в группе могут помочь, но не могут выполнить квест
        // и не получают опыт, соответственно.
        for (uint i = 0; i < group.length(); i++) {
            // Если в группе есть НПС - пропускаем его
            if (!group[i].IsControlledByPlayer) {
                continue;
            }
            int quest = group[i].ArroyoMynocDefence;
            if (quest == 0 || quest == 4 || quest == 8) {
                group[i].ArroyoMynocDefence = 1;
            }
        }
    }
    else if (stage == 2) {
        Location camp = _GetRaidersForce(group);
        if (!valid(camp)) {
            return;
        }

        Map map = camp.GetMapByIndex(0);

        // Сохраняем идентификатор карты, для последующего удаления
        Game.ArroyoMynocMap = camp.Id;

        // Проходимся по всей группе и меняем стадию выполненности квеста.
        for (uint i = 0; i < group.length(); i++) {
            // Если в группе есть НПС - пропускаем его
            if (!group[i].IsControlledByPlayer) {
                continue;
            }
            if (group[i].ArroyoMynocDefence == 2) {
                group[i].ArroyoMynocDefence = 3;
            }
        }
    }
    else {
        return;
    }

    // Устанавливаем таймаут для квеста.
    Game.ArroyoMynocTimeout = Game.GetFullSecond() + (60 * 60 * 24 * QUEST_TIMEOUT);

    // И создаем событие в котором будем отслеживать не просрочился ли квест. Времени на квест в двое больше если нет других соискателей.
    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(Game.ArroyoMynocTimeout + (60 * 24 * QUEST_TIMEOUT) - Game.GetFullSecond()), TimeExpired);

    // Если дожили до сюда, то всё в порядке. Возвращаем TRUE.
}

// Проверка доступности квеста по времени.
bool TimeOutIsFree()
{
    // Квест ещё ни кем не брался.
    if (Game.ArroyoMynocTimeout == 0) {
        return true;
    }

    // Квест был взят игроками, но не выполнен.
    if (Game.GetFullSecond() >= Game.ArroyoMynocTimeout) {
        Game.ArroyoMynocTimeout = 0;
        return true;
    }
    else {
        // Квест выполняется другими игроками и не может быть взят.
        return false;
    }
}

// Удаление лагеря рейдеров.
void DeleteRaidersCamp(bool isFail)
{
    if (Game.ArroyoMynocMap != ZERO_IDENT) {
        Location loc = Game.GetLocation(Game.ArroyoMynocMap);

        // Ищем пользователей бравших квест, устанавливаем переменные и чистим их карты.
        auto lastDefenceGroup = Game.ArroyoLastDefenceGroup;
        for (uint i = 0; i < lastDefenceGroup.length(); i++) {
            Critter player = Game.GetCritter(lastDefenceGroup[i]);

            // Проверяем где находится пользователь. Если в удаляемой локации - выкидываем его от туда.
            Map player_map = player.GetMap();
            if (valid(player_map)) {
                Location player_loc = player_map.GetLocation();
                if (!valid(player_loc)) {
                    continue;
                }

                if (player_loc.ProtoId == loc.ProtoId) {
                    // В локации найден игрок - переносим его на глобал.
                    player.TransitToGlobal();
                    player.SayMsg(SAY_NETMSG, TextPackName::Text, 3483);
                }

                // Убираем локу с карты игрока
                Location::UnsetKnownLoc(player, loc);
            }

            if (isFail) {
                // Если на данный момент у игрока задание всё ещё на стадии выполнения - устанавливаем провал.
                int quest = player.ArroyoMynocDefence;
                if (quest == 1 || quest == 2 || quest == 3 || quest == 5) {
                    player.ArroyoMynocDefence = 8;
                }
            }
        }

        // И собственно удаление локации
        Game.DestroyLocation(loc.Id);
        Game.ArroyoMynocMap = ZERO_IDENT;
    }

    // На всякий случай обнулим количество рейдеров.
    Game.ArroyoRaidersCount = 0;
}

// Вспомогательная функция. Возвращает лидера группы в которой состоит игрок.
ident GetLeaderId(Critter player)
{
    Critter leader;
    if (valid(GlobalmapGroupExtended::GetFollowLeader(player))) {
        leader = GlobalmapGroupExtended::GetFollowLeader(player);
    }
    else {
        leader = player;
    }

    if (valid(leader)) {
        return leader.Id;
    }
    else {
        return ZERO_IDENT;
    }
}

// Устанавливаем таймер, не успел побить рейдеров - лузер...
void TimeExpired()
{
    if (Game.ArroyoRaidersCount <= 0) {
        DeleteRaidersCamp(false);
    }
    else {
        DeleteRaidersCamp(true);
    }

    // Устанавливаем таймаут для квеста в 0.
    Game.ArroyoMynocTimeout = 0;
}

// Локация 1 "Лагерь рейдеров" для первой части квеста.
Location _GetRaidersCamp(Critter[] group)
{
    int x, y;
    x = Game.Random(0, 1);
    y = Game.Random(-2, -1);
    Location camp = Game.CreateLocation(Content::Location::raiders_camp_1,
                                        (ARROYO_POS_X + x * Settings.GlobalMapZoneLength),
                                        (ARROYO_POS_Y + y * Settings.GlobalMapZoneLength),
                                        group);

    if (!valid(camp)) {
        return null;
    }

    // Это должно быть установлено в CITY.TXT
    camp.Hidden = true;
    camp.AutoGarbage = false;
    camp.Radius = 6;
    // camp.Color = 0x3CFF0000;

    return camp;
}

// Локация 2 "Рейдеры атакующие караван" для второй части квеста.
Location _GetRaidersForce(Critter[] group)
{
    int x, y;
    x = Game.Random(1, 2);
    y = Game.Random(-1, 2);
    Location camp = Game.CreateLocation(
        Content::Location::raiders_camp_2,
        (ARROYO_POS_X + x * Settings.GlobalMapZoneLength + Game.Random(-(Settings.GlobalMapZoneLength / 2), (Settings.GlobalMapZoneLength / 2))),
        (ARROYO_POS_Y + y * Settings.GlobalMapZoneLength + Game.Random(-(Settings.GlobalMapZoneLength / 2), (Settings.GlobalMapZoneLength / 2))),
        group);

    if (!valid(camp)) {
        return null;
    }

    // Это должно быть установлено в CITY.TXT
    camp.Hidden = true;
    camp.AutoGarbage = false;
    camp.Radius = 6;
    // camp.Color = 0x3CFF0000;

    return camp;
}
