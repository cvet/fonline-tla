// FOS Client

enum Collection
{
    ChosenAll,
    Inventory,
    Loot,
    BarterOffer,
    BarterTraderOffer,
}

Item @[] ReceivedItems = {};
Item @[] BarterOfferItems = {};
Item @[] BarterTraderOfferItems = {};
Item @[] RemovedItems = {};

void ModuleInit()
{
    Game.OnReceiveItems.Subscribe(OnReceiveItems);
}

void OnReceiveItems(Item[] items, int param)
{
    ReceivedItems.clear();
    BarterOfferItems.clear();
    BarterTraderOfferItems.clear();
    RemovedItems.clear();

    if (items !is null) {
        ReceivedItems = items;
    }

    Gui::EngineCallback_ItemChanged(false);

    if (param != 0) {
        return;
    }

    Critter @chosen = Game.GetChosen();
    if (chosen is null) {
        return;
    }

    TransferTypes transfer = chosen.TransferType;
    if (transfer != TransferTypes::Close) {
        if (transfer == TransferTypes::CritBarter) {
            Game.ShowScreen(CLIENT_SCREEN_BARTER, dict<string, any> = {{"CritterId", chosen.TransferContainerId}});
        }
        else {
            ident crId;
            ident itemId;
            if (transfer == TransferTypes::CritLoot || transfer == TransferTypes::CritSteal || transfer == TransferTypes::FarCrit) {
                crId = chosen.TransferContainerId;
            }
            else if (transfer == TransferTypes::HexContUp || transfer == TransferTypes::HexContDown || transfer == TransferTypes::SelfCont ||
                     transfer == TransferTypes::FarCont) {
                itemId = chosen.TransferContainerId;
            }

            Game.ShowScreen(CLIENT_SCREEN_PICKUP, dict<string, any> = {{"TargetCritterId", crId}, {"TargetItemId", itemId}});
        }
    }
}

Item[] GetCollection(Collection collection)
{
    Item[] items = {};
    Critter chosen = Game.GetChosen();

    if (collection == Collection::ChosenAll && chosen !is null) {
        items = chosen.GetItems();
    }
    else if (collection == Collection::Inventory && chosen !is null) {
        items = chosen.GetItems(ItemProperty::CritterSlot, CritterItemSlot::Inventory);
    }
    else if (collection == Collection::Loot) {
        items = ReceivedItems;
    }
    else if (collection == Collection::BarterOffer) {
        items = BarterOfferItems;
    }
    else if (collection == Collection::BarterTraderOffer) {
        items = BarterTraderOfferItems;
    }

    if (collection != Collection::BarterOffer && collection != Collection::BarterTraderOffer) {
        ExcludeItems(items, collection != Collection::Loot ? BarterOfferItems : BarterTraderOfferItems);
    }
    ExcludeItems(items, RemovedItems);

    return items;
}

void RemoveItem(Collection collection, Item& item, uint count)
{
    Assert(count > 0);
    Assert(count <= item.Count);

    RemovedItems.insertLast(item.Clone(count));

    Gui::EngineCallback_ItemChanged(false);
}

void BarterItem(bool offer, Item& item, uint count)
{
    // if( offer )
}

void ExcludeItems(Item[] & items, Item[] & excludeItems)
{
    for (uint i = 0; i < excludeItems.length(); i++) {
        Item excludeItem = excludeItems[i];
        for (uint j = 0; j < items.length(); j++) {
            Item item = items[j];
            if (excludeItem.Id == item.Id) {
                if (excludeItem.Count >= item.Count) {
                    items.removeAt(j);
                }
                else {
                    items[j] = item.Clone(item.Count - excludeItem.Count);
                }
                break;
            }
        }
    }
}

Collection GetCollectionFromType(int collectionType)
{
    Collection collection = Collection::ChosenAll;

    switch (collectionType) {
    case ITEMS_CHOSEN_ALL:
        collection = Collection::ChosenAll;
        break;
    case ITEMS_INVENTORY:
        collection = Collection::Inventory;
        break;
    case ITEMS_PICKUP:
        collection = Collection::Loot;
        break;
    case ITEMS_BARTER_OFFER:
        collection = Collection::BarterOffer;
        break;
    case ITEMS_BARTER_OPPONENT_OFFER:
        collection = Collection::BarterTraderOffer;
        break;
    }
    return collection;
}

Item[] RefreshItemsCollection(int collectionType)
{
    Collection collection = GetCollectionFromType(collectionType);

    return GetCollection(collection);
}

Item GetCollectionItem(ident itemId, int collectionType)
{
    Item[] items = RefreshItemsCollection(collectionType);
    for (uint i = 0; i < items.length(); i++) {
        if (items[i].Id == itemId) {
            return items[i];
        }
    }

    return Game.GetItem(itemId);
}
