// FOS Server Client

///@ RemoteCall Server PickItem(uint16 hx, uint16 hy, hstring pid)
///@ RemoteCall Server MoveInvItem(ident itemId, CritterItemSlot slot)
///@ RemoteCall Server DropInvItem(ident itemId, uint count)
///@ RemoteCall Server ReloadWeapon(ident itemId, ident ammoId)
///@ RemoteCall Server OperateContainer(bool take, bool all, ident itemId, uint itemCount)
///@ Property Critter PrivateCommon uint ApRegenerationTick Temporary
///@ Property Critter Protected uint ApRegenerationTime
///@ RemoteCall Server UseSkill(CritterProperty skill, ident targetCrId, ident targetItemId, hstring sceneryPid, uint16 hx, uint16 hy)
///@ RemoteCall Server Attack(ident targetId, uint8 mode)
/// RemoteCall Server Attack(ident targetId, uint8 mode, uint16 hexX, uint16 hexY)
/// RemoteCall Server UseSneak(bool enable)
///@ Event Common Game OnClientOperateContainer(Critter cr, Entity container, Item item, bool take)
///@ Event Server Game OnCritterPickItem(Critter cr, Item item)
///@ Event Server Game OnCritterPickScenery(Critter cr, StaticItem scenery)

#ifdef __CLIENT
any[] ChosenActions = {};

void ModuleInit()
{
    Game.OnLoop.Subscribe(ChosenProcess);
}

uint GetChosenActions(any[] actions)
{
    if (actions !is null) {
        actions = ChosenActions;
    }
    return ChosenActions.length();
}

void SetChosenActions(any[] actions)
{
    ChosenActions.resize(0);
    if (actions !is null) {
        Assert(actions.length() % 7 == 0);
        ChosenActions = actions.clone();
    }
}

void SetAction(any[] action, bool append, bool toBeginning)
{
    Assert(action.length() == 7);

    if (!append) {
        ChosenActions.resize(0);
    }
    if (toBeginning) {
        for (int i = int(action.length()) - 1; i >= 0; i--) {
            ChosenActions.insertFirst(action[i]);
        }
    }
    else {
        for (uint i = 0; i < action.length(); i++) {
            ChosenActions.insertLast(action[i]);
        }
    }
}

#define CHECK_NEED_AP \
    #(needAp) if (chosen.ActionPoints < int(needAp)) \
    { \
        Game.Message(Game.ReplaceText(Game.GetText(TextPackName::Combat, MsgStr::StrCombatNeedAp), "%d", needAp)); \
        break; \
    } \
    if (chosen.CurrentAp / AP_DIVIDER < int(needAp)) \
        return;

void ChosenProcess()
{
    Critter chosen = Game.GetChosen();
    if (chosen is null) {
        return;
    }

    if (CurMap !is null) {
        // Roof
        Game.CustomCall("SkipRoof " + chosen.HexX + " " + chosen.HexY);

        // Hidden mode
        chosen.SetAlpha(chosen.InSneakMode ? 130 : 255);

        // Shoot borders
        CurMap.SetShootBorders(Settings.Cursor == CursorType::UseWeapon);

        if (chosen.IsMoving()) {
            return;
        }
    }

    // Actions
    if (!chosen.IsFree()) {
        return;
    }

    // Ap regeneration
    if (chosen.CurrentAp < chosen.ActionPoints * AP_DIVIDER) {
        uint tick = Game.GetTick();
        if (chosen.ApRegenerationTick == 0) {
            chosen.ApRegenerationTick = tick;
        }

        int delta = tick - chosen.ApRegenerationTick;
        if (delta >= 500) {
            chosen.ApRegenerationTick = tick;

            uint apRegeneration = chosen.ApRegenerationTime;
            if (apRegeneration == 0) {
                apRegeneration = Settings.ApRegeneration;
            }

            uint maxAp = chosen.ActionPoints * AP_DIVIDER;
            chosen.CurrentAp = chosen.CurrentAp + maxAp * delta / apRegeneration;
            if (chosen.CurrentAp > int(maxAp)) {
                chosen.CurrentAp = maxAp;
            }
        }
    }

    if (chosen.CurrentAp / AP_DIVIDER > chosen.ActionPoints) {
        chosen.CurrentAp = chosen.ActionPoints * AP_DIVIDER;
    }
    if (ChosenActions.length() == 0) {
        return;
    }
    if (!chosen.IsAlive()) {
        ChosenActions.clear();
        return;
    }

    any[] curAction = ChosenActions.clone();
    curAction.resize(7);
    int actionType = curAction[0];

    // Force end move
    if (actionType != Tla::ChosenMove && actionType != Tla::ChosenMoveToCrit) {
        chosen.StopMove();
    }

    switch (actionType) {
    case Tla::ChosenMoveToCrit:
    case Tla::ChosenMove: {
        uint16 hx = ChosenActions[1];
        uint16 hy = ChosenActions[2];
        bool isRun = (ChosenActions[3] != 0);
        uint cut = ChosenActions[4];
        uint startTick = ChosenActions[6];

        if (CurMap is null) {
            break;
        }

        // Move to critter
        if (actionType == Tla::ChosenMoveToCrit) {
            Critter cr = Game.GetCritter(ChosenActions[1]);
            if (cr !is null) {
                hx = cr.HexX;
                hy = cr.HexY;
            }
        }

        // Already here
        if (Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy) <= cut) {
            break;
        }

        // Can't move
        if (chosen.IsNoMove) {
            Game.Message(TextPackName::Game, MsgStr::StrCritterCantMove);
            break;
        }

        // Check running
        if (isRun) {
            if (!Settings.RunOnCombat && IS_TIMEOUT(chosen.TimeoutBattle)) {
                isRun = false;
            }
            else if (!Settings.RunOnTransfer && IS_TIMEOUT(chosen.TimeoutTransfer)) {
                isRun = false;
            }
            else if (chosen.IsDamagedRightLeg || chosen.IsDamagedLeftLeg || chosen.IsOverweight) {
                isRun = false;
            }
            else if (chosen.IsNoRun) {
                isRun = false;
            }
        }

        // Find path
        uint8[] path = CurMap.GetPath(chosen.HexX, chosen.HexY, hx, hy, cut);
        if (path.isEmpty() && Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy) > cut + 1) {
            path = CurMap.GetPath(chosen.HexX, chosen.HexY, hx, hy, ++cut);
        }

        // Move to
        if (!path.isEmpty()) {
            uint16 hexX = chosen.HexX;
            uint16 hexY = chosen.HexY;
            for (uint i = 0; i < path.length(); i++) {
                CurMap.MoveHexByDir(hexX, hexY, path[i], 1);
            }

            chosen.MoveToHex(hexX, hexY, 0, 0, isRun ? chosen.WalkSpeed * 2 : chosen.WalkSpeed);

            // chosen.ApRegenerationTick = 0;
        }

        if (chosen.IsMoving()) {
            return;
        }
    } break;
    case Tla::ChosenDir: {
        bool cw = (ChosenActions[1] == 0);

        if (CurMap is null) {
            break;
        }

        int dir = chosen.Dir;
        if (cw) {
            dir++;
            if (dir >= 6) {
                dir = 0;
            }
        }
        else {
            dir--;
            if (dir < 0) {
                dir = 5;
            }
        }

        chosen.ChangeDir(dir);
    } break;
    case Tla::ChosenUseItem: {
        ident itemId = ChosenActions[1];
        uint8 targetType = ChosenActions[3];
        ident targetId = ChosenActions[4];
        uint8 rate = ChosenActions[5];
        uint param = ChosenActions[6];
        uint8 use = (rate & 0xF);
        uint8 aim = (rate >> 4);

        // Find item
        AbstractItem item = (itemId != ZERO_IDENT ? cast<AbstractItem>(chosen.GetItem(itemId)) : CritterItem::GetActive(chosen));
        if (item is null) {
            break;
        }

        Item realItem = cast<Item>(item);
        bool isMainItem = (realItem == null || realItem.Id == chosen.GetItem(ItemProperty::CritterSlot, CritterItemSlot::Main).Id);

        // Find target
        Critter targetCr;
        Item targetItem;
        Item targetSelfItem;
        if (targetType == TARGET_SELF) {
            targetCr = chosen;
        }
        else if (targetType == TARGET_SELF_ITEM) {
            targetSelfItem = chosen.GetItem(targetId);
        }
        else if (targetType == TARGET_CRITTER) {
            targetCr = Game.GetCritter(targetId);
        }
        else if (targetType == TARGET_ITEM) {
            targetItem = Game.GetItem(targetId);
        }
        else {
            break;
        }

        if (targetType == TARGET_CRITTER && chosen is targetCr) {
            targetType = TARGET_SELF;
        }
        if (targetType == TARGET_SELF) {
            targetId = chosen.Id;
        }

        // Check
        if (targetType == TARGET_CRITTER && targetCr is null) {
            break;
        }
        if (targetType == TARGET_ITEM && targetItem is null) {
            break;
        }
        if (targetType != TARGET_CRITTER && realItem == null) {
            break;
        }

        // Parse use
        bool isAttack = (targetType == TARGET_CRITTER && isMainItem && item.Type == ItemType::Weapon && use < MAX_USES);
        bool isReload = (targetType == TARGET_SELF_ITEM && use == USE_RELOAD && item.Type == ItemType::Weapon);
        bool isSelf = (targetType == TARGET_SELF || targetType == TARGET_SELF_ITEM);

        // Calculate ap cost
        uint apCost = Parameters::GetItemUseApCost(chosen, item, rate);

        // Check weapon
        if (isAttack) {
            // ChosenActions::SetChosenActions(array<any> = {Tla::ChosenUseItem, useItem.Id, 0, TARGET_CRITTER, cr.Id, isAttack ? mode : USE_USE, 0});

            if (CurMap is null) {
                break;
            }
            if (isSelf) {
                break;
            }
            if (item.Type != ItemType::Weapon) {
                break;
            }
            if (targetCr.IsDead()) {
                break;
            }
            if (!chosen.IsUnlimitedAmmo && item.Weapon_MaxAmmoCount > 0 && item.AmmoCount == 0) {
                uint8 sound = (use == 0 ? item.Weapon_SoundId_0 : (use == 1 ? item.Weapon_SoundId_1 : item.Weapon_SoundId_2));
                // Game.PlaySound( 'W', 'O', sound, '1' );
                break;
            }
            if (item.Weapon_IsTwoHanded && (chosen.IsDamagedRightArm || chosen.IsDamagedLeftArm)) {
                Game.Message(TextPackName::Combat, MsgStr::StrCombatNeedDmgArm);
                break;
            }
            if (chosen.IsDamagedRightArm && chosen.IsDamagedLeftArm && realItem != null) {
                Game.Message(TextPackName::Combat, MsgStr::StrCombatNeedDmgTwoArms);
                break;
            }
            if (item.Deteriorable && item.IsBroken) {
                Game.Message(TextPackName::Game, MsgStr::StrDeteriorationWeaponBroken);
                break;
            }
        }
        else if (isReload) {
            if (!isSelf) {
                break;
            }
            CHECK_NEED_AP(apCost);
            if (isMainItem) {
                Parameters::SetWeaponMode(item, USE_PRIMARY);
            }

            Gui::Screen screen = Gui::GetActiveScreen();
            if (screen == null || screen.Index == CLIENT_SCREEN_NONE || screen.Index == CLIENT_MAIN_SCREEN_GAME) {
                Settings.Cursor = CursorType::UseWeapon;
            }

            if (item.Weapon_MaxAmmoCount == 0) {
                break; // No have holder
            }

            if (targetId == ZERO_IDENT) { // Unload
                if (item.AmmoCount == 0) {
                    break; // Is empty
                }
            }
            else if (targetSelfItem is null) { // Reload
                if (item.AmmoCount >= item.Weapon_MaxAmmoCount) {
                    break; // Is full
                }
                if (item.Weapon_Caliber != 0) {
                    hstring ammoPid = item.AmmoPid != EMPTY_HSTRING ? item.AmmoPid : item.Weapon_DefaultAmmoPid;
                    Item ammoCaliber;
                    Item[] items = chosen.GetItems(ItemProperty::Type, ItemType::Ammo);
                    for (uint i = 0; i < items.length(); i++) {
                        if (items[i].ProtoId == ammoPid) {
                            targetSelfItem = items[i];
                            break;
                        }

                        if (ammoCaliber == null && items[i].Ammo_Caliber == item.Weapon_Caliber) {
                            ammoCaliber = items[i];
                        }
                    }
                    if (targetSelfItem == null) {
                        if (ammoCaliber != null) {
                            targetSelfItem = ammoCaliber;
                        }
                        else {
                            break;
                        }
                    }
                    targetId = targetSelfItem.Id;
                }
                /*if( item.Weapon_Caliber )
                   {
                    targetSelfItem = chosen->GetAmmoAvialble( item );
                    if( !targetSelfItem )
                        break;
                    targetId = targetSelfItem->GetId();
                   }*/
            }
            else // Load
            {
                if (item.Weapon_Caliber != targetSelfItem.Ammo_Caliber) {
                    break; // Different caliber
                }
                if (item.AmmoPid == targetSelfItem.ProtoId && item.AmmoCount == item.Weapon_MaxAmmoCount) {
                    break; // Is full
                }
            }

            CurPlayer.ServerCall.ReloadWeapon(realItem.Id, targetId);
            chosen.CurrentAp -= apCost;
        }
        else // Use
        {
            if (use != USE_USE) {
                break;
            }
        }

        // Find Target
        if (!isSelf && CurMap !is null) {
            uint16 hx, hy;
            if (targetCr !is null) {
                hx = targetCr.HexX;
                hy = targetCr.HexY;
            }
            else {
                hx = targetItem.HexX;
                hy = targetItem.HexY;
            }

            uint maxDist = 0;
            if (isAttack) {
                AbstractItem weap = CritterItem::GetActive(chosen);
                // TODO: проверить, что работает для рукопашных ударов.
                maxDist = Parameters::GetCritterAttackDistance(chosen, weap, weap.Mode);
            }
            else {
                maxDist = 1 + chosen.Multihex;
            }
            if (targetCr !is null) {
                maxDist += targetCr.Multihex;
            }

            // Target find
            uint dist = Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy);
            bool needMove = dist > maxDist;
            // if( isAttack )
            //    needMove = !CurMap->TraceBullet( chosen.HexX, chosen.HexY, hx, hy, maxDist, 0.0f, targetCr, false, nullptr, 0, nullptr, nullptr, nullptr, true
            //    );
            // else
            //    needMove = !CheckDist( chosen.HexX, chosen.HexY, hx, hy, maxDist );
            // TODO: r17 trace
            if (needMove) {
                if (dist > maxDist) {
                    bool isRun = false; // 814 ( Settings.AlwaysRun && dist >= Settings.AlwaysRunUseDist );
                    if (targetCr !is null) {
                        SetAction(array<any> = {Tla::ChosenMoveToCrit, targetCr.Id, 0, isRun ? 1 : 0, maxDist, 0, 0}, false, false);
                    }
                    else {
                        SetAction(array<any> = {Tla::ChosenMove, hx, hy, isRun ? 1 : 0, maxDist, 0, 1}, false, false);
                    }

                    if (CurMap.GetPathLength(chosen, hx, hy, maxDist) > 0) {
                        SetAction(curAction, true, false);
                    }

                    return;
                }

                Game.Message(TextPackName::Game, MsgStr::StrFindpathAimblock);
                break;
            }

            // Refresh orientation
            CHECK_NEED_AP(apCost);
            uint8 dir = Game.GetDirection(chosen.HexX, chosen.HexY, hx, hy);
            if (Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy) >= 1 && chosen.Dir != dir) {
                chosen.ChangeDir(dir);
            }
        }

        // Use
        CHECK_NEED_AP(apCost);

        /*if( targetItem && targetItem->IsGenericOrGrid() )
            Net_SendUseItem( apCost, itemId, rate, targetType, ( targetItem.HexX << 16 ) | ( targetItem.HexY & 0xFFFF ), targetItem->GetProtoId(), param );
           else
            Net_SendUseItem( apCost, itemId, rate, targetType, targetId, 0, param );  // Item or critter
         */

        if (use >= USE_PRIMARY && use <= USE_THIRD) {
            Game.OnCritterActionEx.Fire(true, chosen, CritterAction::UseWeapon, rate, item);
        }
        else if (use == USE_RELOAD) {
            Game.OnCritterActionEx.Fire(true, chosen, CritterAction::ReloadWeapon, 0, item);
        }
        else {
            Game.OnCritterActionEx.Fire(true, chosen, CritterAction::UseItem, 0, item);
        }

        chosen.CurrentAp -= apCost;
        if (isAttack && valid(targetCr)) {
            CurPlayer.ServerCall.Attack(targetCr.Id, rate);
        }
        /*if( isAttack && !aim && Keyb::ShiftDwn )               // Continue battle after attack
           {
           SetAction( curAction, false, false );
           return;
           }*/
    } break;
    case Tla::ChosenMoveItem: {
        ident itemId = ChosenActions[1];
        uint itemCount = ChosenActions[2];
        CritterItemSlot toSlot = CritterItemSlot(int(ChosenActions[3]));
        bool isSecondTry = (ChosenActions[5] != 0);

        Assert(itemCount > 0);

        Item item = chosen.GetItem(itemId);
        if (item is null) {
            break;
        }

        CritterItemSlot fromSlot = item.CritterSlot;
        if (fromSlot == toSlot) {
            break;
        }

        if (toSlot == CritterItemSlot::Outside) {
            if (!Game.OnItemCheckMove.Fire(item, itemCount, chosen, CurMap)) {
                break;
            }
        }

        Item itemSwap = null;
        if (toSlot != CritterItemSlot::Inventory && toSlot != CritterItemSlot::Outside) {
            itemSwap = chosen.GetItem(ItemProperty::CritterSlot, toSlot);
        }

        if (!Game.OnCritterCheckMoveItem.Fire(chosen, item, toSlot)) {
            // Gameplay swap workaround
            if (itemSwap !is null && !isSecondTry) {
                // Add actions
                if (Game.OnCritterCheckMoveItem.Fire(chosen, itemSwap, CritterItemSlot::Inventory) && Game.OnCritterCheckMoveItem.Fire(chosen, item, toSlot)) {
                    ChosenActions.reverse();
                    ChosenActions.resize(ChosenActions.length() - 7);
                    ChosenActions.reverse();

                    SetAction(array<any> = {Tla::ChosenMoveItem, itemId, itemCount, toSlot, 0, 1, 0}, false, true);
                    SetAction(array<any> = {Tla::ChosenMoveItem, itemSwap.Id, itemSwap.Count, CritterItemSlot::Inventory, 0, 1, 0}, false, true);
                    return;
                }
            }
            break;
        }

        // Action points
        uint apCost = Settings.RtApCostMoveItemInventory;
        if ((fromSlot == CritterItemSlot::Main && toSlot == CritterItemSlot::Secondary) ||
            (fromSlot == CritterItemSlot::Secondary && toSlot == CritterItemSlot::Main)) {
            apCost = 0;
        }
        if (toSlot == CritterItemSlot::Outside) {
            apCost = Settings.RtApCostDropItem;
        }
        CHECK_NEED_AP(apCost);

        // Game.CustomCall( "MoveItem " + apCost + " " + itemCount + " " + itemId + " " + ( itemSwap !is null ? itemSwap.Id : 0 ) + " " + toSlot );

        //Game.CustomCall("MoveItem " + itemCount + " " + itemId + " " + (itemSwap != null ? itemSwap.Id : ZERO_IDENT) + " " +
        //               (toSlot == CritterItemSlot::Outside ? "-1" : "" + toSlot));
        chosen.CurrentAp -= apCost;

        if (toSlot != CritterItemSlot::Outside) {
            CurPlayer.ServerCall.MoveInvItem(itemId, toSlot);
        }
        else {
            CurPlayer.ServerCall.DropInvItem(itemId, itemCount);
        }

    } break;
    case Tla::ChosenMoveItemCont: {
        ident itemId = ChosenActions[1];
        uint itemCont = ChosenActions[2];
        uint count = ChosenActions[3];

        Assert(itemCont == ITEMS_PICKUP || itemCont == ITEMS_PICKUP_FROM);
        Assert(count > 0);

        Item @[] cont = ClientItems::RefreshItemsCollection(itemCont);
        Item item;
        for (uint i = 0; i < cont.length() && item is null; i++) {
            if (cont[i].Id == itemId) {
                item = cont[i];
            }
        }

        if (count > item.Count) {
            break;
        }

        Entity contEntity;
        TransferTypes transferType = chosen.TransferType;
        ident transferContainerId = chosen.TransferContainerId;
        if (transferContainerId != ZERO_IDENT) {
            if (transferType == TransferTypes::CritLoot || transferType == TransferTypes::CritSteal || transferType == TransferTypes::FarCrit) {
                contEntity = Game.GetCritter(transferContainerId);
            }
            else if (transferType == TransferTypes::HexContUp || transferType == TransferTypes::HexContDown || transferType == TransferTypes::SelfCont ||
                     transferType == TransferTypes::FarCont) {
                contEntity = Game.GetItem(transferContainerId);
            }
        }
        else {
            // Container disappeared
            break;
        }

        auto colType = ClientItems::GetCollectionFromType(itemCont);
        bool take = (colType == ClientItems::Collection::Loot);
        Entity from = (itemCont == ITEMS_PICKUP ? cast<Entity>(chosen) : contEntity);
        Entity to = (itemCont == ITEMS_PICKUP ? contEntity : cast<Entity>(chosen));
        if (!Game.OnItemCheckMove.Fire(item, count, from, to)) {
            break;
        }

        uint apCost = Settings.RtApCostMoveItemContainer;
        CHECK_NEED_AP(apCost);

        if (take || cast<Critter>(to) != null) {
            Critter toCr = take ? chosen : cast<Critter>(to);
            if (int(toCr.ItemsWeight) + item.Weight * count > toCr.CarryWeight) {
                Game.Message(TextPackName::Game, (take ? MsgStr::StrOverweight : MsgStr::StrOvervolume));
                break;
            }
        }

        // Game.CustomCall( "MoveItemCont " + apCost + " " + count + " " + itemId + " " + itemCont );
        ClientItems::RemoveItem(colType, item, count);

        Game.OnCritterActionEx.Fire(true, chosen, CritterAction::OperateContainer, transferType, item);

        CurPlayer.ServerCall.OperateContainer(take, false, item.Id, count);
    } break;
    /*case Tla::ChosenTakeAll:
       {
        CHECK_NEED_AP( chosen->GetApCostMoveItemContainer() );

        if( PupCont2Init.empty() )
            break;

        uint c, w, v;
        ContainerCalcInfo( PupCont2Init, c, w, v, MAX_INT, false );
        if( chosen->GetFreeWeight() < (int) w )
        {
            AddMess( FOMB_GAME, CurLang.Msg[ TextPackName::Game ].GetStr( MsgStr::StrBarterOverweight ) );
            break;
        }
        else if( chosen->GetFreeVolume() < (int) v )
        {
            AddMess( FOMB_GAME, CurLang.Msg[ TextPackName::Game ].GetStr( MsgStr::StrBarterOversize ) );
            break;
        }

        Net_SendItemCont( PupTransferType, PupContId, 0, 0, CONT_GETALL );
        chosen->Action( CritterAction::OperateContainer, PupTransferType * 10 + 1, nullptr );
        chosen->SubAp( chosen->GetApCostMoveItemContainer() );
       }
       break;*/
    /*case Tla::ChosenPutAll:
       {
        CHECK_NEED_AP( chosen->GetApCostMoveItemContainer() );

        if( InvContInit.empty() )
            break;

        Net_SendItemCont( PupTransferType, PupContId, 0, 0, CONT_PUTALL );
        chosen->Action( CritterAction::OperateContainer, PupTransferType * 10 + 3, nullptr );
        chosen->SubAp( chosen->GetApCostMoveItemContainer() );
       }
       break;*/
    case Tla::ChosenSneak: {
        uint apCost = Settings.RtApCostUseSkill;
        CHECK_NEED_AP(apCost);

        // Game.CustomCall( "UseCritterSkill " + CritterProperty::UseSneak + " " + apCost + " " + chosen.Id );
    } break;
    case Tla::ChosenUseSklOnItem: {
        CritterProperty skill = CritterProperty(int(ChosenActions[1]));
        ident itemId = ChosenActions[2];
        bool isInv = (ChosenActions[3] > 0);

        Item itemAction = null;

        if (isInv) {
            Item item = chosen.GetItem(itemId);
            if (!valid(item)) {
                break;
            }
            itemAction = item;
            if (item.IsHolodisk) {
                // TODO: запись и чтение голодисков. см CHOSEN_USE_SKL_ON_ITEM cr.cpp
                break;
            }
            CurPlayer.ServerCall.UseSkill(skill, ZERO_IDENT, itemAction.Id, EMPTY_HSTRING, 0, 0);
        }
        else {
            Item item = Game.GetItem(itemId);
            if (!valid(item)) {
                break;
            }
            itemAction = item;

            if (valid(CurMap)) {
                uint16 hx = itemAction.HexX;
                uint16 hy = itemAction.HexY;
                uint dist = Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy);
                uint useDist = 1 + chosen.Multihex;
                if (dist > useDist) {
                    bool isRun = false; // 814 ( Settings.AlwaysRun && dist >= Settings.AlwaysRunUseDist );
                    SetAction(array<any> = {Tla::ChosenMove, hx, hy, isRun ? 1 : 0, useDist, 0, 1}, false, false);
                    if (CurMap.GetPathLength(chosen, hx, hy, useDist) > 0) {
                        SetAction(array<any> = {Tla::ChosenUseSklOnItem, uint(skill), itemId, ChosenActions[3], 0, 0, 0}, true, false);
                    }

                    return;
                }
            }
            uint apCost = Settings.RtApCostUseSkill;
            CHECK_NEED_AP(apCost);
            CurPlayer.ServerCall.UseSkill(skill, ZERO_IDENT, itemAction.Id, EMPTY_HSTRING, 0, 0);
        }
    } break;
    case Tla::ChosenUseSklOnCritter: {
        CritterProperty skill = CritterProperty(int(ChosenActions[1]));
        ident crId = ChosenActions[2];

        Critter cr = (crId != ZERO_IDENT ? Game.GetCritter(crId) : chosen);

        if (cr.Id != chosen.Id) {
            if (CurMap is null) {
                break;
            }

            uint dist = Game.GetDistance(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY);
            uint useDist = 3 + chosen.Multihex;
            if (dist > useDist) {
                bool isRun = false; // 814 ( Settings.AlwaysRun && dist >= Settings.AlwaysRunUseDist );
                SetAction(array<any> = {Tla::ChosenMoveToCrit, cr.Id, 0, isRun ? 1 : 0, useDist, 0, 0}, false, false);
                // Возможна ситуация, когда до цели нельзя дойти.
                if (CurMap.GetPathLength(chosen, cr.HexX, cr.HexY, useDist) > 0) {
                    SetAction(array<any> = {Tla::ChosenUseSklOnCritter, uint(skill), cr.Id, 0, 0, 0, 0}, true, false);
                }

                return;
            }
        }

        uint apCost = Settings.RtApCostUseSkill;
        CHECK_NEED_AP(apCost);

        // Refresh orientation
        uint8 dir = Game.GetDirection(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY);
        if (Game.GetDistance(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY) >= 1 && chosen.Dir != dir) {
            chosen.ChangeDir(dir);
        }

        chosen.CurrentAp = chosen.CurrentAp - apCost * AP_DIVIDER;

        CurPlayer.ServerCall.UseSkill(skill, cr.Id, ZERO_IDENT, EMPTY_HSTRING, 0, 0);
    } break;
    case Tla::ChosenTalkNpc: {
        ident crId = ChosenActions[1];

        Critter cr = Game.GetCritter(crId);
        if (cr is null) {
            break;
        }
        if (cr.IsDead()) {
            break;
        }

        uint dist = Game.GetDistance(chosen, cr);
        uint talkDistance = (cr.TalkDistance > 0 ? cr.TalkDistance : Settings.TalkDistance) + chosen.Multihex;

        if (dist > talkDistance) {
            bool isRun = false; // 814 ( Settings.AlwaysRun && dist >= Settings.AlwaysRunUseDist );
            SetAction(array<any> = {Tla::ChosenMoveToCrit, cr.Id, 0, isRun ? 1 : 0, talkDistance, 0, 0}, false, false);
            uint16 hx = cr.HexX;
            uint16 hy = cr.HexY;
            if (CurMap.GetPathLength(chosen, hx, hy, talkDistance) > 0) {
                SetAction(array<any> = {Tla::ChosenTalkNpc, cr.Id, 0, 0, 0, 0, 0}, true, false);
            }

            return;
        }

        // if( !CurMap->TraceBullet( chosen.GetHexX(), chosen.HexY, cr.HexX, cr.HexY, talkDistance + chosen.Multihex, 0, cr, false, nullptr, 0, nullptr,
        // nullptr, nullptr, true ) )
        // {
        //    AddMess( FOMB_GAME, CurLang.Msg[ TextPackName::Game ].GetStr( MsgStr::StrFindpathAimblock ) );
        //    break;
        // }

        // Refresh orientation
        uint8 dir = Game.GetDirection(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY);
        if (Game.GetDistance(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY) >= 1 && chosen.Dir != dir) {
            chosen.ChangeDir(dir);
        }

        CurPlayer.ServerCall.StartDialog(cr.Id);
    } break;
    case Tla::ChosenPickItem: {
        hstring pid = hstring_fromHash(ChosenActions[1]);
        uint16 hx = ChosenActions[2];
        uint16 hy = ChosenActions[3];
        ident itemId = ChosenActions[4];

        if (CurMap is null) {
            break;
        }

        uint dist = Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy);
        uint useDist = 1 + chosen.Multihex;
        if (dist > useDist) {
            bool isRun = false; // 814 ( Settings.AlwaysRun && dist >= Settings.AlwaysRunUseDist );
            SetAction(array<any> = {Tla::ChosenMove, hx, hy, isRun ? 1 : 0, useDist, 0, 1}, false, false);

            if (CurMap.GetPathLength(chosen, hx, hy, useDist) > 0) {
                SetAction(array<any> = {Tla::ChosenPickItem, pid.hash, hx, hy, 0, 0, 0}, true, false);
            }
            return;
        }
        uint apCost = Settings.RtApCostPickItem;
        CHECK_NEED_AP(apCost);

        // Refresh orientation
        uint8 dir = Game.GetDirection(chosen.HexX, chosen.HexY, hx, hy);
        if (Game.GetDistance(chosen.HexX, chosen.HexY, hx, hy) >= 1 && chosen.Dir != dir) {
            chosen.ChangeDir(dir);
        }

        chosen.CurrentAp = chosen.CurrentAp - apCost * AP_DIVIDER;
        // Game.CustomCall( "PickItem " + apCost + " " + pid + " " + hx + " " + hy );
        CurPlayer.ServerCall.PickItem(hx, hy, pid);

        if (itemId != ZERO_IDENT) {
            Item item = Game.GetItem(itemId);
            if (item != null) {
                Game.OnCritterActionEx.Fire(true, chosen, CritterAction::PickItem, 0, item);
            }
        }
    } break;
    case Tla::ChosenPickCrit: {
        ident crId = ChosenActions[1];
        bool isLoot = (ChosenActions[2] == 0);

        if (CurMap is null) {
            break;
        }

        Critter cr = Game.GetCritter(crId);
        if (cr is null) {
            break;
        }

        if (isLoot && (!cr.IsDead() || cr.IsNoLoot)) {
            break;
        }
        if (!isLoot && (!cr.IsAlive() || cr.IsNoPush)) {
            break;
        }

        uint dist = Game.GetDistance(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY);
        uint pickDist = 1 + chosen.Multihex + cr.Multihex;
        if (dist > pickDist) {
            bool isRun = false; // 814 ( Settings.AlwaysRun && dist >= Settings.AlwaysRunUseDist );
            SetAction(array<any> = {Tla::ChosenMoveToCrit, cr.Id, 0, isRun ? 1 : 0, pickDist, 0, 0}, false, false);
            if (CurMap.GetPathLength(chosen, cr.HexX, cr.HexY, pickDist) > 0) {
                SetAction(curAction, true, false);
            }
            return;
        }

        uint apCost = Settings.RtApCostPickCritter;
        CHECK_NEED_AP(apCost);

        // Refresh orientation
        uint8 dir = Game.GetDirection(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY);
        if (Game.GetDistance(chosen.HexX, chosen.HexY, cr.HexX, cr.HexY) >= 1 && chosen.Dir != dir) {
            chosen.ChangeDir(dir);
        }

        Game.CustomCall("PickCritter " + apCost + " " + crId + " " + isLoot);
    } break;
    }

    if (ChosenActions.length() > 0) {
        ChosenActions.reverse();
        ChosenActions.resize(ChosenActions.length() - 7);
        ChosenActions.reverse();
    }
}
/*
   void UseSneak( Critter client, bool enable )
   {
    if( cr.InSneakMode == enable )
        return;

    if( !cr.IsAlive() )
        ThrowException( "Client is not alive", client );
    if( enable && IS_TIMEOUT( cr.TimeoutSneak ) )
        ThrowException( "Sneak timeout", client );

    if( enable )
        cr.TimeoutSneak = SNEAK_TIMEOUT( client );
    cr.InSneakMode = !cr.InSneakMode;
    cr.Wait( Settings.Breaktime );
   }*/

#endif
#ifdef __SERVER

void PickItem(Player player, uint16 hx, uint16 hy, hstring pid)
{
    CritterActions::PickItem(player.GetControlledCritter(), hx, hy, pid);
}

void DropInvItem(Player player, ident itemId, uint count)
{
    CritterActions::DropInvItem(player.GetControlledCritter(), itemId, count);
}

void UseSkill(Player player, CritterProperty skill, ident targetCrId, ident targetItemId, hstring sceneryPid, uint16 hx, uint16 hy)
{
    CritterActions::UseSkill(player.GetControlledCritter(), skill, targetCrId, targetItemId, sceneryPid, hx, hy);
}

void MoveInvItem(Player player, ident itemId, CritterItemSlot slot)
{
    CritterActions::MoveInvItem(player.GetControlledCritter(), itemId, slot);
}

void OperateContainer(Player player, bool take, bool all, ident itemId, uint itemCount)
{
    CritterActions::OperateContainer(player.GetControlledCritter(), take, all, itemId, itemCount);
}

void ReloadWeapon(Player player, ident weaponId, ident ammoId)
{
    CritterActions::ReloadWeapon(player.GetControlledCritter(), weaponId, ammoId);
}

void Attack(Player player, ident targetId, uint8 mode)
{
    CritterActions::Attack(player.GetControlledCritter(), targetId, mode);
}

#endif
