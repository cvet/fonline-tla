// FOS Server
// Authors: cvet, Atom

void ModuleInit()
{
    Game.OnNpcPlaneBegin.Subscribe(npc_plane_begin);
    Game.OnNpcPlaneEnd.Subscribe(npc_plane_end);
    Game.OnNpcPlaneRun.Subscribe(npc_plane_run);
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on some plane added.
// Return true to allow plane, false to disallow.
// REASON_GO_HOME
// REASON_FOUND_IN_ENEMY_STACK   someCr as Enemy
// REASON_FROM_DIALOG            someCr as Player
// REASON_FROM_SCRIPT
// REASON_RUN_AWAY
bool npc_plane_begin(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on some plane added.
// Return true to erase plane, false to wait (set this plane to next priority of planes sequence).
// REASON_SUCCESS
// REASON_HEX_TOO_FAR
// REASON_HEX_BUSY
// REASON_HEX_BUSY_RING
// REASON_DEADLOCK
// REASON_TRACE_FAIL
// REASON_POSITION_NOT_FOUND
// REASON_FIND_PATH_ERROR
// REASON_CANT_WALK
// REASON_TARGET_DISAPPEARED     someCr as Enemy
// REASON_USE_ITEM_NOT_FOUND
// REASON_GAG_CRITTER            someCr as Enemy
// REASON_GAG_ITEM               someItem as Item
// REASON_NO_UNARMED
bool npc_plane_end(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    if (reason == REASON_CANT_WALK && NpcPlanes::IsNoPlanes(npc)) {
        CritterState::Wait(npc, Game.Random(1000, 2000));
    }
    else if (reason == REASON_HEX_BUSY || reason == REASON_HEX_BUSY_RING || reason == REASON_POSITION_NOT_FOUND) {
        CritterState::Wait(npc, Game.Random(1000, 2000));
    }
    else if (reason == REASON_FIND_PATH_ERROR || reason == REASON_HEX_TOO_FAR) {
        CritterState::Wait(npc, 20000);
    }
    else if (reason == REASON_GAG_CRITTER) {
        if (valid(someCr) && someCr.IsControlledByPlayer && someCr.Id != npc.MercMasterId) {
            NpcPlanes::NpcPlane child = NpcPlanes::CreatePlane();
            child.Type = AI_PLANE_ATTACK;
            child.Priority = 0;
            child.Attack_TargId = someCr.Id;
            child.Attack_MinHp = Settings.DeadHitPoints;
            child.Attack_IsGag = true;
            child.Attack_GagHexX = someCr.HexX;
            child.Attack_GagHexY = someCr.HexY;
            child.Attack_LastHexX = someCr.HexX;
            child.Attack_LastHexY = someCr.HexY;
            child.Run = plane.Run;
            plane.SetChild(child);
        }
        else {
            CritterState::Wait(npc, Game.Random(1000, 2000)); // Wait 1-2 second
        }
        return false; // Cancel deleting
    }
    else if (reason == REASON_GAG_ITEM) {
        if (valid(someItem)) {
            if (someItem.Type == ItemType::Door && !someItem.Opened && AI_CAN_OPEN_DOORS(npc.AiId) && Lockers::IsKeyAvailable(npc, someItem.LockerId)) {
                NpcPlanes::NpcPlane child = NpcPlanes::CreatePlane();
                child.Type = AI_PLANE_PICK;
                child.Priority = 0;
                child.Pick_HexX = someItem.HexX;
                child.Pick_HexY = someItem.HexY;
                child.Pick_Pid = someItem.ProtoId;
                child.Pick_UseItemId = Lockers::GetKeyId(npc, someItem.LockerId);
                child.Pick_ToOpen = true;
                child.Run = plane.Run;
                plane.SetChild(child);
                return false; // Cancel deleting
            }
            else if (someItem.Type != ItemType::Door) {
                NpcPlanes::NpcPlane child = NpcPlanes::CreatePlane();
                child.Type = AI_PLANE_PICK;
                child.Priority = 0;
                child.Pick_HexX = someItem.HexX;
                child.Pick_HexY = someItem.HexY;
                child.Pick_Pid = someItem.ProtoId;
                child.Run = plane.Run;
                plane.SetChild(child);
                return false; // Cancel deleting
            }
        }
    }
    else if (reason == REASON_RUN_AWAY && !npc.IsNoMove) {
        Map map = npc.GetMap();
        Critter cr = Game.GetCritter(plane.Attack_TargId);
        if (valid(map) && valid(cr)) {
            int awayDir = Game.GetDirection(cr.HexX, cr.HexY, npc.HexX, npc.HexY);
            uint awayDist = Game.Random(30, 50); // Todo: resolve correct distantion
            uint16 baseHx = npc.HexX;
            uint16 baseHy = npc.HexY;
            map.MoveHexByDir(baseHx, baseHy, awayDir, 1);

            float angle = 0.0f;
            uint reverse = Game.Random(0, 1);
            for (uint i = 0; i < 5; i++) {
                uint16 hx = baseHx, hy = baseHy;
                map.GetHexInPath(npc.HexX, npc.HexY, hx, hy, angle, awayDist);
                if (Game.GetDistance(npc.HexX, npc.HexY, hx, hy) > 1) {
                    NpcPlanes::AddWalkPlane(npc, 100, hx, hy, 6, true, 0);
                    break;
                }
                angle += float(i + 1) * 45.0f * ((i % 2) == reverse ? 1.0f : -1.0f);
            }
            AiSettings::AI_TrySayCombatText(npc, CombatText::RunAway);
        }

        uint npcTimeout = BATTLE_TIMEOUT(npc);
        if (npc.TimeoutBattle < npcTimeout) {
            npc.TimeoutBattle = npcTimeout;
        }
    }
    else if (reason == REASON_NO_UNARMED) {
        // Repair first broken weapon
        Item[] items = npc.GetItems(ItemProperty::Type, ItemType::Weapon);
        for (uint i = 0; i < items.length(); i++) {
            Item item = items[i];
            if (item.IsBroken) {
                Repair::SetDeterioration(item, 0);
                break;
            }
        }
        CritterState::Wait(npc, 10000);
    }
    npc.OnNpcPlaneEnd.Fire(planeId, reason, someCr, someItem);
    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on some plane runs, to manuality some steps.
// REASON_ATTACK_WEAPON
//  In: r0 target id, r1 0, r2 0
//  Out: r0 weapon id, r1 use index, r2 proto id of unarmed attack (if r0==0)
// REASON_ATTACK_DISTANTION
//  In: r0 target id, r1 0, r2 0
//  Out: r0 best dist, r1 min dist, r2 max dist (if == 0 than run away)
// REASON_ATTACK_USE_AIM
//  In: r0 target id, r1 0, r2 0
//  Out: r0 use, r1 aim, r2 disable attack and wait this time (in ms)
bool npc_plane_run(Critter npc, int planeId, int reason, any& r0, any& r1, any& r2)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    if (reason == REASON_ATTACK_WEAPON) {
        // Special weapons
        hstring npcPid = npc.ProtoId;
        if (npcPid == Content::Critter::FireGecko || npcPid == Content::Critter::ToughFireGecko) {
            Item weap = npc.GetItem(Content::Item::fire_gecko_flame_weapon);
            if (valid(weap) && weap.AmmoCount > 0) {
                r0 = weap.Id;
                r1 = 0;
                return true;
            }
        }
        else if (npcPid == Content::Critter::SporePlant || npcPid == Content::Critter::SporePlant2) {
            Critter target = Game.GetCritter(r0);
            if (Game.GetDistance(npc, target) > 2) {
                Item weap = npc.GetItem(Content::Item::plant_spike);
                if (valid(weap)) {
                    r0 = weap.Id;
                    r1 = 0;
                    return true;
                }
            }
        }

        // Default weapons
        r0 = 0; // Use unarmed by default
        r1 = 0;
        r2 = (Game.Random(0, 4) == 0 ? Content::Item::default_weapon.hash : Content::Item::unarmed_kick.hash);

        // Damaged two arms
        if (npc.IsDamagedLeftArm && npc.IsDamagedRightArm) {
            return true;
        }

        // No use weapon
        uint aiId = npc.AiId;
        int bestWeapon = AI_BEST_WEAPON(aiId);
        if (bestWeapon == BestWeap::Never) {
            return true;
        }

        // Get last battle weapon
        if (npc.LastWeaponId == ZERO_IDENT && npc.LastWeaponNotFound) // Previous seek not give result
        {
            r0 = 0;
            return true;
        }

        r0 = npc.LastWeaponId;
        r1 = npc.LastWeaponUse;
        Item weapon = null;
        if (r0 != 0) {
            weapon = npc.GetItem(ident(r0));
        }
        if (valid(weapon) && CheckBattleWeapon(npc, weapon)) {
            return true;
        }

        // Find new battle weapon
        npc.LastWeaponId = ZERO_IDENT;
        npc.LastWeaponNotFound = true;
        npc.LastWeaponUse = 0;
        r0 = 0;
        r1 = 0;

        // Sort skills
        CritterProperty[] skills = {CritterProperty::SkillSmallGuns,
                                    CritterProperty::SkillBigGuns,
                                    CritterProperty::SkillEnergyWeapons,
                                    CritterProperty::SkillUnarmed,
                                    CritterProperty::SkillMeleeWeapons,
                                    CritterProperty::SkillThrowing};
        uint skillsCount = skills.length();
        SkillsSort(npc, skills, 0, skillsCount);

        // Advanced sort
        switch (bestWeapon) {
        case BestWeap::NoPref:
            break;
        case BestWeap::Random:
            for (uint i = 0; i < skillsCount; i++) {
                int i0 = Game.Random(0, skillsCount - 1);
                int i1 = Game.Random(0, skillsCount - 1);
                if (i0 != i1) {
                    CritterProperty tmp = skills[i0];
                    skills[i0] = skills[i1];
                    skills[i1] = tmp;
                }
            }
            break;
        case BestWeap::Unarmed:
            SkillToBegin(skills, CritterProperty::SkillUnarmed);
            break;
        case BestWeap::RangedOvMelee:
            SkillToBegin(skills, CritterProperty::SkillUnarmed);       // 5
            SkillToBegin(skills, CritterProperty::SkillMeleeWeapons);  // 4
            SkillToBegin(skills, CritterProperty::SkillThrowing);      // 3
            SkillToBegin(skills, CritterProperty::SkillEnergyWeapons); // 2
            SkillToBegin(skills, CritterProperty::SkillBigGuns);       // 1
            SkillToBegin(skills, CritterProperty::SkillSmallGuns);     // 0
            SkillsSort(npc, skills, 0, 4);                             // Sort 0, 1, 2, 3
            SkillsSort(npc, skills, 4, 2);                             // Sort 4, 5
            break;
        case BestWeap::MeleeOvRanged:
            SkillToBegin(skills, CritterProperty::SkillThrowing);      // 5
            SkillToBegin(skills, CritterProperty::SkillEnergyWeapons); // 4
            SkillToBegin(skills, CritterProperty::SkillBigGuns);       // 3
            SkillToBegin(skills, CritterProperty::SkillSmallGuns);     // 2
            SkillToBegin(skills, CritterProperty::SkillUnarmed);       // 1
            SkillToBegin(skills, CritterProperty::SkillMeleeWeapons);  // 0
            SkillsSort(npc, skills, 0, 2);                             // Sort 0, 1
            SkillsSort(npc, skills, 2, 4);                             // Sort 2, 3, 4, 5
            break;
        case BestWeap::UnarmOvThrown:
            SkillToBegin(skills, CritterProperty::SkillThrowing); // 1
            SkillToBegin(skills, CritterProperty::SkillUnarmed);  // 0
            break;
        default:
            break;
        }

        // Get all weapons and check it
        Item[] allWeapons = npc.GetItems(ItemProperty::Type, ItemType::Weapon);
        for (uint i = 0; i < allWeapons.length(); i++) {
            if (not CheckBattleWeapon(npc, allWeapons[i])) {
                allWeapons[i] = null;
            }
        }

        // Choose one weapon
        for (uint i = 0; i < skillsCount; i++) {
            CritterProperty skill = skills[i];

            for (uint k = 0; k < allWeapons.length(); k++) {
                weapon = allWeapons[k];
                if (not valid(weapon)) {
                    continue;
                }

                for (int u = 0; u < 3; u++) {
                    if ((u == 0 && not _WeaponIsPrimaryAvailable(weapon)) || (u == 1 && not _WeaponIsSecondaryAvailable(weapon)) ||
                        (u == 2 && not _WeaponIsThirdAvailable(weapon))) {
                        continue;
                    }

                    if (_WeaponSkill(weapon, u) == skill) {
                        npc.LastWeaponId = weapon.Id;
                        npc.LastWeaponUse = u;
                        r0 = weapon.Id;
                        r1 = u;
                        return true; // Done, weapon founded
                    }
                }
            }
        }

        // Not found, hands used
        return true;
    }
    else if (reason == REASON_ATTACK_DISTANTION) {
        Critter target = Game.GetCritter(r0);
        AbstractItem weapon = CritterItem::GetActive(npc);
        int use = _WeaponModeUse(weapon.Mode);
        ProtoItem ammo = (weapon.Weapon_MaxAmmoCount > 0 && weapon.Weapon_Caliber != 0 ? Game.GetProtoItem(_CritGetItemHand(npc).AmmoPid) : null);
        int wpnDist = _WeaponMaxDist(weapon, use);
        int multihex = npc.Multihex + target.Multihex;

        if (npc.IsNoMove) {
            int dist = Game.GetDistance(npc.HexX, npc.HexY, target.HexX, target.HexY);
            if (wpnDist < dist) {
                dist = wpnDist;
            }
            dist += multihex;
            r0 = r1 = r2 = dist;
            return true;
        }

        // non-ranged weapons:
        CritterProperty skill = _WeaponSkill(weapon, use);
        if (skill == CritterProperty::SkillUnarmed || skill == CritterProperty::SkillMeleeWeapons) {
            int base = npc.GetAsInt(skill) - MAX(0, target.ArmorClass + (valid(ammo) ? ammo.Ammo_AcMod : 0)) + (target.IsKnockout() ? 40 : 0) -
                       (npc.IsDamagedEye ? 25 : 0);

            if (!weapon.Weapon_IsUnarmed) {
                base += (weapon.Weapon_Perk == ItemPerks::Accurate ? 20 : 0);
                int strength = npc.Strength + (npc.PerkWeaponHandling != 0 ? 3 : 0);
                if (strength < weapon.Weapon_MinStrength) {
                    base -= 20 * (weapon.Weapon_MinStrength - strength);
                }
                if (npc.IsTraitOneHander) {
                    base += (weapon.Weapon_IsTwoHanded ? -40 : 20);
                }
            }
            int ai_min = AI_MIN_TO_HIT(npc.AiId);
            if (base < ai_min) {
                r0 = 0;
                r1 = 0;
                r2 = 0;
            }
            else {
                r0 = 1 + multihex;
                r1 = 1 + multihex;
                r2 = wpnDist + multihex;
            }
            return true;
        }
        else
        // ranged weapons:
        {
            if (skill == CritterProperty::SkillThrowing) {
                if (npc.Strength * 3 < wpnDist) {
                    wpnDist = npc.Strength * 3;
                }
            }
            // set the minimum safe distance, 3 for grenades, 4 for rockets:
            r1 = 0;
            if (skill == CritterProperty::SkillThrowing) {
                DamageTypes dmgType = _WeaponDmgType(weapon, use);
                if (dmgType == DamageTypes::Plasma || dmgType == DamageTypes::Emp || dmgType == DamageTypes::Explode) {
                    r0 = 3;
                }
            }
            else if (valid(ammo)) {
                if (ammo.ProtoId == Content::Item::explosive_rocket || ammo.ProtoId == Content::Item::robo_rocket_ammo) {
                    r1 = 4;
                }
            }

            if ((weapon.Weapon_Perk == ItemPerks::ScopeRange) && (r1 < 8)) {
                r1 = 8;
            }

            if (int(r1) > wpnDist) {
                r1 = 0;
                r0 = 0;
                r2 = 0;
                return true;
            }

            int base = npc.GetAsInt(skill) - MAX(0, target.ArmorClass + (valid(ammo) ? ammo.Ammo_AcMod : 0)) + (target.IsKnockout() ? 40 : 0) -
                       (npc.IsDamagedEye ? 25 : 0) + (weapon.Weapon_Perk == ItemPerks::Accurate ? 20 : 0);

            int strength = npc.Strength + (npc.PerkWeaponHandling != 0 ? 3 : 0);
            if (strength < weapon.Weapon_MinStrength) {
                base -= 20 * (weapon.Weapon_MinStrength - strength);
            }
            if (npc.IsTraitOneHander) {
                base += (weapon.Weapon_IsTwoHanded ? -40 : 20);
            }

            int ai_min = AI_MIN_TO_HIT(npc.AiId);
            int perception = npc.Perception;
            int sharpshooter = 8 * npc.PerkSharpshooter;

            int mod = (weapon.Weapon_Perk == ItemPerks::ScopeRange ? 5 : (weapon.Weapon_Perk == ItemPerks::LongRange ? 4 : 2));

            if (base + 8 * perception + sharpshooter < 95) {
                if (base + 8 * perception + sharpshooter < ai_min) {
                    r1 = 0;
                    r0 = 0;
                    r2 = 0;
                    return true;
                }
                else {
                    r0 = (mod - 2) * perception;
                }
            }
            else {
                if (base < 95) {
                    r0 = (base + sharpshooter + 4 * mod * perception - 95) / 4;
                }
                else {
                    if (npc.IsDamagedEye) {
                        r0 = (base + 3 * sharpshooter + 12 * mod * perception - 95) / 12;
                    }
                    else {
                        r0 = (base + sharpshooter + 4 * mod * perception - 95) / 4;
                    }
                }
            }

            if (base < ai_min) {
                r2 = (base + sharpshooter + 4 * mod * perception - ai_min) / 4;
            }
            else {
                if (npc.IsDamagedEye) {
                    r2 = (base + 3 * sharpshooter + 12 * mod * perception - ai_min) / 12;
                }
                else {
                    r2 = (base + sharpshooter + 4 * mod * perception - ai_min) / 4;
                }
            }

            if (!npc.IsNoAim) {
                if (weapon.Weapon_Aim_0) {
                    uint reduction = (int(r0) * 3 * npc.Intellect) / 100;
                    reduction = MIN(15, reduction);
                    r0 = int(r0) - reduction;
                }
            }

            // left clamp:
            if (int(r0) < int(r1)) {
                r0 = r1;
            }
            if (int(r2) < int(r0)) {
                r2 = r0; // this can be deleted under assumption that ai_min is always <= 95, which should be true
            }

            // right clamp
            if (wpnDist < int(r2)) {
                r2 = _WeaponMaxDist(weapon, use);
                if (int(r0) > int(r2)) {
                    r0 = r2;
                }
            }

            // Multihex
            r0 = int(r0) + multihex;
            r1 = int(r1) + multihex;
            r2 = int(r2) + multihex;
            return true;
        }
    }
    else if (reason == REASON_ATTACK_USE_AIM) {
        uint mode = 0;
        uint aim = 0;
        if (CogitateFiring(npc, ident(r0), mode, aim)) {
            r0 = mode;
            r1 = aim;
        }
        else {
            r0 = 0; // Primary attack
            r1 = (!npc.IsNoAim && Game.Random(0, 5) == 0 ? Game.Random(HitLocations::LocationHead, HitLocations::LocationGroin) : 0);
        }

        AbstractItem weapon = CritterItem::GetActive(npc);
        int ap = valid(weapon) ? _WeaponApCost(weapon, r0) : 3;
        switch (HitLocations(int(r1))) {
        case HitLocations::LocationEyes:
            ap += Settings.ApCostAimEyes;
            break;
        case HitLocations::LocationGroin:
            ap += Settings.ApCostAimGroin;
            break;
        case HitLocations::LocationHead:
            ap += Settings.ApCostAimHead;
            break;
        case HitLocations::LocationLeftArm:
        case HitLocations::LocationRightArm:
            ap += Settings.ApCostAimArms;
            break;
        case HitLocations::LocationLeftLeg:
        case HitLocations::LocationRightLeg:
            ap += Settings.ApCostAimLegs;
            break;
        default:
            break;
        }

        if (ap > npc.ActionPoints) {
            r1 = 0;
        }
        else {
            ap -= npc.CurrentAp / AP_DIVIDER;
            if (ap > 0) {
                r2 = (ap * Settings.ApRegeneration) / npc.ActionPoints + 50;
            }
        }
        return true;
    }

    return false;
}

bool CogitateFiring(Critter cr, ident targetId, uint& mode, uint& aim) // in: targetId, 0; out: mode, aim
{
    if (Game.Random(1, 10) > cr.Intellect) {
        return false; // too stupid to think about this
    }

    Critter target = Game.GetCritter(targetId);
    if (!valid(target)) {
        return false;
    }

    Item weapon = cr.GetItem(ItemProperty::CritterSlot, CritterItemSlot::Main);

    if (!valid(weapon)) // true unarmed
    {
        mode = 0;
        if (!cr.IsNoAim) {
            aim = ChooseAim(cr, target, null, 0, null);
        }
        else {
            aim = 0;
        }

        return true;
    }

    if (weapon.Type != ItemType::Weapon) {
        return false;
    }

    ProtoItem protoAmmo = null;
    if (weapon.AmmoPid != EMPTY_HSTRING) {
        protoAmmo = Game.GetProtoItem(weapon.AmmoPid);
    }

    if (weapon.Weapon_Skill_0 == CritterProperty::SkillUnarmed || weapon.Weapon_Skill_0 == CritterProperty::SkillMeleeWeapons) // assuming all modes melee
    {
        mode = 0;
        if (!cr.IsNoAim) {
            aim = ChooseAim(cr, target, weapon, mode, protoAmmo);
        }
        else {
            aim = 0;
        }

        return true;
    }
    else // assuming all modes ranged
    {
        bool forceBurst = false;
        if (weapon.Weapon_Round_0 > 1) {
            // cr.Say(SAY_NORM, "Burst is the only mode");
            forceBurst = true;
            mode = 0;
        }
        else {
            if (weapon.Weapon_DmgType_1 == -1) {
                // cr.Say(SAY_NORM, "Single shot is the only mode");
                mode = 0;
            }
            else {
                // cr.Say(SAY_NORM, "Second mode available");
                if (ValidateBurst(cr, target, weapon, mode)) {
                    // cr.Say(SAY_NORM, "Burst forced by check");
                    forceBurst = true;
                    mode = 1;
                }
                else {
                    // cr.Say(SAY_NORM, "Single shot forced by check");
                    mode = 0;
                }
            }
        }

        if (forceBurst) {
            aim = 0;
            return true;
        }

        if (cr.IsNoAim || !_WeaponAim(weapon, mode)) {
            aim = 0;
            return true;
        }

        aim = ChooseAim(cr, target, weapon, mode, protoAmmo);
        return true;
    }
}

int ChooseAim(Critter cr, Critter target, Item weapon, uint8 mode, ProtoItem ammo)
{
    int tohit = Combat::RawToHit(cr, target, weapon, mode, ammo);
    if (tohit < 26) {
        return 0;
    }

    int ap = valid(weapon) ? _WeaponApCost(weapon, mode) : 3;
    CritterProperty skill = valid(weapon) ? _WeaponSkill(weapon, mode) : CritterProperty::Invalid;
    int pendiv = valid(weapon) ? (skill == CritterProperty::SkillMeleeWeapons || skill == CritterProperty::SkillUnarmed ? 2 : 1) : 2;
    int maxap = cr.ActionPoints;

    int[] val = array<int>(6); // none, eyes, groin, head, arms, legs

    int th = tohit;
    int aps = ap;
    val[0] = 1000 * CLAMP(th, 5, 95);
    val[0] /= aps;

    aps = ap + Settings.ApCostAimEyes;
    th = tohit - Settings.HitAimEyes / pendiv;
    val[1] = aps <= maxap && ((cr.Dir + 3) % 6 == target.Dir) ? 2500 * CLAMP(th, 5, 95) : 0;
    val[1] /= aps;

    th = tohit - Settings.HitAimGroin / pendiv;
    aps = ap + Settings.ApCostAimGroin;
    val[2] = aps <= maxap ? 2000 * CLAMP(th, 5, 95) : 0;
    val[2] /= aps;

    th = tohit - Settings.HitAimHead / pendiv;
    aps = ap + Settings.ApCostAimHead;
    val[3] = aps <= maxap ? 2000 * CLAMP(th, 5, 95) : 0;
    val[3] /= aps;

    th = tohit - Settings.HitAimArms / pendiv;
    aps = ap + Settings.ApCostAimArms;
    val[4] = aps <= maxap ? 1600 * CLAMP(th, 5, 95) : 0;
    val[4] /= aps;

    th = tohit - Settings.HitAimLegs / pendiv;
    aps = ap + Settings.ApCostAimLegs;
    val[5] = aps <= maxap ? 1300 * CLAMP(th, 5, 95) : 0;
    val[5] /= aps;

    // find best shot, with 1/3 chance for taking second-best shot
    int max = 0, next = 0;
    for (int i = 1; i < 6; i++) {
        if (val[i] >= val[max]) {
            max = i;
        }
    }
    for (int i = 1; i < 6; i++) {
        if (val[i] >= val[next] && val[next] < val[max]) {
            next = i;
        }
    }
    if (Game.Random(0, 2) == 2) {
        max = next;
    }

    // cr.Say(SAY_NORM, "Aimed shot: "+max);

    switch (max) {
    case 1:
        return HitLocations::LocationEyes;
    case 2:
        return HitLocations::LocationGroin;
    case 3:
        return HitLocations::LocationHead;
    case 4:
        if (Game.Random(0, 1) == 1) {
            return HitLocations::LocationLeftArm;
        }
        else {
            return HitLocations::LocationRightArm;
        }
    case 5:
        if (Game.Random(0, 1) == 1) {
            return HitLocations::LocationLeftLeg;
        }
        else {
            return HitLocations::LocationRightLeg;
        }
    case 0:
    default:
    };
    return HitLocations::LocationUncalled;
}

class CTraceFirstCritter : LineTracer::ITraceContext
{
    Critter Cr;
    uint MinDist;
    uint16 Gx;
    uint16 Gy;

    CTraceFirstCritter(uint16 gx, uint16 gy, uint16 minDist)
    {
        Gx = gx;
        Gy = gy;
        Cr = null;
        MinDist = minDist;
    }

    bool Exec(Map map, uint16 hx, uint16 hy) override
    {
        if (!map.IsHexShootable(hx, hy)) {
            return true;
        }

        Critter cr = map.GetCritter(hx, hy);
        if (valid(cr)) {
            Cr = Game.GetCritter(cr.Id);
        }

        return valid(Cr) && Cr.Condition == CritterCondition::Alive && Game.GetDistance(Gx, Gy, Cr.HexX, Cr.HexY) >= MinDist;
    }

    void StartExec(Map map, uint16 hx, uint16 hy, uint16 tx, uint16 ty, uint maxDist) override
    {
        // Nothing
    }

    void FinishExec(Map map, uint resultDist) override
    {
        // Nothing
    }
};

Critter TraceFirstCritter(uint16 hx, uint16 hy, uint16 tx, uint16 ty, Map map, int dist, uint16 gx, uint16 gy, uint mindist)
{
    CTraceFirstCritter Tracer = CTraceFirstCritter(gx, gy, mindist);
    LineTracer::LineTracerHex(hx, hy, tx, ty, map, dist, Tracer);
    return Tracer.Cr;
}

bool IsCurrentEnemy(Critter crit, ident targetId)
{
    Critter cr = Game.GetCritter(crit.Id);
    if (EnemyStack::CheckEnemyInStack(cr, targetId)) {
        return true;
    }
    array<NpcPlanes::NpcPlane> plans = {};
    NpcPlanes::GetPlanes(cr, plans); // cr.GetPlanesByType(AI_PLANE_ATTACK, plans);
    for (uint i = 0, j = plans.length(); i < j; i++) {
        if (plans[i].Type == AI_PLANE_ATTACK && plans[i].Attack_TargId == targetId) {
            return true;
        }
    }
    return false;
}

bool ValidateBurst(Critter cr, Critter target, AbstractItem weapon, uint mode)
{
    if (Game.Random(0, 2) == 0) {
        return false; // force normal shot, for a little diversity
    }

    Map map = cr.GetMap();
    if (cr.ActionPoints < int(_WeaponApCost(weapon, mode))) {
        return false;
    }

    uint maxDist = _WeaponMaxDist(weapon, mode);

    uint16 hx = cr.HexX;
    uint16 hy = cr.HexY;
    uint16 tx = target.HexX;
    uint16 ty = target.HexY;
    Critter blocker = TraceFirstCritter(hx, hy, tx, ty, Game.GetMap(map.Id), maxDist, hx, hy, 0);
    if (valid(blocker) && !IsCurrentEnemy(cr, blocker.Id)) {
        /*blocker.Say(SAY_NORM, "I blocked the burst check");*/
        return false;
    }

    uint16 sx = hx;
    uint16 sy = hy;
    uint16 ex = tx;
    uint16 ey = hy;
    uint8 dir = Game.GetDirection(hx, hy, tx, ty, 89.0f);
    map.MoveHexByDir(sx, sy, dir, 1);
    map.MoveHexByDir(ex, ey, dir, 1);
    blocker = TraceFirstCritter(sx, sy, ex, ey, Game.GetMap(map.Id), maxDist, hx, hy, 3);
    if (valid(blocker) && !IsCurrentEnemy(cr, blocker.Id)) {
        /*blocker.Say(SAY_NORM, "I blocked the burst check");*/
        return false;
    }

    sx = hx;
    sy = hy;
    ex = tx;
    ey = hy;
    dir = Game.GetDirection(hx, hy, tx, ty, -89.0f);
    map.MoveHexByDir(sx, sy, dir, 1);
    map.MoveHexByDir(ex, ey, dir, 1);
    blocker = TraceFirstCritter(sx, sy, ex, ey, Game.GetMap(map.Id), maxDist, hx, hy, 3);
    if (valid(blocker) && !IsCurrentEnemy(cr, blocker.Id)) {
        /*blocker.Say(SAY_NORM, "I blocked the burst check");*/
        return false;
    }

    return true;
}

void SkillsSort(Critter npc, CritterProperty[] skills, uint first, uint count)
{
    for (uint i = first, j = first + count; i < j; i++) {
        uint max = i;
        for (int k = i + 1, l = first + count; k < l; k++) {
            if (npc.GetAsInt(skills[k]) > npc.GetAsInt(skills[max])) {
                max = k;
            }
        }
        if (max != i) {
            CritterProperty tmp = skills[max];
            skills[max] = skills[i];
            skills[i] = tmp;
        }
    }
}

void SkillToBegin(CritterProperty[] skills, CritterProperty skill)
{
    for (uint i = 1, j = skills.length(); i < j; i++) {
        if (skills[i] == skill) {
            for (uint k = i; k > 0; k--) {
                skills[k] = skills[k - 1];
            }
            skills[0] = skill;
            break;
        }
    }
}

bool CheckBattleWeapon(Critter npc, Item weapon)
{
    if (weapon.Type != ItemType::Weapon) {
        return false;
    }
    if (not CritterAnims::IsCritterStateAnim(npc, weapon.Weapon_StateAnim)) {
        return false;
    }
    if (weapon.IsBroken) {
        return false;
    }
    if (weapon.Weapon_IsTwoHanded && (npc.IsDamagedLeftArm || npc.IsDamagedRightArm)) {
        return false;
    }
    if (!npc.IsUnlimitedAmmo && weapon.Weapon_MaxAmmoCount > 0 && weapon.AmmoCount == 0 && !IsAmmoForWeapon(npc, weapon)) {
        return false;
    }
    return true;
}

bool IsAmmoForWeapon(Critter npc, Item weapon)
{
    if (npc.CountItem(weapon.AmmoPid) > 0) {
        return true;
    }
    if (npc.CountItem(weapon.Weapon_DefaultAmmoPid) > 0) {
        return true;
    }

    Item[] ammo = npc.GetItems(ItemProperty::Type, ItemType::Ammo);
    for (uint i = 0; i < ammo.length(); i++) {
        if (ammo[i].Ammo_Caliber == weapon.Weapon_Caliber) {
            return true;
        }
    }
    return false;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
