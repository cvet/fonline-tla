// FOS Server

// Author rifleman17
// Специальный класс для реализации квестов на рукопашный или другой бой с НПЦ
// только с одним игроком. Cмерть нпц засчитывается победой игрока

///@ Property Critter PrivateServer int   FighterQuestMinHp
///@ Property Critter PrivateServer uint8 FighterQuestOnlyHandCombat
///@ Property Critter PrivateServer uint  FighterQuestTeamIdOld
///@ Property Critter PrivateServer uint  FighterQuestTeamIdFight
///@ Property Critter PrivateServer ident FighterQuestPlayerId
///@ Property Critter PrivateServer uint  FighterQuestFightPriority
///@ Property Critter PrivateServer uint  FighterQuestVarNum

#define STR_FIGHT_BEGIN (5910) // Начат поединок c @lex npcname@. Удачи!
#define STR_FIGHT_WIN   (5911) // Вы победили в поединке с @lex npcname@. Поздравляем. Прекратите атаку, иначе вас не поймут окружающие.
#define STR_FIGHT_LOOSE (5912) // Удача была не на вашей стороне. Вы проиграли поединок с @lex npcname@.
#define STR_FIGHT_DEAD  (5913) // В результате поединка ваш противник был убит.
#define STR_USE_WEAPON  (5914) // Жулик! Договаривались без оружия!
#define STATUS_LOOSE    (1)    // Статус исхода поединка. Игрок проиграл
#define STATUS_WIN      (2)    // Статус исхода поединка. Игрок победил, нпц жив
#define STATUS_DEAD     (3)    // Статус исхода поединка. Игрок победил, нпц мертв

// #define DL#(s) (Game.Log(""+s))
#define DL #(s)

class FighterQuest
{
    FighterQuest()
    {
    }

    FighterQuest(Critter npc, int newTeam, int minHp, bool handCombat, ident playerId, int priority, int varNum)
    {
        DL("fq constructor called");
        MinHp = minHp;
        OnlyHandCombat = (handCombat ? 1 : 0);
        TeamIdOld = npc.TeamId;
        TeamIdFight = (newTeam == 0 ? Teams::Mob9 : newTeam);
        NpcId = npc.Id;
        PlayerId = playerId;
        FightPriority = priority;
        VarNum = CritterProperty(varNum);

        ToCritter();
    }

    int MinHp;              // Минимальное число хп, при котором бой останавливается
    uint8 OnlyHandCombat;   // Признак - только рукопашный бой
    int TeamIdOld;          // Номер команды НПЦ до боя
    int TeamIdFight;        // Номер команды НПЦ во время боя
    ident NpcId;            // Id нпц
    ident PlayerId;         // Id игрока
    int FightPriority;      // Приоритет плана атаки
    CritterProperty VarNum; // Переменная, которая отвечает за завершение боя. Шаблон: локальная, максимум 3, стартовое значение 0. 1 - игрок проиграл. 2 -
                            // игрок победил. 3 - игрок победил, нпц мертв

    void ToCritter()
    {
        DL("fq to critter called");
        Critter cr = Game.GetCritter(NpcId);
        if (!valid(cr)) {
            return;
        }
        // Параметры боя сохраняем в статы нпц
        cr.FighterQuestMinHp = MinHp;
        cr.FighterQuestOnlyHandCombat = OnlyHandCombat;
        cr.FighterQuestTeamIdOld = TeamIdOld;
        cr.FighterQuestTeamIdFight = TeamIdFight;
        cr.FighterQuestPlayerId = PlayerId;
        cr.FighterQuestFightPriority = FightPriority;
        cr.FighterQuestVarNum = uint(VarNum);
        cr.OnAttacked.Subscribe(_FighterAttacked);
        cr.OnAttack.Subscribe(_FighterAttack);
        cr.OnDead.Subscribe(_FighterDead);
        DL("fq to critter success");
    }

    FighterQuest FromCritter(Critter cr)
    {
        MinHp = cr.FighterQuestMinHp;
        OnlyHandCombat = cr.FighterQuestOnlyHandCombat;
        TeamIdOld = cr.FighterQuestTeamIdOld;
        TeamIdFight = cr.FighterQuestTeamIdFight;
        NpcId = cr.Id;
        PlayerId = cr.FighterQuestPlayerId;
        FightPriority = cr.FighterQuestFightPriority;
        VarNum = CritterProperty(cr.FighterQuestVarNum);
        return this;
    }

    void CancelFigther()
    {
        DL("fq cancel called");
        Critter cr = Game.GetCritter(NpcId);
        if (!valid(cr)) {
            return;
        }

        cr.TeamId = TeamIdOld;
        cr.FighterQuestMinHp = 0;
        cr.FighterQuestOnlyHandCombat = 0;
        cr.FighterQuestTeamIdOld = 0;
        cr.FighterQuestTeamIdFight = 0;
        cr.FighterQuestPlayerId = ZERO_IDENT;
        cr.FighterQuestFightPriority = 0;
        cr.FighterQuestVarNum = 0;

        NpcPlanes::EraseAttackPlane(cr, PlayerId);

        cr.OnAttacked.Unsubscribe(_FighterAttacked);
        cr.OnAttack.Unsubscribe(_FighterAttack);
        cr.OnDead.Unsubscribe(_FighterDead);

        cr.IsDamagedEye = false;
        cr.IsDamagedRightArm = false;
        cr.IsDamagedLeftArm = false;
        cr.IsDamagedRightLeg = false;
        cr.IsDamagedLeftLeg = false;
        cr.CurrentHp = cr.MaxLife;
        cr.CurrentAp = cr.ActionPoints * AP_DIVIDER;
    }

    void StartFight()
    {
        Critter npc = Game.GetCritter(NpcId);
        Critter player = Game.GetCritter(PlayerId);
        if (!valid(npc) || !valid(player)) {
            return;
        }

        npc.TeamId = TeamIdFight;
        NpcPlanes::AddAttackPlane(npc, FightPriority, player, MinHp);
        string lex = "$npcname@msg DLG " + STR_NPC_NAME(npc.DialogId, npc.ProtoId) + "@";
        player.SayMsg(SAY_NETMSG, TextPackName::Text, STR_FIGHT_BEGIN, lex);
    }

    void SetFighterDead()
    {
        if (PlayerId != ZERO_IDENT) {
            Critter cr = Game.GetCritter(PlayerId);
            if (valid(cr)) {
                cr.SetAsInt(VarNum, STATUS_DEAD);
                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_FIGHT_DEAD);
            }
        }
        CancelFigther();
    }

    void SetPlayerWin()
    {
        if (PlayerId != ZERO_IDENT) {
            string lex = "$npcname ";
            Critter npc = Game.GetCritter(NpcId);
            if (valid(npc) && npc.DialogId != EMPTY_HSTRING) {
                lex = "$npcname@msg DLG " + STR_NPC_NAME(npc.DialogId, npc.ProtoId) + "@";
            }
            Critter cr = Game.GetCritter(PlayerId);
            if (valid(cr)) {
                cr.SetAsInt(VarNum, STATUS_WIN);
                cr.Wait(0);

                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_FIGHT_WIN, lex);
                /*
                   //cr.ShowScreen( CLIENT_SCREEN_DIALOGBOX, 0, "answer_None" );
                   cr.SayMsg( Tla::SayDialogboxText, TextPackName::Text, STR_FIGHT_WIN, lex );
                 */
            }
        }

        CancelFigther();
    }

    void SetPlayerLoose()
    {
        DL("player loose called");
        if (PlayerId != ZERO_IDENT) {
            DL("var passed");
            string lex = "$npcname a";
            Critter npc = Game.GetCritter(NpcId);
            if (valid(npc) && npc.DialogId != EMPTY_HSTRING) {
                lex = "$npcname@msg DLG " + STR_NPC_NAME(npc.DialogId, npc.ProtoId) + "@";
            }
            DL(lex);
            Critter cr = Game.GetCritter(PlayerId);
            if (valid(cr)) {
                cr.SetAsInt(VarNum, STATUS_LOOSE);
                cr.SayMsg(SAY_NETMSG, TextPackName::Text, STR_FIGHT_LOOSE, lex);
            }
        }
        CancelFigther();
    }

    bool IsFairAttacker() // Проверяет, что игрок безоружен, если требуется такая проверка
    {
        if (OnlyHandCombat != 0) {
            Critter player = Game.GetCritter(PlayerId);
            if (valid(player)) {
                Item weapon = _CritGetItemHand(player);
                if (valid(weapon) && !weapon.Weapon_IsUnarmed) {
                    return false;
                }
            }
        }
        return true;
    }
};

bool _FighterAttack(Critter cr, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    Game.DeferredCall(0, CheckHealth, cr.Id);
    return false;
}

bool _FighterAttacked(Critter cr, Critter attacker)
{
    FighterQuest fq = FighterQuest();
    fq.FromCritter(cr);
    if (valid(fq)) {
        if (!fq.IsFairAttacker()) {
            cr.SayMsg(SAY_SHOUT, TextPackName::Text, STR_USE_WEAPON);
            fq.SetPlayerLoose();
            NpcPlanes::AddAttackPlane(cr, 0, attacker);
            return true;
        }
    }
    Game.DeferredCall(0, CheckHealth, cr.Id);
    return false;
}

void CheckHealth(any value)
{
    DL("check health");
    Critter cr = Game.GetCritter(value);
    if (!valid(cr)) {
        return;
    }

    FighterQuest fq = FighterQuest();
    fq.FromCritter(cr);
    if (valid(fq)) {
        DL("min hp" + fq.MinHp);
        Critter player = Game.GetCritter(fq.PlayerId);
        if (valid(player) && player.CurrentHp < fq.MinHp) {
            fq.SetPlayerLoose();
        }
        else {
            if (cr.CurrentHp < fq.MinHp) {
                player.Wait(0);
                fq.SetPlayerWin();
            }
        }
    }
}

void _FighterDead(Critter cr, Critter killer)
{
    FighterQuest fq = FighterQuest();
    fq.FromCritter(cr);
    if (valid(killer) && killer.Id == fq.PlayerId) {
        if (EnemyStack::CheckEnemyInStack(cr, killer.Id)) {
            EnemyStack::ClearEnemyStack(cr);
        }
        fq.SetFighterDead();
    }
    else {
        fq.SetPlayerLoose();
    }
}

void r_BeginFight(Critter player, Critter npc, int newTeam, int hpPercent, int handCombat, int priority, int varNum)
{
    if (!valid(npc)) {
        return;
    }
    int hp = player.CurrentHp * (CLAMP(hpPercent, -100, 100) / 100);
    hp = CLAMP((hp < -20 ? -20 : hp), -50, 30);
    bool handCmbt = (handCombat > 0 ? true : false);
    FighterQuest fq = FighterQuest(npc, newTeam, hp, handCmbt, player.Id, priority, varNum);
    fq.StartFight();
}

void answer_None(Critter player, uint answerI, string answerS)
{
    // заглушка для диалогового окна
}
