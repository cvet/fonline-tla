// FOS Common

///@ Property Game Public string[] BestScores

#ifdef __SERVER
///@ Property Game PrivateServer uint[] BestScoreCritterIds
///@ Property Game PrivateServer int[] BestScoreValues
///@ Property Critter PrivateServer uint=>int Scores

void SetBestScore(uint score, string name)
{
    SetBestSocresValue(score, 0, 0, name);
}

void AddScore(Critter cr, uint score, int value)
{
    auto scores = dict<uint, int>(cr.Scores);
    int resultValue = scores.get(score, 0) + value;
    scores[score] = resultValue;
    cr.Scores = scores;

    ControlGlobalBufferSize(score + 1);
    if (Game.BestScoreCritterIds[score] == cr.Id) {
        return;
    }
    if (Game.BestScoreValues[score] >= resultValue) {
        return;
    }

    SetBestSocresValue(score, cr.Id, resultValue, cr.Name);
}

int GetScore(Critter cr, uint score)
{
    return cr.Scores.get(score, 0);
}

void SetBestSocresValue(uint score, uint crId, int value, string name)
{
    ControlGlobalBufferSize(score + 1);
    auto bestScoreCritterIds = array<uint>(Game.BestScoreCritterIds);
    bestScoreCritterIds[score] = crId;
    Game.BestScoreCritterIds = bestScoreCritterIds;
    auto bestScoreValues = array<int>(Game.BestScoreValues);
    bestScoreValues[score] = value;
    Game.BestScoreValues = bestScoreValues;
    auto bestScores = array<string>(Game.BestScores);
    bestScores[score] = name;
    Game.BestScores = bestScores;
}

void ControlGlobalBufferSize(uint size)
{
    auto bestScores = array<string>(Game.BestScores);
    if (bestScores.length() < size) {
        auto bestScoreCritterIds = array<uint>(Game.BestScoreCritterIds);
        bestScoreCritterIds.resize(size);
        Game.BestScoreCritterIds = bestScoreCritterIds;
        auto bestScoreValues = array<int>(Game.BestScoreValues);
        bestScoreValues.resize(size);
        Game.BestScoreValues = bestScoreValues;
        bestScores.resize(size);
        Game.BestScores = bestScores;
    }
}
#endif
