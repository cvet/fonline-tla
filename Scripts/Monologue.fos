// FOS Server
// Author rifleman17
// Монологи для НПЦ: несколько фраз. повторяемых через определенные промежутки времени.
// Указывается первая и последняя строка монолога, время, через которое повторится монолог и т.д.
// Строки должны быть записаны в FOTEXT.MSG
// Строки монолога должны нумероваться подряд.
// Если время следующего диалога равно нулю, все записи будут удалены после первого использования

///@ Property Critter PrivateServer uint8[] MonologueData

const uint CteRunMonolog = 60;
const uint CteNextMessage = 61;

#define CTE_RUN_MONOLOG  (60)
#define CTE_NEXT_MESSAGE (61)

bool MonologueRunning(Critter cr)
{
    return valid(GetMonologue(cr));
}

void SetMonologue(Critter cr, uint firstStr, uint lastStr, uint nextMsg, uint nextDialog, uint8 sayType)
{
    Monologue m = Monologue(firstStr, lastStr, nextMsg, nextDialog, sayType, cr.Id);
    if (valid(m)) {
        m.ScheduleMonologue();
    }
}

Monologue GetMonologue(Critter cr)
{
    if (!valid(cr)) {
        return null;
    }
    Monologue m = Monologue(cr.Id);
    if (!valid(m) || !m.Exist()) {
        return null;
    }
    m.Load();
    return m;
}

class Monologue
{
    Monologue(uint critterId)
    {
        CritterId = critterId;
    }
    Monologue(uint firstStr, uint lastStr, uint nextMsg, uint nextDialog, uint8 sayType, uint critterId)
    {
        FirstString = firstStr;
        LastString = lastStr;
        CurrentString = 0;
        NextMessage = nextMsg;
        NextDialogue = nextDialog;
        SayType = sayType;
        CritterId = critterId;
        Save();
    }

    uint FirstString;   // Номер первой строки в монологе
    uint LastString;    // Номер последней строки
    uint CurrentString; // Текущая строка
    uint NextMessage;   // Время следующей фразы в монологе в секундах
    uint NextDialogue;  // Время следующего монолога
    uint8 SayType;      // Тип разговора (шепот, эмоции итд)
    uint CritterId;     // Код криттера, читающего монолог

    bool Exist()
    {
        return Game.GetCritter(CritterId).MonologueData.length() > 0;
    }

    // Сериализация
    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set(FirstString);
        save.Set(LastString);
        save.Set(CurrentString);
        save.Set(NextMessage);
        save.Set(NextDialogue);
        save.Set(SayType);
        save.Set(CritterId);
        Game.GetCritter(CritterId).MonologueData = save.GetData();
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        if (load.SetData(Game.GetCritter(CritterId).MonologueData) == 0) {
            return;
        }
        load.Get(FirstString);
        load.Get(LastString);
        load.Get(CurrentString);
        load.Get(NextMessage);
        load.Get(NextDialogue);
        load.Get(SayType);
        load.Get(CritterId);
    }

    void Erase()
    {
        Game.GetCritter(CritterId).MonologueData = array<uint8>();
    }

    void ScheduleMonologue()
    {
        Critter cr = Game.GetCritter(CritterId);
        if (!valid(cr)) {
            return;
        }

        if (cr.GetTimeEvents(CTE_RUN_MONOLOG) == 0) {
            cr.AddTimeEvent(cte_RunMonologue, NextDialogue, CTE_RUN_MONOLOG);
        }
    }

    void ScheduleMessage()
    {
        Critter cr = Game.GetCritter(CritterId);
        if (!valid(cr)) {
            return;
        }

        if (cr.GetTimeEvents(CTE_NEXT_MESSAGE) == 0) {
            cr.AddTimeEvent(cte_NextMessage, NextMessage, CTE_NEXT_MESSAGE);
        }
    }

}
// Начало диалога
uint
cte_RunMonologue(Critter cr, int identifier, uint& rate)
{
    Monologue m = GetMonologue(cr);
    if (valid(m)) {
        m.CurrentString = m.FirstString;
        m.Save();
        m.ScheduleMessage();
        return m.NextDialogue;
    }
    return 0;
}

uint cte_NextMessage(Critter cr, int identifier, uint& rate)
{
    Monologue m = GetMonologue(cr);
    if (valid(m)) {
        if (m.CurrentString > m.LastString) {
            if (m.NextDialogue == 0) { // Диалог одноразовый
                m.Erase();
            }
            return 0;
        }
        cr.SayMsg(m.SayType, TEXTMSG_TEXT, m.CurrentString);
        m.CurrentString++;
        m.Save();
        return m.NextMessage;
    }
    return 0;
}

// Баллада паладина БС
bool d_MonologueRunning(Critter player, Critter npc)
{
    return (valid(npc) && MonologueRunning(npc));
}

bool d_NotMonologueRunning(Critter player, Critter npc)
{
    return !d_MonologueRunning(player, npc);
}

void r_RunMonologue(Critter player, Critter npc, int firstStr, int lastStr, int nextMsg, int nextDialog, int sayType)
{
    SetMonologue(npc, firstStr, lastStr, nextMsg * Settings.TimeMultiplier, nextDialog, sayType);
}
