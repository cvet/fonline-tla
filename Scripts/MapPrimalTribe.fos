// FOS Server Sort 2
// Author: Tab10id, Тринитротолуол

///@ Property Critter Protected     uint8  TribSulikRaid       Group = Quests Quest = 4606 Max = 10
///@ Property Critter PrivateServer uint   TribRaiderKillCount
///@ Property Critter PrivateServer uint8  NCRElizeSlavers     Max = 10
///@ Property Critter PrivateServer uint16 MapPrimalTribeRaiderHx
///@ Property Critter PrivateServer uint16 MapPrimalTribeRaiderHy

///@ Property Game PrivateServer bool TribRaid
///@ Property Game PrivateServer ident[] PrimalTribeQuestPlayers

#define TIME_FOR_START                (15 * 60 * 60)
#define ROLE_TRIB_MEN                 (10)
#define ROLE_TRIB_WOMEN               (11)
#define ROLE_TRIB_RAIDER              (12)
#define QUEST_STAT_NONE               (0)
#define QUEST_STAT_TAKEN              (1)
#define QUEST_STAT_FULL_SUCC          (2)
#define QUEST_STAT_FAIL_RUNAWAY       (3)
#define QUEST_STAT_FAIL_KILL          (4)
#define QUEST_STAT_FAIL_NO_HELP       (5)
#define QUEST_STAT_NOT_FULL_SUCC      (6)
#define QUEST_STAT_END                (7)
#define QUEST_STAT_FAIL_NOT_START     (8)
#define QUEST_STAT_FAIL_TRIBE_IS_DEAD (9)
#define QUEST_STAT_ATTACK_RUNS        (10)

#define MAXDIST                       (15)
#define RUN_PERIOD                    (REAL_MINUTE(6 + Game.Random(0, 7)))

#define RAIDERS_LEVEL                 (4)
#define ENT_GROUP_START               (10)
#define ENT_GROUP_FINISH              (12)

#define STR_TALK_TO_SULIK             (2600)

#define TIME_TO_CHANGE_TARGET         (REAL_MINUTE(13 + Game.Random(0, 7)))

bool AttackRuns = false;
ident[] QuestPlayers = {};
ident MapIdent;
bool NotCome = true;
bool TribeDead = false;
ident StartAttackInvokeId;

void _PrimalTribeInit(Map map, bool firstTime)
{
    initQuest(map);
    //	initNaturResp(map);
}

void initNaturResp(Map map)
{
    Game.DeferredCall(0, NaturResp, map.Id);
}

void NaturResp(any value)
{
    Map map = Game.GetMap(value);
    // 272 120 82
    // 272 108 81
    // 271 127 87
    // 271 107 83
    // 117 118 84
    Game.DeferredCall(GAME_HOUR_TO_TICK(12), NaturResp, map.Id);
}

void initQuest(Map map)
{
    MapIdent = map.Id;
    //	Game.Log("map.Id: "+map.Id+" MapIdent: "+MapIdent);

    map.OnCritterIn.Subscribe(_PlayerInMap);
    map.OnFinish.Subscribe(_SaveAD);

    GetAD();

    Critter[] citizens = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_MEN, CritterFindType::Npc);
    uint menCount = citizens.length();
    citizens.insertLast(map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_WOMEN, CritterFindType::Npc));

    if (map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_RAIDER, CritterFindType::AliveNpc).length() > 0) {
        AttackRuns = true;
    }

    //	Game.Log("initQuest "+menCount);
    for (uint i = 0; i < citizens.length(); i++) {
        citizens[i].OnDead.Subscribe(_CDead);
        citizens[i].OnTalk.Subscribe(_OnDial);

        if (i < menCount) {
            citizens[i].OnAttacked.Subscribe(_MOnAttack);
        }
        else {
            citizens[i].OnAttacked.Subscribe(_WOnAttack);
        }
    }
}

void _SaveAD(Map map)
{
    Game.PrimalTribeQuestPlayers = QuestPlayers;
}

void GetAD()
{
    QuestPlayers = Game.PrimalTribeQuestPlayers.clone();
}

void r_StartQuest(Critter master, Critter npc)
{
    master.TribSulikRaid = QUEST_STAT_TAKEN;
    Game.TribRaid = true;
    master.TribRaiderKillCount = 0;
    NotCome = true;
    QuestPlayers.insertLast(master.Id);
    StartAttackInvokeId = Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_FOR_START), StartAttack);
}

void r_PushQuestPl(Critter master, Critter npc)
{
    QuestPlayers.insertLast(master.Id);
}

void r_GetExp(Critter master, Critter npc)
{
    master.Experience += (master.TribRaiderKillCount + 1) * 100;
    master.Karma += (master.TribRaiderKillCount + 1) * 10;
    master.TribRaiderKillCount = 0;
    master.TribSulikRaid = QUEST_STAT_END;
}

bool d_AttackRuns(Critter master, Critter npc)
{
    if (AttackRuns) {
        return true;
    }
    else {
        return false;
    }
}

bool d_QuestSucc(Critter master, Critter npc)
{
    uint qs = master.TribSulikRaid;
    return qs == QUEST_STAT_FULL_SUCC || qs == QUEST_STAT_NOT_FULL_SUCC || qs == QUEST_STAT_END;
}

void StartAttack()
{
    StartAttackInvokeId = ZERO_IDENT;
    uint entGroup = Game.Random(ENT_GROUP_START, ENT_GROUP_FINISH);
    SpawnRaiders(MapIdent, entGroup, 0, RAIDERS_LEVEL);
}

void ChangeTarget(Critter crit)
{
    Map map = crit.GetMap();
    Critter[] raiders = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_RAIDER, CritterFindType::AliveNpc);
    if (raiders.isEmpty()) {
        AttackRuns = false;
    }
    else {
        // EnemyStack::ClearEnemyStack( crit );
        _NpcEraseAllPlanesAttack(crit);
        NpcPlanes::AddAttackPlane(crit, AI_PLANE_ATTACK_PRIORITY, raiders[Game.Random(0, raiders.length() - 1)]);
    }
}

void DeleteRaider(any value)
{
    Critter raider = Game.GetCritter(value);
    if (valid(raider)) {
        Game.DeleteCritter(raider);
    }
}

void _CDead(Critter crit, Critter killer)
{
    if (!valid(killer)) {
        return;
    }
}

void CChangeTarget(any value)
{
    Critter crit = Game.GetCritter(value);
    if (!valid(crit)) {
        return;
    }
    if (crit.IsDead()) {
        return;
    }

    if (AttackRuns) {
        ChangeTarget(crit);
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TIME_TO_CHANGE_TARGET), CChangeTarget, value);
    }
}

void _RaiderDead(Critter crit, Critter killer)
{
    uint count = crit.GetMap().GetCritters(CritterProperty::NpcRole, ROLE_TRIB_RAIDER, CritterFindType::AliveNpc).length();
    uint countAll = crit.GetMap().GetCritters(CritterProperty::NpcRole, ROLE_TRIB_RAIDER, CritterFindType::Npc).length();

    if (valid(killer)) {
        if (!killer.IsControlledByPlayer && killer.NpcRole != ROLE_TRIB_RAIDER) {
            ChangeTarget(killer);
        }

        if (killer.IsControlledByPlayer) {
            uint8 questStat = killer.TribSulikRaid;
            if (questStat == QUEST_STAT_NONE || questStat == QUEST_STAT_FAIL_RUNAWAY || questStat == QUEST_STAT_FAIL_KILL ||
                questStat == QUEST_STAT_FAIL_NO_HELP || questStat == QUEST_STAT_FAIL_NOT_START || questStat == QUEST_STAT_FAIL_TRIBE_IS_DEAD ||
                questStat == QUEST_STAT_ATTACK_RUNS || questStat == QUEST_STAT_NOT_FULL_SUCC) {
                if (killer.TribRaiderKillCount == countAll - 1) {
                    killer.TribSulikRaid = QUEST_STAT_FULL_SUCC;
                }
                else {
                    if (killer.TribRaiderKillCount == 0) {
                        killer.TribSulikRaid = QUEST_STAT_NOT_FULL_SUCC;
                    }
                    killer.TribRaiderKillCount += 1;
                }
            }
        }
    }

    if (count == 0) {
        Game.TribRaid = false;
        SendQuestStat();
    }

    Game.SavedDeferredCall(GAME_SECOND_TO_TICK(60 * Game.Random(20, 60)), DeleteRaider, crit.Id);
}

void _PlayerDead(Critter player, Critter killer)
{
    uint8 questStat = player.TribSulikRaid;
    if (questStat != QUEST_STAT_FULL_SUCC && questStat != QUEST_STAT_NOT_FULL_SUCC) {
        player.TribSulikRaid = QUEST_STAT_FAIL_KILL;
    }
    player.OnDead.Unsubscribe(_PlayerDead);
}

bool _MOnAttack(Critter crit, Critter attacker)
{
    //	if(!AttackRuns)
    //	{
    //		AttackRuns=true;
    //	}
    if (attacker.NpcRole == ROLE_TRIB_RAIDER) {
        return true;
    }
    else {
        return false;
    }
}

bool _WOnAttack(Critter crit, Critter attacker)
{
    //	if(!AttackRuns)
    //	{
    //		AttackRuns=true;
    //	}
    if (attacker.NpcRole == ROLE_TRIB_RAIDER) {
        RunAwayCritter(crit);
        return true;
    }
    else {
        return false;
    }
}

Critter SpawnRaider(Map map, uint8 entGroup, uint8 entNum, hstring npcPid, uint8 dir, uint dialog, uint bagId, uint level)
{
    uint16 x = 0, y = 0;
    if (not Entrance::MapGetEntryCoords(map, entGroup, entNum, x, y)) {
        Game.Log("\n<Trib: Rangers Attack> Error: GetEntryCoords " + entGroup + ":" + entNum);
        return null;
    }

    int[] props = {CritterProperty::DialogId,
                   dialog,
                   CritterProperty::BagId,
                   bagId,
                   CritterProperty::TeamId,
                   Teams::Bandit,
                   CritterProperty::MapPrimalTribeRaiderHx,
                   x,
                   CritterProperty::MapPrimalTribeRaiderHy,
                   y,
                   CritterProperty::NpcRole,
                   ROLE_TRIB_RAIDER,
                   CritterProperty::ReplicationTime,
                   -1,
                   CritterProperty::IsNoSupply,
                   1,
                   CritterProperty::IsNoHome,
                   1,
                   CritterProperty::Level,
                   level};

    Critter raider = map.AddNpc(npcPid, x, y, dir, Tla::GetCritPropsDict(props));
    if (not valid(raider)) {
        Game.Log("\n<Trib: Rangers Attack> critter not valid ");
        return null;
    }

    Game.DeferredCall(0, RaiderChangeTarget, raider.Id);
    raider.OnDead.Subscribe(_RaiderDead);
    return raider;
}

void RaiderChangeTarget(any value)
{
    Critter raider = Game.GetCritter(value);
    if (not valid(raider)) {
        return;
    }
    if (raider.IsDead()) {
        return;
    }

    Map map = raider.GetMap();
    if (not valid(map)) {
        return;
    }

    auto mens = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_MEN, CritterFindType::AliveNpc);
    auto womens = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_WOMEN, CritterFindType::AliveNpc);
    uint citizenCount = mens.length() + womens.length();

    if (citizenCount == 0) {
        NpcPlanes::AddWalkPlane(raider,
                                AI_PLANE_WALK_PRIORITY,
                                raider.MapPrimalTribeRaiderHx,
                                raider.MapPrimalTribeRaiderHy,
                                Game.Random(0, 5),
                                true,
                                Game.Random(0, 1));
        NpcPlanes::AddMiscPlane(raider, AI_PLANE_MISC_PRIORITY, 0, MapPrimalTribe::plane_DelRaider);
        Game.TribRaid = false;
        TribeDead = true;
        SendQuestStat();
    }
    else {
        EnemyStack::ClearEnemyStack(raider);
        _NpcEraseAllPlanesAttack(raider);

        Critter[] players = map.GetCritters(CritterFindType::AlivePlayers);

        Critter target;
        if (Game.Random(0, 1) == 0 || players.length() == 0) {
            if (Game.Random(0, 1) == 0 || womens.length() == 0) {
                target = mens[Game.Random(0, mens.length() - 1)];
            }
            else {
                target = womens[Game.Random(0, womens.length() - 1)];
            }
        }
        else {
            target = players[Game.Random(0, players.length() - 1)];
        }

        if (target != null) {
            NpcPlanes::AddAttackPlane(raider, AI_PLANE_ATTACK_PRIORITY, target);
        }

        Game.DeferredCall(GAME_SECOND_TO_TICK(TIME_TO_CHANGE_TARGET), RaiderChangeTarget, value);
    }
}

void plane_DelRaider(Critter raider)
{
    if (raider.NpcRole != ROLE_TRIB_RAIDER) {
        return;
    }

    Game.DeleteCritter(raider);
}

void SpawnRaiders(ident mapId, uint entGroup, uint dialogId, uint mobLevel)
{
    Map map = Game.GetMap(mapId);
    if (not valid(map)) {
        Game.Log("\n<Trib: Rangers Attack> map not valid");
        return;
    }

    Critter[] raiders = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_RAIDER, CritterFindType::Npc);
    Game.DeleteCritters(raiders);

    uint entCount = Entrance::MapCountEntry(map, entGroup);

    for (uint i = 0; i < entCount; i++) {
        hstring npcPid = Game.Random(0, 1) == 0 ? Content::Critter::RaiderMale : Content::Critter::RaiderFemale;

        uint bagId;
        if (npcPid == Content::Critter::RaiderMale) {
            bagId = Game.Random(Bags::RDRCRaidersRaiderMale, Bags::RDRCRaidersRaiderMale2);
        }
        else {
            bagId = Game.Random(Bags::RDRCRaidersRaiderFemale, Bags::RDRCRaidersRaiderFemale2);
        }

        SpawnRaider(map, entGroup, i, npcPid, Game.Random(0, 5), dialogId, bagId, mobLevel);
    }

    if (!AttackRuns) {
        AttackRuns = true;

        for (uint i = 0; i < QuestPlayers.length(); i++) {
            Critter crit = Game.GetCritter(QuestPlayers[i]);
            if (crit != null && crit.TribSulikRaid == QUEST_STAT_TAKEN) {
                crit.TribSulikRaid = QUEST_STAT_ATTACK_RUNS;
            }
        }
    }

    Critter[] citizensM = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_MEN, CritterFindType::AliveNpc);
    for (uint i = 0; i < citizensM.length(); i++) {
        Game.SavedDeferredCall(0, CChangeTarget, citizensM[i].Id);
    }

    Critter[] citizensW = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_WOMEN, CritterFindType::AliveNpc);
    for (uint i = 0; i < citizensW.length(); i++) {
        Game.DeferredCall(GAME_SECOND_TO_TICK(RUN_PERIOD), RunRandom, citizensW[i].Id);
        citizensW[i].IsNoHome = true;
        citizensW[i].OnNpcPlaneEnd.Subscribe(_WPlaneEnd);
    }
}

void SendQuestStat()
{
    Critter cr;
    Map map;
    ident mapId;

    for (uint i = 0; i < QuestPlayers.length(); i++) {
        cr = Game.GetCritter(QuestPlayers[i]);
        if (not valid(cr)) {
            continue;
        }

        if (cr.TribRaiderKillCount == 0 && cr.TribSulikRaid != QUEST_STAT_FAIL_KILL) {
            map = cr.GetMap();
            if (valid(map)) {
                mapId = map.Id;
            }

            if (mapId != MapIdent) {
                if (cr.NCRElizeSlavers == 0) {
                    cr.TribSulikRaid = QUEST_STAT_FAIL_RUNAWAY;
                }
                else {
                    if (NotCome) {
                        cr.TribSulikRaid = QUEST_STAT_FAIL_NOT_START;
                    }
                    else {
                        cr.TribSulikRaid = QUEST_STAT_FAIL_RUNAWAY;
                    }
                }
            }
            else {
                if (TribeDead) {
                    cr.TribSulikRaid = QUEST_STAT_FAIL_TRIBE_IS_DEAD;
                }
                else {
                    cr.TribSulikRaid = QUEST_STAT_FAIL_NO_HELP;
                }
            }
        }
    }
    QuestPlayers.clear();
}

void _PlayerInMap(Map map, Critter cr)
{
    if (!cr.IsControlledByPlayer) {
        return;
    }

    if (cr.TribSulikRaid == QUEST_STAT_TAKEN) {
        if (!AttackRuns) {
            if (StartAttackInvokeId != ZERO_IDENT) {
                Game.CancelDeferredCall(StartAttackInvokeId);
                StartAttackInvokeId = ZERO_IDENT;
            }
            StartAttack();
        }
        cr.OnDead.Subscribe(_PlayerDead);
        NotCome = false;
    }
}

void RunAwayCritter(Critter crit)
{
    uint16 x, y, homeX = 0, homeY = 0, homeM = 0, homeD = 0;
    uint8 dir;
    do {
        x = crit.HexX + Game.Random(-8, 8);
    } while ((x < homeX + MAXDIST) or (x > homeX - MAXDIST));
    do {
        y = crit.HexY + Game.Random(-8, 8);
    } while ((y < homeY + MAXDIST) or (y > homeY - MAXDIST));
    dir = Game.GetDirection(crit.HexX, crit.HexY, x, y);
    NpcPlanes::AddWalkPlane(crit, AI_PLANE_WALK_PRIORITY, x, y, dir, true, 0);
}

void RunRandom(any value)
{
    Critter crit = Game.GetCritter(value);
    if (!valid(crit)) {
        return;
    }

    Map map = crit.GetMap();
    if (!valid(map)) {
        return;
    }

    uint count = map.GetCritters(CritterProperty::NpcRole, ROLE_TRIB_RAIDER, CritterFindType::AliveNpc).length();
    if (count == 0) {
        if (Game.TribRaid) {
            SendQuestStat();
            Game.TribRaid = false;
        }
        crit.IsNoHome = false;
        crit.OnNpcPlaneEnd.Unsubscribe(_WPlaneEnd);
    }
    else {
        RunAwayCritter(crit);
    }
}

bool _WPlaneEnd(Critter crit, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(crit, planeId);

    Game.DeferredCall(GAME_SECOND_TO_TICK(RUN_PERIOD), RunRandom, crit.Id);
    return true;
}

bool _OnDial(Critter cr, Critter player, bool attach, uint talkCount)
{
    if (cr.DialogId != Content::Dialog::trib_sulik) {
        if (player.TribSulikRaid == QUEST_STAT_FULL_SUCC || player.TribSulikRaid == QUEST_STAT_NOT_FULL_SUCC) {
            cr.SayMsg(SAY_NORM_ON_HEAD, TextPackName::Text, STR_TALK_TO_SULIK);
            return false;
        }
        else {
            return true;
        }
    }
    else {
        return true;
    }
}

void CritterInit(Critter crit, bool firstTime)
{
    if (!AttackRuns) {
        return;
    }

    if (crit.Gender == GenderType::Male) {
        Game.SavedDeferredCall(0, CChangeTarget, crit.Id);
    }
    else {
        Game.DeferredCall(GAME_SECOND_TO_TICK(RUN_PERIOD), RunRandom, crit.Id);
        crit.IsNoHome = true;
        crit.OnNpcPlaneEnd.Subscribe(_WPlaneEnd);
    }
}
