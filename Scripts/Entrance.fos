// FOS Server

class Entry
{
    hstring Name;
    uint16 HexX;
    uint16 HexY;
};

Entry GetEntry(Map map, int entry, int skip)
{
    return GetEntry(map, hstring("" + entry), skip);
}

Entry GetEntry(Map map, hstring entry, int skip)
{
    Entry ent;
    if (!MapGetEntryCoords(map, entry, skip, ent.HexX, ent.HexY)) {
        return null;
    }

    ent.Name = entry;
    return ent;
}

Entry[] ParseEntries(Map map, int entry)
{
    return ParseEntries(map, hstring("" + entry));
}

Entry[] ParseEntries(Map map, hstring entry)
{
    Entry[] entries = {};
    uint count = MapCountEntry(map, entry);
    for (uint i = 0; i < count; i++) {
        Entry ent = Entry();
        ent.Name = entry;
        MapGetEntryCoords(map, entry, i, ent.HexX, ent.HexY);
        entries.insertLast(ent);
    }
    return entries;
}

bool GetEntryFreeHex(Map map, int entry, uint16& hx, uint16& hy)
{
    return GetEntryFreeHex(map, hstring("" + entry), hx, hy);
}

bool GetEntryFreeHex(Map map, hstring entry, uint16& hx, uint16& hy)
{
    uint count = MapCountEntry(map, entry);

    // Fisrt check direct coords
    for (uint i = 0; i < count; i++) {
        if (MapGetEntryCoords(map, entry, i, hx, hy) && map.IsHexPassed(hx, hy)) {
            return true;
        }
    }

    // Check borders
    if (hx == 0 || hy == 0 || hx >= map.Width - 1 || hy >= map.Height - 1) {
        return false;
    }

    // Second check coords with offsets
    for (uint i = 0; i < count; i++) {
        if (MapGetEntryCoords(map, entry, i, hx, hy)) {
            for (int x = -1; x <= 1; x++) {
                for (int y = -1; y <= 1; y++) {
                    if (x == 0 && y == 0) {
                        continue; // Skip direct position
                    }

                    if (Settings.MapHexagonal) {
                        if ((hx % 2) == 1 && ((x == -1 && y == 1) || (x == 1 && y == 1))) {
                            continue;
                        }
                        if ((hx % 2) == 0 && ((x == -1 && y == -1) || (x == 1 && y == -1))) {
                            continue;
                        }
                    }

                    if (map.IsHexPassed(hx + x, hy + y)) {
                        hx += x;
                        hy += y;
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

bool GetNearEntry(Map map, int entry, uint16& hx, uint16& hy)
{
    return GetNearEntry(map, hstring("" + entry), hx, hy);
}

bool GetNearEntry(Map map, hstring entry, uint16& hx, uint16& hy)
{
    uint16 hxBase = hx;
    uint16 hyBase = hy;

    Entry[] entries = ParseEntries(map, entry);
    if (entries.isEmpty()) {
        return false;
    }

    hx = entries[0].HexX;
    hy = entries[0].HexY;
    for (uint i = 1; i < entries.length(); i++) {
        Entry ent = entries[i];
        if (Game.GetDistance(hxBase, hyBase, ent.HexX, ent.HexY) < Game.GetDistance(hxBase, hyBase, hx, hy)) {
            hx = ent.HexX;
            hy = ent.HexY;
        }
    }

    return true;
}

// * ******************************************* Мертвая зона, заданная EntryHex'ами ******************************************* */
/*
   Всякая простая замкнутая ломаная на плоскости разбивает точки плоскости на две области – внутреннюю и внешнюю.

   из координат игрока пускается горизонтальный луч
   если луч пересекает ломаную закрытой зоны нечетное число раз - он находится во внутренней зоне ломаной, иначе в наружной

   cr - криттер, которого проверяем
   map - карта, на которой имеется мертвая зона
   dir - направление луча (лучше использовать горизонталь по х - dir = 0\
   hexFirst - номер первого из гексов, ограничивающих мертвую зону
   hexEnd - номер последнего гекса, ограничивающего мертвую зону

   номера гексов должны возрастать для каждой последующей точки.
   нельзя поставить общий номер всем гексам, иначе для общего случая (невыпуклого многоугольника мертвой зоны) будет найдено множество решений
*/
bool IsCritterInDeadZone(Critter cr, Map map, uint8 dir, uint8 hexFirst, uint8 hexEnd)
{
    uint crossNum = 0; // число пересечений луча и ломанных, ограничивающих многоугольник мертвой зоны
    for (uint i = hexFirst; i <= hexEnd; i++) {
        if (BeamCrossing2Section(map, i, i == hexEnd ? hexFirst : i + 1, cr.HexX, cr.HexY, dir)) {
            crossNum++;
        }
    }
    return crossNum % 2 == 1;
}

// Признак: луч пересекает некий отрезок между двумя Entry гексами
// map - карта
// hexNum1 - начальный гекс отрезка
// hexNum2 - конечный гекс отрезка
// beamX - координата начала луча по оси x
// beamY - координата начала луча по оси у
// dir - направление луча
// если не найдены гексы, или нет пересечения луча и отрезка между гексами - вернет false
// если луч пересекает отрезок - вернет true
bool BeamCrossing2Section(Map map, int hexNum1, int hexNum2, uint16 beamX, uint16 beamY, uint8 dir)
{
    // 1. вычисляем координаты конечной точки луча
    uint16 hx0 = beamX;
    uint16 beamX2 = hx0;
    uint16 hy0 = beamY;
    uint16 beamY2 = hy0;
    uint steps = 0;

    while (hx0 != beamX2 || hy0 != beamY2 || steps == 0) {
        steps += 1;
        hx0 = beamX2;
        hy0 = beamY2;
        map.MoveHexByDir(beamX2, beamY2, dir, steps);
    }

    // координаты конечной точки высчитаны beamX2, beamY2
    uint16 hx1 = 0;
    uint16 hx2 = 0;
    uint16 hy1 = 0;
    uint16 hy2 = 0;
    // координаты начальной и конечной точки отрезка между двумя гексами
    if (!MapGetEntryCoords(map, hexNum1, 0, hx1, hy1)) {
        return false;
    }
    if (!MapGetEntryCoords(map, hexNum2, 0, hx2, hy2)) {
        return false;
    }

    // Знаменатель
    float z = (int(hx1) - int(hx2)) * (int(beamY2) - int(beamY)) - (int(hy1) - int(hy2)) * (int(beamX2) - int(beamX));
    // числитель 1
    float ch = (int(hx1) - int(beamX)) * (int(beamY2) - int(beamY)) - (int(hy1) - int(beamY)) * (int(beamX2) - int(beamX));
    // числитель 2
    float cbeam = (int(hx1) - int(hx2)) * (int(hy1) - int(beamY)) - (int(hy1) - int(hy2)) * (int(hx1) - int(beamX));
    // если числители и знаменатель = 0, прямые совпадают, считаем что это не пересечение
    if (z == 0 && ch == 0 && cbeam == 0) {
        return false;
    }
    // если знаменатель = 0, отрезок и луч = параллельны, не пересекаются
    if (z == 0) {
        return false;
    }
    // точка пересечения на отрезке
    float crossS = ch / z;
    // точка пересечения на луче
    float crossB = cbeam / z;
    return 0 < crossS && crossS < 1 && 0 < crossB && crossB < 1;
}

uint MapCountEntry(Map map, int entry)
{
    return MapCountEntry(map, hstring("" + entry));
}

uint MapCountEntry(Map map, hstring entry)
{
    int total = 0;
    if (valid(map)) {
        auto staticItems = map.GetStaticItems();
        for (uint i = 0; i < staticItems.length(); i++) {
            StaticItem staticItem = staticItems[i];
            if (EntryMatch(entry, staticItem)) {
                total++;
            }
        }
    }
    return total;
}

bool EntryMatch(hstring entry, StaticItem entrance)
{
    if (valid(entrance) && entrance.Type == ItemType::Grid && entrance.ProtoId == Content::Item::Entrance) {
        if (entrance.Grid_ToMapEntry == entry) {
            return true;
        }
        if (entry == "0" && entrance.Grid_ToMapEntry.str.isEmpty()) {
            return true;
        }
    }

    return false;
}

bool MapGetEntryCoords(Map map, int entry, uint skip, uint16& hexX, uint16& hexY)
{
    return MapGetEntryCoords(map, hstring("" + entry), skip, hexX, hexY);
}

bool MapGetEntryCoords(Map map, hstring entry, uint skip, uint16& hexX, uint16& hexY)
{
    if (valid(map)) {
        auto staticItems = map.GetStaticItems();
        uint skipped = 0;
        for (uint i = 0; i < staticItems.length(); i++) {
            StaticItem staticItem = staticItems[i];
            if (EntryMatch(entry, staticItem)) {
                if (skipped == skip) {
                    hexX = staticItem.HexX;
                    hexY = staticItem.HexY;
                    return true;
                }
                skipped++;
            }
        }
    }
    return false;
}

hstring[] MapGetAllEntries(Map map)
{
    hstring[] entryNames = {};
    if (valid(map)) {
        auto staticItems = map.GetStaticItems();
        uint skipped = 0;
        for (uint i = 0; i < staticItems.length(); i++) {
            StaticItem staticItem = staticItems[i];
            if (staticItem.Type == ItemType::Grid && staticItem.ProtoId == Content::Item::Entrance) {
                entryNames.insertLast(staticItem.Grid_ToMapEntry);
            }
        }
    }

    return entryNames;
}
