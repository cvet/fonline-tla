// FOS Server
// Author: rifleman17
// Бартер с ограничениями. Нпц покупает или продает вещи только из ограниченного списка.

///@ Property Critter PrivateServer uint8[] LimitedBarterData

class BarterLimit
{
    ident CrId;                     // Код криттера, к которому применяются ограничения
    hstring[] AllowedPidsSale = {}; // Коды предметов, которые НПЦ продает
    hstring[] AllowedPidsBuy = {};  // Коды предметов, которые НПЦ покупает

    BarterLimit(ident crId)
    {
        CrId = crId;
    }

    bool BartedAllowed(hstring itemPid, bool isSale)
    {
        return (isSale ? (AllowedPidsSale.length() == 0 || AllowedPidsSale.find(itemPid) != -1) :
                         (AllowedPidsBuy.length() == 0 || AllowedPidsBuy.find(itemPid) != -1));
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        if (load.SetData(Game.GetCritter(CrId).LimitedBarterData) > 0) {
            load.Get(AllowedPidsSale);
            load.Get(AllowedPidsBuy);
        }
    }

    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set(AllowedPidsSale);
        save.Set(AllowedPidsBuy);
        Game.GetCritter(CrId).LimitedBarterData = save.GetData();
    }
};

void SaveBarterLimit(ident crId, hstring[] sellLimits, hstring[] buyLimits)
{
    BarterLimit bl = BarterLimit(crId);
    Game.GetCritter(crId).LimitedBarterData = array<uint8>();
    if (sellLimits.length() > 0) {
        bl.AllowedPidsSale.clear();
        bl.AllowedPidsSale = sellLimits;
    }
    if (buyLimits.length() > 0) {
        bl.AllowedPidsBuy.clear();
        bl.AllowedPidsBuy = buyLimits;
    }
    bl.Save();
}

bool BarterAllowed(ident crId, Item[] buyItems, Item[] saleItems)
{
    if (Game.GetCritter(crId).LimitedBarterData.length() > 0) {
        BarterLimit bl = BarterLimit(crId);
        for (uint i = 0, l = buyItems.length(); i < l; i++) {
            Item item = buyItems[i];
            if (valid(item) && !bl.BartedAllowed(item.ProtoId, false)) {
                return false;
            }
        }
        for (uint i = 0, l = saleItems.length(); i < l; i++) {
            Item item = saleItems[i];
            if (valid(item) && !bl.BartedAllowed(item.ProtoId, false)) {
                return false;
            }
        }
    }
    return true;
}
