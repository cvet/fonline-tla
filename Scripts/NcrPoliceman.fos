// FOS Server
// Author: heX
// Скрипты охраны в НКР
// охранники просят убрать оружие.
// охранники реагируют на употребление алкоголя и наркотиков.

// WARN:
// я тут рискую и делаю наследование...
// (а наследование еще не совсем стабильно работает в AngScr)
// но вроде все работает нормально.

// наследуем класс библиотеки
class CGuardsManagerForNCR : GuardLib::CGuardsManager
{
    CGuardsManagerForNCR()
    {
        super();

        DialogId = Content::Dialog::ncr_policeman;
    }
}

// класс с алгоритмом
CGuardsManagerForNCR Grd = CGuardsManagerForNCR();

bool GuardItemTest(Item item)
{
    return Grd.GuardItemTest(item);
}

// Инициализация нпц. происходит при вводе нпц в игру
void _GuardInit(Critter npc, bool firstTime)
{
    // вешаем обработчики событий
    npc.OnCritterAppeared.Subscribe(_GuardOnAddCritter);
    npc.OnCritterDisappeared.Subscribe(_GuardOnRemoveCritter);
    // npc.OnIdle.Subscribe(_GuardIdle);
    npc.OnNpcPlaneEnd.Subscribe(_GuardEndPlane);
    npc.OnMessage.Subscribe(_GuardOnMessage);
    npc.OnSomeCritterMoveItem.Subscribe(_GuardOnMoveItem);
    npc.OnSomeCritterUseItem.Subscribe(_GuardOnUseItem);
    npc.OnSomeCritterStealing.Subscribe(_GuardStealing);
    npc.OnSomeCritterAttack.Subscribe(_GuardOnSmthAttack);
    npc.OnSomeCritterDropItem.Subscribe(_GuardOnDropItem); // r17

    // Создаем событие наблюдения
    if (not firstTime && npc.GetTimeEvents(Tla::CteObserving) == 0) {
        npc.AddTimeEvent(cte_Observing, OBSERV_PERIOD, Tla::CteObserving);
    }
}

uint cte_Observing(Critter npc, any identifier, uint& stage)
{
    return Grd.EventObserving(npc);
}

void _GuardOnAddCritter(Critter crit, Critter showCrit)
{
    Grd.EventOnAddCritter(crit, showCrit);
}

void _GuardOnRemoveCritter(Critter crit, Critter hideCrit)
{
    Grd.EventOnRemoveCritter(crit, hideCrit);
}

bool _GuardEndPlane(Critter npc, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    Grd.EventEndPlane(npc);
    return true;
}

void _GuardOnMoveItem(Critter crit, Critter fromCrit, Item item, CritterItemSlot fromSlot)
{
    Grd.EventOnMoveItem(crit, fromCrit, Game.GetItem(item.Id), fromSlot);
}

void _GuardOnMessage(Critter crit, Critter fromCrit, int message, any value)
{
    Grd.EventOnMessage(crit, fromCrit, message, value);
}

void _GuardOnUseItem(Critter crit, Critter fromCrit, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    Grd.EventOnUseItem(crit, fromCrit, item, onCritter, onItem, null);
}

void _GuardOnDropItem(Critter crit, Critter fromCrit, Item item) // r17
{
    Grd.EventOnDropItem(crit, fromCrit, item);
}

void _GuardOnSmthAttack(Critter crit, Critter fromCrit, Critter target, Item weapon, uint8 weaponMode, ProtoItem ammo)
{
    Grd.EventOnSmthAttack(crit, fromCrit, target);
}

void _GuardStealing(Critter crit, Critter thief, Critter fromCrit, Item item, uint count)
{
    Grd.EventStealing(crit, fromCrit, thief, false, item, count);
}
