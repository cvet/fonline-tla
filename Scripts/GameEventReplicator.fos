// FOS Server Sort 3
// Author: rifleman17

///@ Property Critter Protected uint8 GEReplExplodeTank Group = Quests Quest = 1826 Max = 4
///@ Property Critter Protected uint8 GEReplNopasaran   Group = Quests Quest = 1829 Max = 7
///@ Property Critter Protected uint8 GEReplFindstation Group = Quests Quest = 1827 Max = 2

///@ Property Critter PrivateServer uint8 GEReplNotifictions            Max = 3
///@ Property Critter PrivateServer uint  GEReplEntryZombie
///@ Property Critter PrivateServer uint  GEReplLastOrder
///@ Property Critter PrivateServer bool  GEReplIsAddedAttackPlane

#define PHASE_NOT_STARTED   (0)
#define PHASE_STATE_RUNNING (1)
#define PHASE_STOPPED       (2)

#define ENTRY_0             (0)
#define ENTRY_QGIVER        (140)
#define ENTRY_GUARD         (141)
#define ENTRY_SCIENTIST     (142)
#define ENTRY_DEAD_GUARD    (143)
#define ENTRY_DEAD_ZOMBIE   (144)
#define ENTRY_ZOMBIE_0      (145) // Место спавна и первоначальных брожений
#define ENTRY_ZOMBIE_1      (146) // Первая точка, к которой идут гули
#define ENTRY_ZOMBIE_2      (147) // Вторая точка
#define ENTRY_ZOMBIE_3      (148) // Третья, после этого гули выбираются на поверхность
#define ENTRY_SPECIAL       (288)
#define ENTRY_ZOMBIE_EXIT   (289) // Гекс, с которого гули выходят на глобал

#define EVENT_ZOMBIE_STOP   (12)

#define ENTRY_SMOLETT       (300)
#define ENTRY_SCIENTIST     (301)
#define ENTRY_HUB           (302)

#define ENTRY_WARIOR        (303)
#define ENTRY_LOOK_TO       (304)
#define NPC_ROLE_DEF        (304) // Роль для всех временных нпц на поверхности

#define TIME_MOVE           (REAL_MINUTE(1)) // Время, после которого гули меняют свое положение

#define MSG_ALARM           (300) // Номер сообщения, на которое зомби реагируют

#define EVENT_ZOMBIE        (11)
#define ROLE_ZOMBIE         (123)
// #define COLOR_RGB               # ( r, g, b )( uint( ( 0xFF << 24 ) | ( ( ( r )  0xFF ) << 16 ) | ( ( ( g )  0xFF ) << 8 ) | ( ( b )  0xFF ) ) )

#define DL #(s)(Game.Log("GE: " + s))
// #define DL                     # ( s )

const uint[] colorsReplicator =
    {25599, 25500, COLOR_RGB(0, 0xFF, 0x99), COLOR_RGB(0, 0xFF, 0x99), COLOR_RGB(0x33, 0xCC, 0xCC), COLOR_RGB(0x99, 0x99, 0xff), COLOR_RGB(0, 0xCC, 0x66)};

const uint[][] entriesSandbags = {{149, 158}, {158, 162}, {163, 167}, {170, 177}};

// GameEvent
void BeginEvent()
{
    SetReplicationAbandoned();
}

void e_StopEvent()
{
    // Остановка эвента
    StopEvent();
}

void SetReplicationAbandoned()
{
    Game.GEReplStationStatus = true;
    Location loc = Game.GetLocationByPid(Content::Location::replication_4);
    if (valid(loc)) {
        Map map = loc.GetMapByIndex(0);
        if (valid(map)) {
            // Расположение укреплений из мешков
            for (uint i = 0, l = entriesSandbags.length(); i < l; i++) {
                for (uint j = entriesSandbags[i][0], k = entriesSandbags[i][1]; j <= k; j++) {
                    if (j > entriesSandbags[i][0]) {
                        PlaceSandbags(map, j - 1, j, 3);
                    }
                }
            }
        }
        // Расстановка нпц
        // Смоллет
        uint16 xC = 0;
        uint16 yC = 0;
        Entrance::GetEntryFreeHex(map, ENTRY_LOOK_TO, xC, yC);

        uint16 hx = 0;
        uint16 hy = 0;
        if (Entrance::GetEntryFreeHex(map, ENTRY_SMOLETT, hx, hy)) {
            int[] props = {CritterProperty::ReplicationTime,
                           5,
                           CritterProperty::DialogId,
                           Content::Dialog::repl_smallet.hash,
                           CritterProperty::NpcRole,
                           NPC_ROLE_DEF,
                           CritterProperty::TeamId,
                           Teams::ReplictionHubb,
                           CritterProperty::BagId,
                           Bags::VaultCityMilitary,
                           CritterProperty::IsNoLoot,
                           1};
            map.AddNpc(Content::Critter::BlackArmoredRebel, hx, hy, Game.GetDirection(hx, hy, xC, yC), Tla::GetCritPropsDict(props));
        }

        Entrance::Entry[] entries = Entrance::ParseEntries(map, ENTRY_WARIOR);
        for (uint i = 0; i < entries.length(); i++) {
            int[] props = {CritterProperty::ReplicationTime,
                           5,
                           CritterProperty::DialogId,
                           Content::Dialog::repl_ewarrior.hash,
                           CritterProperty::NpcRole,
                           NPC_ROLE_DEF,
                           CritterProperty::TeamId,
                           Teams::ReplictionHubb,
                           CritterProperty::BagId,
                           42,
                           CritterProperty::IsNoLoot,
                           1};
            map.AddNpc(Content::Critter::CaveRobber_male_3,
                       entries[i].HexX,
                       entries[i].HexY,
                       Game.GetDirection(entries[i].HexX, entries[i].HexY, xC, yC),
                       Tla::GetCritPropsDict(props));
        }

        entries = Entrance::ParseEntries(map, ENTRY_HUB);
        for (uint i = 0; i < entries.length(); i++) {
            int[] props = {CritterProperty::ReplicationTime,
                           5,
                           CritterProperty::DialogId,
                           Content::Dialog::repl_ehub.hash,
                           CritterProperty::NpcRole,
                           NPC_ROLE_DEF,
                           CritterProperty::TeamId,
                           Teams::ReplictionHubb,
                           CritterProperty::BagId,
                           Bags::NavarroEnclavePatrolMale2,
                           CritterProperty::IsNoLoot,
                           1};
            map.AddNpc(Content::Critter::Critter_485,
                       entries[i].HexX,
                       entries[i].HexY,
                       Game.GetDirection(entries[i].HexX, entries[i].HexY, xC, yC),
                       Tla::GetCritPropsDict(props));
        }

        if (Entrance::GetEntryFreeHex(map, ENTRY_SCIENTIST, hx, hy)) {
            int[] props = {CritterProperty::ReplicationTime,
                           5,
                           CritterProperty::DialogId,
                           Content::Dialog::repl_escientist.hash,
                           CritterProperty::NpcRole,
                           NPC_ROLE_DEF,
                           CritterProperty::TeamId,
                           Teams::ReplictionHubb,
                           CritterProperty::BagId,
                           Bags::NavarroEnclavePatrolMale2,
                           CritterProperty::IsNoLoot,
                           1};
            map.AddNpc(Content::Critter::ShiLabTech, hx, hy, Game.GetDirection(hx, hy, xC, yC), Tla::GetCritPropsDict(props));
        }

        map = loc.GetMapByIndex(2);
        if (valid(map)) {
            PlaceReplicatorTanks(map);
            map.SetupScript(_MapInit);
        }
    }
}

void PlaceSandbags(Map map, uint eFrom, uint eTo, uint sandbagCount)
{
    Entrance::Entry entryFrom = Entrance::GetEntry(map, eFrom, 0);
    Entrance::Entry entryTo = Entrance::GetEntry(map, eTo, 0);
    if (valid(entryFrom) && valid(entryTo)) {
        uint16 x = entryFrom.HexX, y = entryFrom.HexY;
        uint8 dir = Game.GetDirection(x, y, entryTo.HexX, entryTo.HexY);
        int distantion = Game.GetDistance(x, y, entryTo.HexX, entryTo.HexY);
        for (int i = 0; i < distantion; i++) {
            map.MoveHexByDir(x, y, dir, 1);

            hstring pid = Content::Item::sandbag_empty;
            if (sandbagCount == 1) {
                pid = Content::Item::sandbag_1;
            }
            else if (sandbagCount == 2) {
                pid = Content::Item::sandbag_2;
            }
            else if (sandbagCount == 3) {
                pid = Content::Item::sandbag_3;
            }
            else if (sandbagCount == 4) {
                pid = Content::Item::sandbag_4;
            }
            else if (sandbagCount == 5) {
                pid = Content::Item::sandbag_5;
            }

            map.AddItem(x, y, pid, 1);
        }
    }
}

void PlaceReplicatorTanks(Map map)
{
    Item[] items = map.GetItems(Content::Item::replicator_tank_broken);
    for (uint i = 0; i < items.length(); i++) {
        Item item = items[i];
        Item tank = map.AddItem(item.HexX, item.HexY, Content::Item::replicator_tank, 1);
        if (tank != null) {
            tank.SetupScript(_ReplTankInit);
            Game.DeleteItem(item);
        }
    }
}

// Остановка эвента
void StopEvent()
{
    Game.GEReplStationStatus = false;

    Location loc = Game.GetLocationByPid(Content::Location::replication_4);
    if (valid(loc)) {
        Map map = loc.GetMapByIndex(0);
        Game.SavedDeferredCall(GAME_HOUR_TO_TICK(1), DeleteSandbags, map.Id);

        map = loc.GetMapByIndex(2);

        Critter[] zombies = map.GetCritters(CritterFindType::Npc);
        for (uint i = 0; i < zombies.length(); i++) {
            Critter cr = zombies[i];
            if (valid(cr) && cr.IsNpc() && cr.NpcRole == ROLE_ZOMBIE) {
                Game.DeleteCritter(cr);
            }
        }

        map.OnLoop.Unsubscribe(_MapLoop);
        map.OnLoopEx1.Unsubscribe(_MapLoop);
        map.OnLoopEx2.Unsubscribe(_MapLoopEx1);
    }
}

void DeleteSandbags(any value)
{
    Map map = Game.GetMap(value);
    if (valid(map)) {
        // Перенос игроков на глобал
        Critter[] critters = map.GetCritters(CritterFindType::AlivePlayers);
        for (uint i = 0; i < critters.length(); i++) {
            Critter cr = critters[i];
            if (cr.GetMap() != null) {
                cr.TransitToGlobal();
            }
        }

        // удаление мешков
        Item[] items = {};
        items.insertLast(map.GetItems(Content::Item::sandbag_1));
        items.insertLast(map.GetItems(Content::Item::sandbag_2));
        items.insertLast(map.GetItems(Content::Item::sandbag_3));
        items.insertLast(map.GetItems(Content::Item::sandbag_4));
        items.insertLast(map.GetItems(Content::Item::sandbag_5));
        Game.DeleteItems(items);

        // удаление зомби
        // удаление хабологов
        critters = map.GetCritters(CritterFindType::Npc);
        for (uint i = 0; i < critters.length(); i++) {
            Critter npc = critters[i];
            if (npc.NpcRole == ROLE_ZOMBIE || npc.NpcRole == NPC_ROLE_DEF) {
                Game.DeleteCritter(npc);
            }
        }
    }
}

// Скрипт люка
void t_ReplDoor(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (player.IsOwnedByPlayer()) {
        if (Game.GEReplStationStatus) {
            Location loc = player.GetMap().GetLocation();
            if (loc.ProtoId == Content::Location::replication_4) {
                Map map = loc.GetMapByIndex(2);
                if (valid(map)) {
                    Obsolete::CritterTransitToMapEntry(player, map.Id, HASHI(ENTRY_0));
                }
            }
        }
    }
}

void t_Attack(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (player.IsOwnedByPlayer() && entered) {
        Map map = player.GetMap();
        if (valid(map)) {
            Critter[] critters = map.GetCritters(player.HexX, player.HexY, 20, CritterFindType::AliveNpc);
            for (uint i = 0; i < critters.length(); i++) {
                Critter cr = critters[i];
                if (cr.NpcRole == ROLE_ZOMBIE) {
                    NpcPlanes::AddAttackPlane(cr, 0, player);
                    if (Game.Random(1, 3) == 2) {
                        cr.SayMsg(SAY_SHOUT, TEXTMSG_TEXT, 4001);
                    }
                }
            }
        }
    }
}

bool s_ReplDoor(Critter player, Item scenery, CritterProperty skill, Item item)
{
    if (Game.GEReplStationStatus) {
        DL("Check ok");
        Location loc = player.GetMap().GetLocation();
        if (loc.ProtoId == Content::Location::replication_4) {
            Map map = loc.GetMapByIndex(2);
            if (valid(map)) {
                Obsolete::CritterTransitToMapEntry(player, map.Id, HASHI(ENTRY_0));
                DL("transit");
                return true;
            }
        }
    }
    return false;
}

// Скрипт карты
void _MapInit(Map map, bool firstTime)
{
    map.OnLoop.Subscribe(_MapLoop);
    map.OnLoopEx1.Subscribe(_MapLoop2); // Появление мобов
    map.OnLoopEx2.Subscribe(_MapLoopEx1);
    map.LoopTime1 = 5000;
    map.LoopTime2 = 60000;
    map.LoopTime3 = 30000;
}

// Случайная подсветка репликатора, чтобы было понятно какой взрывать
void _MapLoop(Map map)
{
    Item[] items = map.GetItems(Content::Item::replicator_tank);
    for (uint i = 0; i < items.length(); i++) {
        Item item = items[i];
        if (Game.Random(1, 2) == 2) {
            item.LightIntensity = Game.Random(30, 80);
            item.LightColor = colorsReplicator[Game.Random(0, colorsReplicator.length() - 1)];
            item.LightDistance = Game.Random(2, 6);
            item.IsLight = true;
        }
    }
}

// Генерация мобов, если их меньше 20
void _MapLoop2(Map map)
{
    if (!GameEvent::CheckEventStatus(EVENT_ZOMBIE, PHASE_STATE_RUNNING)) {
        // DL("loop 1---- убрать");
        // return;
    }

    if (map.GetCritters(Content::Critter::Zombie, CritterFindType::AliveNpc).length() < 20) {
        Item[] replicators = map.GetItems(Content::Item::replicator_tank);
        if (replicators.isEmpty()) {
            // Остановка события
            GameEvent::RunGameEvent(EVENT_ZOMBIE_STOP);
            map.SetupScript(null);
        }
        else {
            for (uint i = 0; i < replicators.length(); i++) {
                Item replicator = replicators[i];
                if (Game.Random(1, 3) > 1) {
                    uint16 hX = replicator.HexX;
                    uint16 hY = replicator.HexY;
                    if (Caravan::GetFreeHex(map, 7, hX, hY)) {
                        // в GEReplEntryZombie записываем текущий ближайший гекс, рядом с которым он крутится
                        // в GEReplLastOrder - время спавна
                        int[] props = {CritterProperty::TeamId,
                                       Teams::Mob1,
                                       CritterProperty::GEReplEntryZombie,
                                       ENTRY_ZOMBIE_0,
                                       CritterProperty::GEReplLastOrder,
                                       Game.GetFullSecond(),
                                       CritterProperty::NpcRole,
                                       ROLE_ZOMBIE};
                        Critter zmb = map.AddNpc(Content::Critter::Zombie, hX, hY, 6, Tla::GetCritPropsDict(props));
                        zmb.SetupScript(_ZombieInit);
                        map.SetTextMsg(replicator.HexX, replicator.HexY, COLOR_GREEN, TEXTMSG_TEXT, 4003);
                    }
                }
            }
        }
    }
}

// Перемещение мобов на следующий пункт сбора
void _MapLoopEx1(Map map)
{
    uint16 hX = 0;
    uint16 hY = 0;
    Location loc = map.GetLocation();
    Map mapGround = loc.GetMapByIndex(0);
    Critter[] zombies = map.GetCritters(Content::Critter::Zombie, CritterFindType::AliveNpc);
    for (uint i = 0; i < zombies.length(); i++) {
        Critter cr = zombies[i];
        uint entry = cr.GEReplEntryZombie;
        uint lastOrder = cr.GEReplLastOrder;
        if (NpcPlanes::IsNoPlanes(cr) && lastOrder + TIME_MOVE < Game.GetFullSecond()) {
            hX = cr.HexX;
            hY = cr.HexY;
            switch (entry) {
            case ENTRY_ZOMBIE_EXIT:
                // TODO:// Здесь нужно переключить счетчик сбежавших омбей
                Game.DeleteCritter(cr);
                return;
            case ENTRY_ZOMBIE_0:
                DL("0-");
            case ENTRY_ZOMBIE_1:
            case ENTRY_ZOMBIE_2:
                if (Entrance::GetEntryFreeHex(map, HASHI(cr.GEReplEntryZombie + 1), hX, hY)) {
                    if (Caravan::GetFreeHex(map, 7, hX, hY)) {
                        cr.GEReplLastOrder = Game.GetFullSecond();
                        cr.GEReplEntryZombie += 1;
                        cr.HomeMapId = map.Id;
                        cr.HomeHexX = hX;
                        cr.HomeHexY = hY;
                        cr.HomeDir = Game.Random(0, 5);
                    }
                }
                break;
            case ENTRY_ZOMBIE_3:
                if (valid(mapGround)) {
                    if (Obsolete::CritterTransitToMapEntry(cr, mapGround.Id, HASHI(ENTRY_SPECIAL))) {
                        cr.SetupScript(_ZombieOutInit);
                    }
                }
                break;
            }
        }
    }
}

// Cкрипт репликатора. Если у игрока взят квест, при применении взрывчатки на репликатор устанавливается таймер на взрыв.

#define STATUS_QVAR_ACTIVE (1) // Взорвите репликационный чан, который вышел из строя.
#define STATUS_QVAR_SETUP  (2) // Взрывчатка установлена. Уносите ноги, пока пластид не разнес к чертям все вокруг!
#define STATUS_QVAR_EXECUTED \
    (3) // Вы взорвали один из репликационных чанов, производящих полчища безумных гулей. Возвращайтесь на поверхность и требуйте награду.
#define TOUT_EXPLODE (REAL_SECOND(5)) // Время до взрыва после установки взрывчатки

void _ReplTankInit(Item item, bool firstTime)
{
    item.OnCritterUseOnSelf.Subscribe(_ReplTankUseOnMe);
}

bool _ReplTankUseOnMe(Item item, Critter cr, Item usedItem, uint param)
{
    if ((usedItem.ProtoId == Content::Item::plastic_explosives || usedItem.ProtoId == Content::Item::active_plastic_explosive) &&
        cr.GEReplExplodeTank == STATUS_QVAR_ACTIVE) {
        Game.DeleteItem(usedItem);
        // Создаем событие взрыва и сообщаем игроку о том, что надо убегать
        cr.GEReplExplodeTank = STATUS_QVAR_SETUP;
        ident mapId;
        Map map = cr.GetMap();
        if (valid(map)) {
            mapId = map.Id;
        }
        any[] values = {cr.Id, item.Id, mapId};
        Game.SavedDeferredCall(GAME_SECOND_TO_TICK(TOUT_EXPLODE), ExplodeReplTank, values);
        return true;
    }
    return false;
}

void ExplodeReplTank(any[] values)
{
    ident crId = values[0];
    ident itemId = values[1];
    ident mapId = values[2];

    Critter cr = Game.GetCritter(crId);
    Item item = Game.GetItem(itemId);
    Map map;
    if (mapId != ZERO_IDENT) {
        map = Game.GetMap(mapId);
    }

    if (valid(cr) && valid(item)) {
        if (cr.GEReplExplodeTank == STATUS_QVAR_SETUP) {
            // Сообщение о выполнении квеста
            cr.GEReplExplodeTank = STATUS_QVAR_EXECUTED;
            Stdlib::SkillUp(cr, CritterProperty::SkillTraps);
        }
        if (valid(map)) {
            Explode::Explode(map, item.HexX, item.HexY, null, Content::Item::active_plastic_explosive, ZERO_IDENT, 300, Game.Random(1, 5));
            map.AddItem(item.HexX, item.HexY, Content::Item::replicator_tank_broken, 1);
            Game.DeleteItem(item);
            SmokeGrenade::SmokeBlast(map, item.HexX, item.HexY, Content::Item::mustard_gas, crId);
        }
    }
}

// Скрипт зомби на поверхности
void _ZombieOutInit(Critter cr, bool firstTime)
{
    cr.ReplicationTime = -1;
    cr.OnDead.Subscribe(_OnZombieDead);
    // При атаке на зомби, все остальные тоже сходят с ума
    cr.OnAttacked.Subscribe(_OnZombieAttackedGround);
    cr.OnMessage.Subscribe(_OnZombieMessage);
    cr.OnIdle.Subscribe(_OnZombieIdleGround);
    cr.OnNpcPlaneEnd.Subscribe(_OnZombiePlaneEnd);
}

bool _OnZombieAttackedGround(Critter cr, Critter attacker)
{
    SendMessage::ToWhoISee(cr, MSG_ALARM, attacker.Id);

    if (Game.Random(1, 11) > 10) {
        cr.SayMsg(SAY_EMOTE, TEXTMSG_TEXT, 4001);
        return false;
    }

    if (not cr.GEReplIsAddedAttackPlane) {
        Map map = cr.GetMap();
        if (map != null) {
            Critter[] critters = map.GetCritters(CritterFindType::Alive);
            for (uint i = 0; i < critters.length(); i++) {
                Critter target = critters[i];
                if (valid(target) && target.NpcRole != cr.NpcRole) {
                    NpcPlanes::AddAttackPlane(cr, 0, target);
                }
            }
            cr.SayMsg(SAY_SHOUT, TEXTMSG_TEXT, 4001);
        }
        cr.GEReplIsAddedAttackPlane = true;
    }

    return false;
}

void _OnZombieIdleGround(Critter cr)
{
    if (!cr.IsAlive()) {
        return;
    }

    Map map = cr.GetMap();
    uint16 hX = cr.HexX;
    uint16 hY = cr.HexY;
    if (Entrance::GetEntryFreeHex(map, ENTRY_ZOMBIE_EXIT, hX, hY)) {
        if (Game.GetDistance(cr.HexX, cr.HexY, hX, hY) < 6) {
            // Выход на глобал
            Game.DeleteCritter(cr);
            return;
        }

        cr.GEReplEntryZombie = ENTRY_ZOMBIE_EXIT;

        if (Caravan::GetFreeHex(map, 3, hX, hY)) {
            cr.GEReplLastOrder = Game.GetFullSecond();
            cr.GEReplEntryZombie = ENTRY_ZOMBIE_EXIT;
            cr.HomeMapId = map.Id;
            cr.HomeHexX = hX;
            cr.HomeHexY = hY;
            cr.HomeDir = Game.Random(0, 5);
        }
    }
}

// Скрипт зомби в подземелье
void _ZombieInit(Critter cr, bool firstTime)
{
    cr.ReplicationTime = -1;
    cr.OnDead.Subscribe(_OnZombieDead);
    // При атаке на зомби, все остальные тоже сходят с ума
    cr.OnAttacked.Subscribe(_OnZombieAttacked);
    cr.OnMessage.Subscribe(_OnZombieMessage);
    cr.OnIdle.Subscribe(_OnZombieIdle);
    cr.OnNpcPlaneEnd.Subscribe(_OnZombiePlaneEnd);
}

bool _OnZombiePlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (reason != REASON_SUCCESS && cr.IsAlive()) {
        // Проверяем, не домой ли он шел
        Map map = cr.GetMap();
        if (plane.Type == AI_PLANE_WALK && plane.Walk_HexX == cr.HomeHexX && plane.Walk_HexY == cr.HomeHexY && plane.Walk_Dir == cr.HomeDir &&
            map.GetPathLength(cr.HexX, cr.HexY, cr.HomeHexX, cr.HomeHexY, 0) == 0) {
            // Застрял
            DL("Homepos gag");
            uint16 hx = 0, hy = 0;
            if (Entrance::GetEntryFreeHex(map, HASHI(cr.GEReplEntryZombie), hx, hy) && Caravan::GetFreeHex(map, 7, hx, hy)) {
                cr.HomeMapId = map.Id;
                cr.HomeHexX = hx;
                cr.HomeHexY = hy;
                cr.HomeDir = Game.Random(0, 5);
            }
        }
        return false;
    }
    return true;
}

#define STR_IDLE (4002)
#define RADIUS_ATTACK(10)
void _OnZombieIdle(Critter cr)
{
    if (cr.IsDead()) {
        return;
    }

    Map map = cr.GetMap();
    if (valid(map) && map.ProtoId == Content::Map::repl4a && Game.Random(1, 3) == 3) {
        Critter[] critters = map.GetCritters(cr.HexX, cr.HexY, RADIUS_ATTACK, CritterFindType::AlivePlayers);
        if (!critters.isEmpty()) {
            for (uint i = 0, l = critters.length(); i < l; i++) {
                Critter target = critters[i];
                if (valid(target)) {
                    NpcPlanes::AddAttackPlane(cr, 0, target);
                    EnemyStack::AddEnemyToStack(cr, cr.Id);
                }
            }
            cr.SayMsg(SAY_SHOUT, TEXTMSG_TEXT, 4001);
            return;
        }
    }

    if (cr.IsAlive() && NpcPlanes::IsNoPlanes(cr) && Game.Random(0, 3) == 1) {
        MoveRandom::CritterMoveRandom(cr);
        if (Game.Random(1, 12) == 1) {
            cr.SayMsg(SAY_EMOTE, TEXTMSG_TEXT, 4002);
        }
    }
}

void _OnZombieMessage(Critter cr, Critter fromCr, int message, any value)
{
    if (message == MSG_ALARM && cr.IsNpc() && NpcPlanes::GetPlanes(cr, null) == 0) {
        Critter target = Game.GetCritter(value);
        if (valid(target)) {
            NpcPlanes::AddAttackPlane(cr, 0, target);
            EnemyStack::AddEnemyToStack(cr, value);
        }
    }
}

bool _OnZombieAttacked(Critter cr, Critter attacker)
{
    // if(attacker.IsOwnedByPlayer())
    // {
    SendMessage::ToAllOnMap(cr, MSG_ALARM, attacker.Id);
    // }
    return false;
}

void _OnZombieDead(Critter cr, Critter killer)
{
    ident killerId;
    if (valid(killer)) {
        killerId = killer.Id;
        if (killer.GEReplNopasaran > 0 && killer.GEReplNopasaran < 6) {
            killer.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 4005);
        }
    }
    cr.AddTimeEvent(cte_RespawnZombie, REAL_SECOND(Game.Random(30, 90)), killerId);
    // TODO: добавить счетчик убитых зомби сюда
}

#define STR_RESPAWN (4000)
uint cte_RespawnZombie(Critter cr, any identifier, uint& rate)
{
    DL("respawn/ Anim:" + cr.ActionAnimDead);
    uint8 qStatus = 0;
    Critter killer;
    if (identifier > 0) {
        killer = Game.GetCritter(identifier);
        qStatus = killer.GEReplNopasaran;
    }

    if (cr.IsDead() && cr.ActionAnimDead < CritterActionAnim::DeadBloodySingle) {
        cr.CurrentHp = cr.MaxLife / 2;
        CritterState::ToAlive(cr);
        cr.SayMsg(SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_RESPAWN);
        DL("success");
        if (valid(killer) && qStatus > 0 && qStatus < 6) {
            killer.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 4007);
        }
    }
    else if (valid(killer) && qStatus > 0 && qStatus < 6) {
        killer.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 4006);
        killer.GEReplNopasaran += 1;
    }
    return 0;
}

// Хабологи-торговцы на репл. станциях

void t_Notify(Critter player, StaticItem trigger, bool entered, uint8 dir)
{
    if (entered && player.IsOwnedByPlayer() && player.Level > 9) {
        if (Game.GEReplStationStatus) {
            if (player.GEReplNotifictions < 3 && player.GEReplFindstation == 0) {
                Map map = player.GetMap();
                if (valid(map)) {
                    Critter[] critters = map.GetCritters(CritterFindType::AliveNpc);
                    for (uint i = 0; i < critters.length(); i++) {
                        Critter cr = critters[i];
                        if (cr.DialogId == Content::Dialog::repl_trader) {
                            cr.SayMsg(SAY_NORM, TEXTMSG_TEXT, 4004, "$player" + Obsolete::GetPlayerName(player.Id));
                            player.GEReplNotifictions += 1;
                            return;
                        }
                    }
                }
            }
        }
    }
}

// debug
// ~run debug ToMapEntry 224 0 3
// ~run GameEventReplicator Stop 0 0 0
void Run(Critter cr, int, int, int)
{
    SetReplicationAbandoned();
}
void Stop(Critter cr, int, int, int)
{
    StopEvent();
}
